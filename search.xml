<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>rpc远程调用统一鉴权组件</title>
    <url>/2021/02/26/rpc%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8%E7%BB%9F%E4%B8%80%E9%89%B4%E6%9D%83%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="组件背景："><a href="#组件背景：" class="headerlink" title="组件背景："></a>组件背景：</h3><p>因为很多的业务平台，大多数进行数据查询的时候，需要通过memberId去做数据隔离。同时 配合统一sql重新组件的工作，所以需要通过在框架层面上对rpc上下文参数进行设置、校 验、传递。 </p>
<h3 id="组件原理："><a href="#组件原理：" class="headerlink" title="组件原理："></a>组件原理：</h3><p>1.在服务消费端通过dubbo过滤器，从线程级变量中获取上下文参数(saas中只要判断 memberId是否存在)，并判断当前请求接口是否需要进行鉴权，如果需要进行鉴权而则校 验上下文参数是否合法，不合法则直接抛出异常；<br> 2.将获取到的上下文参数放到dubbo的rpc请求上下文中；<br> 3.服务生产端获取dubbo的rpc上下文参数，如果存在则存放到线程级变量中，判断当前请 求接口是否需要进行鉴权，如果需要进行鉴权而则校验上下文参数是否合法，不合法则直接 抛出异常。</p>
<h3 id="rpc统一鉴权时序图："><a href="#rpc统一鉴权时序图：" class="headerlink" title="rpc统一鉴权时序图："></a>rpc统一鉴权时序图：</h3><p><img src="/images/rpc%E7%BB%9F%E4%B8%80%E9%89%B4%E6%9D%83%E6%97%B6%E5%BA%8F%E5%9B%BE.jpg"></p>
<h3 id="rpc统一鉴权策略描述注解类：-RpcAuthority"><a href="#rpc统一鉴权策略描述注解类：-RpcAuthority" class="headerlink" title="rpc统一鉴权策略描述注解类： RpcAuthority"></a>rpc统一鉴权策略描述注解类： RpcAuthority</h3><p>通过该注解可以给指定的rpc方法设置rpc鉴权策略，现在指指定了要鉴权和不要鉴权两个策 略，后续如果需要更强的扩展性，可以将鉴权类型指定为整数值，在具体的鉴权实现中再 根据这个整数值来制定具体的鉴权策略。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.lixiang.dubbo.authority.RpcType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE, ElementType.PACKAGE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RpcAuthority &#123;</span><br><span class="line">    <span class="function">RpcType <span class="title">rpcType</span><span class="params">()</span> <span class="keyword">default</span> RpcType.RPC</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="rpc统一鉴权功能描述接口类：AuthorityHandler"><a href="#rpc统一鉴权功能描述接口类：AuthorityHandler" class="headerlink" title="rpc统一鉴权功能描述接口类：AuthorityHandler"></a>rpc统一鉴权功能描述接口类：AuthorityHandler</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.lixiang.dubbo.TokenInfo;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.dubbo.authority.exception.RpcAuthorityException;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.rpc.Invocation;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.rpc.Invoker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AuthorityHandler</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">TokenInfo</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">customerCheck</span> <span class="params">(Invoker&lt;?&gt; invoker, Invocation invocation)</span> <span class="keyword">throws</span> RpcAuthorityException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">providerCheck</span> <span class="params">(Invoker&lt;?&gt; invoker, Invocation invocation)</span> <span class="keyword">throws</span> RpcAuthorityException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">convertToToken</span> <span class="params">(String tokenInfo)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="rpc请求信息描述类：RpcInfo"><a href="#rpc请求信息描述类：RpcInfo" class="headerlink" title="rpc请求信息描述类：RpcInfo"></a>rpc请求信息描述类：RpcInfo</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RpcInfo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Class interfaceClazz;</span><br><span class="line">    <span class="keyword">private</span> String rpcMethod;</span><br><span class="line">    <span class="keyword">private</span> Class&lt;?&gt;[] parameterTypes;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Class <span class="title">getInterfaceClazz</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> interfaceClazz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInterfaceClazz</span><span class="params">(Class interfaceClazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.interfaceClazz = interfaceClazz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRpcMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rpcMethod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRpcMethod</span><span class="params">(String rpcMethod)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rpcMethod = rpcMethod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt;[] getParameterTypes() &#123;</span><br><span class="line">        <span class="keyword">return</span> parameterTypes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParameterTypes</span><span class="params">(Class&lt;?&gt;[] parameterTypes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.parameterTypes = parameterTypes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        RpcInfo rpcInfo = (RpcInfo) o;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(interfaceClazz, rpcInfo.interfaceClazz) &amp;&amp;</span><br><span class="line">                Objects.equals(rpcMethod, rpcInfo.rpcMethod) &amp;&amp;</span><br><span class="line">                Arrays.equals(parameterTypes, rpcInfo.parameterTypes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = Objects.hash(interfaceClazz, rpcMethod);</span><br><span class="line">        result = <span class="number">31</span> * result + Arrays.hashCode(parameterTypes);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="鉴权策略实现：-SimpleAuthorityHandler"><a href="#鉴权策略实现：-SimpleAuthorityHandler" class="headerlink" title="鉴权策略实现： SimpleAuthorityHandler"></a>鉴权策略实现： SimpleAuthorityHandler</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.dubbo.authority.AuthorityHandler;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.dubbo.authority.RpcType;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.dubbo.authority.annotation.RpcAuthority;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.dubbo.authority.exception.RpcAuthorityException;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.dubbo.rpc.DubboRpcUtils;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.dubbo.rpc.RpcInfo;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.dubbo.utils.AnnotationUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.rpc.Invocation;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.rpc.Invoker;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleAuthorityHandler</span> <span class="keyword">implements</span> <span class="title">AuthorityHandler</span>&lt;<span class="title">MemberIdToken</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(SimpleAuthorityHandler.class);</span><br><span class="line">    <span class="keyword">private</span> ConcurrentHashMap&lt;RpcInfo, RpcType&gt; rpcAuthorityConfig = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> RpcType defaultRpcType = RpcType.COMMON;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RPC_TOKEN_NAME = <span class="string">&quot;rpcTokenName&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;MemberIdToken&gt; CURRENT_USER_INFO = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customerCheck</span><span class="params">(Invoker&lt;?&gt; invoker, Invocation invocation)</span> <span class="keyword">throws</span> RpcAuthorityException </span>&#123;</span><br><span class="line">        MemberIdToken token = CURRENT_USER_INFO.get();</span><br><span class="line">        checkToken(invoker, invocation, token);</span><br><span class="line">        <span class="keyword">if</span> (token != <span class="keyword">null</span>) &#123;</span><br><span class="line">            invocation.getAttachments().put(RPC_TOKEN_NAME, JSONObject.toJSONString(token));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">providerCheck</span><span class="params">(Invoker&lt;?&gt; invoker, Invocation invocation)</span> <span class="keyword">throws</span> RpcAuthorityException </span>&#123;</span><br><span class="line">        String tokenInfo = invocation.getAttachment(RPC_TOKEN_NAME);</span><br><span class="line">        MemberIdToken token = convertToToken(tokenInfo);</span><br><span class="line">        checkToken(invoker, invocation, token);</span><br><span class="line">        <span class="keyword">if</span> (token != <span class="keyword">null</span>) &#123;</span><br><span class="line">            setToken(token);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            setToken(-<span class="number">1L</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkToken</span><span class="params">(Invoker&lt;?&gt; invoker, Invocation invocation, MemberIdToken token)</span> <span class="keyword">throws</span> RpcAuthorityException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (token == <span class="keyword">null</span> || token.getMemberId() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            RpcInfo rpcInfo = DubboRpcUtils.getInvokerRpcInfo(invoker, invocation);</span><br><span class="line">            RpcType rpcType;</span><br><span class="line">            <span class="keyword">if</span> (rpcAuthorityConfig.containsKey(rpcInfo)) &#123;</span><br><span class="line">                rpcType = rpcAuthorityConfig.get(rpcInfo);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                rpcType = getRpcType(rpcInfo);</span><br><span class="line">                rpcAuthorityConfig.putIfAbsent(rpcInfo, rpcType);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (Objects.equals(RpcType.RPC, rpcType)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RpcAuthorityException(String.format(<span class="string">&quot;rpc请求[%s]的rpc 权限不合法&quot;</span>, JSONObject.toJSONString(rpcInfo)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MemberIdToken <span class="title">convertToToken</span><span class="params">(String tokenInfo)</span> </span>&#123;</span><br><span class="line">        MemberIdToken token = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(tokenInfo)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                token = JSONObject.parseObject(tokenInfo, MemberIdToken.class);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                logger.warn(<span class="string">&quot;rpc MemberIdToken 格式不对&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> RpcType <span class="title">getRpcType</span><span class="params">(RpcInfo rpcInfo)</span> </span>&#123;</span><br><span class="line">        Class interfaceClazz = rpcInfo.getInterfaceClazz();</span><br><span class="line">        Package interfacePackage = interfaceClazz.getPackage();</span><br><span class="line">        RpcAuthority packageRpcAuthority = AnnotationUtils.recursionGet(interfacePackage, RpcAuthority.class);</span><br><span class="line">        RpcAuthority clazzRpcAuthority = (RpcAuthority) interfaceClazz.getAnnotation(RpcAuthority.class);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Method rpcMethod = interfaceClazz.getMethod(rpcInfo.getRpcMethod(), rpcInfo.getParameterTypes());</span><br><span class="line">            RpcAuthority methodRpcAuthority = rpcMethod.getAnnotation(RpcAuthority.class);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (methodRpcAuthority != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> methodRpcAuthority.rpcType();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (clazzRpcAuthority != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> clazzRpcAuthority.rpcType();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (packageRpcAuthority != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> packageRpcAuthority.rpcType();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> defaultRpcType;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RpcAuthorityException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setToken</span><span class="params">(MemberIdToken token)</span> </span>&#123;</span><br><span class="line">        CURRENT_USER_INFO.set(token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setToken</span><span class="params">(Long memberId)</span> </span>&#123;</span><br><span class="line">        MemberIdToken token = <span class="keyword">new</span> MemberIdToken();</span><br><span class="line">        token.setMemberId(memberId);</span><br><span class="line">        setToken(token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MemberIdToken <span class="title">getToken</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> CURRENT_USER_INFO.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setUserId</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">        MemberIdToken token = CURRENT_USER_INFO.get();</span><br><span class="line">        token.setUserId(userId);</span><br><span class="line">        setToken(token);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1.获取rpc服务鉴权级别方法: 通过按照就近原则获取服务鉴权级别：按照方法签名注解-&gt;接口签名注解-&gt;包签名注解路 径去寻找RpcAuthority注解，如果有RpcAuthority注解，立马返回，如果都没有找到，则 指定为默认鉴权级别：不需要进行鉴权</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> RpcType <span class="title">getRpcType</span><span class="params">(RpcInfo rpcInfo)</span> </span>&#123;</span><br><span class="line">       Class interfaceClazz = rpcInfo.getInterfaceClazz();</span><br><span class="line">       Package interfacePackage = interfaceClazz.getPackage();</span><br><span class="line">       RpcAuthority packageRpcAuthority = AnnotationUtils.recursionGet(interfacePackage, RpcAuthority.class);</span><br><span class="line">       RpcAuthority clazzRpcAuthority = (RpcAuthority) interfaceClazz.getAnnotation(RpcAuthority.class);</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           Method rpcMethod = interfaceClazz.getMethod(rpcInfo.getRpcMethod(), rpcInfo.getParameterTypes());</span><br><span class="line">           RpcAuthority methodRpcAuthority = rpcMethod.getAnnotation(RpcAuthority.class);</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (methodRpcAuthority != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="keyword">return</span> methodRpcAuthority.rpcType();</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (clazzRpcAuthority != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="keyword">return</span> clazzRpcAuthority.rpcType();</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (packageRpcAuthority != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="keyword">return</span> packageRpcAuthority.rpcType();</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">return</span> defaultRpcType;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> RpcAuthorityException(e);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>2.服务消费端鉴权校验 从线程级变量中获取上下文参数(saas中只要判断memberId是否存在)，并将获取到的上下 文参数放到dubbo的rpc请求上下文中（不管是否需求鉴权，都会把线程上下文推到rpc上 下文中），判断当前请求接口是否需要进行鉴权，如果需要进行鉴权而则校验上下文参数是 否合法，不合法则直接抛出异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customerCheck</span><span class="params">(Invoker&lt;?&gt; invoker, Invocation invocation)</span> <span class="keyword">throws</span> RpcAuthorityException </span>&#123;</span><br><span class="line">       MemberIdToken token = CURRENT_USER_INFO.get();</span><br><span class="line">       checkToken(invoker, invocation, token);</span><br><span class="line">       <span class="keyword">if</span> (token != <span class="keyword">null</span>) &#123;</span><br><span class="line">           invocation.getAttachments().put(RPC_TOKEN_NAME, JSONObject.toJSONString(token));</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkToken</span><span class="params">(Invoker&lt;?&gt; invoker, Invocation invocation, MemberIdToken token)</span> <span class="keyword">throws</span> RpcAuthorityException </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (token == <span class="keyword">null</span> || token.getMemberId() == <span class="keyword">null</span>) &#123;</span><br><span class="line">           RpcInfo rpcInfo = DubboRpcUtils.getInvokerRpcInfo(invoker, invocation);</span><br><span class="line">           RpcType rpcType;</span><br><span class="line">           <span class="keyword">if</span> (rpcAuthorityConfig.containsKey(rpcInfo)) &#123;</span><br><span class="line">               rpcType = rpcAuthorityConfig.get(rpcInfo);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               rpcType = getRpcType(rpcInfo);</span><br><span class="line">               rpcAuthorityConfig.putIfAbsent(rpcInfo, rpcType);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (Objects.equals(RpcType.RPC, rpcType)) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> RpcAuthorityException(String.format(<span class="string">&quot;rpc请求[%s]的rpc 权限不合法&quot;</span>, JSONObject.toJSONString(rpcInfo)));</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>3.服务生产端鉴权校验 服务生产端获取dubbo的rpc上下文参数，如果存在则存放到线程级变量中，判断当前请求 接口是否需要进行鉴权，如果需要进行鉴权而则校验上下文参数是否合法，不合法则直接抛 出异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">providerCheck</span><span class="params">(Invoker&lt;?&gt; invoker, Invocation invocation)</span> <span class="keyword">throws</span> RpcAuthorityException </span>&#123;</span><br><span class="line">        String tokenInfo = invocation.getAttachment(RPC_TOKEN_NAME);</span><br><span class="line">        MemberIdToken token = convertToToken(tokenInfo);</span><br><span class="line">        checkToken(invoker, invocation, token);</span><br><span class="line">        <span class="keyword">if</span> (token != <span class="keyword">null</span>) &#123;</span><br><span class="line">            setToken(token);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            setToken(-<span class="number">1L</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="服务消费端鉴权拦截器：-CustomerFilter"><a href="#服务消费端鉴权拦截器：-CustomerFilter" class="headerlink" title="服务消费端鉴权拦截器： CustomerFilter"></a>服务消费端鉴权拦截器： CustomerFilter</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.dubbo.authority.AuthorityHandler;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.dubbo.simpletoken.SimpleAuthorityHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.common.constants.CommonConstants;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.common.extension.Activate;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.rpc.*;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Activate(group = CommonConstants.CONSUMER)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AuthorityHandler authorityHandler = <span class="keyword">new</span> SimpleAuthorityHandler();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(CustomerFilter.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(Invoker&lt;?&gt; invoker, Invocation invocation)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            authorityHandler.customerCheck(invoker, invocation);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RpcException e) &#123;</span><br><span class="line">            writeRpcErrorLog(e, invoker, invocation);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Result result = invoker.invoke(invocation);</span><br><span class="line">            <span class="keyword">if</span> (result.hasException()) &#123;</span><br><span class="line">                writeRpcErrorLog(result.getException(), invoker, invocation);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            writeRpcErrorLog(e, invoker, invocation);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeRpcErrorLog</span><span class="params">(Throwable e, Invoker&lt;?&gt; invoker, Invocation invocation)</span> </span>&#123;</span><br><span class="line">        RpcInfo rpcInfo = DubboRpcUtils.getInvokerRpcInfo(invoker, invocation);</span><br><span class="line">        Object[] args = invocation.getArguments();</span><br><span class="line"></span><br><span class="line">        logger.warn(String.format(<span class="string">&quot;rpc接口信息:%s,rpc请  求参数:%s,异常信息:%s&quot;</span>,</span><br><span class="line">                JSONObject.toJSONString(rpcInfo),</span><br><span class="line">                JSONObject.toJSONString(args),</span><br><span class="line">                e.getMessage()</span><br><span class="line">        ), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="服务生产端端鉴权拦截器：ProviderFilter"><a href="#服务生产端端鉴权拦截器：ProviderFilter" class="headerlink" title="服务生产端端鉴权拦截器：ProviderFilter"></a>服务生产端端鉴权拦截器：ProviderFilter</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.lixiang.dubbo.authority.AuthorityHandler;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.dubbo.simpletoken.SimpleAuthorityHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.common.constants.CommonConstants;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.common.extension.Activate;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.rpc.Filter;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.rpc.Invocation;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.rpc.Invoker;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.rpc.RpcException;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.rpc.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Activate(group = CommonConstants.PROVIDER)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AuthorityHandler authorityHandler = <span class="keyword">new</span> SimpleAuthorityHandler();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(Invoker&lt;?&gt; invoker, Invocation invocation)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        authorityHandler.providerCheck(invoker, invocation);</span><br><span class="line">        <span class="keyword">return</span> invoker.invoke(invocation);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="设置默认装载自定义过滤器：在工程resource下的META-INF目录下创建dubbo-目录，并创建文件com-alibaba-dubbo-rpc-Filter，指定自定义的异常处理Filter类为默认扩展点"><a href="#设置默认装载自定义过滤器：在工程resource下的META-INF目录下创建dubbo-目录，并创建文件com-alibaba-dubbo-rpc-Filter，指定自定义的异常处理Filter类为默认扩展点" class="headerlink" title="设置默认装载自定义过滤器：在工程resource下的META-INF目录下创建dubbo 目录，并创建文件com.alibaba.dubbo.rpc.Filter，指定自定义的异常处理Filter类为默认扩展点"></a>设置默认装载自定义过滤器：在工程resource下的META-INF目录下创建dubbo 目录，并创建文件com.alibaba.dubbo.rpc.Filter，指定自定义的异常处理Filter类为默认扩展点</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">xiangxiangCustomerFilter=com.lixiang.dubbo.rpc.CustomerFilter</span><br><span class="line">xiangxiangProviderFilter=com.lixiang.dubbo.rpc.ProviderFilter</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>全局sql重写功能实现</title>
    <url>/2020/10/20/%E5%85%A8%E5%B1%80sql%E9%87%8D%E5%86%99%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h3 id="sql重写策略类型枚举：RebuildType"><a href="#sql重写策略类型枚举：RebuildType" class="headerlink" title="sql重写策略类型枚举：RebuildType"></a>sql重写策略类型枚举：RebuildType</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">RebuildType</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *重写sql</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    REBUILD_SQL,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重置memberId参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RESET_PARAM,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跳过sql重写</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SKIP_REBUILD</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="sql重写配置注解类：RebuildMemberData"><a href="#sql重写配置注解类：RebuildMemberData" class="headerlink" title="sql重写配置注解类：RebuildMemberData"></a>sql重写配置注解类：RebuildMemberData</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 〈一句话功能简述〉&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * ibatis/mybatis 添加数据权限(全局sql重写)控制：</span></span><br><span class="line"><span class="comment"> * 1.在sql中拼接memberId查询条件或insert中添加插入字段</span></span><br><span class="line"><span class="comment"> * 2.直接sql中重置memberId参数值为当前线程memberId</span></span><br><span class="line"><span class="comment"> * 3.忽略rebuild功能，直接执行原生的sql</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 注意：</span></span><br><span class="line"><span class="comment"> *    a)当没有被该注释注解的dao方法默认执行SKIP_REBUILD(跳过sql重写)策略</span></span><br><span class="line"><span class="comment"> *    b)该注释可以加在dao实现类(mapper接口)或dao(mapper)方法上</span></span><br><span class="line"><span class="comment"> *    c)注释如果加在dao实现类(mapper接口),默认对所有的方法指定统一的rebuild策略</span></span><br><span class="line"><span class="comment"> *    d)可以通过配置value参数指定的sql(ibatis)或mapper方法(mybatis)进行选择添加rebuild功能</span></span><br><span class="line"><span class="comment"> *    e)注释如果加在方法上,则只对该方法添加rebuild功能</span></span><br><span class="line"><span class="comment"> *    f)在方法上配置的rebuild策略的优先级高于在类或接口上配置的rebuild策略</span></span><br><span class="line"><span class="comment"> *    g)在父类或父接口上指定策rebuild策略对于子类或子接口不生效</span></span><br><span class="line"><span class="comment"> *    h)在父类或父接口的方法上指定策rebuild策略对于子类或子接口生效,如果需要在子类上修改策略,则必须重载方法或通过类注解中指定特定策略</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RebuildMemberData &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定的sql(ibatis)或mapper方法(mybatis)进行选择添加rebuild功能</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 注意：</span></span><br><span class="line"><span class="comment">     *    该参数只有当注释加在dao实现类(mapper接口)才生效</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String[] value()  <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置指定的sql重写策略：默认为sql重写</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">RebuildType <span class="title">rebuildType</span><span class="params">()</span> <span class="keyword">default</span> RebuildType.REBUILD_SQL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="dao方法执行aop拦截器：RebuildMemberDataDaoAspect"><a href="#dao方法执行aop拦截器：RebuildMemberDataDaoAspect" class="headerlink" title="dao方法执行aop拦截器：RebuildMemberDataDaoAspect"></a>dao方法执行aop拦截器：RebuildMemberDataDaoAspect</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.banksteel.openerp.commons.filter.SaasParameter;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.reflect.MethodSignature;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 〈一句话功能简述〉&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * ibatis风格的dao实现中，不能在mybaits拦截中获取到当前调用执行sql的具体dao方法,</span></span><br><span class="line"><span class="comment"> * 所以需要通过该aop拦截器拦截dao方法,在执行前将该dao方法存放到线程级变量中,</span></span><br><span class="line"><span class="comment"> * 以备在后续的mybatis拦截器中能够获取到当前执行sql的具体dao方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RebuildMemberDataDaoAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(value = &quot;@annotation(com.banksteel.openerp.commons.interceptor.RebuildMemberData)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">interceptorCorsReq</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object object = joinPoint.getTarget();</span><br><span class="line">        Class targetClazz = object.getClass();</span><br><span class="line"></span><br><span class="line">        MethodSignature signature = (MethodSignature) joinPoint.getSignature();</span><br><span class="line">        <span class="comment">// 获取当前执行的方法签名,并在执行方法前存放到线程级变量中</span></span><br><span class="line">        <span class="comment">// 方法签名一般会获取到接口或父类中的方法签名,所以需要重写从目标代理类中重新获取一次</span></span><br><span class="line">        Method method = signature.getMethod();</span><br><span class="line"></span><br><span class="line">        Method daoMethod = targetClazz.getMethod(method.getName(),method.getParameterTypes());</span><br><span class="line">        <span class="keyword">if</span>(daoMethod != <span class="keyword">null</span>)&#123;</span><br><span class="line">            method = daoMethod;</span><br><span class="line">        &#125;</span><br><span class="line">        SaasParameter.setCurrentDaoMethod(method);</span><br><span class="line"></span><br><span class="line">        Object objResult = joinPoint.proceed();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在执行完dao方法后清除掉该线程级变量</span></span><br><span class="line">        SaasParameter.setCurrentDaoMethod(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> objResult;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="mybatis全局sql重写拦截器：RebuildSqlInterceptor-获取sql-rebuild策略的主方法"><a href="#mybatis全局sql重写拦截器：RebuildSqlInterceptor-获取sql-rebuild策略的主方法" class="headerlink" title="mybatis全局sql重写拦截器：RebuildSqlInterceptor 获取sql rebuild策略的主方法"></a>mybatis全局sql重写拦截器：RebuildSqlInterceptor 获取sql rebuild策略的主方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"><span class="keyword">import</span> net.sf.jsqlparser.JSQLParserException;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.executor.statement.StatementHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.BoundSql;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.MappedStatement;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.ParameterMapping;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.Interceptor;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.Intercepts;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.Invocation;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.Plugin;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.Signature;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.MetaObject;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.SystemMetaObject;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.ReflectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 重建SQL语句拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Intercepts(&#123; @Signature(method = &quot;prepare&quot;, type = StatementHandler.class, args = &#123; Connection.class &#125;) &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RebuildSqlInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(RebuildSqlInterceptor.class);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> ConcurrentHashMap&lt;String,Class&gt; daoSqlClazzs = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">	<span class="keyword">private</span> ConcurrentHashMap&lt;String,Method&gt; mybatisMethods = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> String pageContSqlSuffix = <span class="string">&quot;_COUNT&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">		StatementHandler statementHandler = (StatementHandler) invocation.getTarget();</span><br><span class="line">		<span class="comment">// 创建反射工具类，用于获取和设置SQL语句</span></span><br><span class="line">		MetaObject metaStatementHandler = SystemMetaObject.forObject(statementHandler);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 获取拦截的SQL语句</span></span><br><span class="line">		MappedStatement mappedStatement = (MappedStatement) metaStatementHandler.getValue(<span class="string">&quot;delegate.mappedStatement&quot;</span>);</span><br><span class="line">		String daoSqlId = mappedStatement.getId();</span><br><span class="line"></span><br><span class="line">		RebuildType rebuildType = computeRebuildType(daoSqlId);</span><br><span class="line">		Long memberId = getCurrentMemberId();</span><br><span class="line">		BoundSql boundSql = (BoundSql) metaStatementHandler.getValue(<span class="string">&quot;delegate.boundSql&quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (Objects.equals(rebuildType , RebuildType.REBUILD_SQL))&#123;</span><br><span class="line">			rebuildSql(metaStatementHandler, mappedStatement, boundSql, memberId);</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span> (Objects.equals(rebuildType , RebuildType.RESET_PARAM))&#123;</span><br><span class="line">			resetParam(metaStatementHandler, mappedStatement, boundSql, memberId);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		Object result = invocation.proceed();</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取当前上下文中的memberId</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> Long <span class="title">getCurrentMemberId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 获取本地线程变量</span></span><br><span class="line">		Long memberId = <span class="number">0L</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (StringUtils.isNotEmpty(SaasParameter.getMemberId())) &#123;</span><br><span class="line">				memberId = Long.parseLong(SaasParameter.getMemberId());</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			logger.error(<span class="string">&quot;【noSaas拦截构建】会员ID转换异常，id=&quot;</span> + memberId, e);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> memberId;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 重置sql查询参数</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> metaStatementHandler</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> mappedStatement</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> boundSql</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> memberId</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resetParam</span><span class="params">(MetaObject metaStatementHandler, MappedStatement mappedStatement, BoundSql boundSql, Long memberId)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(memberId &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (<span class="string">&quot;SELECT&quot;</span>.equals(mappedStatement.getSqlCommandType().toString())</span><br><span class="line">				|| <span class="string">&quot;INSERT&quot;</span>.equals(mappedStatement.getSqlCommandType().toString())) &#123;</span><br><span class="line">			boundSql.setAdditionalParameter(<span class="string">&quot;memberId&quot;</span>, memberId);</span><br><span class="line">			metaStatementHandler.setValue(<span class="string">&quot;delegate.boundSql&quot;</span>, boundSql);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 重写sql</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> metaStatementHandler</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> mappedStatement</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> boundSql</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> memberId</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> JSQLParserException</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rebuildSql</span><span class="params">(MetaObject metaStatementHandler, MappedStatement mappedStatement, BoundSql boundSql, Long memberId)</span> <span class="keyword">throws</span> JSQLParserException </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(memberId &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 当statement的id不以noSaas结尾，且memberId&gt;0，则执行对INSERT与SELECT语句的重构</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="string">&quot;SELECT&quot;</span>.equals(mappedStatement.getSqlCommandType().toString())) &#123;</span><br><span class="line">			List&lt;ParameterMapping&gt; parameterMappings = boundSql.getParameterMappings();</span><br><span class="line">			metaStatementHandler.setValue(<span class="string">&quot;delegate.boundSql.sql&quot;</span>, RebuildSqlUtils.rebuildQuery(boundSql.getSql(),</span><br><span class="line">					memberId.toString(), parameterMappings));</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;INSERT&quot;</span>.equals(mappedStatement.getSqlCommandType().toString())) &#123;</span><br><span class="line">			metaStatementHandler.setValue(<span class="string">&quot;delegate.boundSql.sql&quot;</span>,</span><br><span class="line">					RebuildSqlUtils.rebuildInsert(boundSql.getSql(), memberId.toString()));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">plugin</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 当目标类是StatementHandler类型时，才包装目标类，否者直接返回目标本身,减少目标被代理的次数</span></span><br><span class="line">		<span class="keyword">if</span> (target <span class="keyword">instanceof</span> StatementHandler) &#123;</span><br><span class="line">			<span class="keyword">return</span> Plugin.wrap(target, <span class="keyword">this</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> target;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//do nothing</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 通过反射机制和上下文方法中计算sql的重构类型</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> daoSqlId</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> RebuildType <span class="title">computeRebuildType</span><span class="params">(String daoSqlId)</span></span>&#123;</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			<span class="comment">// 1.获取命名空间类型和执行的sqlId</span></span><br><span class="line">			<span class="keyword">int</span> lastIndex = StringUtils.lastIndexOf(daoSqlId,<span class="string">&quot;.&quot;</span>);</span><br><span class="line">			String daoClassName = StringUtils.substring(daoSqlId,<span class="number">0</span>,lastIndex);</span><br><span class="line">			String sqlMethodName = StringUtils.substring(daoSqlId,lastIndex + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 2.将命名空间类型反射为class</span></span><br><span class="line">			Class clazz = getClassByDaoSql(daoClassName);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 3.通过当前执行的dao方法获取sql rebuild 类型,如果获得的RebuildType为null,则尝试从类或接口上获取</span></span><br><span class="line">			RebuildType rebuildType = computeRebuildTypeByDaoMethod(clazz,sqlMethodName,daoSqlId);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span>(rebuildType != <span class="keyword">null</span>)&#123;</span><br><span class="line">				<span class="keyword">return</span> rebuildType;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="comment">// 4.判断当前执行的sqlMethod方法是否需要跳过</span></span><br><span class="line">				<span class="keyword">return</span> computeRebuildTypeByClazz(clazz,sqlMethodName);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">			logger.warn(String.format(<span class="string">&quot;[%s]获取sql重构类型时异常，使用默认SKIP_REBUILD策略&quot;</span>,daoSqlId),e);</span><br><span class="line">			<span class="keyword">return</span> RebuildType.SKIP_REBUILD;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取注解上的所有定义需要跳过的sql</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> skipRebuildMemberId</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> Set&lt;String&gt; <span class="title">getRebuildSqls</span><span class="params">(RebuildMemberData skipRebuildMemberId)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> HashSet&lt;&gt;(Arrays.asList(skipRebuildMemberId.value()));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取当前执行的方法,然后在拉取方法上的RebuildMemberData来获取该方法指定的RebuildType</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> RebuildType <span class="title">computeRebuildTypeByDaoMethod</span><span class="params">(Class daoClazz, String sqlMethodName, String daoSqlId)</span> </span>&#123;</span><br><span class="line">		Method sqlMethod = getCurrentSqlMethod (daoClazz, sqlMethodName,daoSqlId);</span><br><span class="line">		<span class="keyword">if</span>(sqlMethod != <span class="keyword">null</span> &amp;&amp; sqlMethod.isAnnotationPresent(RebuildMemberData.class))&#123;</span><br><span class="line">			Class methodClazz = sqlMethod.getDeclaringClass();</span><br><span class="line">			RebuildMemberData rebuildMemberData = sqlMethod.getAnnotation(RebuildMemberData.class);</span><br><span class="line">			<span class="keyword">return</span> (methodClazz.isAssignableFrom(daoClazz) &amp;&amp; rebuildMemberData != <span class="keyword">null</span>) ?  rebuildMemberData.rebuildType() : <span class="keyword">null</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span> ;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取当前执行方法：</span></span><br><span class="line"><span class="comment">	 *  如果当前dao类为接口:则表示是通过mybatis风格编写dao层，则通过反射获取当前执行的dao方法</span></span><br><span class="line"><span class="comment">	 *     因mybatis只有接口没有实现类,所以aop拦截不到mybatis的dao方法</span></span><br><span class="line"><span class="comment">	 *     但mybatis的dao中是不允许存在方法重载,所以一个方法名就只对应一个具体的方法,</span></span><br><span class="line"><span class="comment">	 *     所以可以直接通过方法名方式获取到对应的dao方法</span></span><br><span class="line"><span class="comment">	 *  否则则表示通过ibatis风格编写dao层，则从线程上下文中获取通过aop拦截存入的当前执行方法</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> daoClazz</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> sqlMethodName</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> Method <span class="title">getCurrentSqlMethod</span><span class="params">(Class daoClazz, String sqlMethodName, String daoSqlId)</span></span>&#123;</span><br><span class="line">		<span class="comment">// mybatis风格配置,通过反射获取当前执行方法</span></span><br><span class="line">		<span class="keyword">if</span>(daoClazz.isInterface())&#123;</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">				<span class="keyword">if</span> (mybatisMethods.contains(daoSqlId))&#123;</span><br><span class="line">					<span class="keyword">return</span> mybatisMethods.get(daoSqlId);</span><br><span class="line">				&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">					Method daoMethod = getMybatisMethod(daoClazz,sqlMethodName,daoSqlId);</span><br><span class="line">					<span class="keyword">if</span>(daoMethod!=<span class="keyword">null</span>)&#123;</span><br><span class="line">						mybatisMethods.putIfAbsent(daoSqlId,daoMethod);</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">return</span> daoMethod;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">				logger.warn(String.format(<span class="string">&quot;[%s.%s]获取sql重构类型时异常，使用默认SKIP_REBUILD策略&quot;</span>,daoClazz.getName(),sqlMethodName),e);</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123; <span class="comment">// ibatis风格配置,通过线程级上下文获取当前执行sql方法</span></span><br><span class="line">			<span class="keyword">return</span> SaasParameter.getCurrentDaoMethod();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> Method <span class="title">getMybatisMethod</span><span class="params">(Class daoClazz, String sqlMethodName, String daoSqlId)</span> <span class="keyword">throws</span> NoSuchMethodException, ClassNotFoundException </span>&#123;</span><br><span class="line">		Method daoMethod ;</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			daoMethod = ReflectionUtils.findMethod(daoClazz,sqlMethodName,<span class="keyword">null</span>);</span><br><span class="line">			<span class="keyword">if</span> (Objects.isNull(daoMethod) &amp;&amp; StringUtils.endsWith(sqlMethodName,pageContSqlSuffix))&#123;</span><br><span class="line">				String listMethodName = StringUtils.substring(sqlMethodName,<span class="number">0</span>,sqlMethodName.length() - pageContSqlSuffix.length());</span><br><span class="line">				daoMethod = ReflectionUtils.findMethod(daoClazz,listMethodName,<span class="keyword">null</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">			<span class="keyword">if</span>(StringUtils.endsWith(sqlMethodName,pageContSqlSuffix))&#123;</span><br><span class="line">				String listMethodName = StringUtils.substring(sqlMethodName,<span class="number">0</span>,sqlMethodName.length() - pageContSqlSuffix.length());</span><br><span class="line">				daoMethod = ReflectionUtils.findMethod(daoClazz,listMethodName,<span class="keyword">null</span>);</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">throw</span> e;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> daoMethod;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 判断是否需要指定sql是否需要跳过</span></span><br><span class="line"><span class="comment">	 * 1.类上必须要有SkipRebuildMemberId注解</span></span><br><span class="line"><span class="comment">	 * 2.注解值为空</span></span><br><span class="line"><span class="comment">	 * 3.注解值中包含sql</span></span><br><span class="line"><span class="comment">	 * 条件1必须满足，条件2和条件3只需满足其中一个</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> RebuildType <span class="title">computeRebuildTypeByClazz</span><span class="params">(Class clazz,String sql)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(clazz.isAnnotationPresent(RebuildMemberData.class))&#123;</span><br><span class="line">			RebuildMemberData rebuildMemberData = (RebuildMemberData)clazz.getAnnotation(RebuildMemberData.class);</span><br><span class="line">			Set&lt;String&gt; skipSqls = getRebuildSqls(rebuildMemberData);</span><br><span class="line">			<span class="keyword">if</span>(CollectionUtils.isEmpty(skipSqls) || skipSqls.contains(sql))&#123;</span><br><span class="line">				<span class="keyword">return</span> rebuildMemberData.rebuildType();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span>  RebuildType.SKIP_REBUILD;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> Class <span class="title">getClassByDaoSql</span><span class="params">(String daoClass)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(daoSqlClazzs.contains(daoClass))&#123;</span><br><span class="line">			<span class="keyword">return</span> daoSqlClazzs.get(daoClass);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			Class daoClazz = Class.forName(daoClass);</span><br><span class="line">			daoSqlClazzs.putIfAbsent(daoClass,daoClazz);</span><br><span class="line">			<span class="keyword">return</span> daoClazz;</span><br><span class="line">		&#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">			logger.warn(String.format(<span class="string">&quot;[%s]获取sql重构类型时异常，使用默认SKIP_REBUILD策略&quot;</span>,daoClass),e);</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>分布式session原理解析</title>
    <url>/2020/11/21/%E5%88%86%E5%B8%83%E5%BC%8Fsession%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h3 id="无状态的HTTP协议中保存用户登陆状态的方式-session和cookie"><a href="#无状态的HTTP协议中保存用户登陆状态的方式-session和cookie" class="headerlink" title="无状态的HTTP协议中保存用户登陆状态的方式,session和cookie"></a>无状态的HTTP协议中保存用户登陆状态的方式,session和cookie</h3><p>cookie:cookie将用户登陆信息以文本格式存储在用户浏览器上<br>session:将用户登陆信息保存到后端应用上下文,通过将sessionId设置到cookie中<br>对比：<br>（1）Cookie以文本文件格式存储在浏览器中，而session存储在服务端它存储了限制数据 量。它只允许4kb它没有在cookie中保存多个变量；<br>（2）cookie的存储限制了数据量，只允许4KB，而session是无限量的；<br>（3）我们可以轻松访问cookie值但是我们无法轻松访问session值，因此它更安全；<br>（4）设置cookie时间可以使cookie过期。但是使用session-destory()，我们将会销毁会话；</p>
<h3 id="传统session-cookie的基本工作流程："><a href="#传统session-cookie的基本工作流程：" class="headerlink" title="传统session/cookie的基本工作流程："></a>传统session/cookie的基本工作流程：</h3><p><img src="/images/%E4%BC%A0%E7%BB%9Fsessioncookie%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.jpg"></p>
<h3 id="session在分布式应用存在的缺陷："><a href="#session在分布式应用存在的缺陷：" class="headerlink" title="session在分布式应用存在的缺陷："></a>session在分布式应用存在的缺陷：</h3><p>因为session存储在应用上下文,当分布式应用时各个应用节点的session不能共享,导致判断用户登陆状态失败<br><img src="/images/session%E5%9C%A8%E5%88%86%E5%B8%83%E5%BC%8F%E5%BA%94%E7%94%A8%E5%AD%98%E5%9C%A8%E7%9A%84%E7%BC%BA%E9%99%B7.jpg"></p>
<h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><p>session同步:各个应用服务节点间通过实时数据同步来更新session信息，来达 到session在各个服务节点间进行数据传递</p>
<p><img src="/images/session%E5%90%8C%E6%AD%A5.jpg"></p>
<p>session共享:将session存储到公共的存储介质(一般为redis中),以达到分布式集 群中各个节点都可以访问和更新session，来达到session在各个服务节点间进行 数据传递</p>
<p><img src="/images/session%E5%85%B1%E4%BA%AB.jpg"></p>
<p>jwt(json word token):在分布式集群中各个服务节点通过共同的加密和签名算法 对session进行加密解密,来达到session在各个服务节点间进行数据传递 <a href="https://www.cnblogs.com/yan7/p/7857833.html">https://www.cnblogs.com/yan7/p/7857833.html</a></p>
<p><img src="/images/jwt.jpg"></p>
<h3 id="jwt的优点："><a href="#jwt的优点：" class="headerlink" title="jwt的优点："></a>jwt的优点：</h3><ol>
<li>可扩展性好 jwt不需要任何附加操作就可以做到应用程序分布式部署;</li>
<li>无状态 jwt不在服务端存储任何状态。RESTful API的原则之一是无状态,发出请求时,总会返回带 有参数的响应，不会产生附加影响。jwt的载荷中可以存储一些常用信息，用于交换信息， 有效地使用 JWT，可以降低服务器查询数据库的次数。 </li>
</ol>
<h3 id="jwt的缺点："><a href="#jwt的缺点：" class="headerlink" title="jwt的缺点："></a>jwt的缺点：</h3><ol>
<li>安全性 由于jwt的payload是使用base64编码的，并没有加密，因此jwt中不能存储敏感数据。而 session的信息是存在服务端的，相对来说更安全;</li>
<li>性能 jwt太长。由于是无状态使用JWT，所有的数据都被放到JWT里，如果还要进行一些数据交 换，那载荷会更大，经过编码之后导致jwt非常长，cookie的限制大小一般是4k，cookie很 可能放不下，所以jwt一般放在local storage里面。并且用户在系统中的每一次http请求都 会把jwt携带在Header里面，http请求的Header可能比Body还要大。而sessionId只是很 短的一个字符串，因此使用jwt的http请求比使用session的开销大得多;</li>
<li>一次性 无状态是jwt的特点，但也导致了这个问题，jwt是一次性的。想修改里面的内容，就必须签 发一个新的jwt，一旦签发一个jwt，在到期之前就会始终有效，无法中途废弃。</li>
</ol>
<p><img src="/images/%E4%BA%8C%E8%80%85%E7%BB%93%E5%90%88.jpg"></p>
]]></content>
  </entry>
  <entry>
    <title>分布式session实现场景</title>
    <url>/2020/12/26/%E5%88%86%E5%B8%83%E5%BC%8Fsession%E5%AE%9E%E7%8E%B0%E5%9C%BA%E6%99%AF/</url>
    <content><![CDATA[<h3 id="saas分布式session实现方式"><a href="#saas分布式session实现方式" class="headerlink" title="saas分布式session实现方式"></a>saas分布式session实现方式</h3><p>在用户登录时，为当前登录用户生成一个全局唯一的token，并通过redis以这个token为 key登录用户信息为value保存到redis，并将token写到域名下的cookies中达到分布式session共享。 </p>
<p>具体实现时序图如下：<br><img src="/images/%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0%E6%97%B6%E5%BA%8F%E5%9B%BE.jpg"></p>
<p>前端请求访问处理流程：<br><img src="/images/%E5%89%8D%E7%AB%AF%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B.jpg"></p>
<p>分布式session实现类图：<br><img src="/images/%E5%88%86%E5%B8%83%E5%BC%8Fsession%E5%AE%9E%E7%8E%B0%E7%B1%BB%E5%9B%BE.jpg"></p>
<h3 id="主要类讲解"><a href="#主要类讲解" class="headerlink" title="主要类讲解"></a>主要类讲解</h3><h3 id="1-分布式session管理接口-TokenManager"><a href="#1-分布式session管理接口-TokenManager" class="headerlink" title="1.分布式session管理接口:TokenManager"></a>1.分布式session管理接口:TokenManager</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 〈一句话功能简述〉&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * Description: token管理器统一入口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TokenManager</span>&lt;<span class="title">U</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建token并保存到redis和cookie中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userInfo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">createAndSaveToken</span><span class="params">(U userInfo)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 延长用户token的有效时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">extendUserToken</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户退出登陆</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">loginOff</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">U <span class="title">getUserByToken</span><span class="params">(Class&lt;U&gt; clazz)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description: 通过http上下文cookies中的token获取当前登录用户信息，如果存在登录用户，则延迟登录用户登录状态的有效时间，并返回，否则返回空</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> U <span class="title">getAndExtendUserByToken</span><span class="params">(Class&lt;U&gt; clazz)</span></span>&#123;</span><br><span class="line">        U currentUser = getUserByToken(clazz);</span><br><span class="line">        saveCurrentLoginUser(currentUser);</span><br><span class="line">        extendUserToken();</span><br><span class="line">        <span class="keyword">return</span> currentUser;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description: 保存当前登录用户人信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveCurrentLoginUser</span><span class="params">(U currentUser)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-用户登录处理扩展接口：TokenUserLoginHandler"><a href="#2-用户登录处理扩展接口：TokenUserLoginHandler" class="headerlink" title="2.用户登录处理扩展接口：TokenUserLoginHandler"></a>2.用户登录处理扩展接口：TokenUserLoginHandler</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description: 用户登录处理扩展接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TokenUserLoginHandler</span>&lt;<span class="title">U</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行用户登录并创建token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loginUser</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> String <span class="title">loginAndCreateToken</span><span class="params">(U loginUser)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> StringConvertUtils.shortUuid();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证用户登录状态有效时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loginUser</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">int</span> <span class="title">extend</span><span class="params">(U loginUser)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户登出</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loginUser</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">loginOff</span><span class="params">(U loginUser)</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-redis实现分布式session配置类：RedisTokenManagerConfig"><a href="#3-redis实现分布式session配置类：RedisTokenManagerConfig" class="headerlink" title="3.redis实现分布式session配置类：RedisTokenManagerConfig"></a>3.redis实现分布式session配置类：RedisTokenManagerConfig</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 〈一句话功能简述〉&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * Description: token配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;openerp.auth.token&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisTokenManagerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * token前缀:可通过auth.token.keyPrefix配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String keyPrefix = <span class="string">&quot;openerp:token:&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * token有效期,单位为秒,默认1小时:可通过auth.token.expires配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> expires = <span class="number">60</span> * <span class="number">60</span> ;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 浏览器的cookie名称:可通过auth.token.cookieKey配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String cookieKey = <span class="string">&quot;saasToken&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getKeyPrefix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> keyPrefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKeyPrefix</span><span class="params">(String keyPrefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.keyPrefix = keyPrefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getExpires</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> expires;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getExpires</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> token.contains(AuthorizationConstants.IS_APP_KEY) ? expires * <span class="number">24</span> * <span class="number">7</span> : expires;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setExpires</span><span class="params">(<span class="keyword">int</span> expires)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.expires = expires;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCookieKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cookieKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCookieKey</span><span class="params">(String cookieKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cookieKey = cookieKey;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-redis实现分布式session类：-RedisTokenManager"><a href="#4-redis实现分布式session类：-RedisTokenManager" class="headerlink" title="4.redis实现分布式session类： RedisTokenManager"></a>4.redis实现分布式session类： RedisTokenManager</h3><p>获取当前请求上下文中的token：先从请求参数中获取，再从header中获取，最后从cookie中获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 〈一句话功能简述〉&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * Description: redis 实现session共享的token管理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisTokenManager</span>&lt;<span class="title">U</span>&gt; <span class="keyword">implements</span> <span class="title">TokenManager</span>&lt;<span class="title">U</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = Logger.getLogger(RedisTokenManager.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AbstractRedisCache redisUtils;</span><br><span class="line">    <span class="keyword">private</span> RedisTokenManagerConfig tokenManagerConfig;</span><br><span class="line">    <span class="keyword">private</span> ThreadLocal&lt;U&gt; currentLoginUser = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> TokenUserLoginHandler&lt;U&gt; tokenUserLoginHandler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisTokenManager</span><span class="params">(AbstractRedisCache redisUtils, RedisTokenManagerConfig tokenManagerConfig)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>( redisUtils,tokenManagerConfig,<span class="keyword">new</span> TokenUserLoginHandler&lt;U&gt;()&#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisTokenManager</span><span class="params">(AbstractRedisCache redisUtils, RedisTokenManagerConfig tokenManagerConfig, TokenUserLoginHandler&lt;U&gt; tokenUserLoginHandler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisUtils = redisUtils;</span><br><span class="line">        <span class="keyword">if</span> (tokenManagerConfig == <span class="keyword">null</span>) &#123;</span><br><span class="line">            tokenManagerConfig = <span class="keyword">new</span> RedisTokenManagerConfig();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.tokenManagerConfig = tokenManagerConfig;</span><br><span class="line">        <span class="keyword">this</span>.tokenUserLoginHandler = tokenUserLoginHandler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">extendUserToken</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String token = getToken();</span><br><span class="line">        String tokenKey = createTokenKey(token);</span><br><span class="line">        <span class="keyword">if</span> (redisUtils.exists(tokenKey)) &#123;</span><br><span class="line">            U u = getCurrentLoginUser();</span><br><span class="line">            <span class="keyword">if</span> (Objects.nonNull(u))&#123;</span><br><span class="line">                <span class="keyword">int</span> extendTime = <span class="keyword">this</span>.tokenUserLoginHandler.extend(u);</span><br><span class="line">                redisUtils.expire(tokenKey, extendTime);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            	redisUtils.expire(tokenKey, tokenManagerConfig.getExpires());</span><br><span class="line">            &#125;</span><br><span class="line">            saveToCookie(token);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loginOff</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String token = getToken();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(token))&#123;</span><br><span class="line">            String tokenKey = createTokenKey(token);</span><br><span class="line">            loginOff(tokenKey);</span><br><span class="line">            clearCookieToken();</span><br><span class="line">            U u = getCurrentLoginUser();</span><br><span class="line">            <span class="keyword">if</span> (Objects.nonNull(u))&#123;</span><br><span class="line">                <span class="keyword">this</span>.tokenUserLoginHandler.loginOff(u);</span><br><span class="line">                saveCurrentLoginUser(<span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loginOff</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        String tokenKey = createTokenKey(token);</span><br><span class="line">        redisUtils.del(tokenKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> U <span class="title">getUserByToken</span><span class="params">(Class&lt;U&gt; clazz)</span> </span>&#123;</span><br><span class="line">        String token = getToken();</span><br><span class="line">        String tokenKey = createTokenKey(token);</span><br><span class="line">        String userStr = redisUtils.get(tokenKey, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(userStr)) &#123;</span><br><span class="line">            <span class="keyword">return</span> JSONObject.parseObject(userStr, clazz);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">createAndSaveToken</span><span class="params">(U userInfo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String token = createToken(userInfo);</span><br><span class="line">            saveToCookie(token);</span><br><span class="line">            <span class="keyword">return</span> token;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;token异常createAndSaveToken():&quot;</span> + e);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveToCookie</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;开始创建token:&quot;</span> + token);</span><br><span class="line">        HttpServletResponse resp = getResponse();</span><br><span class="line">        <span class="comment">//设置cookie</span></span><br><span class="line">        Cookie cookie = <span class="keyword">new</span> Cookie(tokenManagerConfig.getCookieKey(), token);</span><br><span class="line"></span><br><span class="line">        cookie.setMaxAge(tokenManagerConfig.getExpires(token));</span><br><span class="line">        cookie.setPath(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        resp.addCookie(cookie);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">clearCookieToken</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HttpServletResponse resp = getResponse();</span><br><span class="line">        <span class="comment">//设置cookie</span></span><br><span class="line">        Cookie cookie = <span class="keyword">new</span> Cookie(tokenManagerConfig.getCookieKey(), <span class="string">&quot;&quot;</span>);</span><br><span class="line">        cookie.setMaxAge(<span class="number">0</span>);</span><br><span class="line">        cookie.setPath(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        resp.addCookie(cookie);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">createTokenKey</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tokenManagerConfig.getKeyPrefix() + token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">createToken</span><span class="params">(U userInfo)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(userInfo, <span class="string">&quot;用户信息不能为空&quot;</span>);</span><br><span class="line">        <span class="comment">//使用uuid作为源token</span></span><br><span class="line">        String token = <span class="keyword">this</span>.tokenUserLoginHandler.loginAndCreateToken(userInfo);</span><br><span class="line">        String tokenKey = createTokenKey(token);</span><br><span class="line">        logger.info(<span class="string">&quot;用户登录信息缓存&#123;&#125;:&quot;</span>+JSONObject.toJSONString(userInfo));</span><br><span class="line">        redisUtils.set(tokenKey, JSONObject.toJSONString(userInfo), tokenManagerConfig.getExpires(token));</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取上下午的response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> HttpServletResponse <span class="title">getResponse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getResponse();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取上下文的request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> HttpServletRequest <span class="title">getRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取请求中的token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getToken</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HttpServletRequest request = getRequest();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先从请求参数中获取token</span></span><br><span class="line">        String token = request.getParameter(tokenManagerConfig.getCookieKey());</span><br><span class="line">        <span class="comment">// 如果没有获取到,则从head中获取</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(token)) &#123;</span><br><span class="line">            token = request.getHeader(tokenManagerConfig.getCookieKey());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果没有获取到,则从cookie中获取</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(token)) &#123;</span><br><span class="line">            token = getCookie(request, tokenManagerConfig.getCookieKey());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从response中获取指定cookie名的cookie值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cookieKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getCookie</span><span class="params">(HttpServletRequest request, String cookieKey)</span> </span>&#123;</span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="keyword">if</span> (cookies == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cookie.getName().equals(cookieKey)) &#123;</span><br><span class="line">                <span class="keyword">return</span> cookie.getValue();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCurrentLoginUser</span><span class="params">(U currentUser)</span> </span>&#123;</span><br><span class="line">        currentLoginUser.set(currentUser);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> U <span class="title">getCurrentLoginUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> currentLoginUser.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建并保存token：生成token,保存登录用户信息到redis中和保存token到cookie中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">createAndSaveToken</span><span class="params">(U userInfo)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String token = createToken(userInfo);</span><br><span class="line">        saveToCookie(token);</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;token异常createAndSaveToken():&quot;</span> + e);</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-禁止用户多地登录扩展处理器-DuplicateCheckUserLoginHandler"><a href="#3-禁止用户多地登录扩展处理器-DuplicateCheckUserLoginHandler" class="headerlink" title="3.禁止用户多地登录扩展处理器:DuplicateCheckUserLoginHandler"></a>3.禁止用户多地登录扩展处理器:DuplicateCheckUserLoginHandler</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DuplicateCheckUserLoginHandler</span> <span class="keyword">implements</span> <span class="title">TokenUserLoginHandler</span>&lt;<span class="title">AuthUser</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AbstractRedisCache redisUtils;</span><br><span class="line">    <span class="keyword">private</span> RedisTokenManagerConfig tokenManagerConfig;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String userTokenRedisKeyTemplate = <span class="string">&quot;logincheck:&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String appUserTokenRedisKeyTemplate = <span class="string">&quot;app:logincheck:&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DuplicateCheckUserLoginHandler</span><span class="params">(AbstractRedisCache redisUtils, RedisTokenManagerConfig tokenManagerConfig)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisUtils = redisUtils;</span><br><span class="line">        <span class="keyword">this</span>.tokenManagerConfig = tokenManagerConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">loginAndCreateToken</span><span class="params">(AuthUser loginUser)</span> </span>&#123;</span><br><span class="line">        String loginKey = getRedisKey(loginUser.getUserId(), loginUser.isApp());</span><br><span class="line">        String token = redisUtils.get(loginKey,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(token))&#123;</span><br><span class="line">            redisUtils.del(createTokenKey(token));</span><br><span class="line">            log.info(String.format(<span class="string">&quot;用户%s对应的token[%s]被强制登出&quot;</span>,loginUser.getUserName(),token));</span><br><span class="line">        &#125;</span><br><span class="line">        String newToken =  StringConvertUtils.shortUuid();</span><br><span class="line">        <span class="keyword">if</span> (loginUser.isApp())&#123;</span><br><span class="line">            newToken = AuthorizationConstants.IS_APP_KEY + newToken;</span><br><span class="line">        &#125;</span><br><span class="line">        redisUtils.set(loginKey,newToken,getExpires(loginKey));</span><br><span class="line">        <span class="keyword">return</span> newToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">extend</span><span class="params">(AuthUser loginUser)</span> </span>&#123;</span><br><span class="line">        String loginKey = getRedisKey(loginUser.getUserId());</span><br><span class="line">        <span class="keyword">if</span> (redisUtils.exists(loginKey)) &#123;</span><br><span class="line">            redisUtils.expire(loginKey, getExpires(loginKey));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> loginUser.isApp() ? tokenManagerConfig.getExpires() * <span class="number">24</span> * <span class="number">7</span> : tokenManagerConfig.getExpires();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loginOff</span><span class="params">(AuthUser loginUser)</span> </span>&#123;</span><br><span class="line">        String loginKey = getRedisKey(loginUser.getUserId());</span><br><span class="line">        redisUtils.del(loginKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getRedisKey</span><span class="params">(<span class="keyword">long</span> userId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getRedisKey(userId, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getRedisKey</span><span class="params">(<span class="keyword">long</span> userId, <span class="keyword">boolean</span> isApp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isApp) &#123;</span><br><span class="line">            <span class="keyword">return</span> appUserTokenRedisKeyTemplate + userId;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> userTokenRedisKeyTemplate + userId;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">createTokenKey</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tokenManagerConfig.getKeyPrefix() + token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getExpires</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key.contains(<span class="string">&quot;app&quot;</span>) ? tokenManagerConfig.getExpires() * <span class="number">24</span> * <span class="number">7</span> : tokenManagerConfig.getExpires();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>RedisTokenManager的spring上下文加载器:AppAutoConfiguraction</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TokenManager&lt;AuthUser&gt; <span class="title">tokenManager</span><span class="params">(AbstractRedisCache abstractRedisCache,RedisTokenManagerConfig redisTokenManagerConfig)</span></span>&#123;</span><br><span class="line">	DuplicateCheckUserLoginHandler duplicateCheckUserLoginHandler = <span class="keyword">new</span> DuplicateCheckUserLoginHandler(abstractRedisCache, redisTokenManagerConfig);</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> RedisTokenManager&lt;&gt;(abstractRedisCache,redisTokenManagerConfig,duplicateCheckUserLoginHandler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
  </entry>
  <entry>
    <title>工厂 + 策略 + 模板方法模式实际应用场景</title>
    <url>/2021/01/17/%E5%B7%A5%E5%8E%82-%E7%AD%96%E7%95%A5-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
    <content><![CDATA[<p>问题场景：项目中需要实现PC端和APP端推广二维码的功能，其实采用一种简单的实现方式就是使用if-else判断是使用PC端还APP端的逻辑，这种做法虽然可以实现，但是如果再加上Mac端，H5端等等就需要在原代码上添加很多的if,代码看起来很不优雅而且修改了原代码，基于对修改关闭对扩展开放的原则，我使用了工厂模式 + 策略模式 + 模板方法模式来实现这一场景。</p>
<h3 id="设备工厂类"><a href="#设备工厂类" class="headerlink" title="设备工厂类"></a>设备工厂类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeviceFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, AbstractDevice&gt; strategyMap = Maps.newHashMap();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AbstractDevice <span class="title">getInvokeStrategy</span><span class="params">(String deviceName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> strategyMap.get(deviceName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(String deviceName, AbstractDevice abstractDevice)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(deviceName) || <span class="keyword">null</span> == abstractDevice) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        strategyMap.put(deviceName, abstractDevice);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="抽象设备类"><a href="#抽象设备类" class="headerlink" title="抽象设备类"></a>抽象设备类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractDevice</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(AppHandler.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = <span class="string">&quot;https://openerp.banksteel.com/m/register.html&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MOBILE = <span class="string">&quot;mobile&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String INVITE_CONTENT_UP = <span class="string">&quot;邀请码: &quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String INVITE_CONTENT_DOWN = <span class="string">&quot;邀请人: &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserInfoService userInfoService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysConfigService sysConfigService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> InviteResultVO <span class="title">getQRCode</span><span class="params">(InviteUserVO inviteUserVO, String device)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@author</span> lixiang</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span> 根据手机号获取用户信息</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span> 2021/3/2 18:46</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserInfo&gt; <span class="title">getUserInfoByMobile</span><span class="params">(String mobile)</span> </span>&#123;</span><br><span class="line">        SaasParameter.setMemberId(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(MOBILE, mobile);</span><br><span class="line">        <span class="keyword">return</span> userInfoService.queryByMap(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@author</span> lixiang</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span> 获取二维码和邀请链接并封装信息</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span> 2021/3/2 18:46</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> InviteResultVO <span class="title">getURLAndAssembleInfo</span><span class="params">(Long userId, String userName, String device)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] logoFileByte;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ClassPathResource classPathResource = <span class="keyword">new</span> ClassPathResource(<span class="string">&quot;image/SaaS-logo.png&quot;</span>);</span><br><span class="line">            logoFileByte = FileCopyUtils.copyToByteArray(classPathResource.getInputStream());</span><br><span class="line">            <span class="keyword">int</span> length = logoFileByte.length;</span><br><span class="line">            logger.info(<span class="string">&quot;=================getInviteQR-errorlength:&#123;&#125;&quot;</span> + length);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;================getInviteQR-error:&#123;&#125;&quot;</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ParamsValidException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        String url = URL + <span class="string">&quot;?inviteId=&quot;</span> + userId + <span class="string">&quot;?device=&quot;</span> + device;</span><br><span class="line">        SysConfig envType = sysConfigService.findSysConfigByKey(<span class="string">&quot;environmentType&quot;</span>);</span><br><span class="line">        String value ;</span><br><span class="line">        <span class="keyword">if</span> (envType == <span class="keyword">null</span> ) &#123;</span><br><span class="line">            value = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span>  &#123;</span><br><span class="line">            <span class="keyword">if</span> (!org.apache.commons.lang3.StringUtils.isBlank(envType.getValue()) &amp;&amp; envType.getValue().length() &gt; <span class="number">2</span>) &#123;</span><br><span class="line">                value = envType.getValue().substring(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                value = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        String qRBase64 = QrCodeUtils.generateQrCodeAsBase64(url, logoFileByte, <span class="string">&quot;     &quot;</span> + INVITE_CONTENT_UP + userId + value, <span class="string">&quot;               &quot;</span>+INVITE_CONTENT_DOWN + userName);</span><br><span class="line">        logger.error(<span class="string">&quot;================getInviteQR-qRBase64:&#123;&#125;&quot;</span>, qRBase64);</span><br><span class="line">        InviteResultVO resultVO = <span class="keyword">new</span> InviteResultVO();</span><br><span class="line">        resultVO.setInviteCode(qRBase64);</span><br><span class="line">        resultVO.setInviteUrl(url);</span><br><span class="line">        <span class="keyword">return</span> resultVO;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="APP设备类"><a href="#APP设备类" class="headerlink" title="APP设备类"></a>APP设备类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppHandler</span> <span class="keyword">extends</span> <span class="title">AbstractDevice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> InviteResultVO <span class="title">getQRCode</span><span class="params">(InviteUserVO inviteUserVO, String device)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 根据手机号获取用户信息</span></span><br><span class="line">        List&lt;UserInfo&gt; userInfos = <span class="keyword">super</span>.getUserInfoByMobile(inviteUserVO.getMobile());</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(userInfos)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ParamsValidException(<span class="string">&quot;获取用户信息异常！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取二维码和邀请链接并封装信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getURLAndAssembleInfo(userInfos.get(<span class="number">0</span>).getId(), userInfos.get(<span class="number">0</span>).getName(), device);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        DeviceFactory.register(<span class="string">&quot;app&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="PC设备类"><a href="#PC设备类" class="headerlink" title="PC设备类"></a>PC设备类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PcHandler</span> <span class="keyword">extends</span> <span class="title">AbstractDevice</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRegisterAO userRegisterAO;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> InviteResultVO <span class="title">getQRCode</span><span class="params">(InviteUserVO inviteUserVO, String device)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 根据手机号获取用户信息</span></span><br><span class="line">        List&lt;UserInfo&gt; userInfos = <span class="keyword">super</span>.getUserInfoByMobile(inviteUserVO.getMobile());</span><br><span class="line">        Long userId;</span><br><span class="line">        String userName;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(userInfos)) &#123;</span><br><span class="line">            <span class="comment">// 用户不存在，注册用户</span></span><br><span class="line">            userId = userRegisterAO.quickRegister(inviteUserVO);</span><br><span class="line">            userName = inviteUserVO.getUserName();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 用户存在，直接校验</span></span><br><span class="line">            userRegisterAO.checkVerifyCode(inviteUserVO.getImgCheckCode(), inviteUserVO.getImgVerifyCode());</span><br><span class="line">            userRegisterAO.checkMobilCheckCode(inviteUserVO.getMobile(), inviteUserVO.getMobilCheckCode(), SmsConstants.QUICK_MOBILE_CHECKCODE_REGISTER);</span><br><span class="line">            userId = userInfos.get(<span class="number">0</span>).getId();</span><br><span class="line">            userName = userInfos.get(<span class="number">0</span>).getName();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取二维码和邀请链接并封装信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getURLAndAssembleInfo(userId, userName, device);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        DeviceFactory.register(<span class="string">&quot;pc&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="调用COntroller类"><a href="#调用COntroller类" class="headerlink" title="调用COntroller类"></a>调用COntroller类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user/register&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &#123;&quot;用户相关&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRegisterController</span> <span class="keyword">extends</span> <span class="title">BaseController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@ResponseBody</span></span><br><span class="line">  	<span class="meta">@RequestMapping(value = &quot;/get/device/inviteQR&quot;, method = RequestMethod.POST)</span></span><br><span class="line">  	<span class="meta">@WriteBuzLog(buzModel = &quot;用户管理&quot;, buzName = &quot;获取二维码&quot;)</span></span><br><span class="line">  	<span class="meta">@ApiOperation(value = &quot;获取PC端和APP端邀请二维码&quot;, httpMethod = &quot;POST&quot;, consumes = &quot;application/json;charset=UTF-8&quot;,notes = &quot;commond命令：get_device_invite_QR&quot;)</span></span><br><span class="line">  	<span class="meta">@PermissionSource(command = &quot;get_device_invite_QR&quot;, level=PermissionLevel.ALL)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ResponseEntity&lt;InviteResultVO&gt; <span class="title">getDeviceInviteQR</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Valid</span> InviteUserVO inviteUserVO, <span class="meta">@ApiParam(name = &quot;device&quot;, value = &quot;PC端或者APP端&quot;,required = true)</span> <span class="meta">@RequestParam</span> String device)</span> </span>&#123;</span><br><span class="line">  		AbstractDevice strategy = DeviceFactory.getInvokeStrategy(device);</span><br><span class="line">  		<span class="keyword">return</span> returnSuccess(<span class="number">200</span>, <span class="string">&quot;生成二维码成功&quot;</span>, strategy.getQRCode(inviteUserVO, device));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>以上实现方式优点是：如果需要添加一个Mac端只需要添加一个类去继承AbstractDevice就可以做到，无需改动原来的任何代码，符合开闭原则，也去除所有的if-else。<br>上述代码都是一些简单代码，我只是希望通过上面的例子告诉自己在写代码时不要只是单纯的只是想完成功能，而要更多的思考如何去设计代码，使代码更具可扩展性，写出更优雅的代码。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>全局业务日志实现</title>
    <url>/2020/10/12/%E5%85%A8%E5%B1%80%E4%B8%9A%E5%8A%A1%E6%97%A5%E5%BF%97%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h3 id="全局业务日志实现原理"><a href="#全局业务日志实现原理" class="headerlink" title="全局业务日志实现原理"></a>全局业务日志实现原理</h3><p>通过aop切面，在拦截通过@WriteBuzLog注解了的方法，将请求参数、请求上下文、响应 结果通过Velocity解析成最后的业务日志打印到系统运行日志中，如果需求将日志持久存 储，就将日志内容推送到mq消息队列中 </p>
<h3 id="业务日志组件主要类讲解"><a href="#业务日志组件主要类讲解" class="headerlink" title="业务日志组件主要类讲解"></a>业务日志组件主要类讲解</h3><h3 id="1-业务日志注解类：WriteBuzLog"><a href="#1-业务日志注解类：WriteBuzLog" class="headerlink" title="1.业务日志注解类：WriteBuzLog"></a>1.业务日志注解类：WriteBuzLog</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 〈一句话功能简述〉&lt;br&gt;</span></span><br><span class="line"><span class="comment"> *  输出业务日志标志</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> WriteBuzLog &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所属业务模块</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">buzModel</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">buzName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">buzType</span><span class="params">()</span> <span class="keyword">default</span> &quot;query&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务消息模版：</span></span><br><span class="line"><span class="comment">     * 如果为空：则消息模板为:&quot;请求参数:$_ps,响应结果:$_rs&quot;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">messageTemplate</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作日志结果拼接方式：1-涉及提交后启动审批流的操作 2-除符合1、3之外的所有操作 3-多个操作调用同一个方法，例如：发齐/票齐</span></span><br><span class="line"><span class="comment">     * WriteLogUtils.createBusinessLog</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">logOperateType</span><span class="params">()</span> <span class="keyword">default</span> &quot;2&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-日志上下文实体对象-LogContext"><a href="#2-日志上下文实体对象-LogContext" class="headerlink" title="2.日志上下文实体对象:LogContext"></a>2.日志上下文实体对象:LogContext</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 〈一句话功能简述〉&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * Description: 日志上下文信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogContext</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Method method;</span><br><span class="line">    <span class="keyword">private</span> Object[] params;</span><br><span class="line">    <span class="keyword">private</span> Object result;</span><br><span class="line">    <span class="keyword">private</span> Throwable throwable;</span><br><span class="line">    <span class="keyword">private</span> WriteBuzLog writeBuzLog;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Method <span class="title">getMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> method;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMethod</span><span class="params">(Method method)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.method = method;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object[] getParams() &#123;</span><br><span class="line">        <span class="keyword">return</span> params;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParams</span><span class="params">(Object[] params)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.params = params;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResult</span><span class="params">(Object result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.result = result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Throwable <span class="title">getThrowable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> throwable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setThrowable</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.throwable = throwable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WriteBuzLog <span class="title">getWriteBuzLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> writeBuzLog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWriteBuzLog</span><span class="params">(WriteBuzLog writeBuzLog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.writeBuzLog = writeBuzLog;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-业务日志生成切面：WriteBuzLogAspect"><a href="#3-业务日志生成切面：WriteBuzLogAspect" class="headerlink" title="3.业务日志生成切面：WriteBuzLogAspect"></a>3.业务日志生成切面：WriteBuzLogAspect</h3><p>通过spring的aop切面拦截被WriteBuzLog 注解的方法，来达到生成统一业务日志记录的 目的，默认会将日志打印到系统运行的标准输出中，如果该切面创建时指定的 amqpTemplate会将日志传输到mq队列中最后落地到es中，这个对于日志输出，后续可以 通过策略模式来达到日志输出可扩展性和多样性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.CollectionUtils;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 〈一句话功能简述〉&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * ibatis风格的dao实现中，不能在mybaits拦截中获取到当前调用执行sql的具体dao方法,</span></span><br><span class="line"><span class="comment"> * 所以需要通过该aop拦截器拦截dao方法,在执行前将该dao方法存放到线程级变量中,</span></span><br><span class="line"><span class="comment"> * 以备在后续的mybatis拦截器中能够获取到当前执行sql的具体dao方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WriteBuzLogAspect</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(WriteBuzLogAspect.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate amqpTemplate;</span><br><span class="line">    <span class="keyword">private</span> String queueKey=<span class="string">&quot;saas_log_business&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WriteBuzLogAspect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WriteBuzLogAspect</span><span class="params">(AmqpTemplate amqpTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.amqpTemplate = amqpTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(</span></span><br><span class="line"><span class="meta">            value = &quot;@annotation(commons.log.WriteBuzLog)&quot;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">aroundHandle</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span>  Throwable</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Object objResult = joinPoint.proceed();</span><br><span class="line"></span><br><span class="line">            writeLogin(joinPoint,objResult);</span><br><span class="line">            <span class="keyword">return</span> objResult;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Throwable e)&#123;</span><br><span class="line">            writeLogin(joinPoint,e);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeLogin</span><span class="params">(ProceedingJoinPoint joinPoint,Throwable throwable)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            LogContext logContext = initLogContext(joinPoint);</span><br><span class="line">            logContext.setThrowable(throwable);</span><br><span class="line">            writeBuzLog(logContext);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            logger.error(<span class="string">&quot;记录业务日志异常&quot;</span>,e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeLogin</span><span class="params">(ProceedingJoinPoint joinPoint,Object returnVal)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            LogContext logContext = initLogContext(joinPoint);</span><br><span class="line">            logContext.setResult(returnVal);</span><br><span class="line">            writeBuzLog(logContext);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            logger.error(<span class="string">&quot;记录业务日志异常&quot;</span>,e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeBuzLog</span><span class="params">(LogContext logContext)</span> </span>&#123;</span><br><span class="line">        List&lt;BusinessLog&gt; businessLogList = WriteLogUtils.createBusinessLog(logContext);</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isNotEmpty(businessLogList))&#123;</span><br><span class="line">            businessLogList.forEach(source-&gt;&#123;</span><br><span class="line">                String buzMsg = JSONObject.toJSONString(source);</span><br><span class="line">                logger.info(<span class="string">&quot;业务日志：&#123;&#125;&quot;</span>,buzMsg);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(amqpTemplate != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    amqpTemplate.convertAndSend(queueKey, buzMsg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> LogContext <span class="title">initLogContext</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> NoSuchMethodException </span>&#123;</span><br><span class="line">        Method targetMethod = AspectUtils.getTargetMethod(joinPoint);</span><br><span class="line">        WriteBuzLog writeBuzLog = targetMethod.getAnnotation(WriteBuzLog.class);</span><br><span class="line"></span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        LogContext logContext = <span class="keyword">new</span> LogContext();</span><br><span class="line">        logContext.setWriteBuzLog(writeBuzLog);</span><br><span class="line">        logContext.setMethod(targetMethod);</span><br><span class="line">        logContext.setParams(args);</span><br><span class="line">        <span class="keyword">return</span> logContext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-业务日志生成工具类：WriteLogUtils-生成消息的各个占位符描述"><a href="#4-业务日志生成工具类：WriteLogUtils-生成消息的各个占位符描述" class="headerlink" title="4.业务日志生成工具类：WriteLogUtils 生成消息的各个占位符描述"></a>4.业务日志生成工具类：WriteLogUtils 生成消息的各个占位符描述</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.StringWriter;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.CollectionUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.MapUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.velocity.VelocityContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.velocity.app.VelocityEngine;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeanUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindingResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.commons.CommonsMultipartFile;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 〈一句话功能简述〉&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * Description: 方法数据解析器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WriteLogUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> VelocityEngine VELOCITY_ENGINE = <span class="keyword">new</span> VelocityEngine();</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        VELOCITY_ENGINE.init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求参数前缀,_p$&#123;index&#125;表示方法需要打业务日志方法中的第index个请求参数，从0开始</span></span><br><span class="line"><span class="comment">     * 如:RequestEntiy write(Map&lt;String,String&gt; mapParam, List&lt;UserInfo&gt; userInfos,UserInfo otherUser)方法中</span></span><br><span class="line"><span class="comment">     * _p0表示请求参数mapParam</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PRAM_PREFIX = <span class="string">&quot;_p&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法响应结果参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String RESULT_NAME = <span class="string">&quot;_r&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法上WriteBuzLog的注释对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ANNOTATION_NAME = <span class="string">&quot;_a&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认日志模版,_ps表示请求参数的json串对象,_rs表示响应参数json串对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_MESSAGE_TEMPLATE = <span class="string">&quot;请求参数:$_ps,响应结果:$_rs&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认日志模版,_ps表示请求参数的json串对象,_rs表示响应参数json串对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCEPTION_MESSAGE_TEMPLATE = <span class="string">&quot;请求参数:$_ps,异常信息:$_es&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将请求参数转换为key为_p$&#123;index&#125;的map对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sort</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Object&gt; <span class="title">convertParams</span><span class="params">(Object[] params,<span class="keyword">boolean</span> sort)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; paramMaps ;</span><br><span class="line">        <span class="keyword">if</span>(sort)&#123;</span><br><span class="line">            paramMaps = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            paramMaps = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(params != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; params.length; index ++)&#123;</span><br><span class="line">                Object param = params[index];</span><br><span class="line">                <span class="keyword">if</span> (param == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    paramMaps.put(createParamKey(index), <span class="string">&quot;null&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(param <span class="keyword">instanceof</span> ServletRequest)&#123;</span><br><span class="line">                    paramMaps.put(createParamKey(index), <span class="string">&quot;ServletRequest&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (param <span class="keyword">instanceof</span> ServletResponse)&#123;</span><br><span class="line">                    paramMaps.put(createParamKey(index), <span class="string">&quot;ServletResponse&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(param <span class="keyword">instanceof</span> BindingResult)&#123;</span><br><span class="line">                    paramMaps.put(createParamKey(index), <span class="string">&quot;BindingResult&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(param <span class="keyword">instanceof</span> CommonsMultipartFile)&#123;</span><br><span class="line">                    CommonsMultipartFile file = (CommonsMultipartFile) param;</span><br><span class="line">                    paramMaps.put(createParamKey(index), file.getOriginalFilename());</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(Objects.equals(param.getClass(),  MultipartFile[].class)) &#123;</span><br><span class="line">                    paramMaps.put(createParamKey(index), MultipartFile[].class.getName());</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    paramMaps.put(createParamKey(index), params[index]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> paramMaps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addResultToMap</span><span class="params">(Map&lt;String,Object&gt;  params, Object result)</span></span>&#123;</span><br><span class="line">        params.put(RESULT_NAME, result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addAnnotationToMap</span><span class="params">(Map&lt;String,Object&gt;  params, Object annotation)</span></span>&#123;</span><br><span class="line">        params.put(ANNOTATION_NAME, annotation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">createParamKey</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PRAM_PREFIX + index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String,Object&gt;  <span class="title">convertContextToMap</span><span class="params">(LogContext logContext)</span></span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; paramMaps = convertParams(logContext.getParams(), <span class="keyword">false</span>);</span><br><span class="line">        addResultToMap(paramMaps, logContext.getResult());</span><br><span class="line">        addAnnotationToMap(paramMaps, logContext.getWriteBuzLog());</span><br><span class="line">        <span class="keyword">return</span> paramMaps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Method <span class="title">getTargetMethod</span><span class="params">(Class&lt;?&gt; targetClazz, Method signatureMethod)</span> <span class="keyword">throws</span> NoSuchMethodException </span>&#123;</span><br><span class="line">        Method returnMethod = signatureMethod;</span><br><span class="line">        Method daoMethod = targetClazz.getMethod(signatureMethod.getName(), signatureMethod.getParameterTypes());</span><br><span class="line">        <span class="keyword">if</span>(daoMethod != <span class="keyword">null</span>)&#123;</span><br><span class="line">            returnMethod = daoMethod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> returnMethod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createLogInfo</span><span class="params">(LogContext logContext)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(logContext.getThrowable() != <span class="keyword">null</span>)&#123;</span><br><span class="line">            VelocityContext context = <span class="keyword">new</span> VelocityContext(WriteLogUtils.convertContextToMap(logContext));</span><br><span class="line">            <span class="keyword">if</span>(logContext.getParams() != <span class="keyword">null</span> )&#123;</span><br><span class="line">                context.put(<span class="string">&quot;_ps&quot;</span>, JSONObject.toJSONString(convertParams(logContext.getParams(), <span class="keyword">true</span>)));</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                context.put(<span class="string">&quot;_ps&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            String errStr = String.format(<span class="string">&quot;&#123;异常类:%s,异常消息:%s&#125;&quot;</span>,</span><br><span class="line">                    logContext.getThrowable().getClass().getName(),</span><br><span class="line">                    logContext.getThrowable().getMessage()</span><br><span class="line">                    );</span><br><span class="line">            context.put(<span class="string">&quot;_es&quot;</span>, errStr);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 输出流</span></span><br><span class="line">            StringWriter writer = <span class="keyword">new</span> StringWriter();</span><br><span class="line">            <span class="comment">// 转换输出</span></span><br><span class="line">            VELOCITY_ENGINE.evaluate(context, writer, <span class="string">&quot;&quot;</span>, EXCEPTION_MESSAGE_TEMPLATE); <span class="comment">// 关键方法</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> writer.toString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String messageTemplate = logContext.getWriteBuzLog().messageTemplate();</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isNotBlank(messageTemplate))&#123;</span><br><span class="line">            VelocityContext context = <span class="keyword">new</span> VelocityContext(WriteLogUtils.convertContextToMap(logContext));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 输出流</span></span><br><span class="line">            StringWriter writer = <span class="keyword">new</span> StringWriter();</span><br><span class="line">            <span class="comment">// 转换输出</span></span><br><span class="line">            VELOCITY_ENGINE.evaluate(context, writer, <span class="string">&quot;&quot;</span>, messageTemplate); <span class="comment">// 关键方法</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> writer.toString();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            VelocityContext context = <span class="keyword">new</span> VelocityContext();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(logContext.getParams() != <span class="keyword">null</span> )&#123;</span><br><span class="line">                context.put(<span class="string">&quot;_ps&quot;</span>, JSONObject.toJSONString(convertParams(logContext.getParams(), <span class="keyword">true</span>)));</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                context.put(<span class="string">&quot;_ps&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(logContext.getResult() != <span class="keyword">null</span> )&#123;</span><br><span class="line">                context.put(<span class="string">&quot;_rs&quot;</span>, JSONObject.toJSONString(logContext.getResult()));</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                context.put(<span class="string">&quot;_rs&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 输出流</span></span><br><span class="line">            StringWriter writer = <span class="keyword">new</span> StringWriter();</span><br><span class="line">            <span class="comment">// 转换输出</span></span><br><span class="line">            VELOCITY_ENGINE.evaluate(context, writer, <span class="string">&quot;&quot;</span>, DEFAULT_MESSAGE_TEMPLATE); <span class="comment">// 关键方法</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> writer.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  List&lt;BusinessLog&gt; <span class="title">createBusinessLog</span><span class="params">(LogContext logContext)</span></span>&#123;</span><br><span class="line">        ThreadContext&lt;UserInfo&gt; threadContext = SaasParameter.getCurrentThreadContext();</span><br><span class="line"></span><br><span class="line">        BusinessLog businessLog = <span class="keyword">new</span> BusinessLog();</span><br><span class="line">        WriteBuzLog writeBuzLog = logContext.getWriteBuzLog();</span><br><span class="line"></span><br><span class="line">        businessLog.setBussinessName(writeBuzLog.buzName());</span><br><span class="line">        businessLog.setOperationType(writeBuzLog.buzType());</span><br><span class="line">        businessLog.setLogContent(createLogInfo(logContext));</span><br><span class="line">        businessLog.setLogSource(<span class="string">&quot;web&quot;</span>);</span><br><span class="line">        businessLog.setIpAddress(threadContext.getIp());</span><br><span class="line">        businessLog.setMemberId( threadContext.getMemberId() == <span class="keyword">null</span> ? <span class="string">&quot;&quot;</span> : threadContext.getMemberId().toString());</span><br><span class="line">        businessLog.setUserName(threadContext.getUserName());</span><br><span class="line">        businessLog.setWriteTimeStamp(System.currentTimeMillis());</span><br><span class="line">        businessLog.setCode(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        businessLog.setResult(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> assembleCodeAndResult(logContext, writeBuzLog, businessLog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个方法只适用在controller中调用，dubbo服务中拿不到.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amqpTemplate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">createBusinessLogDirect</span><span class="params">(Map&lt;String, String&gt; param, AmqpTemplate amqpTemplate)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (MapUtils.isEmpty(param))&#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        String queueKey=<span class="string">&quot;log_business&quot;</span>;</span><br><span class="line">        ThreadContext&lt;UserInfo&gt; threadContext = SaasParameter.getCurrentThreadContext();</span><br><span class="line"></span><br><span class="line">        BusinessLog businessLog = <span class="keyword">new</span> BusinessLog();</span><br><span class="line">        businessLog.setBussinessName(param.getOrDefault(<span class="string">&quot;buzName&quot;</span>,<span class="string">&quot;&quot;</span>));</span><br><span class="line">        businessLog.setOperationType(param.getOrDefault(<span class="string">&quot;operationType&quot;</span>,<span class="string">&quot;2&quot;</span>));</span><br><span class="line">        businessLog.setLogContent(param.getOrDefault(<span class="string">&quot;result&quot;</span>,<span class="string">&quot;&quot;</span>));</span><br><span class="line">        businessLog.setLogSource(<span class="string">&quot;web&quot;</span>);</span><br><span class="line">        businessLog.setIpAddress(threadContext.getIp());</span><br><span class="line">        businessLog.setMemberId( SaasParameter.getMemberId() == <span class="keyword">null</span> ? <span class="string">&quot;&quot;</span> : SaasParameter.getMemberId());</span><br><span class="line">        businessLog.setUserName(threadContext.getUserName());</span><br><span class="line">        businessLog.setWriteTimeStamp(System.currentTimeMillis());</span><br><span class="line">        businessLog.setCode(param.getOrDefault(<span class="string">&quot;code&quot;</span>,<span class="string">&quot;&quot;</span>));</span><br><span class="line">        businessLog.setResult(param.getOrDefault(<span class="string">&quot;result&quot;</span>,<span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">        List&lt;BusinessLog&gt; businessLogList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        businessLogList.add(businessLog);</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isNotEmpty(businessLogList))&#123;</span><br><span class="line">            businessLogList.forEach(source-&gt;&#123;</span><br><span class="line">                String buzMsg = JSONObject.toJSONString(source);</span><br><span class="line">                <span class="keyword">if</span>(amqpTemplate != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    amqpTemplate.convertAndSend(queueKey, buzMsg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;BusinessLog&gt; <span class="title">assembleCodeAndResult</span><span class="params">(LogContext logContext, WriteBuzLog writeBuzLog, BusinessLog businessLog)</span> </span>&#123;</span><br><span class="line">        List&lt;BusinessLog&gt; businessLogList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isNumeric(writeBuzLog.logOperateType())) &#123;</span><br><span class="line">            businessLogList.add(businessLog);</span><br><span class="line">            <span class="keyword">return</span> businessLogList;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> operateType = Integer.parseInt(writeBuzLog.logOperateType());</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        ResponseEntity&lt;LogResultDTO&gt; resultJson = (ResponseEntity&lt;LogResultDTO&gt;) logContext.getResult();</span><br><span class="line">        <span class="keyword">if</span> (resultJson == <span class="keyword">null</span> || resultJson.getData() == <span class="keyword">null</span> || !(resultJson.getData() <span class="keyword">instanceof</span> LogResultDTO)) &#123;</span><br><span class="line">            businessLogList.add(businessLog);</span><br><span class="line">            <span class="keyword">return</span> businessLogList;</span><br><span class="line">        &#125;</span><br><span class="line">        LogResultDTO dto = resultJson.getData();</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isNotEmpty(dto.getLogResultDTOList()))&#123;</span><br><span class="line">            List&lt;LogResultDTO&gt; logResultDTOList = dto.getLogResultDTOList();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; logResultDTOList.size(); i++) &#123;</span><br><span class="line">                LogResultDTO logResultDTO = logResultDTOList.get(i);</span><br><span class="line">                BusinessLog businessLog1 = <span class="keyword">new</span> BusinessLog();</span><br><span class="line">                BeanUtils.copyProperties(businessLog,businessLog1);</span><br><span class="line">                String code = StringUtils.trimToEmpty(logResultDTO.getCode());</span><br><span class="line">                String column1 = StringUtils.trimToEmpty(logResultDTO.getColumn1());</span><br><span class="line">                String column2 = StringUtils.trimToEmpty(logResultDTO.getColumn2());</span><br><span class="line">                String result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.isBlank(code)&amp;&amp; CollectionUtils.isEmpty(logResultDTO.getCodes())) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">switch</span> (operateType) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span> :</span><br><span class="line">                        result = writeBuzLog.buzName();</span><br><span class="line">                        <span class="keyword">if</span> (StringUtils.isNotBlank(column2)) &#123;</span><br><span class="line">                            result += column2;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (column1.equals(AuditStatusEnum.NEW.getDesc())) &#123;</span><br><span class="line">                            result += <span class="string">&quot;并提交审核&quot;</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (column1.contains(AuditStatusEnum.CHECKED.getDesc())) &#123;</span><br><span class="line">                            result += <span class="string">&quot;并&quot;</span> + column1;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span> :</span><br><span class="line">                        <span class="keyword">if</span> (StringUtils.isNotBlank(column2)) &#123;</span><br><span class="line">                            result += column2;</span><br><span class="line">                        &#125;</span><br><span class="line">                        result += writeBuzLog.buzName();</span><br><span class="line">                        <span class="keyword">if</span> (StringUtils.isNotBlank(column1)) &#123;</span><br><span class="line">                            result += column1;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">3</span> :</span><br><span class="line">                        <span class="keyword">if</span> (StringUtils.isNotBlank(column1)) &#123;</span><br><span class="line">                            <span class="comment">// 合同发齐、票齐共用一个方法</span></span><br><span class="line">                            businessLog1.setBussinessName(column1);</span><br><span class="line">                            result += column1;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span> :</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 是否有附加内容</span></span><br><span class="line">                <span class="keyword">if</span> (StringUtils.isNotBlank(logResultDTO.getSubFix()))&#123;</span><br><span class="line">                    result = result+<span class="string">&quot;，&quot;</span>+logResultDTO.getSubFix();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//将英文逗号、冒号、转成中文</span></span><br><span class="line">                result =result.replaceAll(<span class="string">&quot;,&quot;</span>,<span class="string">&quot;，&quot;</span>);</span><br><span class="line">                result=result.replaceAll(<span class="string">&quot;:&quot;</span>,<span class="string">&quot;：&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.isNotBlank(code))&#123;</span><br><span class="line">                    businessLog1.setCode(code);</span><br><span class="line">                    businessLog1.setResult(result);</span><br><span class="line">                    businessLogList.add(businessLog1);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    businessLogList.add(businessLog1);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> businessLogList;</span><br><span class="line">        &#125;</span><br><span class="line">        String code = StringUtils.trimToEmpty(dto.getCode());</span><br><span class="line">        String column1 = StringUtils.trimToEmpty(dto.getColumn1());</span><br><span class="line">        String column2 = StringUtils.trimToEmpty(dto.getColumn2());</span><br><span class="line">        String result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(code)&amp;&amp; CollectionUtils.isEmpty(dto.getCodes())) &#123;</span><br><span class="line">            businessLogList.add(businessLog);</span><br><span class="line">            <span class="keyword">return</span> businessLogList;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">switch</span> (operateType) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span> :</span><br><span class="line">                result = writeBuzLog.buzName();</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.isNotBlank(column2)) &#123;</span><br><span class="line">                    result += column2;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (column1.equals(AuditStatusEnum.NEW.getDesc())) &#123;</span><br><span class="line">                    result += <span class="string">&quot;并提交审核&quot;</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (column1.contains(AuditStatusEnum.CHECKED.getDesc())) &#123;</span><br><span class="line">                    result += <span class="string">&quot;并&quot;</span> + column1;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span> :</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.isNotBlank(column2)) &#123;</span><br><span class="line">                    result += column2;</span><br><span class="line">                &#125;</span><br><span class="line">                result += writeBuzLog.buzName();</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.isNotBlank(column1)) &#123;</span><br><span class="line">                    result += column1;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span> :</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.isNotBlank(column1)) &#123;</span><br><span class="line">                    <span class="comment">// 合同发齐、票齐共用一个方法</span></span><br><span class="line">                    businessLog.setBussinessName(column1);</span><br><span class="line">                    result += column1;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span> :</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 是否有附加内容</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(dto.getSubFix()))&#123;</span><br><span class="line">            result = result+<span class="string">&quot;，&quot;</span>+dto.getSubFix();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将英文逗号、冒号、转成中文</span></span><br><span class="line">        result =result.replaceAll(<span class="string">&quot;,&quot;</span>,<span class="string">&quot;，&quot;</span>);</span><br><span class="line">        result=result.replaceAll(<span class="string">&quot;:&quot;</span>,<span class="string">&quot;：&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(code))&#123;</span><br><span class="line">            businessLog.setCode(code);</span><br><span class="line">            businessLog.setResult(result);</span><br><span class="line">            businessLogList.add(businessLog);</span><br><span class="line">            <span class="keyword">return</span> businessLogList;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (CollectionUtils.isNotEmpty(dto.getCodes()))&#123;</span><br><span class="line">            String finalResult = result;</span><br><span class="line">            <span class="keyword">return</span> dto.getCodes().stream().filter(Objects::nonNull).map(cd-&gt;&#123;</span><br><span class="line">                BusinessLog businessLog1 = <span class="keyword">new</span> BusinessLog();</span><br><span class="line">                BeanUtils.copyProperties(businessLog,businessLog1);</span><br><span class="line">                businessLog1.setCode(cd);</span><br><span class="line">                businessLog1.setResult(finalResult);</span><br><span class="line">                <span class="keyword">return</span> businessLog1;</span><br><span class="line">            &#125;).collect(Collectors.toList());</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            businessLogList.add(businessLog);</span><br><span class="line">            <span class="keyword">return</span> businessLogList;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="请求参数处理方法："><a href="#请求参数处理方法：" class="headerlink" title="请求参数处理方法："></a>请求参数处理方法：</h3><p>因为日志打印中请求是通过fastjson序列化的，所以在对请求参数处理 时需要将不能通过fastjson序列化的对象特殊处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将请求参数转换为key为_p$&#123;index&#125;的map对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sort</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Object&gt; <span class="title">convertParams</span><span class="params">(Object[] params,<span class="keyword">boolean</span> sort)</span></span>&#123;</span><br><span class="line">    Map&lt;String,Object&gt; paramMaps ;</span><br><span class="line">    <span class="keyword">if</span>(sort)&#123;</span><br><span class="line">        paramMaps = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        paramMaps = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(params != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; params.length; index ++)&#123;</span><br><span class="line">            Object param = params[index];</span><br><span class="line">            <span class="keyword">if</span> (param == <span class="keyword">null</span>)&#123;</span><br><span class="line">                paramMaps.put(createParamKey(index), <span class="string">&quot;null&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(param <span class="keyword">instanceof</span> ServletRequest)&#123;</span><br><span class="line">                paramMaps.put(createParamKey(index), <span class="string">&quot;ServletRequest&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (param <span class="keyword">instanceof</span> ServletResponse)&#123;</span><br><span class="line">                paramMaps.put(createParamKey(index), <span class="string">&quot;ServletResponse&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(param <span class="keyword">instanceof</span> BindingResult)&#123;</span><br><span class="line">                paramMaps.put(createParamKey(index), <span class="string">&quot;BindingResult&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(param <span class="keyword">instanceof</span> CommonsMultipartFile)&#123;</span><br><span class="line">                CommonsMultipartFile file = (CommonsMultipartFile) param;</span><br><span class="line">                paramMaps.put(createParamKey(index), file.getOriginalFilename());</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(Objects.equals(param.getClass(),  MultipartFile[].class)) &#123;</span><br><span class="line">                paramMaps.put(createParamKey(index), MultipartFile[].class.getName());</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                paramMaps.put(createParamKey(index), params[index]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> paramMaps;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="生成消息内容方法：生成消息内容时，以WriteBuzLog注解上的messageTemplate为消息模-板通过Velocity生成消息内容，如果messageTemplate没有值时以”请求参数-ps-响应结-果-rs”作为消息模板生成消息，而在抛出异常时，以”请求参数-ps-异常信息-es”作为消息模板生成消息"><a href="#生成消息内容方法：生成消息内容时，以WriteBuzLog注解上的messageTemplate为消息模-板通过Velocity生成消息内容，如果messageTemplate没有值时以”请求参数-ps-响应结-果-rs”作为消息模板生成消息，而在抛出异常时，以”请求参数-ps-异常信息-es”作为消息模板生成消息" class="headerlink" title="生成消息内容方法：生成消息内容时，以WriteBuzLog注解上的messageTemplate为消息模 板通过Velocity生成消息内容，如果messageTemplate没有值时以”请求参数_ps,响应结 果_rs”作为消息模板生成消息，而在抛出异常时，以”请求参数_ps,异常信息_es”作为消息模板生成消息"></a>生成消息内容方法：生成消息内容时，以WriteBuzLog注解上的messageTemplate为消息模 板通过Velocity生成消息内容，如果messageTemplate没有值时以”请求参数_ps,响应结 果_rs”作为消息模板生成消息，而在抛出异常时，以”请求参数_ps,异常信息_es”作为消息模板生成消息</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createLogInfo</span><span class="params">(LogContext logContext)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(logContext.getThrowable() != <span class="keyword">null</span>)&#123;</span><br><span class="line">        VelocityContext context = <span class="keyword">new</span> VelocityContext(WriteLogUtils.convertContextToMap(logContext));</span><br><span class="line">        <span class="keyword">if</span>(logContext.getParams() != <span class="keyword">null</span> )&#123;</span><br><span class="line">            context.put(<span class="string">&quot;_ps&quot;</span>, JSONObject.toJSONString(convertParams(logContext.getParams(), <span class="keyword">true</span>)));</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            context.put(<span class="string">&quot;_ps&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String errStr = String.format(<span class="string">&quot;&#123;异常类:%s,异常消息:%s&#125;&quot;</span>,</span><br><span class="line">                logContext.getThrowable().getClass().getName(),</span><br><span class="line">                logContext.getThrowable().getMessage()</span><br><span class="line">                );</span><br><span class="line">        context.put(<span class="string">&quot;_es&quot;</span>, errStr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出流</span></span><br><span class="line">        StringWriter writer = <span class="keyword">new</span> StringWriter();</span><br><span class="line">        <span class="comment">// 转换输出</span></span><br><span class="line">        VELOCITY_ENGINE.evaluate(context, writer, <span class="string">&quot;&quot;</span>, EXCEPTION_MESSAGE_TEMPLATE); <span class="comment">// 关键方法</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> writer.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String messageTemplate = logContext.getWriteBuzLog().messageTemplate();</span><br><span class="line">    <span class="keyword">if</span>(StringUtils.isNotBlank(messageTemplate))&#123;</span><br><span class="line">        VelocityContext context = <span class="keyword">new</span> VelocityContext(WriteLogUtils.convertContextToMap(logContext));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出流</span></span><br><span class="line">        StringWriter writer = <span class="keyword">new</span> StringWriter();</span><br><span class="line">        <span class="comment">// 转换输出</span></span><br><span class="line">        VELOCITY_ENGINE.evaluate(context, writer, <span class="string">&quot;&quot;</span>, messageTemplate); <span class="comment">// 关键方法</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> writer.toString();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        VelocityContext context = <span class="keyword">new</span> VelocityContext();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(logContext.getParams() != <span class="keyword">null</span> )&#123;</span><br><span class="line">            context.put(<span class="string">&quot;_ps&quot;</span>, JSONObject.toJSONString(convertParams(logContext.getParams(), <span class="keyword">true</span>)));</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            context.put(<span class="string">&quot;_ps&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(logContext.getResult() != <span class="keyword">null</span> )&#123;</span><br><span class="line">            context.put(<span class="string">&quot;_rs&quot;</span>, JSONObject.toJSONString(logContext.getResult()));</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            context.put(<span class="string">&quot;_rs&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出流</span></span><br><span class="line">        StringWriter writer = <span class="keyword">new</span> StringWriter();</span><br><span class="line">        <span class="comment">// 转换输出</span></span><br><span class="line">        VELOCITY_ENGINE.evaluate(context, writer, <span class="string">&quot;&quot;</span>, DEFAULT_MESSAGE_TEMPLATE); <span class="comment">//关键方法</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> writer.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
  </entry>
  <entry>
    <title>请求资源统一定义组件</title>
    <url>/2021/02/01/%E8%AF%B7%E6%B1%82%E8%B5%84%E6%BA%90%E7%BB%9F%E4%B8%80%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="组件开发背景："><a href="#组件开发背景：" class="headerlink" title="组件开发背景："></a>组件开发背景：</h3><p>在本组件开发前，通过对controller请求进行了统一封装，使得对外部系统只暴露 api/data接口,已到达模糊请求接口，api服务请求参数统一的目的，但是之前的实现中需要 添加各种command映射和访问权限白名单，导致开发过程中的配置项太多。而且分散在各 个不同地方，并且以真实的controller方法定义相隔离，导致通过command来反向查找具 体的业务代码实现太过麻烦，所以为减少开发成本和查找成本，提升开发效率，所以开发了 本组件，对command资源映射和权限访问白名单进行统一定义。</p>
<h3 id="实现原理："><a href="#实现原理：" class="headerlink" title="实现原理："></a>实现原理：</h3><p>通过在controller方法上添加自定义注解PermissionSource，在spring的root容器启动完 成事件中，去对spring加载进来的controller方法签名进行解析，再根据方法签名上的自定 义注解PermissionSource来初始化command处理策略以全局变量保存的上下文中，全局 变量保存着通过url直连访问的url直连地址，并且保存直连地址和权限资源请求对象的映射 map,同时保存了所以command和权限资源请求对象的map对象。 通过自定义请求servlet将/api下的请求进行分发，在自定义请求分发起接受到外部的访问请 求后，通过请求地址和请求参数获取到对应的权限资源请求对象，并通过权限资源请求对象 对请求进行鉴权后，将请求包装成目标controller方法所需要的请求参数并转发给目标 controller方法进行处理。</p>
<h3 id="权限资源定义注解："><a href="#权限资源定义注解：" class="headerlink" title="权限资源定义注解："></a>权限资源定义注解：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.lixiang.permissionlevel.enums.PermissionLevel;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.permissionlevel.enums.RequestType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PermissionSource &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求访问类型：默认通过command访问</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">RequestType <span class="title">type</span><span class="params">()</span> <span class="keyword">default</span> RequestType.COMMAND</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求访问command,必填，当为url访问是，该字段值忽略掉</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">command</span><span class="params">()</span> </span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访问权限级别，默认为严格访问控制权限</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">PermissionLevel <span class="title">level</span><span class="params">()</span> <span class="keyword">default</span> PermissionLevel.COMMAND_PERMISSION</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="资源请求访问类型枚举类："><a href="#资源请求访问类型枚举类：" class="headerlink" title="资源请求访问类型枚举类："></a>资源请求访问类型枚举类：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">RequestType</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过原生URL暴露的请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    URL,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过命令暴露的请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    COMMAND</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="资源请求访问级别枚举类："><a href="#资源请求访问级别枚举类：" class="headerlink" title="资源请求访问级别枚举类："></a>资源请求访问级别枚举类：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">PermissionLevel</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过command暴露的无权限控制的请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ALL,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过command暴露的对外提供接口服务的请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    OUT_INTERFACE,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过command暴露的所有内部注册用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    INNER_USER,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 正常会员才可以访问的请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    COMMAND_NORMAL_MEMBER,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 赋权了才可以访问的请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    COMMAND_PERMISSION</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="资源定义信息加载引擎-spring容器启动事件监听器："><a href="#资源定义信息加载引擎-spring容器启动事件监听器：" class="headerlink" title="资源定义信息加载引擎-spring容器启动事件监听器："></a>资源定义信息加载引擎-spring容器启动事件监听器：</h3><p>（因为springmvc有两个spring容器，所以在监听器会触发两次，但是只有在加载了controller的主容器初始化时才需要初始化资源定义信息上下文，而在普通的spring容器加载完成时因为没有加载controller对象，所以不需要执行初始化资源定义信息上下文）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.lixiang.permissionlevel.config.CommandConfigLoader;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.permissionlevel.config.CommandLevelLoader;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.permissionlevel.config.PermissionContext;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.framework.AopProxyUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.event.ContextRefreshedEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PermissionSpringListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">ContextRefreshedEvent</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(PermissionSpringListener.class);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ContextRefreshedEvent event)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = event.getApplicationContext();</span><br><span class="line">        <span class="comment">// 只有在root容器初始化是才需要执行</span></span><br><span class="line">        <span class="keyword">if</span> (context.getParent() != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;String, Object&gt; controllerBeans = context.getBeansWithAnnotation(Controller.class) ;</span><br><span class="line">        <span class="keyword">if</span> (controllerBeans != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (Object bean : controllerBeans.values()) &#123;</span><br><span class="line">                processBean(bean);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;String, CommandConfigLoader&gt; commandConfigLoaders = context.getBeansOfType(CommandConfigLoader.class);</span><br><span class="line">        <span class="keyword">if</span> (commandConfigLoaders != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (CommandConfigLoader bean : commandConfigLoaders.values()) &#123;</span><br><span class="line">                bean.loadCommandConfig();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;String, CommandLevelLoader&gt; commandLevelLoader = context.getBeansOfType(CommandLevelLoader.class);</span><br><span class="line">        <span class="keyword">if</span> (commandLevelLoader != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (CommandLevelLoader bean : commandLevelLoader.values()) &#123;</span><br><span class="line">                bean.loadCommandLevel();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processBean</span><span class="params">(Object bean)</span></span>&#123;</span><br><span class="line">        Class beanClazz = AopProxyUtils.ultimateTargetClass(bean);</span><br><span class="line">        PermissionContext.processBeanClass(beanClazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="初始化资源定义信息工具类："><a href="#初始化资源定义信息工具类：" class="headerlink" title="初始化资源定义信息工具类："></a>初始化资源定义信息工具类：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.common.utils.CollectionUtils;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.common.utils.ConcurrentHashSet;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.permissionlevel.annotation.PermissionSource;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.permissionlevel.constant.AuthorizationConstants;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.permissionlevel.enums.PermissionLevel;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.permissionlevel.enums.RequestType;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.permissionlevel.exception.PermissionInitException;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.permissionlevel.exception.PermissionRequestException;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeanUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PermissionContext</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(PermissionContext.class);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * url直连请求集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Set&lt;String&gt; URL_REQS = <span class="keyword">new</span> ConcurrentHashSet&lt;&gt;();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所有请求和请求对象map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, PermissionRequest&gt; URL_METHOD_PREQUESTS = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * command请求和请求对象map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, PermissionRequest&gt; COMMAND_PREQUESTS = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String API_PATH = <span class="string">&quot;/api&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PATH_SLIPT = <span class="string">&quot;/&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理controller bean,将controller类上定义的PermissionSource加载到上下文中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanClazz</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">processBeanClass</span><span class="params">(Class beanClazz)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 所有的controller bean 都有进行扩展</span></span><br><span class="line">        String basePath = getBasePath(beanClazz);</span><br><span class="line">        Method[] methods = beanClazz.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            handleControllerMethod(method, basePath);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取controller的基础地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getBasePath</span><span class="params">(Class beanClazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (beanClazz.isAnnotationPresent(RequestMapping.class)) &#123;</span><br><span class="line">            RequestMapping requestMapping = (RequestMapping) beanClazz.getAnnotation(RequestMapping.class);</span><br><span class="line">            String[] vals = requestMapping.value();</span><br><span class="line">            <span class="keyword">if</span> (vals != <span class="keyword">null</span> &amp;&amp; vals.length != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> vals[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理controller 的mapping方法,将controller的mapping方法上定义的PermissionSource加载到上下文中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basePath</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handleControllerMethod</span><span class="params">(Method method, String basePath)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 该方法为mapper方法</span></span><br><span class="line">        <span class="keyword">if</span> (method.isAnnotationPresent(RequestMapping.class)) &#123;</span><br><span class="line">            RequestMapping requestMapping = method.getAnnotation(RequestMapping.class);</span><br><span class="line">            PermissionSource permissionSource = getMethodPermissionSource(method);</span><br><span class="line">            handleControllerMethod(requestMapping, permissionSource, basePath, method);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取方法上定义的PermissionSource注解</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> PermissionSource <span class="title">getMethodPermissionSource</span><span class="params">(Method method)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (method.isAnnotationPresent(PermissionSource.class)) &#123;</span><br><span class="line">            <span class="keyword">return</span> method.getAnnotation(PermissionSource.class);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将controller的mapping方法上定义的PermissionSource解析成PermissionRequest对象,加载到上下文中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestMapping</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> permissionSource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handleControllerMethod</span><span class="params">(RequestMapping requestMapping, PermissionSource permissionSource, String basePath, Method method)</span> </span>&#123;</span><br><span class="line">        String relativePath = getRelativePath(requestMapping);</span><br><span class="line">        <span class="keyword">if</span> (permissionSource == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 为配置资源权限注解，则默认直接配置为通过url访问</span></span><br><span class="line">            initUrlRequest(basePath, relativePath, method, PermissionLevel.COMMAND_PERMISSION, requestMapping);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (Objects.equals(RequestType.URL, permissionSource.type())) &#123;</span><br><span class="line">                initUrlRequest(basePath, relativePath, method, permissionSource.level(), requestMapping);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                initCommandRequest(basePath, relativePath, method, permissionSource.level(), requestMapping, permissionSource.command());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化url方式暴露的请求资源，并注入到上下文中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> relativePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> level</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestMapping</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initUrlRequest</span><span class="params">(String basePath, String relativePath, Method method, PermissionLevel level, RequestMapping requestMapping)</span> </span>&#123;</span><br><span class="line">        RequestMethod requestMethod = getRequestMethod(requestMapping, <span class="keyword">null</span>);</span><br><span class="line">        PermissionRequest permissionRequest = buildUrlRequest(basePath, relativePath, method, level, requestMethod);</span><br><span class="line">        URL_METHOD_PREQUESTS.put(permissionRequest.getMethodRequestPath(), permissionRequest);</span><br><span class="line">        URL_REQS.add(permissionRequest.getMethodRequestPath());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化command方式暴露的请求资源，并注入到上下文中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> relativePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> level</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestMapping</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> command</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initCommandRequest</span><span class="params">(String basePath, String relativePath, Method method, PermissionLevel level, RequestMapping requestMapping, String command)</span> </span>&#123;</span><br><span class="line">        RequestMethod requestMethod = getRequestMethod(requestMapping, RequestMethod.POST);</span><br><span class="line">        PermissionRequest permissionRequest = buildCommandRequest(basePath, relativePath, method, level, requestMethod, command);</span><br><span class="line">        <span class="keyword">if</span> (COMMAND_PREQUESTS.containsKey(command)) &#123;</span><br><span class="line">            PermissionRequest oldPermissionRequest = COMMAND_PREQUESTS.get(command);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> PermissionInitException(String.format(<span class="string">&quot;command[%s] 已经被请求%s定义，不可再请求%s上重复使用。&quot;</span>, command, oldPermissionRequest.getRequestPath(), permissionRequest.getRequestPath()));</span><br><span class="line">        &#125;</span><br><span class="line">        URL_METHOD_PREQUESTS.put(permissionRequest.getMethodRequestPath(), permissionRequest);</span><br><span class="line">        COMMAND_PREQUESTS.put(command, permissionRequest);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建请求资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> relativePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> level</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestMethod</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> PermissionRequest <span class="title">buildUrlRequest</span><span class="params">(String basePath, String relativePath, Method method, PermissionLevel level, RequestMethod requestMethod)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> buildRequest(basePath, relativePath, method, level, requestMethod, <span class="string">&quot;&quot;</span>, RequestType.URL);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建请求资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> relativePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> level</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestMethod</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> command</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> PermissionRequest <span class="title">buildCommandRequest</span><span class="params">(String basePath, String relativePath, Method method, PermissionLevel level, RequestMethod requestMethod, String command)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> buildRequest(basePath, relativePath, method, level, requestMethod, command, RequestType.COMMAND);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建请求资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> relativePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> level</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestMethod</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> command</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> PermissionRequest <span class="title">buildRequest</span><span class="params">(String basePath, String relativePath, Method method, PermissionLevel level, RequestMethod requestMethod, String command, RequestType requestType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(basePath) &amp;&amp; StringUtils.endsWith(basePath, PATH_SLIPT)) &#123;</span><br><span class="line">            basePath = StringUtils.substring(basePath, <span class="number">0</span>, basePath.length() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(relativePath) &amp;&amp; !StringUtils.startsWith(relativePath, PATH_SLIPT)) &#123;</span><br><span class="line">            relativePath = PATH_SLIPT + relativePath;</span><br><span class="line">        &#125;</span><br><span class="line">        String reqPath = basePath + relativePath;</span><br><span class="line">        String methodReqPath = createMethodReqPath(requestMethod, reqPath);</span><br><span class="line">        PermissionRequest request = <span class="keyword">new</span> PermissionRequest();</span><br><span class="line">        request.setRequestMethod(requestMethod);</span><br><span class="line">        request.setBasePath(basePath);</span><br><span class="line">        request.setRelativePath(relativePath);</span><br><span class="line">        request.setRequestPath(reqPath);</span><br><span class="line">        request.setMethodRequestPath(methodReqPath);</span><br><span class="line">        request.setRequestType(requestType);</span><br><span class="line">        request.setCommand(command);</span><br><span class="line">        request.setLevel(level);</span><br><span class="line">        request.setClazz(method.getDeclaringClass());</span><br><span class="line">        request.setMethodName(method.getName());</span><br><span class="line">        <span class="keyword">return</span> request;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取请求相对地址，本扩张器暂时对多映射地址请求不处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestMapping</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getRelativePath</span><span class="params">(RequestMapping requestMapping)</span> </span>&#123;</span><br><span class="line">        String[] relativePaths = requestMapping.value();</span><br><span class="line">        <span class="keyword">if</span> (relativePaths == <span class="keyword">null</span> || relativePaths.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (relativePaths.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            logger.warn(<span class="string">&quot;暂时不支持对多映射&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> relativePaths[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> RequestMethod <span class="title">getRequestMethod</span><span class="params">(RequestMapping requestMapping, RequestMethod defMethod)</span> </span>&#123;</span><br><span class="line">        RequestMethod[] methods = requestMapping.method();</span><br><span class="line">        <span class="keyword">if</span> (methods == <span class="keyword">null</span> || methods.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> defMethod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (methods.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            logger.warn(<span class="string">&quot;暂时不支持对多请求Method&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> methods[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拼装MethodReqPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reqPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createMethodReqPath</span><span class="params">(RequestMethod method, String reqPath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (method != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> method.toString() + <span class="string">&quot;,&quot;</span> + reqPath;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> reqPath;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拼装MethodReqPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reqPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createMethodReqPath</span><span class="params">(String method, String reqPath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> method.toUpperCase() + <span class="string">&quot;,&quot;</span> + reqPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过api请求地址和请求方式，判断是否为通过http暴露的请求资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> apiReq</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkIsUrlReq</span><span class="params">(String apiReq, String method)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(apiReq)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (URL_REQS.contains(apiReq)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String methodReqPath = createMethodReqPath(method, apiReq);</span><br><span class="line">        PermissionRequest permissionRequest = URL_METHOD_PREQUESTS.get(methodReqPath);</span><br><span class="line">        <span class="keyword">if</span> (permissionRequest == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> PermissionRequestException(String.format(<span class="string">&quot;请求资源[%s]配置未找到&quot;</span>, methodReqPath));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(RequestType.URL, permissionRequest.getRequestType());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查请求是否合法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestUrl</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkIsLegalReq</span><span class="params">(String requestUrl)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> fls = requestUrl.equals(<span class="string">&quot;/finance/api&quot;</span>);</span><br><span class="line">        <span class="keyword">boolean</span> ils = requestUrl.equals(<span class="string">&quot;/inventory/api&quot;</span>);</span><br><span class="line">        <span class="keyword">boolean</span> pls = requestUrl.equals(<span class="string">&quot;/purchase/api&quot;</span>);</span><br><span class="line">        <span class="keyword">boolean</span> sls = requestUrl.equals(<span class="string">&quot;/sale/api&quot;</span>);</span><br><span class="line">        <span class="keyword">boolean</span> tls = requestUrl.equals(<span class="string">&quot;/template/api&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> tls || pls || ils || fls || sls || requestUrl.equals(<span class="string">&quot;/api&quot;</span>) || requestUrl.equals(<span class="string">&quot;/data&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过command配置集合重置上下文中的资源权限级别</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> commands</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> level</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">resetCommand</span><span class="params">(Collection&lt;String&gt; commands, PermissionLevel level)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isNotEmpty(commands)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String command : commands) &#123;</span><br><span class="line">                PermissionRequest request = PermissionContext.COMMAND_PREQUESTS.get(command);</span><br><span class="line">                <span class="keyword">if</span> (request != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    request.setLevel(level);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    logger.warn(<span class="string">&quot;未找到command:&#123;&#125;指定的请求资源定义&quot;</span>, command);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据HttpServletRequest获取系统中定义的请求资源信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PermissionRequest <span class="title">getPermissionRequest</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> PermissionRequestException </span>&#123;</span><br><span class="line">        String sourceRequestUrl = request.getRequestURI();</span><br><span class="line">        String requestUrl = getApiPath(sourceRequestUrl);</span><br><span class="line">        String method = request.getMethod();</span><br><span class="line">        String command = (String) request.getAttribute(AuthorizationConstants.REQUEST_COMMAND);</span><br><span class="line">        logger.info(<span class="string">&quot;command=&quot;</span> + command);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(command) &amp;&amp; PermissionContext.COMMAND_PREQUESTS.containsKey(command)) &#123;</span><br><span class="line">            <span class="keyword">return</span> PermissionContext.COMMAND_PREQUESTS.get(command);</span><br><span class="line">        &#125;</span><br><span class="line">        String methodRequestPath = PermissionContext.createMethodReqPath(method, requestUrl);</span><br><span class="line">        <span class="keyword">if</span> (PermissionContext.URL_METHOD_PREQUESTS.containsKey(methodRequestPath)) &#123;</span><br><span class="line">            <span class="keyword">return</span> PermissionContext.URL_METHOD_PREQUESTS.get(methodRequestPath);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (PermissionContext.URL_METHOD_PREQUESTS.containsKey(requestUrl)) &#123;</span><br><span class="line">            <span class="keyword">return</span> PermissionContext.URL_METHOD_PREQUESTS.get(requestUrl);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (PermissionContext.URL_REQS.contains(methodRequestPath)) &#123;</span><br><span class="line">            PermissionRequest permissionRequest = <span class="keyword">new</span> PermissionRequest();</span><br><span class="line">            permissionRequest.setRequestPath(methodRequestPath);</span><br><span class="line">            permissionRequest.setRequestType(RequestType.URL);</span><br><span class="line">            <span class="keyword">return</span> permissionRequest;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (PermissionContext.URL_REQS.contains(requestUrl)) &#123;</span><br><span class="line">            PermissionRequest permissionRequest = <span class="keyword">new</span> PermissionRequest();</span><br><span class="line">            permissionRequest.setRequestPath(requestUrl);</span><br><span class="line">            permissionRequest.setRequestType(RequestType.URL);</span><br><span class="line">            <span class="keyword">return</span> permissionRequest;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (PermissionContext.URL_REQS.contains(sourceRequestUrl)) &#123;</span><br><span class="line">            PermissionRequest permissionRequest = <span class="keyword">new</span> PermissionRequest();</span><br><span class="line">            permissionRequest.setRequestPath(sourceRequestUrl);</span><br><span class="line">            permissionRequest.setRequestType(RequestType.URL);</span><br><span class="line">            <span class="keyword">return</span> permissionRequest;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 合并命令配置信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> commandConfig</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeConfigCommand</span><span class="params">(Map&lt;Object, Object&gt; commandConfig)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!org.springframework.util.CollectionUtils.isEmpty(commandConfig)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;Object, Object&gt; config : commandConfig.entrySet()) &#123;</span><br><span class="line">                String command = config.getKey().toString();</span><br><span class="line">                String methodRequest = trimMethodRequest(config.getValue().toString());</span><br><span class="line">                <span class="comment">// 更新访问权限类型</span></span><br><span class="line">                <span class="keyword">if</span> (StringUtils.isNotBlank(command) &amp;&amp; StringUtils.isNotBlank(methodRequest)) &#123;</span><br><span class="line">                    PermissionRequest permissionRequest = getPermissionRequest(methodRequest);</span><br><span class="line">                    PermissionRequest commandRequest = COMMAND_PREQUESTS.get(command);</span><br><span class="line">                    <span class="keyword">if</span> (permissionRequest == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        logger.error(String.format(<span class="string">&quot;未找到命令%s所对应的controller 处理方法&quot;</span>, command));</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (StringUtils.isNotBlank(permissionRequest.getCommand()) &amp;&amp;</span><br><span class="line">                            commandRequest != <span class="keyword">null</span> &amp;&amp; commandRequest != permissionRequest</span><br><span class="line">                    ) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> PermissionInitException(String.format(<span class="string">&quot;command[%s]已经被请求%s定义，不可再请求%s上重复使用。&quot;</span>, command</span><br><span class="line">                                , commandRequest.getRequestPath(), methodRequest));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        PermissionRequest currentPermission;</span><br><span class="line">                        <span class="keyword">if</span> (!Objects.equals(permissionRequest.getMethodRequestPath(), methodRequest)) &#123;</span><br><span class="line">                            currentPermission = <span class="keyword">new</span> PermissionRequest();</span><br><span class="line">                            BeanUtils.copyProperties(permissionRequest, currentPermission);</span><br><span class="line">                            currentPermission.setMethodRequestPath(methodRequest);</span><br><span class="line">                            currentPermission.setRequestMethod(getRequestMethod(methodRequest));</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            currentPermission = permissionRequest;</span><br><span class="line">                            String sourceCommand = permissionRequest.getCommand();</span><br><span class="line">                            <span class="keyword">if</span> (StringUtils.isNotBlank(sourceCommand)) &#123;</span><br><span class="line">                                COMMAND_PREQUESTS.remove(sourceCommand);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        currentPermission.setCommand(command);</span><br><span class="line">                        currentPermission.setRequestType(RequestType.COMMAND);</span><br><span class="line">                        currentPermission.setLevel(PermissionLevel.COMMAND_PERMISSION);</span><br><span class="line">                        COMMAND_PREQUESTS.put(command, currentPermission);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将资源权限定义解析为标准格式：将资源权限定义中存在的空格去掉和http请求转为大写</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> methodRequest</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">trimMethodRequest</span><span class="params">(String methodRequest)</span> </span>&#123;</span><br><span class="line">        String[] methodRequestConfigs = methodRequest.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (methodRequestConfigs.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> StringUtils.trim(methodRequestConfigs[<span class="number">0</span>]) + <span class="string">&quot;,&quot;</span> + StringUtils.trim(methodRequestConfigs[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PermissionRequest <span class="title">getPermissionRequest</span><span class="params">(String methodRequest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(methodRequest)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        PermissionRequest permissionRequest = URL_METHOD_PREQUESTS.get(methodRequest);</span><br><span class="line">        <span class="keyword">if</span> (permissionRequest == <span class="keyword">null</span> &amp;&amp; StringUtils.contains(methodRequest, <span class="string">&quot;,&quot;</span>)) &#123;</span><br><span class="line">            String url = StringUtils.split(methodRequest, <span class="string">&quot;,&quot;</span>)[<span class="number">1</span>];</span><br><span class="line">            permissionRequest = URL_METHOD_PREQUESTS.get(url);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> permissionRequest;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 因为通过servlet注册进来的url直连是对所有的请求方式都为url直连,</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 而基于servlet注册进来的url的优先级更高，所以需要重置通过注解设置的访问配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> urlRequest</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">resetUrlRequest</span><span class="params">(String urlRequest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!URL_REQS.contains(urlRequest)) &#123;</span><br><span class="line">            <span class="comment">// 1.添加到url直连集合中</span></span><br><span class="line">            URL_REQS.add(urlRequest);</span><br><span class="line">        &#125;</span><br><span class="line">        resetOrAddToUrlRequest(urlRequest);</span><br><span class="line">        <span class="keyword">for</span> (RequestMethod method : RequestMethod.values()) &#123;</span><br><span class="line">            String methodRequestPath = createMethodReqPath(method, urlRequest);</span><br><span class="line">            resetToUrlRequest(methodRequestPath);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">resetToUrlRequest</span><span class="params">(String methodRequestPath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (URL_METHOD_PREQUESTS.containsValue(methodRequestPath)) &#123;</span><br><span class="line">            PermissionRequest request = URL_METHOD_PREQUESTS.get(methodRequestPath);</span><br><span class="line">            request.setRequestType(RequestType.URL);</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(request.getCommand())) &#123;</span><br><span class="line">                COMMAND_PREQUESTS.remove(request.getCommand());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">resetOrAddToUrlRequest</span><span class="params">(String methodRequestPath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (URL_METHOD_PREQUESTS.containsValue(methodRequestPath)) &#123;</span><br><span class="line">            PermissionRequest request = URL_METHOD_PREQUESTS.get(methodRequestPath);</span><br><span class="line">            request.setRequestType(RequestType.URL);</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(request.getCommand())) &#123;</span><br><span class="line">                COMMAND_PREQUESTS.remove(request.getCommand());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            PermissionRequest request = <span class="keyword">new</span> PermissionRequest();</span><br><span class="line">            request.setMethodRequestPath(methodRequestPath);</span><br><span class="line">            request.setRequestType(RequestType.URL);</span><br><span class="line">            URL_METHOD_PREQUESTS.put(methodRequestPath, request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">containsCommand</span><span class="params">(String command)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> COMMAND_PREQUESTS.containsKey(command);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PermissionRequest <span class="title">getPermissionByCommand</span><span class="params">(String command)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> COMMAND_PREQUESTS.get(command);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Collection&lt;PermissionRequest&gt; <span class="title">getAllPrequests</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> URL_METHOD_PREQUESTS.values();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> RequestMethod <span class="title">getRequestMethod</span><span class="params">(String methodRequest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.contains(methodRequest, <span class="string">&quot;,&quot;</span>)) &#123;</span><br><span class="line">            String methodStr = StringUtils.split(methodRequest, <span class="string">&quot;,&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span> (RequestMethod method : RequestMethod.values()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (method.toString().equals(methodStr.trim().toUpperCase())) &#123;</span><br><span class="line">                    <span class="keyword">return</span> method;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> RequestMethod.POST;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getApiPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> API_PATH;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setApiPath</span><span class="params">(String apiPath)</span> </span>&#123;</span><br><span class="line">        API_PATH = apiPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getApiPath</span><span class="params">(String urlRequest)</span> </span>&#123;</span><br><span class="line">        urlRequest = StringUtils.trim(urlRequest);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.startsWith(urlRequest, API_PATH)) &#123;</span><br><span class="line">            <span class="keyword">return</span> StringUtils.substring(urlRequest, API_PATH.length());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> urlRequest;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义统一请求处理分发器"><a href="#自定义统一请求处理分发器" class="headerlink" title="自定义统一请求处理分发器:"></a>自定义统一请求处理分发器:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.permissionlevel.config.*;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.permissionlevel.exception.CommondNotFoundException;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.DispatcherServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.lixiang.permissionlevel.config.PermissionContext.checkIsLegalReq;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.lixiang.permissionlevel.config.PermissionContext.checkIsUrlReq;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomDispatcherServlet</span> <span class="keyword">extends</span> <span class="title">DispatcherServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUOT = <span class="string">&quot;&amp;quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">3983568685367864966L</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REQUEST_COMMAND = <span class="string">&quot;request_command&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger LOGGER = LoggerFactory.getLogger(CustomDispatcherServlet.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; PARAMS = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        PARAMS.add(<span class="string">&quot;announcementContent&quot;</span>);</span><br><span class="line">        PARAMS.add(<span class="string">&quot;xmlFilePath&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String requestUrl = request.getRequestURI();</span><br><span class="line">        String method = request.getMethod();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (!checkIsUrlReq(PermissionContext.getApiPath(requestUrl), method) &amp;&amp; checkIsLegalReq(requestUrl)) &#123;</span><br><span class="line">                <span class="comment">// 非过滤URL</span></span><br><span class="line">                RequestEntiyFace requestEntiyface = <span class="keyword">null</span>;</span><br><span class="line">                RequestEntiy requestEntiy = getRequestEntiy(request);</span><br><span class="line">                <span class="keyword">if</span> (requestEntiy != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 请求参数可以正常解析</span></span><br><span class="line">                    request.setAttribute(REQUEST_COMMAND, requestEntiy.getCommand());</span><br><span class="line">                    String command = requestEntiy.getCommand();</span><br><span class="line">                    LOGGER.info(<span class="string">&quot;请求命令：&quot;</span> + command);</span><br><span class="line">                    <span class="keyword">if</span> (StringUtils.isBlank(command)) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> CommondNotFoundException(String.format(<span class="string">&quot;请求[%s,%s]不为url直接访问的请求,请求参数中不存在command&quot;</span>,</span><br><span class="line">                                method, requestUrl));</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (!PermissionContext.containsCommand(command)) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> CommondNotFoundException(<span class="string">&quot;命令:&quot;</span> + command);</span><br><span class="line">                    &#125;</span><br><span class="line">                    requestEntiyface = doRequestPath(requestEntiy);</span><br><span class="line">                    <span class="keyword">if</span> (requestEntiyface != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        request = <span class="keyword">new</span> HttpResquestWrapper(request, requestEntiyface);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">super</span>.doService(request, response);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOGGER.error(String.format(<span class="string">&quot;请求[%s,%s]分发失败&quot;</span>, method, requestUrl), e);</span><br><span class="line">            ResponseEntity result = returnException(<span class="string">&quot;4001&quot;</span>, <span class="string">&quot;请求分发失败&quot;</span> + <span class="string">&quot;,&quot;</span> + e.getMessage(), <span class="string">&quot;&quot;</span>);</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json; charset=UTF-8&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                response.getWriter().write(JSONObject.toJSONString(result));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e2) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IOException(e2.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> RequestEntiyFace <span class="title">doRequestPath</span><span class="params">(RequestEntiy requestEntiy)</span> </span>&#123;</span><br><span class="line">        RequestEntiyFace requestEntiyface = <span class="keyword">new</span> RequestEntiyFace();</span><br><span class="line">        String command = requestEntiy.getCommand();</span><br><span class="line">        PermissionRequest request = PermissionContext.getPermissionByCommand(command);</span><br><span class="line">        <span class="keyword">if</span> (request.getRequestMethod() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            requestEntiyface.setMethod(request.getRequestMethod().toString());<span class="comment">// 设置请求方法</span></span><br><span class="line">        &#125;</span><br><span class="line">        requestEntiyface.setURI(request.getRequestPath());<span class="comment">// 设置请求路径</span></span><br><span class="line">        Map&lt;String, String&gt; heads = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        heads.put(<span class="string">&quot;x-openerp-token&quot;</span>, requestEntiy.getAccessToken());</span><br><span class="line">        requestEntiyface.setHeads(heads);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.startsWith(requestEntiy.getData(), <span class="string">&quot;&#123;&quot;</span>)) &#123; <span class="comment">// 说明data数据是对象</span></span><br><span class="line">            JSONObject json = JSONObject.parseObject(requestEntiy.getData());</span><br><span class="line">            json = (JSONObject) objectFilter(json);</span><br><span class="line">            requestEntiy.setData(json.toJSONString());</span><br><span class="line">            Map&lt;String, String[]&gt; params = <span class="keyword">new</span> HashMap&lt;String, String[]&gt;();</span><br><span class="line">            <span class="keyword">for</span> (String key : json.keySet()) &#123;</span><br><span class="line">                String[] param = <span class="keyword">new</span> String[<span class="number">1</span>];</span><br><span class="line">                param[<span class="number">0</span>] = json.get(key) + <span class="string">&quot;&quot;</span>;</span><br><span class="line">                params.put(key, param);</span><br><span class="line">            &#125;</span><br><span class="line">            requestEntiyface.setGetParam(params);</span><br><span class="line">        &#125;</span><br><span class="line">        requestEntiyface.setBodyData(requestEntiy.getData());</span><br><span class="line">        <span class="keyword">return</span> requestEntiyface;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> RequestEntiy <span class="title">getRequestEntiy</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String encode = <span class="string">&quot;UTF-8&quot;</span>;</span><br><span class="line">        InputStream inputStream = request.getInputStream();</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] tmp = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2048</span>];</span><br><span class="line">        <span class="keyword">int</span> i = inputStream.read(tmp);</span><br><span class="line">        <span class="keyword">while</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            baos.write(tmp, <span class="number">0</span>, i);</span><br><span class="line">            i = inputStream.read(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        String value = <span class="keyword">new</span> String(baos.toByteArray(), encode);</span><br><span class="line">        <span class="keyword">if</span> (value != <span class="keyword">null</span> &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(value)) &#123;</span><br><span class="line">            RequestEntiy requestEntiy = JSONObject.parseObject(value, RequestEntiy.class);</span><br><span class="line">            requestEntiy.setData(requestEntiy.getData());</span><br><span class="line">            <span class="keyword">return</span> requestEntiy;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">formatHtml</span><span class="params">(String needToFormat)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (needToFormat != <span class="keyword">null</span> &amp;&amp; needToFormat.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            needToFormat = needToFormat.replace(<span class="string">&quot;&lt;script&gt;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            needToFormat = needToFormat.replace(<span class="string">&quot;&amp;&quot;</span>, <span class="string">&quot;&amp;amp;&quot;</span>);</span><br><span class="line">            needToFormat = needToFormat.replace(<span class="string">&quot;\&quot;&quot;</span>, QUOT);</span><br><span class="line">            needToFormat = needToFormat.replace(<span class="string">&quot;“&quot;</span>, QUOT);</span><br><span class="line">            needToFormat = needToFormat.replace(<span class="string">&quot;”&quot;</span>, QUOT);</span><br><span class="line">            needToFormat = needToFormat.replace(<span class="string">&quot;&lt;&quot;</span>, <span class="string">&quot;&amp;lt;&quot;</span>);</span><br><span class="line">            needToFormat = needToFormat.replace(<span class="string">&quot;&gt;&quot;</span>, <span class="string">&quot;&amp;gt;&quot;</span>);</span><br><span class="line">            needToFormat = needToFormat.replace(<span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;&amp;#39;&quot;</span>);</span><br><span class="line">            needToFormat = needToFormat.replace(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> needToFormat;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">objectFilter</span><span class="params">(Object json)</span> </span>&#123;</span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (json == <span class="keyword">null</span>) &#123;</span><br><span class="line">            result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (json <span class="keyword">instanceof</span> JSONObject) &#123;</span><br><span class="line">            JSONObject jsono = (JSONObject) json;</span><br><span class="line">            Set&lt;String&gt; keys = jsono.keySet();</span><br><span class="line">            <span class="keyword">if</span> (!keys.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">for</span> (String k : keys) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (PARAMS.indexOf(k) != -<span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    jsono.put(k, objectFilter(jsono.get(k)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            result = jsono;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (json <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            result = formatHtml(json.toString());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result = json;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ResponseEntity <span class="title">returnException</span><span class="params">(String code, String mess, Object data)</span> </span>&#123;</span><br><span class="line">        ResponseEntity responseEntity = <span class="keyword">new</span> ResponseEntity();</span><br><span class="line">        responseEntity.setCode(Integer.parseInt(code));</span><br><span class="line">        Calendar calendar = Calendar.getInstance(Locale.CHINA);</span><br><span class="line">        responseEntity.setTimeStamp(calendar.getTimeInMillis());</span><br><span class="line">        responseEntity.setResult(<span class="string">&quot;exception&quot;</span>);</span><br><span class="line">        responseEntity.setMess(mess);</span><br><span class="line">        responseEntity.setData(data);</span><br><span class="line">        <span class="keyword">return</span> responseEntity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="全局配置类："><a href="#全局配置类：" class="headerlink" title="全局配置类："></a>全局配置类：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.lixiang.permissionlevel.config.CommandConfigLoader;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.permissionlevel.handler.CustomDispatcherServlet;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.permissionlevel.handler.UserAuthInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.EnableAspectJAutoProxy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.EnableAsync;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.support.AnnotationConfigWebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.CharacterEncodingFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 应用自动配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy(proxyTargetClass = true)</span></span><br><span class="line"><span class="comment">// 当前类不能在basePackages描到的包下, 否则会出现死循环</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.lixiang.permissionlevel&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppAutoConfiguraction</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String apiPath = <span class="string">&quot;/api&quot;</span>;</span><br><span class="line"><span class="comment">//    static &#123;</span></span><br><span class="line"><span class="comment">//        PermissionContext.setApiPath(apiPath);</span></span><br><span class="line"><span class="comment">//        BeanFactory.init();</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">restServlet</span><span class="params">()</span> </span>&#123; <span class="comment">// 注解扫描上下文</span></span><br><span class="line">        AnnotationConfigWebApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigWebApplicationContext();</span><br><span class="line">        <span class="comment">// 通过构造函数指定dispatcherServlet的上下文</span></span><br><span class="line">        CustomDispatcherServlet customDispatcherServlet = <span class="keyword">new</span> CustomDispatcherServlet();</span><br><span class="line">        customDispatcherServlet.setApplicationContext(applicationContext);</span><br><span class="line">        <span class="comment">// 用ServletRegistrationBean包装servlet</span></span><br><span class="line">        ServletRegistrationBean registrationBean = <span class="keyword">new</span> ServletRegistrationBean();</span><br><span class="line">        registrationBean.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">        registrationBean.setServlet(customDispatcherServlet);</span><br><span class="line">        <span class="comment">// 指定urlmapping</span></span><br><span class="line">        registrationBean.addUrlMappings(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">        <span class="comment">// 指定name，如果不指定默认为dispatcherServlet</span></span><br><span class="line">        registrationBean.setName(<span class="string">&quot;customDispatcherServlet&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommandConfigLoader <span class="title">commandConfigLoader</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Set&lt;String&gt; exculdeUrls = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        exculdeUrls.add(<span class="string">&quot;/api/websocket&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommandConfigLoader(<span class="string">&quot;dispatcher.properties&quot;</span>, exculdeUrls);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        InterceptorRegistration addInterceptor = registry.addInterceptor(<span class="keyword">new</span> UserAuthInterceptor());</span><br><span class="line">        addInterceptor.excludePathPatterns(<span class="string">&quot;/webap/**&quot;</span>, <span class="string">&quot;/css/**&quot;</span>, <span class="string">&quot;/js/**&quot;</span>,<span class="string">&quot;/images/**&quot;</span>,<span class="string">&quot;/user&quot;</span>);</span><br><span class="line"><span class="comment">//        super.addInterceptors(registry);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理字符编码的Filter一定要在其他Filter之前，不然其他Filter已经获取的请求参数，此时再去处理字符编码没有任何意义</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CharacterEncodingFilter <span class="title">setCharacterEncodingFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CharacterEncodingFilter(<span class="string">&quot;UTF-8&quot;</span>, <span class="keyword">true</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="用户访问权限请求拦截器："><a href="#用户访问权限请求拦截器：" class="headerlink" title="用户访问权限请求拦截器："></a>用户访问权限请求拦截器：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.common.utils.StringUtils;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.permissionlevel.config.PermissionContext;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.permissionlevel.config.PermissionRequest;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.permissionlevel.enums.PermissionLevel;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.permissionlevel.enums.RequestType;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAuthInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOGINER = <span class="string">&quot;,登录人=&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String INTERCEPTOR_REQUEST = <span class="string">&quot;Interceptor-请求命令：&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String RESULT_MSG = <span class="string">&quot;,执行结果：阻止。理由:会员账户&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACCOUNT_MSG = <span class="string">&quot;您的会员账户&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String USER_MSG = <span class="string">&quot;尊贵的用户，&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化当前访问请求资源权限定义信息和当前登录用户信息方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initUserToSaasParameter</span><span class="params">(HttpServletRequest request, HttpServletResponse response, PermissionRequest permissionRequest)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 预处理</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// swagger接口不进行拦截</span></span><br><span class="line">        <span class="keyword">if</span> (request.getRequestURI().contains(<span class="string">&quot;swagger&quot;</span>) || request.getRequestURI().contains(<span class="string">&quot;csrf&quot;</span>) || request.getRequestURI().contains(<span class="string">&quot;error&quot;</span>) || request.getRequestURI().contains(<span class="string">&quot;api-docs&quot;</span>) || request.getRequestURI().contains(<span class="string">&quot;webjars&quot;</span>) || request.getRequestURI().contains(<span class="string">&quot;doc.html&quot;</span>) || request.getRequestURI().contains(<span class="string">&quot;webap&quot;</span>) || request.getRequestURI().contains(<span class="string">&quot;swagger-resources&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        PermissionRequest permissionRequest = PermissionContext.getPermissionRequest(request);</span><br><span class="line">        <span class="keyword">long</span> checkLogin = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> checkLoginEnd = System.currentTimeMillis();</span><br><span class="line">        logger.info(<span class="string">&quot;====登录信息校验耗时:&#123;&#125;ms&quot;</span>, checkLoginEnd - checkLogin);</span><br><span class="line">        <span class="keyword">if</span> (permissionRequest == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String command = permissionRequest.getCommand();</span><br><span class="line">        logger.info(<span class="string">&quot;-----preHandle---&gt;&gt;&gt;command-----&quot;</span> + command);</span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 判断是否不过滤的请求</span></span><br><span class="line">        <span class="keyword">if</span> (Objects.equals(PermissionLevel.ALL, permissionRequest.getLevel()) || Objects.equals(PermissionLevel.OUT_INTERFACE, permissionRequest.getLevel())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Objects.equals(permissionRequest.getRequestType(), RequestType.URL)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Objects.equals(PermissionLevel.INNER_USER, permissionRequest.getLevel())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后处理（未进行页面渲染）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;-----postHandle-----&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回处理（已经渲染了页面）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;-----afterCompletion-----&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getIp</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String ip = request.getHeader(<span class="string">&quot;X-Forwarded-For&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(ip) &amp;&amp; !<span class="string">&quot;unKnown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            <span class="comment">// 多次反向代理后会有多个ip值，第一个ip才是真实ip</span></span><br><span class="line">            <span class="keyword">int</span> index = ip.indexOf(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (index != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> ip.substring(<span class="number">0</span>, index);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> ip;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ip = request.getHeader(<span class="string">&quot;X-Real-IP&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(ip) &amp;&amp; !<span class="string">&quot;unKnown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            <span class="keyword">return</span> ip;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> request.getRemoteAddr();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>JVM性能监控与调优</title>
    <url>/2021/06/01/JVM%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E4%B8%8E%E8%B0%83%E4%BC%98/</url>
    <content><![CDATA[<p>一.为什么调优：<br>    (1).防止OOM的出现<br>    (2).解决OOM<br>    (3).减少Full GC出现的频率</p>
<p>二.性能优化的步骤：<br>    (1).性能监控：<br>    (2).性能分析：<br>    (3).性能调优：</p>
<p>三.性能测试指标及相互关系：<br>    (1).停顿时间（或响应时间）<br>    (2).吞吐量：运行用户代码的时间占总运行时间的比例（总运行时间：程序的运行时间 + 内存回收时间）<br>    (3).并发数：同一时刻，对服务器有实际交互的请求数<br>    (4).内存占用：java堆区所占的内存大小</p>
<p>四.jps：查看java正在运行的进程<br>    基本用法：jps [options] [hostid]</p>
<p>五.jstat：<br>    jstat -<option> [-t] [-h<lines>] <vmid> [<interval>] [<count>]<br>    使用样例：jstat -class -t -h3 2280 1000 10<br>Timestamp       Loaded  Bytes  Unloaded  Bytes     Time<br>          393.9    684  1346.8        0     0.0       0.19<br>          394.8    684  1346.8        0     0.0       0.19<br>          395.8    684  1346.8        0     0.0       0.19<br>Timestamp       Loaded  Bytes  Unloaded  Bytes     Time<br>          396.8    684  1346.8        0     0.0       0.19<br>          397.9    684  1346.8        0     0.0       0.19<br>          398.9    684  1346.8        0     0.0       0.19<br>Timestamp       Loaded  Bytes  Unloaded  Bytes     Time<br>          399.9    684  1346.8        0     0.0       0.19<br>          400.9    684  1346.8        0     0.0       0.19<br>          401.9    684  1346.8        0     0.0       0.19<br>Timestamp       Loaded  Bytes  Unloaded  Bytes     Time<br>          402.9    684  1346.8        0     0.0       0.19</count></interval></vmid></lines></option></p>
<p>六.浅堆、深堆和实际对象大小：</p>
<p>七.内存泄露：一些系统不需要使用的对象仍被其他对象所引用，导致JVM无法回收</p>
<p>八.内存溢出:申请内存时，GC之后没有足够的内存可以使用</p>
<p>九.8种内存泄漏的场景：<br>    1.静态集合类：声明了static的集合类，那么这个集合类的生命周期就和JVM的消亡一致，如果向该集合中添加了对象，这个对象可能已经不需要使用了，那么该对象的就会一直无法被回收</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">oomTests</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">        list.add(obj);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<pre><code>2.单例模式：单例模式创建的对象与JVM的生命周期一致，如果单例对象持有某个外部对象，那么这个外部对象就会一直无法回收，导致内存泄露；
3.内部类持有外部类：外部类的内部方法可以获取内部类对象，若某个对象调用该内部方法获取内部类实例，此时外部类无法被回收；
4.各种连接，如数据库连接，网络连接和IO连接等：各种连接如果不显式的关闭，也无法被JVM回收
5.变量不合理的作用域：局部变量定义为成员变量, 导致方法执行完变量并没被回收
6.改变Hash值：改变HashSet中对象某个参与hashCode方法的属性值，会导致从HashSet中无法单独删除该对象，造成内存泄露
注：String是不可变类型，所以我们可以放心的把String插入HashSet,活着把String当成HashMap的值
</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChangeHashCode</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HashSet set = <span class="keyword">new</span> HashSet();</span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person(<span class="number">1001</span>, <span class="string">&quot;AA&quot;</span>);</span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person(<span class="number">1002</span>, <span class="string">&quot;BB&quot;</span>);</span><br><span class="line"></span><br><span class="line">        set.add(p1);</span><br><span class="line">        set.add(p2);</span><br><span class="line">        <span class="comment">// p1的name更改了，导致p1的HashCode值变了，导致Hashset删除p1的时候通过HashCode无法找到原来的值，导致了内存的泄漏</span></span><br><span class="line">        p1.name = <span class="string">&quot;CC&quot;</span>;</span><br><span class="line">        set.remove(p1); <span class="comment">//删除失败</span></span><br><span class="line"></span><br><span class="line">        System.out.println(set);</span><br><span class="line"></span><br><span class="line">        set.add(<span class="keyword">new</span> Person(<span class="number">1001</span>, <span class="string">&quot;CC&quot;</span>));</span><br><span class="line">        System.out.println(set);</span><br><span class="line"></span><br><span class="line">        set.add(<span class="keyword">new</span> Person(<span class="number">1001</span>, <span class="string">&quot;AA&quot;</span>));</span><br><span class="line">        System.out.println(set);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Person)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        Person person = (Person) o;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (id != person.id) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> name != <span class="keyword">null</span> ? name.equals(person.name) : person.name == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = id;</span><br><span class="line">        result = <span class="number">31</span> * result + (name != <span class="keyword">null</span> ? name.hashCode() : <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<pre><code>7.缓存泄露：比如应用启动时加载某个表中的数据到缓存（内存）中，测试环境只有几百条数据，但是生产环境中却有几百万条数据，导致内存泄露，解决方式，将这些数据读取到WeakHashMap中
WeakHashMap的特点：当除了自身对key的引用外,此key没有其他引用，那么map会自动丢弃此值
</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Map wMap = <span class="keyword">new</span> WeakHashMap();</span><br><span class="line">    <span class="keyword">static</span> Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        init();</span><br><span class="line">        testWeakHashMap();</span><br><span class="line">        testHashMap();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String ref1 = <span class="keyword">new</span> String(<span class="string">&quot;obejct1&quot;</span>);</span><br><span class="line">        String ref2 = <span class="keyword">new</span> String(<span class="string">&quot;obejct2&quot;</span>);</span><br><span class="line">        String ref3 = <span class="keyword">new</span> String(<span class="string">&quot;obejct3&quot;</span>);</span><br><span class="line">        String ref4 = <span class="keyword">new</span> String(<span class="string">&quot;obejct4&quot;</span>);</span><br><span class="line">        wMap.put(ref1, <span class="string">&quot;cacheObject1&quot;</span>);</span><br><span class="line">        wMap.put(ref2, <span class="string">&quot;cacheObject2&quot;</span>);</span><br><span class="line">        map.put(ref3, <span class="string">&quot;cacheObject3&quot;</span>);</span><br><span class="line">        map.put(ref4, <span class="string">&quot;cacheObject4&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;String引用ref1，ref2，ref3，ref4 消失&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testWeakHashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;WeakHashMap GC之前&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object o : wMap.entrySet()) &#123;</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.gc();</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;WeakHashMap GC之后&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object o : wMap.entrySet()) &#123;</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testHashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HashMap GC之前&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object o : map.entrySet()) &#123;</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.gc();</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;HashMap GC之后&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object o : map.entrySet()) &#123;</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<pre><code>8.监听器和回调：如果客户端在你实现的API中注册回调，却没有显示的取消，那么就无法积聚。需要确保回调立即被当作垃圾回收的最佳方法是只保存它的弱引用，例如将他们保存成为WeakHashMap中的键
</code></pre>
<p>十.内存泄露案例：<br>    案例一：使用java代码实现栈</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object[] elements;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Stack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        elements = <span class="keyword">new</span> Object[DEFAULT_INITIAL_CAPACITY];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Object e)</span> </span>&#123; <span class="comment">//入栈</span></span><br><span class="line">        ensureCapacity();</span><br><span class="line">        elements[size++] = e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//存在内存泄漏</span></span><br><span class="line"><span class="comment">//    public Object pop() &#123; //出栈</span></span><br><span class="line"><span class="comment">//        if (size == 0)</span></span><br><span class="line"><span class="comment">//            throw new EmptyStackException();</span></span><br><span class="line"><span class="comment">//        return elements[--size];</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EmptyStackException();</span><br><span class="line">        Object result = elements[--size];</span><br><span class="line">        elements[size] = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (elements.length == size)</span><br><span class="line">            elements = Arrays.copyOf(elements, <span class="number">2</span> * size + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>十一.Arthas的使用及了解：<br>    (1).好用的命令：<br>        1.jad命令将JVM中实际运行的class的byte code反编译成java代码便于你理解业务逻辑；<br>            在Arthas Console上反编译出来的源码是带语法高亮的阅读更方便<br>            当然反编译出来的java代码可能会存在语法错误但不影响你进行阅读理解<br>            使用例子：(jad java.lang.String)<br>        2.monitor——方法执行监控<br>            使用例子：monitor -c 5 demo.MathGame primeFactors<br>            返回方法总调用次数，成功次数，失败次数，平均RT（运行时间），失败率等信息<br>        3.watch——方法执行数据观测<br>            使用例子：watch demo.MathGame primeFactors -x 2(观察primeFactors方法的执行数据)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count: 1 , method count: 1) cost in 32 ms, listenerId: 5</span><br><span class="line">method=demo.MathGame.primeFactors location=AtExceptionExit</span><br><span class="line">ts=<span class="number">2021</span>-08-<span class="number">31</span> <span class="number">15</span>:<span class="number">22</span>:<span class="number">57</span>; [cost=<span class="number">0.</span>220625ms] result=<span class="meta">@ArrayList</span>[</span><br><span class="line">    <span class="meta">@Object</span>[][</span><br><span class="line">        <span class="meta">@Integer</span>[-<span class="number">179173</span>],</span><br><span class="line">    ],</span><br><span class="line">    <span class="meta">@MathGame</span>[</span><br><span class="line">        random=<span class="meta">@Random</span>[java.util.Random@31cefde0],</span><br><span class="line">        illegalArgumentCount=<span class="meta">@Integer</span>[<span class="number">44</span>],</span><br><span class="line">    ],</span><br><span class="line">    <span class="keyword">null</span>,</span><br><span class="line">]</span><br><span class="line">method=demo.MathGame.primeFactors location=AtExit</span><br><span class="line">ts=<span class="number">2021</span>-08-<span class="number">31</span> <span class="number">15</span>:<span class="number">22</span>:<span class="number">58</span>; [cost=<span class="number">1.</span>020982ms] result=<span class="meta">@ArrayList</span>[</span><br><span class="line">    <span class="meta">@Object</span>[][</span><br><span class="line">        <span class="meta">@Integer</span>[<span class="number">1</span>],</span><br><span class="line">    ],</span><br><span class="line">    <span class="meta">@MathGame</span>[</span><br><span class="line">        random=<span class="meta">@Random</span>[java.util.Random@31cefde0],</span><br><span class="line">        illegalArgumentCount=<span class="meta">@Integer</span>[<span class="number">44</span>],</span><br><span class="line">    ],</span><br><span class="line">    <span class="meta">@ArrayList</span>[</span><br><span class="line">        <span class="meta">@Integer</span>[<span class="number">2</span>],</span><br><span class="line">        <span class="meta">@Integer</span>[<span class="number">2</span>],</span><br><span class="line">        <span class="meta">@Integer</span>[<span class="number">26947</span>],</span><br><span class="line">    ],</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Java线程池</title>
    <url>/2021/07/28/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    <content><![CDATA[<p>###Executors<br>    理解：线程池的工厂，可以构建各种线程池SingleThreadPool，newFixedThreadPool等</p>
<p>###线程池<br>    理解：线程主要分为两种：<br>    ThreadPoolExecutor<br>    ForkJoinPool: 分解汇总任务; 用很少的线程执行很多的任务(子任务)TPE做不到先执行子任务; CPU密集型;</p>
<p>###自定义线程池<br>    核心线程数：<br>    最大线程数：<br>    非核心线程最大空闲时间：<br>    时间单位：<br>    阻塞队列：<br>    自定义的ThreadFactory: 自定义创建线程的规范：指定线程组名称，指定线程名称，指定线程为非守护线程，<br>        指定线程的优先级，好处是为了排查问题更加方便，使用jstack命令可以很容易排查出问题；<br>    拒绝策略：JDK默认提供了四种，拒绝策略是可以自定义的<br>        Abort:抛异常<br>        Discard:扔掉，不抛异常<br>        DiscardOldest:扔掉排队时间最久的<br>        CallerRuns:调用者处理任务</p>
<pre><code>线程池执行任务的过程：先到来的任务由核心线程执行，当核心线程都在执行任务，来的新任务进入阻塞队列，当阻塞队列满了，再来的新任务则启动新线程来执行，当线程数达到最大线程数时，执行拒绝策略；
</code></pre>
<p>###不使用JDK自己提供的线程池的原因<br>    1.无法自定义拒绝策略；<br>    2.核心线程数，最大线程数等参数需要根据机器本身配置和业务本身的需要来决定的，所以自定义线程池能够更加灵活满足我们的需求；<br>    3.自定义线程池可以自己指定线程组名称，线程名称，更加有利于排查问题；</p>
<p>###SingleThreadPool<br>    理解：线程池里只有一个线程，能够保证任务顺序的执行；使用的默认线程工厂，默认拒绝策略；<br>    缺点：只有单个线程，使用的LinkedBlockingQueue作为阻塞队列<br>    为什么有单线程的线程池：相比较与自己创建线程，可以不用自己创建阻塞队列，池化思想有利线程资源的有效利用与生命周期管理；</p>
<p>###CachedPool<br>    理解：核心线程数为0，最大线程数为Integer的最大值，线程的最大空闲等待时间为60S,使用SynchronousQueue作为阻塞队列，<br>    SynchronousQueue的特点是，容量为0，当任务进入阻塞队列，如果没有其他线程处理，线程会一直阻塞住；使用的默认线程工厂，默认拒绝策略；<br>    缺点：最大线程为Integer的最大值，如果任务很多，会创建非常多的线程，可能导致服务器资源耗尽产生OOM;<br>    使用场景：不推荐使用，要使用的话，会在任务数量的多少随着时间的变化不稳定的时候，但是还需要保证任务不会堆积的时候可以使用</p>
<p>###FixedThreadPool<br>    理解：自己指定精确的线程数，核心线程数与最大线程数相等，也就是全是核心线程，使用的LinkedBlockingQueue作为阻塞队列，使用的默认线程工厂，默认拒绝策略；<br>    缺点：如果任务很多，任务队列的任务会堆积的非常多，最大为Integer的最大值，可能导致服务器占用大量内存而导致OOM;<br>    使用场景：不推荐使用，要使用的话，会在任务数量的多少随着时间的比较稳定的时候，但是还需要保证任务不会堆积的时候可以使用</p>
<p>###到底该使用那种线程池<br>    不推荐使用JDK提供的线程池，一般情况下都是自定义线程池</p>
<p>###线程池的线程该定义为多少<br>    线程池中线程过多：大量线程会竞争稀缺的处理器和内存资源，浪费大量的时间在上下文切换上；<br>    线程池中线程过少：会导致我们的服务器应用处理器的一些核可能无法充分利用到；<br>    线程数多少与处理器的利用率之比可以使用下面的公式进行估算：<br>    N(threads) = N(cpu) * U(cpu) * (1 + W/C)<br>    其中：<br>    N(cpu)是处理器的核的数目，可以通过Runtime.getRuntime().availableProcessors()得到<br>    U(cpu)是期望的CPU利用率(该值应该介于0和1之间)<br>    W/C是等待时间与计算时间的比率</p>
<p>###ScheduledPool<br>    理解：一般用于定时任务的场景，实现定时任务的其他方式还有quartz，cron</p>
<p>###并发与并行(concurrent与parallel)<br>    并发指任务的提交，并行指任务的执行<br>    并行是并发的子集<br>    理解：并发指非常多的任务线程同时提交任务到服务器程序，单个cpu核也可以去执行这些任务，但需要不断地做线程上下文切换，多核就可以并行的去执行这些任务；任务并行处理的时候才能真正的提高效率；</p>
<p>###自定义线程池拒绝策略</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRejectedHandler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService service = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">4</span>, <span class="number">4</span>,</span><br><span class="line">                <span class="number">0</span>, TimeUnit.SECONDS, <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">6</span>),</span><br><span class="line">                Executors.defaultThreadFactory(),</span><br><span class="line">                <span class="keyword">new</span> MyHandler());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span> <span class="keyword">implements</span> <span class="title">RejectedExecutionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor executor)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">3</span>;</span><br><span class="line">            <span class="comment">//try 3 times</span></span><br><span class="line">            <span class="keyword">while</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(executor.getQueue().size() &lt; <span class="number">6</span>) &#123;</span><br><span class="line">                    <span class="comment">//try put again();</span></span><br><span class="line">                &#125;</span><br><span class="line">                count--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 打印日志</span></span><br><span class="line">            <span class="comment">// 将任务存到kafka 或者mysql，看具体的业务</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>###自定义线程工厂<br>    1.利用Spring 框架提供的轮子 CustomizableThreadFactory</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ThreadFactory springFactory = <span class="keyword">new</span> CustomizableThreadFactory(<span class="string">&quot;spring-pool-&quot;</span>);</span><br><span class="line">ExecutorService exec = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">        <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">        <span class="keyword">new</span> ArrayBlockingQueue&lt;Runnable&gt;(<span class="number">100</span>), springFactory);</span><br></pre></td></tr></table></figure>

<pre><code>2.使用Google 开源框架guava提供的 ThreadFactoryBuilder 可以快速给线程池里的线程设置有意义的名字
</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ThreadFactory guavaFactory = <span class="keyword">new</span> ThreadFactoryBuilder().setNameFormat(<span class="string">&quot;guava-pool-&quot;</span>).build();</span><br><span class="line">ExecutorService exec = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">        <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">        <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(<span class="number">100</span>),guavaFactory );</span><br></pre></td></tr></table></figure>

<pre><code>3.Apache commons-lang3 提供的 BasicThreadFactory
</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ThreadFactory basicFactory = <span class="keyword">new</span> BasicThreadFactory.Builder().namingPattern(<span class="string">&quot;basicFactory-pool-&quot;</span>).build();</span><br><span class="line">ExecutorService exec = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">        <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">        <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(<span class="number">100</span>),basicFactory );</span><br></pre></td></tr></table></figure>

<pre><code>4.自己定义TreadFactory, 实现ThreadFactory接口,定义自己的线程名称
</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThreadFactory</span> <span class="keyword">implements</span> <span class="title">ThreadFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicInteger poolNumber = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ThreadGroup group;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger threadNumber = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String namePrefix;</span><br><span class="line"></span><br><span class="line">    MyThreadFactory() &#123;</span><br><span class="line">        SecurityManager s = System.getSecurityManager();</span><br><span class="line">        group = (s != <span class="keyword">null</span>) ? s.getThreadGroup() :</span><br><span class="line">                Thread.currentThread().getThreadGroup();</span><br><span class="line">        <span class="comment">//此处只修改了一下名字前缀</span></span><br><span class="line">        namePrefix = <span class="string">&quot;业务名称-&quot;</span> +</span><br><span class="line">                poolNumber.getAndIncrement() +</span><br><span class="line">                <span class="string">&quot;-thread-&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;---&gt;&quot;</span>+namePrefix);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(group, r,</span><br><span class="line">                namePrefix + threadNumber.getAndIncrement(),</span><br><span class="line">                <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (t.isDaemon())&#123;</span><br><span class="line">            t.setDaemon(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (t.getPriority() != Thread.NORM_PRIORITY)&#123;</span><br><span class="line">            t.setPriority(Thread.NORM_PRIORITY);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>###Disruptor<br>    核心：内部使用的环形buffer来存放还没来得及处理的任务，这个环形buffer使用数组来实现，让数组的尾内存地址指向头内存地址，<br>    使用数组的好处：<br>    1.数组的遍历速度是要高于链表的，所以这里作者没有选择ConcurrentLinkedQueue来作为任务队列<br>    2.不需要像阻塞队列一样需要去维护头指针和尾指针，环形只需要维护一个指针指向下一个可用的位置<br>    3.使用EventFactory提前为buffer中的每个位置创建好了Event对象，当向里面添加任务时，只要去修改Event的属性，只需要覆盖，不需要清除旧的数据，大大的减少了GC的频率；</p>
]]></content>
  </entry>
  <entry>
    <title>Class文件结构</title>
    <url>/2021/05/22/Class%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p>一.Java语言：跨平台的语言<br>    (1).正真实现Java跨平台的其实是字节码，Java源代码及其他可以编译成字节码码的语言编译后直接可以运行在各个平台的虚拟机上，实现了一次编译，到处运行；</p>
<p>二.Java虚拟机：跨语言的平台<br>    (1).Java虚拟机不和包括Java在内的任何语言绑定,它只与”Class”文件这种特定的二进制文件格式所关联</p>
<p>三.类文件结构有几个部分：</p>
<p>四.关于String一个题目：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过下述字节码文件可知</span></span><br><span class="line"><span class="comment">// 首先在堆中创建了StringBuilder对象，然后在堆中创建hello的String对象，然后调用了StringBuilder的Append</span></span><br><span class="line">方法拼接hello,然后又在堆中创建了world的String对象，然后再次调用了append方法拼接了world,最后调用了StringBuilder的toString方法，toString方法底层其实就是<span class="keyword">new</span>了一个String对象，相当于再次在堆中创建了helloworld的String对象。</span><br><span class="line">String str = <span class="keyword">new</span> String(<span class="string">&quot;hello&quot;</span>) + <span class="keyword">new</span> String(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"><span class="comment">// 下面这行注释若打开，第一个str == str1将为true,str调用intern方法，首先会查找字符串常量池中是</span></span><br><span class="line">否存在该字面值相同的字符串常量，若存在，则直接将该字符串常量引用返回指向str变量，若不存在，则在字符串常量池中创建该字符串常量，并返回引用指向str变量</span><br><span class="line"><span class="comment">// str.intern(); </span></span><br><span class="line"><span class="comment">// 在字符串常量池创建helloworld对象</span></span><br><span class="line">   String str1 = <span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line">   System.out.println(str == str1);  <span class="comment">// false</span></span><br><span class="line">   <span class="comment">// 再次在堆中创建新的helloworld对象，注意堆中可以存在字面值相同的但是引用不同的两个String对象,但是字符串常量池中一个字面值只能有一个对象</span></span><br><span class="line">   String str2 = <span class="keyword">new</span> String(<span class="string">&quot;helloworld&quot;</span>);</span><br><span class="line">   System.out.println(str == str2);  <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<pre><code>上述文件对应的字节指令
</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">0 new #2 &lt;java/lang/StringBuilder&gt;</span><br><span class="line"><span class="number">3</span> dup</span><br><span class="line">4 invokespecial #3 &lt;java/lang/StringBuilder.&lt;init&gt;&gt;</span><br><span class="line">7 new #4 &lt;java/lang/String&gt;</span><br><span class="line"><span class="number">10</span> dup</span><br><span class="line">11 ldc #5 &lt;hello&gt;</span><br><span class="line">13 invokespecial #6 &lt;java/lang/String.&lt;init&gt;&gt;</span><br><span class="line">16 invokevirtual #7 &lt;java/lang/StringBuilder.append&gt;</span><br><span class="line">19 new #4 &lt;java/lang/String&gt;</span><br><span class="line"><span class="number">22</span> dup</span><br><span class="line">23 ldc #8 &lt;world&gt;</span><br><span class="line">25 invokespecial #6 &lt;java/lang/String.&lt;init&gt;&gt;</span><br><span class="line">28 invokevirtual #7 &lt;java/lang/StringBuilder.append&gt;</span><br><span class="line">31 invokevirtual #9 &lt;java/lang/StringBuilder.toString&gt;</span><br><span class="line"><span class="number">34</span> astore_1</span><br><span class="line">35 ldc #10 &lt;helloworld&gt;</span><br><span class="line"><span class="number">37</span> astore_2</span><br><span class="line">38 getstatic #11 &lt;java/lang/System.out&gt;</span><br><span class="line"><span class="number">41</span> aload_1</span><br><span class="line"><span class="number">42</span> aload_2</span><br><span class="line"><span class="number">43</span> if_acmpne <span class="number">50</span> (+<span class="number">7</span>)</span><br><span class="line"><span class="number">46</span> iconst_1</span><br><span class="line"><span class="number">47</span> goto <span class="number">51</span> (+<span class="number">4</span>)</span><br><span class="line"><span class="number">50</span> iconst_0</span><br><span class="line">51 invokevirtual #12 &lt;java/io/PrintStream.println&gt;</span><br><span class="line">54 new #4 &lt;java/lang/String&gt;</span><br><span class="line"><span class="number">57</span> dup</span><br><span class="line">58 ldc #10 &lt;helloworld&gt;</span><br><span class="line">60 invokespecial #6 &lt;java/lang/String.&lt;init&gt;&gt;</span><br><span class="line"><span class="number">63</span> astore_3</span><br><span class="line">64 getstatic #11 &lt;java/lang/System.out&gt;</span><br><span class="line"><span class="number">67</span> aload_1</span><br><span class="line"><span class="number">68</span> aload_3</span><br><span class="line"><span class="number">69</span> if_acmpne <span class="number">76</span> (+<span class="number">7</span>)</span><br><span class="line"><span class="number">72</span> iconst_1</span><br><span class="line"><span class="number">73</span> goto <span class="number">77</span> (+<span class="number">4</span>)</span><br><span class="line"><span class="number">76</span> iconst_0</span><br><span class="line">77 invokevirtual #12 &lt;java/io/PrintStream.println&gt;</span><br><span class="line"><span class="number">80</span> <span class="keyword">return</span></span><br></pre></td></tr></table></figure>

<p>五.一个关于多态的题目：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">成员变量（非静态的）的赋值过程： ① 默认初始化 - ② 显式初始化 /代码块中初始化 - ③ 构造器中初始化 - ④ 有了对象之后，可以“对象.属性”或&quot;对象.方法&quot;</span></span><br><span class="line"><span class="comment"> 的方式对成员变量进行赋值。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Father</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	<span class="comment">// 3.此时x只进行了默认初始化，x =0</span></span><br><span class="line">        <span class="keyword">this</span>.print();</span><br><span class="line">        <span class="comment">// 5.将x赋值为20</span></span><br><span class="line">        x = <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	<span class="comment">// 4.打印x = 0</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Father.x = &quot;</span> + x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 1.默认赋值后，执行属性赋值x=30</span></span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">30</span>;</span><br><span class="line"><span class="comment">//    float x = 30.1F;</span></span><br><span class="line">	<span class="comment">// 2.执行字类构造方法前首先执行父类构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Son</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	<span class="comment">// 6.打印x = 30</span></span><br><span class="line">        <span class="keyword">this</span>.print();</span><br><span class="line">        <span class="comment">// 7.将x赋值为40</span></span><br><span class="line">        x = <span class="number">40</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Son.x = &quot;</span> + x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SonTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Father f = <span class="keyword">new</span> Son();</span><br><span class="line">        <span class="comment">// 注意成员变量属性无多态特性</span></span><br><span class="line">        System.out.println(f.x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>六.Class类的本质：<br>    Class文件是一组以8位字节为基础单位的二进制流</p>
<p>七.Class文件结构：<br>    (1).魔数：识别当前文件是一个Class文件;都是以ca fe ba be开始的（4个字节）<br>    (2).Class文件版本；（5，6两个字节代表副版本；7,8两个字节代表主版本）<br>    (3).常量池；<br>    – 常量池计数器 = 常量池表的实际长度 + 1<br>    –(如方法的符号引用，参数字面量，参数类型，方法返回值字面量，返回值类型，字段的符号引用，字段类型等)<br>    –（前两个字节，常量池计数器，后n个字节常量池表）<br>    –（常量池表项中，用于存放编译时期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放）<br>    (4).访问标识；（标记是类、接口、枚举；标记访问权限；标记是否是抽象类；标记是否有final修饰）<br>    (5).类索引、父类索引、接口索引：（类索引；父类索引；接口计数器；实现接口集合）<br>    (6).字段（Filed属性）表集合：（类级变量以及实例实例变量，不包含局部变量；字段表计数器；字段访问标识<br>    字段名索引；字段描述符索引;字段属性计数器;属性表集合）<br>    (7).方法表集合:(方法计数器;方法表；方法访问标识;方法名索引;方法描述符索引;方法的属性计数器;<br>    属性计数器；属性名索引;属性长度；操作数栈的最大深度；局部变量表的长度；字节码指令的长度；具体的字节码指令；异常表的长度；Code中的属性计数器；LineNumberTable_attribute；LocalVariableTable_attribute)<br>    (8).属性表集合:(不是我们平时所说的类的属性,指的是class文件的辅助信息；附加属性计数器，属性名索引；<br>    属性的长度；源码文件索引；源码文件名称)</p>
<p>八.javac -g 操作说明:相对于javac会多编译出一些局部变量表信息，IDEA使用同样是javac -g</p>
<p>九.javap命令的参数说明：<br>  -version                         版本信息<br>  -public                          仅显示公共类和成员<br>  -protected                       显示受保护的/公共类和成员<br>  -package                         显示程序包/受保护的/公共类和成员 (默认)<br>  -sysinfo                         显示正在处理的类的系统信息 (路径, 大小, 日期, MD5 散列)</p>
<p>  -p  -private                     显示所有类和成员<br>  -v  -verbose                     输出附加信息<br>  -c                               对代码进行反汇编<br>  -s                               输出内部类型签名<br>  -l                               输出行号和本地变量表</p>
<p>  -constants                       显示最终常量<br>  –module &lt;模块&gt;, -m &lt;模块&gt;       指定包含要反汇编的类的模块<br>  –module-path &lt;路径&gt;             指定查找应用程序模块的位置<br>  –system <jdk>                   指定查找系统模块的位置<br>  –class-path &lt;路径&gt;              指定查找用户类文件的位置<br>  -classpath &lt;路径&gt;                指定查找用户类文件的位置<br>  -cp &lt;路径&gt;                       指定查找用户类文件的位置<br>  -bootclasspath &lt;路径&gt;            覆盖引导类文件的位置<br>注意：想要看到最全的文件结构使用javap -v -p</jdk></p>
<p>十.各基本数据类型所占的字节数及槽位数及对应的指令标识（short,byte,char,Boolean都表示为带符号的int）：<br>    byte:二进制位数为8，占1个字节，（-2^7 –&gt; 2^7-1）,占1个slot<br>    short:二进制位数为16，占2个字节，（-2^15 –&gt; 2^15-1）,占1个slot<br>    char:二进制位数为16，占2个字节，（0 –&gt; 2^16-1）,占1个slot<br>    Boolean:二进制位数为1，占1个字节，（true,false）,占1个slot<br>    int:二进制位数为32，占4个字节，（-2^31 –&gt; 2^31-1）,占1个slot<br>    float:二进制位数为32，占4个字节，（3.402823e+38 ~ 1.401298e-45）,占1个slot<br>    long:二进制位数为64，占8个字节，（-2^63 –&gt; 2^63-1）,占2个slot<br>    double:二进制位数为64，占8个字节，（1.797693e+308~ 4.9000000e-324）,占2个slot</p>
<p>十一.类型转换:<br>    宽化类型转换：int –&gt; long –&gt; float –&gt; double（i2l,l2f,f2d）<br>    宽化类型转换依然会出现精度损失问题（long(8个字节)–&gt;float(4个字节)）：如下实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upCast2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">123123123</span>;</span><br><span class="line">        <span class="keyword">float</span> f = i;</span><br><span class="line">        System.out.println(f);<span class="comment">//123123120</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> l = <span class="number">123123123123L</span>;</span><br><span class="line">        l = <span class="number">123123123123123123L</span>;</span><br><span class="line">        <span class="keyword">double</span> d = l;</span><br><span class="line">        System.out.println(d);<span class="comment">//123123123123123120</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<pre><code>窄化类型转换：int --&gt; byte, int --&gt;short, int --&gt; char(i2b,i2s,i2c)
long --&gt; int(l2i), float --&gt; int(f2i), float --&gt; long(f2l),double --&gt; int(d2i),
double --&gt; long(d2l),double --&gt; float(d2f)
精度损失：JVM底层不会抛运行时异常
代码样例：
</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downCast3</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">short</span> s = <span class="number">10</span>;</span><br><span class="line">   	<span class="keyword">byte</span> b = (<span class="keyword">byte</span>)s;<span class="comment">// i2b		</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//窄化类型转换的精度损失</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downCast4</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">int</span> i = <span class="number">128</span>;</span><br><span class="line">       <span class="keyword">byte</span> b = (<span class="keyword">byte</span>)i;</span><br><span class="line">       System.out.println(b);<span class="comment">//-128</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>十二.NaN和无穷大</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试NaN,无穷大的情况</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downCast5</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">double</span> d1 = Double.NaN; <span class="comment">//0.0 / 0.0</span></span><br><span class="line">       <span class="keyword">int</span> i = (<span class="keyword">int</span>)d1;</span><br><span class="line">       System.out.println(d1);</span><br><span class="line">       System.out.println(i);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">double</span> d2 = Double.POSITIVE_INFINITY;</span><br><span class="line">       <span class="keyword">long</span> l = (<span class="keyword">long</span>)d2;</span><br><span class="line">       <span class="keyword">int</span> j = (<span class="keyword">int</span>)d2;</span><br><span class="line">       System.out.println(l); <span class="comment">// Long.MAX_VALUE</span></span><br><span class="line">       System.out.println(Long.MAX_VALUE);</span><br><span class="line">       System.out.println(j); <span class="comment">// Integer.MAX_VALUE</span></span><br><span class="line">       System.out.println(Integer.MAX_VALUE);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">float</span> f = (<span class="keyword">float</span>)d2;</span><br><span class="line">       System.out.println(f); <span class="comment">// Infinity</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">float</span> f1 = (<span class="keyword">float</span>)d1;</span><br><span class="line">       System.out.println(f1);<span class="comment">// NaN</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>十三.题目：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">nextIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// index的值为1了，但是返回的是0</span></span><br><span class="line">       <span class="keyword">return</span> index++;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">long</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  	<span class="comment">//字节指令如下：</span></span><br><span class="line">  	 <span class="number">0</span> aload_0</span><br><span class="line"> <span class="number">1</span> dup</span><br><span class="line"> 2 getfield #2 &lt;com/atguigu/java/StackOperateTest.index&gt;</span><br><span class="line"> <span class="number">5</span> dup2_x1</span><br><span class="line"> <span class="number">6</span> lconst_1</span><br><span class="line"> <span class="number">7</span> ladd</span><br><span class="line"> 8 putfield #2 &lt;com/atguigu/java/StackOperateTest.index&gt;</span><br><span class="line"><span class="number">11</span> lreturn</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分析如上字节指令</span></span><br><span class="line"><span class="number">0</span> 将<span class="keyword">this</span>对象引用地址加载到操作数栈（非静态方法局部变量表第<span class="number">0</span>位是<span class="keyword">this</span>的引用地址）</span><br><span class="line"><span class="number">1</span> 复制<span class="keyword">this</span>引用地址</span><br><span class="line"><span class="number">2</span> 调用<span class="keyword">this</span>的getfield(这个field不是显式的写在类中的方法)，意思是获取index字段值（此时顶部的<span class="keyword">this</span>引用</span><br><span class="line">出栈,index字段入栈值为<span class="number">0</span>，<span class="keyword">long</span>类型占<span class="number">2</span>个slot）</span><br><span class="line"><span class="number">5</span> 复制两个slot的index下移<span class="number">3</span>位(值为<span class="number">0</span>)，也就是移到<span class="keyword">this</span>引用地址的下面</span><br><span class="line"><span class="number">6</span> 加载<span class="number">1</span>进入操作数栈</span><br><span class="line"><span class="number">7</span> 栈顶的index(值为<span class="number">0</span>)与<span class="number">1</span>相加</span><br><span class="line"><span class="number">8</span> 栈顶做完加法的index（值为<span class="number">1</span>）出栈</span><br><span class="line"><span class="number">11</span> 最后返回栈中index(值为<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>十四.swithch case的特殊情况：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//jdk7新特性：引入String类型</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swtich3</span><span class="params">(String season)</span></span>&#123;</span><br><span class="line">       <span class="keyword">switch</span>(season)&#123;</span><br><span class="line">           <span class="keyword">case</span> <span class="string">&quot;SPRING&quot;</span>:<span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="string">&quot;SUMMER&quot;</span>:<span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="string">&quot;AUTUMN&quot;</span>:<span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="string">&quot;WINTER&quot;</span>:<span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 字节指令如下：</span></span><br><span class="line">     <span class="number">0</span> aload_1</span><br><span class="line">  <span class="number">1</span> astore_2</span><br><span class="line">  <span class="number">2</span> iconst_m1</span><br><span class="line">  <span class="number">3</span> istore_3</span><br><span class="line">  <span class="number">4</span> aload_2</span><br><span class="line">  5 invokevirtual #11 &lt;java/lang/String.hashCode&gt;</span><br><span class="line">  <span class="number">8</span> lookupswitch <span class="number">4</span></span><br><span class="line">	-<span class="number">1842350579</span>:  <span class="number">52</span> (+<span class="number">44</span>)</span><br><span class="line">	-<span class="number">1837878353</span>:  <span class="number">66</span> (+<span class="number">58</span>)</span><br><span class="line">	-<span class="number">1734407483</span>:  <span class="number">94</span> (+<span class="number">86</span>)</span><br><span class="line">	<span class="number">1941980694</span>:  <span class="number">80</span> (+<span class="number">72</span>)</span><br><span class="line">	<span class="keyword">default</span>:  <span class="number">105</span> (+<span class="number">97</span>)</span><br><span class="line"> <span class="number">52</span> aload_2</span><br><span class="line"> 53 ldc #12 &lt;SPRING&gt;</span><br><span class="line"> 55 invokevirtual #13 &lt;java/lang/String.equals&gt;</span><br><span class="line"> <span class="number">58</span> ifeq <span class="number">105</span> (+<span class="number">47</span>)</span><br><span class="line"> <span class="number">61</span> iconst_0</span><br><span class="line"> <span class="number">62</span> istore_3</span><br><span class="line"> <span class="number">63</span> goto <span class="number">105</span> (+<span class="number">42</span>)</span><br><span class="line"> <span class="number">66</span> aload_2</span><br><span class="line"> 67 ldc #14 &lt;SUMMER&gt;</span><br><span class="line"> 69 invokevirtual #13 &lt;java/lang/String.equals&gt;</span><br><span class="line"> <span class="number">72</span> ifeq <span class="number">105</span> (+<span class="number">33</span>)</span><br><span class="line"> <span class="number">75</span> iconst_1</span><br><span class="line"> <span class="number">76</span> istore_3</span><br><span class="line"> <span class="number">77</span> goto <span class="number">105</span> (+<span class="number">28</span>)</span><br><span class="line"> <span class="number">80</span> aload_2</span><br><span class="line"> 81 ldc #15 &lt;AUTUMN&gt;</span><br><span class="line"> 83 invokevirtual #13 &lt;java/lang/String.equals&gt;</span><br><span class="line"> <span class="number">86</span> ifeq <span class="number">105</span> (+<span class="number">19</span>)</span><br><span class="line"> <span class="number">89</span> iconst_2</span><br><span class="line"> <span class="number">90</span> istore_3</span><br><span class="line"> <span class="number">91</span> goto <span class="number">105</span> (+<span class="number">14</span>)</span><br><span class="line"> <span class="number">94</span> aload_2</span><br><span class="line"> 95 ldc #16 &lt;WINTER&gt;</span><br><span class="line"> 97 invokevirtual #13 &lt;java/lang/String.equals&gt;</span><br><span class="line"><span class="number">100</span> ifeq <span class="number">105</span> (+<span class="number">5</span>)</span><br><span class="line"><span class="number">103</span> iconst_3</span><br><span class="line"><span class="number">104</span> istore_3</span><br><span class="line"><span class="number">105</span> iload_3</span><br><span class="line"><span class="number">106</span> tableswitch <span class="number">0</span> to <span class="number">3</span>	<span class="number">0</span>:  <span class="number">136</span> (+<span class="number">30</span>)</span><br><span class="line">	<span class="number">1</span>:  <span class="number">139</span> (+<span class="number">33</span>)</span><br><span class="line">	<span class="number">2</span>:  <span class="number">142</span> (+<span class="number">36</span>)</span><br><span class="line">	<span class="number">3</span>:  <span class="number">145</span> (+<span class="number">39</span>)</span><br><span class="line">	<span class="keyword">default</span>:  <span class="number">145</span> (+<span class="number">39</span>)</span><br><span class="line"><span class="number">136</span> goto <span class="number">145</span> (+<span class="number">9</span>)</span><br><span class="line"><span class="number">139</span> goto <span class="number">145</span> (+<span class="number">6</span>)</span><br><span class="line"><span class="number">142</span> goto <span class="number">145</span> (+<span class="number">3</span>)</span><br><span class="line"><span class="number">145</span> <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//分析如上字节指令：</span></span><br><span class="line">通过以上的字节码可以发现：对比String是否相同先调用了hashCode方法对比hashcode值是否相同，然后在调用equals方法进行对比</span><br></pre></td></tr></table></figure>

<p>十五.同步控制指令（synchronized）：<br>    概述：java虚拟机支持两种同步结构:方法级的同步和方法内部一段指令序列的同步，这两种同步都是使用monitor来支持的。<br>    (1).方法级的同步:是隐式的,即无须通过字节码指令来控制,它实现在方法调用和返回操作之中。虚拟机可以从方法常量池的方法表结构中的ACC_SYNCHRONIZED访问标志得知一个方法是否声明为同步方法;<br>       1.当调用方法时,调用指令将会检查方法的AC_SYNCHRONIZED访问标志是否设置。<br>       2.如果设置了,执行线程将先持有同步锁,然后执行方法。最后在方法完成(无论是正常完成还是非正常完成)时释放同步锁。<br>       3.在方法执行期间,执行线程持有了同步锁,其他任何线程都无法再获得同一个锁。<br>       4.如果一个同步方法执行期间抛出了异常,并且在方法内部无法处理此异常,那这个同步方法所持有的锁将在异常抛到同步方法之外时自动释放。<br>    (2).方法内指定指令序列的同步:<br>    同步一段指令集序列:通常是由java中的synchronized语句块来表示的。jvm的指令集有 monitorenter和monitorexit两条指令来<br>    支持synchronized关键字的语义。<br>    当一个线程进入同步代码块时，它使用monitorenter指令请求进入。如果当前对象的监视器计数器为0，则它会被准许进入，若为1，则判断持有当前监视器的线程是否为自己，如果是，则进入，否则进行等待，直到对象的监视器计数器为0，才会被允许进入同步块。</p>
<pre><code>当线程退出同步块时，需要使用monitorexit声明退出。在Java虚拟机中，任何对象都有一个监视器与之相关联，用来判断对象是否被锁定，当监视器被持有后，对象处于锁定状态。

指令monitorenter和monitorexit在执行时，都需要在操作数栈顶压入对象，之后monitorenter和monitorexit的锁定和释放都是针对这个对象的监视器进行的。

下图展示了监视器如何保护临界区代码不同时被多个线程访问，只有当线程4离开临界区后，线程1、2、3才有可能进入。
![](/images/jvm/多线程访问同步代码块示例图.jpg)
</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">       i++;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//字节码指令如下：</span></span><br><span class="line">    <span class="number">0</span> aload_0</span><br><span class="line"> <span class="number">1</span> dup</span><br><span class="line"> 2 getfield #2 &lt;com/atguigu/java1/SynchronizedTest.i&gt;</span><br><span class="line"> <span class="number">5</span> iconst_1</span><br><span class="line"> <span class="number">6</span> iadd</span><br><span class="line"> 7 putfield #2 &lt;com/atguigu/java1/SynchronizedTest.i&gt;</span><br><span class="line"><span class="number">10</span> <span class="keyword">return</span> </span><br><span class="line"><span class="comment">// 方法签名相关信息：</span></span><br><span class="line">Name: cp_info#21 &lt;add&gt;</span><br><span class="line">Descriptor: cp_info#11 &lt;()V&gt;</span><br><span class="line">Access Flags: <span class="number">0x0021</span>[<span class="keyword">public</span> <span class="keyword">synchronized</span>]</span><br><span class="line"><span class="comment">//字节码解析如下：</span></span><br><span class="line">通过字节码指令可以看到，当<span class="keyword">synchronized</span>标记方法时，字节码指令没有发生任何变化，但是方法前面签名信息会带上<span class="keyword">synchronized</span>关键字</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subtract</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">           i--;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//字节码指令如下：</span></span><br><span class="line">    <span class="number">0</span> aload_0</span><br><span class="line"> 1 getfield #4 &lt;com/atguigu/java1/SynchronizedTest.obj&gt;</span><br><span class="line"> <span class="number">4</span> dup</span><br><span class="line"> <span class="number">5</span> astore_1</span><br><span class="line"> <span class="number">6</span> monitorenter</span><br><span class="line"> <span class="number">7</span> aload_0</span><br><span class="line"> <span class="number">8</span> dup</span><br><span class="line"> 9 getfield #2 &lt;com/atguigu/java1/SynchronizedTest.i&gt;</span><br><span class="line"><span class="number">12</span> iconst_1</span><br><span class="line"><span class="number">13</span> isub</span><br><span class="line">14 putfield #2 &lt;com/atguigu/java1/SynchronizedTest.i&gt;</span><br><span class="line"><span class="number">17</span> aload_1</span><br><span class="line"><span class="number">18</span> monitorexit</span><br><span class="line"><span class="number">19</span> goto <span class="number">27</span> (+<span class="number">8</span>)</span><br><span class="line"><span class="number">22</span> astore_2</span><br><span class="line"><span class="number">23</span> aload_1</span><br><span class="line"><span class="number">24</span> monitorexit</span><br><span class="line"><span class="number">25</span> aload_2</span><br><span class="line"><span class="number">26</span> athrow</span><br><span class="line"><span class="number">27</span> <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//字节码解析如下：</span></span><br><span class="line">通过字节码指令</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Spring源码总结</title>
    <url>/2021/02/18/Spring%E6%BA%90%E7%A0%81%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>我们会在 web.xml 中配置 ContextLoaderListener 监听器，当 Tomcat 启动时，会触发 ContextLoaderListener 的 contextInitialized 方法，但是在执行该方法前，会去先执行父类的静态代码块</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">		<span class="comment">// Load default strategy implementations from properties file.</span></span><br><span class="line">		<span class="comment">// This is currently strictly internal and not meant to be customized</span></span><br><span class="line">		<span class="comment">// by application developers.</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// 1.根据 DEFAULT_STRATEGIES_PATH（ContextLoader.properties） 和 ContextLoader.class 构建 ClassPathResource，</span></span><br><span class="line">			<span class="comment">// path在这边为相对路径，全路径为：org.springframework.web.context.ContextLoader.properties</span></span><br><span class="line">			ClassPathResource resource = <span class="keyword">new</span> ClassPathResource(DEFAULT_STRATEGIES_PATH, ContextLoader.class);</span><br><span class="line">			<span class="comment">// 2.加载resource的属性，在这边我们拿到了默认的WebApplicationContext，即：XmlWebApplicationContext</span></span><br><span class="line">			defaultStrategies = PropertiesLoaderUtils.loadProperties(resource);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Could not load &#x27;ContextLoader.properties&#x27;: &quot;</span> + ex.getMessage());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码主要作用是，根据spring-web工程下的ContextLoader.properties文件构建ClassPathResource，然后根据文件内容初始化ContextLoader的defaultStrategies属性；</p>
<p>接下来就回去执行ContextLoaderListener的contextInitialized方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initialize the root web application context.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent event)</span> </span>&#123;</span><br><span class="line">	initWebApplicationContext(event.getServletContext());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> WebApplicationContext <span class="title">initWebApplicationContext</span><span class="params">(ServletContext servletContext)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 1.校验WebApplicationContext 是否已经初始化过，如果已经初始化，则抛出异常</span></span><br><span class="line">		<span class="keyword">if</span> (servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE) != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">					<span class="string">&quot;Cannot initialize context because there is already a root application context present - &quot;</span> +</span><br><span class="line">					<span class="string">&quot;check whether you have multiple ContextLoader* definitions in your web.xml!&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		servletContext.log(<span class="string">&quot;Initializing Spring root WebApplicationContext&quot;</span>);</span><br><span class="line">		Log logger = LogFactory.getLog(ContextLoader.class);</span><br><span class="line">		<span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">			logger.info(<span class="string">&quot;Root WebApplicationContext: initialization started&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// Store context in local instance variable, to guarantee that</span></span><br><span class="line">			<span class="comment">// it is available on ServletContext shutdown.</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.context == <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="comment">// 2.创建一个WebApplicationContext并保存到context属性</span></span><br><span class="line">				<span class="keyword">this</span>.context = createWebApplicationContext(servletContext);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.context <span class="keyword">instanceof</span> ConfigurableWebApplicationContext) &#123;</span><br><span class="line">				ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) <span class="keyword">this</span>.context;</span><br><span class="line">				<span class="keyword">if</span> (!cwac.isActive()) &#123;</span><br><span class="line">					<span class="comment">// The context has not yet been refreshed -&gt; provide services such as</span></span><br><span class="line">					<span class="comment">// setting the parent context, setting the application context id, etc</span></span><br><span class="line">					<span class="keyword">if</span> (cwac.getParent() == <span class="keyword">null</span>) &#123;</span><br><span class="line">						<span class="comment">// The context instance was injected without an explicit parent -&gt;</span></span><br><span class="line">						<span class="comment">// determine parent for root web application context, if any.</span></span><br><span class="line">						ApplicationContext parent = loadParentContext(servletContext);</span><br><span class="line">						cwac.setParent(parent);</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="comment">// 3.配置和刷新web应用上下文</span></span><br><span class="line">					configureAndRefreshWebApplicationContext(cwac, servletContext);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, <span class="keyword">this</span>.context);</span><br><span class="line"></span><br><span class="line">			ClassLoader ccl = Thread.currentThread().getContextClassLoader();</span><br><span class="line">			<span class="keyword">if</span> (ccl == ContextLoader.class.getClassLoader()) &#123;</span><br><span class="line">				currentContext = <span class="keyword">this</span>.context;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (ccl != <span class="keyword">null</span>) &#123;</span><br><span class="line">				currentContextPerThread.put(ccl, <span class="keyword">this</span>.context);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">				<span class="keyword">long</span> elapsedTime = System.currentTimeMillis() - startTime;</span><br><span class="line">				logger.info(<span class="string">&quot;Root WebApplicationContext initialized in &quot;</span> + elapsedTime + <span class="string">&quot; ms&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.context;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (RuntimeException | Error ex) &#123;</span><br><span class="line">			logger.error(<span class="string">&quot;Context initialization failed&quot;</span>, ex);</span><br><span class="line">			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ex);</span><br><span class="line">			<span class="keyword">throw</span> ex;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>该方法的核心内容在第3步：配置和刷新web应用上下文(见下面代码块)，<br>其中第2步：创建一个WebApplicationContext并保存到context属性会用到defaultStrategies属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configureAndRefreshWebApplicationContext</span><span class="params">(ConfigurableWebApplicationContext wac, ServletContext sc)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 1.如果应用上下文id是原始默认值，则根据相关信息生成一个更有用的</span></span><br><span class="line">		<span class="keyword">if</span> (ObjectUtils.identityToString(wac).equals(wac.getId())) &#123;</span><br><span class="line">			<span class="comment">// The application context id is still set to its original default value</span></span><br><span class="line">			<span class="comment">// -&gt; assign a more useful id based on available information</span></span><br><span class="line">			<span class="comment">// 1.1 从servletContext中解析初始化参数contextId(可以在web.xml中配置)</span></span><br><span class="line">			String idParam = sc.getInitParameter(CONTEXT_ID_PARAM);</span><br><span class="line">			<span class="keyword">if</span> (idParam != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="comment">// 1.1.1 如果idParam不为空, 则设置为wac的Id属性</span></span><br><span class="line">				wac.setId(idParam);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="comment">// Generate default id...</span></span><br><span class="line">				<span class="comment">// 1.1.2 如果idParam为空, 则生成默认的id, 例如: org.springframework.web.context.WebApplicationContext:</span></span><br><span class="line">				wac.setId(ConfigurableWebApplicationContext.APPLICATION_CONTEXT_ID_PREFIX +</span><br><span class="line">						ObjectUtils.getDisplayString(sc.getContextPath()));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 2.为应用上下文设置servletContext</span></span><br><span class="line">		wac.setServletContext(sc);</span><br><span class="line">		<span class="comment">// 3.从servletContext中解析初始化参数contextConfigLocation(可以在web.xml中配置, 这个参数一般我们都会设置)</span></span><br><span class="line">		String configLocationParam = sc.getInitParameter(CONFIG_LOCATION_PARAM);</span><br><span class="line">		<span class="keyword">if</span> (configLocationParam != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="comment">// 4.设置wac的configLocations属性值为configLocationParam,还会初始化环境属性</span></span><br><span class="line">			wac.setConfigLocation(configLocationParam);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// The wac environment&#x27;s #initPropertySources will be called in any case when the context</span></span><br><span class="line">		<span class="comment">// is refreshed; do it eagerly here to ensure servlet property sources are in place for</span></span><br><span class="line">		<span class="comment">// use in any post-processing or initialization that occurs below prior to #refresh</span></span><br><span class="line">		ConfigurableEnvironment env = wac.getEnvironment();</span><br><span class="line">		<span class="keyword">if</span> (env <span class="keyword">instanceof</span> ConfigurableWebEnvironment) &#123;</span><br><span class="line">			<span class="comment">// 5.初始化属性源(主要是将servletContextInitParams的占位类替换成sc)</span></span><br><span class="line">			((ConfigurableWebEnvironment) env).initPropertySources(sc, <span class="keyword">null</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 6.自定义上下文</span></span><br><span class="line">		customizeContext(sc, wac);</span><br><span class="line">		<span class="comment">// 7.应用上下文的刷新</span></span><br><span class="line">		wac.refresh();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>4.设置 wac 的 configLocations 属性值为 configLocationParam，</p>
<p>5.初始化属性源，见代码块11详解。</p>
<p>6.自定义上下文，见代码块12详解。</p>
<p>7.应用上下文的刷新，IoC 核心内容</p>
<p>总结：初始化IOC容器之前的一些操作：<br>    1.根据spring-web工程下的ContextLoader.properties文件构建ClassPathResource，然后根据文件内容初始化ContextLoader的defaultStrategies属性；<br>    2.根据defaultStrategies属性创建WebApplicationContext，这里创建的是XmlWebApplicationContext并强转为ConfigurableWebApplicationContext;<br>    3.将web.xml配置文件中的属性都初始化到ConfigurableWebApplicationContext中，创建并初始化环境属性；<br>    4.将ServletContext替换掉ConfigurableWebEnvironment环境中的占位符；<br>    5.自定义上下文，开发者可以自己创建ApplicationContextInitializer的实现类，重写initialize，向ConfigurableApplicationContext上下文中添加自己的逻辑实现；并在web.xml中定义 contextInitializerClasses 或 globalInitializerClasses 参数，参数值为自定义实现类的全路径；此处是Spring提供的自定义应用上下文 ConfigurableApplicationContext 的扩展点；<br>    6.执行应用上下文的刷新，也就是核心方法refresh()方法；</p>
<p>obtainFreshBeanFactory方法：<br>总结：<br>    1.创建DefaultListableBeanFactory；<br>    2.为指定BeanFactory创建XmlBeanDefinitionReader；<br>    3.获取配置文件路径集合，遍历文件路径；（就是为了将配置文件封装成Resource对象和获取到inputStream）<br>        3.1.根据路径拿到该路径下所有符合的配置文件，并封装成Resource集合;<br>        3.2.遍历Resource集合，构建EncodedResource，并获取到Resource的inputStream<br>        3.3.将inputStream封装成org.xml.sax.InputSource<br>    4.解析配置文件，注册Bean；<br>        4.1.根据inputSource和resource加载XML文件，并封装成Document<br>            4.1.1.获取XML配置文件的验证模式。XML文件的验证模式是用来保证XML文件的正确性，常见的验证模式有两种：DTD和XSD<br>        4.2.根据返回的Document注册Bean信息(对配置文件的解析，核心逻辑)<br>            4.2.1.根据resource创建一个XmlReaderContext,用于存放解析时会用到的一些上下文信息,并且会去构建NamespaceHandlerResolver,DefaultNamespaceHandlerResolver的handlerMappingsLocation属性会使用默认的值”META-INF/spring.handlers”，<br>            并且这边有个重要的属性 handlerMappings，handlerMappings 用于存放命名空间和该命名空间handler类的映射<br>            4.2.2.根据Document的节点信息和XmlReaderContext构建BeanDefinitionParserDelegate，并赋值给DefaultBeanDefinitionDocumentReader的delegate属性；<br>            4.2.3.解析处理profile属性,profile属性主要用于多环境开发,可以在配置文件中同时写上多套配置来适用于开发环境、测试环境、生产环境，这样可以方便的进行切换开发、部署环境，最常用的就是更换不同的数据库。具体使用哪个环境在 web.xml 中通过参数 spring.profiles.active 来配置；<br>            4.2.4.解析前处理, 留给子类实现；<br>            4.2.5.解析并注册bean定义;<br>                4.2.5.1.遍历root的子节点列表;<br>                4.2.5.1.如果节点的命名空间是 Spring 默认的命名空间，则走 parseDefaultElement(ele, delegate) 方法进行解析，例如最常见的：<bean>;<br>                4.2.5.2.如果节点的命名空间不是 Spring 默认的命名空间，也就是自定义命名空间，则走 delegate.parseCustomElement(ele) 方法进行解析，例如常见的：<a href="context:component-scan/">context:component-scan/</a>、<a href="aop:aspectj-autoproxy/">aop:aspectj-autoproxy/</a>;<br>            4.2.6.解析后处理, 留给子类实现；</bean></p>
<p>parseDefaultElement(ele, delegate)总结：<br>    先将 xml 中的 bean 配置信息进行了解析，并构建了 AbstractBeanDefinition（GenericBeanDefinition） 对象来存放所有解析出来的属性。<br>    然后，我们将 AbstractBeanDefinition 、beanName、aliasesArray 构建成 BeanDefinitionHolder 对象并返回。<br>    最后，我们通过 BeanDefinitionHolder 将 BeanDefinition 和 beanName 注册到 BeanFactory 中，也就是存放到缓存中。<br>    执行完 parseDefaultElement 方法，我们得到了两个重要的缓存：<br>        beanDefinitionNames 缓存；<br>        beanDefinitionMap 缓存；<br>        aliasMap缓存；<br>    beanDefinitionMap：DefaultListableBeanFactory的属性,用于存放bean name与BeanDefinition的映射关系</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Map of bean definition objects, keyed by bean name. */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, BeanDefinition&gt; beanDefinitionMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">256</span>);</span><br></pre></td></tr></table></figure>
<pre><code>beanDefinitionNames:DefaultListableBeanFactory的属性,用于存放bean name集合
</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** List of bean definition names, in registration order. */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> List&lt;String&gt; beanDefinitionNames = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">256</span>);</span><br></pre></td></tr></table></figure>
<pre><code>aliasMap:SimpleAliasRegistry的属性，用于别名和beanName的映射
</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Map from alias to canonical name. */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, String&gt; aliasMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">16</span>);</span><br></pre></td></tr></table></figure>

<p>BeanDefinition是什么：<br>    BeanDefinition主要是用来描述Bean，存储Bean的相关信息，主要包括：Bean的属性、是否单例、延迟加载、Bean的名称、构造方法等；<br>        1.BeanDefinition继承了AttributeAccessor，具备处理属性的能力；<br>        2.BeanDefinition继承了BeanMetadataElement，可以持有Bean元数据元素，作用是可以持有XML文件的一个bean标签对应的Object；</p>
]]></content>
  </entry>
  <entry>
    <title>synchronized</title>
    <url>/2020/10/19/synchronized/</url>
    <content><![CDATA[<p>###synchronized关键字：<br>    理解：<br>    （1）JMM使用了临界区（加锁）来保证程序的顺序执行，但是在临界区内是允许出现指令重排的（JMM不允许临界区内的代码“逸出”到临界区之外，那样会破坏监视器的语义）。<br>    （2）只有获取到synchronized锁对象的线程才可以执行临界区的代码；<br>    1.注意：不是锁住某段代码块，而是对某个对象加锁，只有持有这个对象锁的线程才可以执行synchronized代码块；<br>    2.synchronized(object),锁对象不要用String常量，Integer,Long</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySynchronized</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            count --;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;count:&quot;</span> + count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 与上面方法等价</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">n</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        count --;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;count:&quot;</span> + count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里等同于synchronized(MySynchronized.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">k</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>###关于synchronized的代码案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// synchronized可以保证原子性和可见性</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 不需要volatile</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// synchronized可以保证原子性和可见性</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		count--;</span><br><span class="line">		System.out.println(Thread.currentThread().getName() + <span class="string">&quot; count = &quot;</span> + count);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">			T t = <span class="keyword">new</span> T();</span><br><span class="line">			<span class="keyword">new</span> Thread(t, <span class="string">&quot;THREAD&quot;</span> + i).start();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加了synchronized的m1方法不影响m2的执行</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123; </span><br><span class="line">		System.out.println(Thread.currentThread().getName() + <span class="string">&quot; m1 start...&quot;</span>);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(Thread.currentThread().getName() + <span class="string">&quot; m1 end&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(Thread.currentThread().getName() + <span class="string">&quot; m2 &quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		T t = <span class="keyword">new</span> T();</span><br><span class="line">		<span class="keyword">new</span> Thread(t::m1, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">		<span class="keyword">new</span> Thread(t::m2, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 锁的可重入</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;m1 start&quot;</span>);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		m2();</span><br><span class="line">		System.out.println(<span class="string">&quot;m1 end&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">&quot;m2&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">new</span> T().m1();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在父类与子类中锁依然是可重入的</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;m start&quot;</span>);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">&quot;m end&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">new</span> TT().m();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TT</span> <span class="keyword">extends</span> <span class="title">T</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;child m start&quot;</span>);</span><br><span class="line">		<span class="keyword">super</span>.m();</span><br><span class="line">		System.out.println(<span class="string">&quot;child m end&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>###锁和异常<br>    当持有锁的线程发生异常，会释放锁，导致其他线程持有锁，造成数据不一致</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(Thread.currentThread().getName() + <span class="string">&quot; start&quot;</span>);</span><br><span class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">			count ++;</span><br><span class="line">			System.out.println(Thread.currentThread().getName() + <span class="string">&quot; count = &quot;</span> + count);</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">				</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span>(count == <span class="number">5</span>) &#123;</span><br><span class="line">				<span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>; <span class="comment">//此处抛出异常，锁将被释放，要想不被释放，可以在这里进行catch，然后让循环继续</span></span><br><span class="line">				System.out.println(i);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		T t = <span class="keyword">new</span> T();</span><br><span class="line">		Runnable r = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				t.m();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">		<span class="keyword">new</span> Thread(r, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">new</span> Thread(r, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>###synchronized的底层实现</p>
<p>自旋锁是在用户态去解决锁的问题，它不经过内核态，因此它在加锁和解锁要比经过内核态的效率高；<br>加锁代码块执行时间比较短，且线程数比较少，用自旋锁；<br>加锁代码块执行时间比较长，或者线程比较多，用系统锁（向操作申请的锁）;</p>
<p>###synchronized锁升级</p>
<p>###synchronized优化<br>1.锁粒度的控制</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FineCoarseLock</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//do sth need not sync</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//业务逻辑中只有下面这句需要sync，这时不应该给整个方法上锁</span></span><br><span class="line">		count ++;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//do sth need not sync</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//do sth need not sync</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//业务逻辑中只有下面这句需要sync，这时不应该给整个方法上锁</span></span><br><span class="line">		<span class="comment">//采用细粒度的锁，可以使线程争用时间变短，从而提高效率</span></span><br><span class="line">		<span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">			count ++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//do sth need not sync</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.synchronized锁的对象需要final修饰</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncSameObject</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/*final*/</span> Object o = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">synchronized</span>(o) &#123;</span><br><span class="line">			<span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">				&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">				System.out.println(Thread.currentThread().getName());</span><br><span class="line">				</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SyncSameObject t = <span class="keyword">new</span> SyncSameObject();</span><br><span class="line">		<span class="keyword">new</span> Thread(t::m, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		Thread t2 = <span class="keyword">new</span> Thread(t::m, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line"></span><br><span class="line">		t.o = <span class="keyword">new</span> Object();</span><br><span class="line">		</span><br><span class="line">		t2.start();</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3.不要使用基本数据类型作为锁对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoNotLockString</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	String s1 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">	String s2 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">synchronized</span>(s1) &#123;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">synchronized</span>(s2) &#123;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>全局异常处理</title>
    <url>/2020/07/02/%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.banksteel.openerp.commons.exception.BuzzErrorException;</span><br><span class="line"><span class="keyword">import</span> com.banksteel.openerp.commons.framework.entiy.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> com.banksteel.openerp.commons.framework.exception.BncErrorException;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//private static Properties exceptionCodes = null;</span></span><br><span class="line">	<span class="comment">//private static String exceptionCodePath = &quot;exceptionCode.properties&quot;;</span></span><br><span class="line">	<span class="comment">//private static Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler.class);</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*static &#123;</span></span><br><span class="line"><span class="comment">		loadProperties();</span></span><br><span class="line"><span class="comment">	&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*	private static void loadProperties()&#123;</span></span><br><span class="line"><span class="comment">		try &#123;</span></span><br><span class="line"><span class="comment">			exceptionCodes = new Properties();</span></span><br><span class="line"><span class="comment">			InputStream inputStream = GlobalExceptionHandler.class.getClassLoader().getResourceAsStream(exceptionCodePath);</span></span><br><span class="line"><span class="comment">			if (inputStream != null)&#123;</span></span><br><span class="line"><span class="comment">				InputStreamReader isr = new InputStreamReader(inputStream, &quot;UTF-8&quot;);</span></span><br><span class="line"><span class="comment">				exceptionCodes.load(isr);</span></span><br><span class="line"><span class="comment">			&#125;</span></span><br><span class="line"><span class="comment">		&#125; catch (Exception e) &#123;</span></span><br><span class="line"><span class="comment">			logger.error(&quot;HandleException 初始化异常&quot;, e);</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">	&#125;*/</span></span><br><span class="line"></span><br><span class="line">	<span class="meta">@ExceptionHandler(value = Exception.class)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ModelAndView <span class="title">defaultErrorHandler</span><span class="params">(HttpServletRequest request,HttpServletResponse response, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		String trackId = UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">		log.error(<span class="string">&quot;defaultErrorHandler-&gt;全局拦截异常信息,trackId=&#123;&#125;,AmqpTemplate=&#123;&#125;,&#123;&#125;&quot;</span>,trackId , amqpTemplate ,request, ex);</span><br><span class="line">		<span class="comment">//推异常日志队列</span></span><br><span class="line">		<span class="comment">//TODO</span></span><br><span class="line">		log.error(<span class="string">&quot;defaultErrorHandler-&gt;全局拦截异常信息,trackId=&#123;&#125;&quot;</span>,trackId , ex);</span><br><span class="line">		ErrorMessage mess = getMessage(ex);</span><br><span class="line">		ResponseEntity result = returnException(mess);</span><br><span class="line">		result.setResult(<span class="string">&quot;trackId=&quot;</span>+trackId);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			response.setContentType(<span class="string">&quot;text/plain; charset=UTF-8&quot;</span>);</span><br><span class="line">			response.getWriter().write(JSONObject.toJSONString(result));</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			log.error(<span class="string">&quot;返回异常&quot;</span>,e.getMessage());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ModelAndView();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@description</span>:组装异常后的返回信息</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> mess</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@author</span>:商家进销存项目组 xuxp</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@createTime</span>:2017年1月11日 下午3:44:16</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> ResponseEntity <span class="title">returnException</span><span class="params">(ErrorMessage mess)</span> </span>&#123;</span><br><span class="line">		ResponseEntity responseEntity = <span class="keyword">new</span> ResponseEntity();</span><br><span class="line">		String errorDetail = <span class="string">&quot;&quot;</span>;</span><br><span class="line">		<span class="keyword">if</span>(mess!=<span class="keyword">null</span>) &#123;</span><br><span class="line">			responseEntity.setCode(mess.errorCode);</span><br><span class="line">			responseEntity.setMess(mess.message);</span><br><span class="line">			errorDetail = mess.getErrorMsgDetail() == <span class="keyword">null</span> ? <span class="string">&quot;&quot;</span> : mess.getErrorMsgDetail().toString();</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			responseEntity.setCode(<span class="number">500</span>);</span><br><span class="line">			responseEntity.setMess(<span class="string">&quot;系统返回异常&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		Calendar calendar = Calendar.getInstance(Locale.CHINA);</span><br><span class="line">		responseEntity.setTimeStamp(calendar.getTimeInMillis());</span><br><span class="line">		responseEntity.setResult(<span class="string">&quot;exception&quot;</span>);</span><br><span class="line"></span><br><span class="line">		responseEntity.setData(errorDetail);</span><br><span class="line">		<span class="keyword">return</span> responseEntity;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> ErrorMessage <span class="title">getMessage</span><span class="params">(Throwable th)</span> </span>&#123;</span><br><span class="line">		ErrorMessage mess = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">if</span> (th <span class="keyword">instanceof</span> BuzzErrorException)&#123;</span><br><span class="line">			BuzzErrorException buzzErrorException = (BuzzErrorException)th;</span><br><span class="line">			mess = <span class="keyword">new</span> ErrorMessage(buzzErrorException.getErrorCode(),buzzErrorException.getMessage());</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (th <span class="keyword">instanceof</span> BncErrorException) &#123;</span><br><span class="line">			BncErrorException bncErrorException = (BncErrorException)th;</span><br><span class="line">			mess = <span class="keyword">new</span> ErrorMessage(<span class="number">4002</span>,bncErrorException.getMessage());</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (th.getCause() != <span class="keyword">null</span>)&#123;</span><br><span class="line">			mess = getMessage(th.getCause());</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			ErrorMsgDetail errorMsgDetail = getErrorMsgDetail(th);</span><br><span class="line">			String exceptionMsg = errorMsgDetail.getExceptionMsg();</span><br><span class="line">			<span class="keyword">boolean</span> hasMsg = StringUtils.isBlank(exceptionMsg) || exceptionMsg.equals(<span class="string">&quot;null&quot;</span>) || exceptionMsg.length() &gt; <span class="number">100</span>;</span><br><span class="line">			mess = <span class="keyword">new</span> ErrorMessage(<span class="number">500</span>, hasMsg ? <span class="string">&quot;系统异常,请联系管理员!&quot;</span> : exceptionMsg);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> mess;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> ErrorMsgDetail <span class="title">getErrorMsgDetail</span><span class="params">(Throwable th)</span> </span>&#123;</span><br><span class="line">		Class&lt;? extends Throwable&gt; clazzException = th.getClass();</span><br><span class="line">		String clazzExStr = <span class="keyword">null</span> == clazzException ? <span class="string">&quot;&quot;</span> : clazzException.toString();</span><br><span class="line">		String message = th.getMessage();</span><br><span class="line">		String stackExStr = <span class="string">&quot;&quot;</span>;</span><br><span class="line">		StackTraceElement[] stackTrace = th.getStackTrace();</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">null</span> != stackTrace &amp;&amp; stackTrace.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			stackExStr = stackTrace[<span class="number">0</span>].toString();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ErrorMsgDetail(clazzExStr, message, stackExStr);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*	private ErrorMessage getMessage(Class thClazz, String errMsg) &#123;</span></span><br><span class="line"><span class="comment">		ErrorMessage mess = null;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">		String code = exceptionCodes.getProperty(thClazz.getName());</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">		if (StringUtils.contains(code,&quot;,&quot;))&#123;</span></span><br><span class="line"><span class="comment">			String[] values = code.split(&quot;,&quot;);</span></span><br><span class="line"><span class="comment">			int errorCode = 500;</span></span><br><span class="line"><span class="comment">			try&#123;</span></span><br><span class="line"><span class="comment">				errorCode = Integer.parseInt(values[0]);</span></span><br><span class="line"><span class="comment">			&#125;catch (NumberFormatException e)&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">			&#125;</span></span><br><span class="line"><span class="comment">			String errorMsg = StringUtils.isNotEmpty(errMsg) &amp;&amp; errorCode != 500 ? errMsg : values[1];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">			mess = new ErrorMessage(errorCode,errorMsg);</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">		return mess;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorMessage</span> </span>&#123;</span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">int</span> errorCode;</span><br><span class="line">		<span class="keyword">private</span> String message;</span><br><span class="line">		<span class="keyword">private</span> ErrorMsgDetail errorMsgDetail;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">ErrorMessage</span><span class="params">(<span class="keyword">int</span> errorCode, String message)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.errorCode = errorCode;</span><br><span class="line">			<span class="keyword">this</span>.message = message;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">ErrorMessage</span><span class="params">(<span class="keyword">int</span> errorCode, String message, ErrorMsgDetail errorMsgDetail)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.errorCode = errorCode;</span><br><span class="line">			<span class="keyword">this</span>.message = message;</span><br><span class="line">			<span class="keyword">this</span>.errorMsgDetail = errorMsgDetail;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> ErrorMsgDetail <span class="title">getErrorMsgDetail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> errorMsgDetail;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">&quot;ErrorMessage [errorCode=&quot;</span> + errorCode + <span class="string">&quot;, message=&quot;</span> + message + <span class="string">&quot;, errorMsgDetail=&quot;</span></span><br><span class="line">				+ errorMsgDetail + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorMsgDetail</span> </span>&#123;</span><br><span class="line">		<span class="keyword">private</span> String exceptionClass;</span><br><span class="line">		<span class="keyword">private</span> String exceptionMsg;</span><br><span class="line">		<span class="keyword">private</span> String exceptionStackTrace;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> String <span class="title">getExceptionMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> exceptionMsg;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">ErrorMsgDetail</span><span class="params">(String exceptionClass, String exceptionMsg, String exceptionStackTrace)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.exceptionClass = exceptionClass;</span><br><span class="line">			<span class="keyword">this</span>.exceptionMsg = exceptionMsg;</span><br><span class="line">			<span class="keyword">this</span>.exceptionStackTrace = exceptionStackTrace;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">&quot;ErrorMsgDetail [exceptionClass=&quot;</span> + exceptionClass + <span class="string">&quot;, exceptionMsg=&quot;</span> + exceptionMsg</span><br><span class="line">				+ <span class="string">&quot;, exceptionStackTrace=&quot;</span> + exceptionStackTrace + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>多线程与高并发</title>
    <url>/2021/02/01/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/</url>
    <content><![CDATA[<p>###线程的概念：<br>    1.线程 cpu执行或调度的基本单位；（进程里最小的一个执行单元）（程序里不同的执行路径）<br>    2.进程 cpu资源分配的基本单位；</p>
<p>###线程的基本方法：<br>    1.sleep:当前线程睡眠一段时间，将CPU时间片让给别的线程；<br>    2.yield:让出当前cpu，返回就绪状态，进入等待队列，任然有可能继续被cpu选中继续执行；<br>    3.join：T1中调用T2.join(),停止T1的执行，等待T2执行完毕，再继续执行T1;</p>
<p>###创建线程的五种方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HowToCreateThread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 继承Thread类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello MyThread!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现Runnable接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello MyRunnable!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现Callable接口,带有泛型返回值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello MyCallable&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> MyThread().start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyRunnable()).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; System.out.println(<span class="string">&quot;Hello MyLambda!&quot;</span>)).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用线程池</span></span><br><span class="line">        ExecutorService service =  Executors.newCachedThreadPool();</span><br><span class="line">        service.execute(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello ThreadPool&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下面两种：Future Callable and FutureTask</span></span><br><span class="line">        <span class="comment">// 使用线程池执行Callable实现类，返回Future对象，把返回值放在Future里</span></span><br><span class="line">        Future&lt;String&gt; future = service.submit(<span class="keyword">new</span> MyCallable());</span><br><span class="line">        String str = future.get();</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        service.shutdown();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// new Thread是不能直接传Runnable的，可以构建FutureTask对象</span></span><br><span class="line">        <span class="comment">// FutureTask实现了RunnableFuture接口，RunnableFuture继承了Runnable, Future&lt;V&gt;接口</span></span><br><span class="line">        <span class="comment">// 也就是FutureTask既可以作为Runnable供Thread执行，又可以作为Future来接收参数</span></span><br><span class="line">        FutureTask&lt;String&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;&gt;(<span class="keyword">new</span> MyCallable());</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(futureTask);</span><br><span class="line">        thread.start();</span><br><span class="line">        System.out.println(futureTask.get());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 本质上其实都是new Thread对象执行start方法；</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Java的6种线程状态："><a href="#Java的6种线程状态：" class="headerlink" title="Java的6种线程状态："></a>Java的6种线程状态：</h3><pre><code>1.NEW: 线程刚刚创建，还没有启动，调用start()方法之前；
2.RUNNABLE:可运行状态，由线程调度器安排执行;在此状态下有两种表现，READY(就绪状态)(当前没有分配到时间片，当线程被
调度器选中，CPU为其分配时间片进行线程任务执行)，RUNNABLE(已经分配到时间片，正在执行线程任务，可以调用Thread.yield方法
进入READY状态)，当发生了线程上下文切换，就有线程被挂起进入了READY(就绪状态)；
3.WAITING:等待被执行唤醒；(注意：JUC的锁都是基于CAS来实现的，例如ReentrantLock().lock()方法进入的是waiting状态)
4.TIME WAITING:隔一段时间后自动唤醒；
5.BLOCKED:被阻塞，正在等待锁；（只有在Synchronized没有获取到锁资源的时候才会进入该状态）
6.TERMINATED:线程结束；（Thread.join()等待线程执行结束，线程状态进入terminated）
</code></pre>
<p>###Sleep,Wait,Notify<br>    1.Sleep与Wait的区别，Sleep不释放锁；<br>    2.Wait线程挂起，释放锁，且必须配合Synchronized使用；<br>    3.notify唤醒其他线程，且必须配合Synchronized使用；</p>
<p>###.线程的打断(interrupt)：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">interrupt</span><span class="params">()</span>            <span class="comment">//t.interrupt() 打断t线程（设置t线程某给标志位f=true，并不是打断线程的运行）</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isInterrupted</span><span class="params">()</span>     <span class="comment">//t.isInterrupted() 查询打断标志位是否被设置（是不是曾经被打断过）</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">interrupted</span><span class="params">()</span><span class="comment">//Thread.interrupted() 查看“当前”线程是否被打断，如果被打断，恢复标志位</span></span></span><br></pre></td></tr></table></figure>

<h3 id="interrupt和sleep-wait-join"><a href="#interrupt和sleep-wait-join" class="headerlink" title="interrupt和sleep() wait() join()"></a>interrupt和sleep() wait() join()</h3><p>sleep()方法在睡眠的时候，不到时间是没有办法叫醒的，这个时候可以用interrupt设置标志位，然后呢必须得catch InterruptedException来进行处理，决定继续睡或者是别的逻辑，（自动进行中断标志复位）</p>
<h3 id="interrupt是否能中断正在竞争锁的线程"><a href="#interrupt是否能中断正在竞争锁的线程" class="headerlink" title="interrupt是否能中断正在竞争锁的线程"></a>interrupt是否能中断正在竞争锁的线程</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Interrupt_and_sync</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object o = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(()-&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (o) &#123;</span><br><span class="line">                SleepHelper.sleepSeconds(<span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        SleepHelper.sleepSeconds(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(()-&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (o) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;t2 end!&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        t2.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>interrupt()不能打断正在竞争锁的线程synchronized()，同时interrupt()也不能打断ReentrantLock的lock()方法；</p>
<h3 id="如果想打断正在竞争锁的线程，使用ReentrantLock的lockInterruptibly"><a href="#如果想打断正在竞争锁的线程，使用ReentrantLock的lockInterruptibly" class="headerlink" title="如果想打断正在竞争锁的线程，使用ReentrantLock的lockInterruptibly()"></a>如果想打断正在竞争锁的线程，使用ReentrantLock的lockInterruptibly()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * interrupt与lockInterruptibly()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Interrupt_and_lockInterruptibly</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(()-&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                SleepHelper.sleepSeconds(<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;t1 end!&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        SleepHelper.sleepSeconds(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(()-&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;t2 start!&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.lockInterruptibly();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;t2 end!&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        SleepHelper.sleepSeconds(<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        t2.interrupt();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由以上述结论其实可以看出：ReentrantLock()的lock()方法虽然也是使线程进入waiting状态，但是还是和Thread.wait()方法还是有所区别的，Thread.wait()进入的waiting状态可以被interrupt打断，但是lock()方法不行，想要被打断，需要<br>使用ReentrantLock()的lockInterruptibly()；</p>
<p>###如何优雅的结束线程</p>
<ol>
<li>自然结束（能自然结束就尽量自然结束）；</li>
<li>stop()；（这三个方法已经废弃，主要是因为stop方法是直接结束线程，不能够执行善后操作，<br>很容易造成数据不一致）</li>
<li>suspend()：让线程停止，但是线程任然持有锁资源，容易造成死锁； resume()；恢复停止的线程继续执行</li>
<li>volatile标志（是一个volatile属性，线程执行过程中使用while循环检查该属性，判断线程是否结束执行）<ol>
<li>不适合某些场景（比如还没有同步的时候，线程做了阻塞操作，没有办法循环回去）</li>
<li>打断时间也不是特别精确，比如一个阻塞容器，容量为5的时候结束生产者，<br>但是，由于volatile同步线程标志位的时间控制不是很精确，有可能生产者还继续生产一段儿时间</li>
</ol>
</li>
<li>interrupt() and isInterrupted（比较优雅）</li>
</ol>
<p>###线程间数据交换的方式<br>    1.使用Exchanger来实现两个线程交换数据，两个线程在同一个时间点阻塞着才能完成数据交换；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTestExchanger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Exchanger&lt;String&gt; exchanger = <span class="keyword">new</span> Exchanger&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            String s = <span class="string">&quot;T1&quot;</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                s = exchanger.exchange(s);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; &quot;</span> + s);</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            String s = <span class="string">&quot;T2&quot;</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                s = exchanger.exchange(s);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; &quot;</span> + s);</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<pre><code>2.使用SynchronousQueue来实现数据传递，a线程向SynchronousQueue中put数据，b线程从Queue中取数据,如果没有线程取数据，
a线程会一直阻塞住；
</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySynchronusQueue</span> </span>&#123; <span class="comment">// 容量为0</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">		BlockingQueue&lt;String&gt; strs = <span class="keyword">new</span> SynchronousQueue&lt;&gt;();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				System.out.println(strs.take());</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;).start();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				strs.put(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;).start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//		strs.put(&quot;aaa&quot;); //阻塞等待其他线程取数据</span></span><br><span class="line"><span class="comment">//		strs.put(&quot;bbb&quot;);</span></span><br><span class="line"><span class="comment">//		strs.add(&quot;aaa&quot;);</span></span><br><span class="line">		System.out.println(strs.size());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>JVM基础知识学习</title>
    <url>/2021/05/17/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>1.为什么要进行GC？<br>2.如何进行GC?<br>    分为两个阶段：<br>    一.垃圾标记阶段<br>       (1).判断对象是否存活；<br>      （2).什么样的对象会被标记为死亡：当一个对象已经不再被任何存活的对象继续引用时，就可以宣判为已死亡；<br>       (3).判断对象是否存活一般有两种方式：引用计数算法，可达性分析算法</p>
<pre><code>二.引用计数算法
    (1).概述：
    (2).优点：
    (3).缺点：
    (4).应用：
    (5).python是在使用引用计数算法时如何解决循环引用问题的？

三.可达性分析算法(或称为根搜索算法、追踪垃圾收集)
    (1).概述：
    (2).实现思路：
    (3).GC Root包括那些类别的元素：
    (4).可达性分析算法执行的必要条件（还有一些临时性的元素可以加入）：

四.Finalization机制

五.MAT和JVisualVM结合查看GC Root

六.使用JProfiler分析OOM

七.垃圾清除阶段：
    (1).概述：成功区分内存中存活的对象和死亡的对象后，GC接下来的任务就是执行垃圾回收，释放掉无用的对象所占用的内存空间，以便有足够的可用内存空间为新对象分配内存
    (2).常用的垃圾清除算法：标记-清除算法、复制算法、标记-压缩算法

八.标记-清除（Mark-Sweep）算法：
    (1).执行过程-标记：
    (2).清除：
    (3).优点：
    (4).缺点：
    (5).何为清除：这里所谓的清除并不是真的置空，

九.复制(Copying)算法
    (1).背景：
    (2).核心思想：
    (3).优点：
    (4).缺点：
    (5).适合的应用场景:

十.标记压缩(或标记整理、Mark - Compact)算法
    (1).背景：
    (2).执行过程：
    (3).优点：
    (4).缺点：

十一.指针碰撞：

十二.对比三种算法：

十三.分代收集算法：

十四.增量收集算法：
    (1).概述：
    (2).缺点:

十五.分区算法：
</code></pre>
]]></content>
  </entry>
  <entry>
    <title>垃圾回收器</title>
    <url>/2021/05/20/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/</url>
    <content><![CDATA[<p>一.垃圾回收器的分类:</p>
<p>二.GC性能指标:<br>    (1).吞吐量：<br>    (2).垃圾收集开销：<br>    (3).暂停时间：<br>    (4).收集频率：<br>    (5).内存占用：<br>    (6).快速：</p>
<p>三.吞吐量和停顿时间：</p>
<p>四.不同的垃圾回收器有哪些：</p>
<p>面试问题：Java常见的垃圾回收器有哪些？<br>回答思路：实际上垃圾回收器根具体的JVM是紧密相连的，像不同的厂商，像Oracle,像IBM,像Redhat也好实际上会考虑不同版本的JVM，不同版本的JVM就可以考虑使用不同版本的垃圾回收器，主流的垃圾回收器主要有：</p>
<p>五.七款经典的垃圾回收器：</p>
<p>六.七款经典的垃圾收集器与垃圾分代之间的关系：<br>    (1).新生代垃圾收集器：<br>    (2).老年代垃圾收集器：<br>    (3).整体垃圾收集器：</p>
<p>七.垃圾收集器的组合关系：</p>
<p>八.如何查看默认的垃圾回收器：<br>-XX:+PrintCommandLineFlags<br>jps ==&gt; jinfo -flag UseParallelGC 3556</p>
<p>九.Serial回收器（串行回收）：<br>    (1).特点：单线程垃圾回收，Serial作用于新生代垃圾收集，使用的是复制算法；Serial Old作用于老年代垃圾收集，使用的是标记压缩算法<br>    (2).优势：<br>    (3).使用：-XX:+UseSerialGC<br>    (4).使用的算法：<br>    (5).垃圾回收器组合：</p>
<p>十.ParNew回收器(并行回收)：<br>    (1).特点：<br>    (2).使用：<br>    (3).使用的算法:<br>    (4).垃圾回收器组合：</p>
<p>十一.Parallel Scavenge回收器（吞吐量优先）：<br>    (1).<br>    (5).垃圾回收器组合：</p>
<p>十二.Parallel Scavenge回收器参数配置：<br>    -XX:+UseParallelGC； -XX:+UseParallelOldGC<br>    -XX:MaxGCPauseMillis;(设置垃圾回收器的最大停顿时间，即STW时间，单位毫秒)<br>    -XX:GCTimeRatio;(垃圾收集时间占总时间的比例，取值范围(0,100),默认值99)<br>    -XX:+UseAdaptiveSizePolicy;(设置Parallel Scavenge收集器具有自适应调节策略)</p>
<p>十三.CMS回收器(低延迟)：<br>    (1).特点：<br>    (2).工作环节：<br>    (3).弊端分析：</p>
<p>十四.CMS垃圾收集器参数配置：<br>    -XX:+UseConcMarkSweepGC<br>    -XX:CMSlnitiatingOccupanyFraction(设置堆内存使用率的阈值，一旦达到阈值，便开始进行CMS回收)<br>    -XX:UseCMSCompactAtFullCollection(用于指定在执行完Full GC后对内存空间进行压缩整理，以避免内存碎片产生)<br>    -XX:CMSFullGCsBeforeCompaction(设置进行多少次Full GC后对内存空间进行压缩整理)<br>    -XX:ParallelCMSThreads(设置CMS的线程数量，CMS默认启动线程数是：（年轻代并行收集器的线程数 + 3）/4)</p>
<p>十五.G1垃圾回收器（区域分代化）：<br>    (1).概述：<br>    (2).特点：</p>
<p>十六.G1回收器的优势：<br>    (1).并行与并发：<br>    (2).分代收集：<br>    (3).空间整合：<br>    (4).可预测的停顿时间模型(即：软实时soft real-time)</p>
<p>十七.G1垃圾收集器的缺点：<br>    (1).</p>
<p>十八.G1垃圾收集器参数配置：</p>
<p>十九.G1分区Region：<br>    (1).特点:<br>    (2).Bump - the -pointor:分配对象时使用指针碰撞<br>    (3).TLAB: 针对与一个Region为每个线程分配一个TLAB，保证线程共享资源的时候可以并行的去执行</p>
<p>二十.G1回收器垃圾回收过程：<br>    (1).年轻代GC(Young GC)<br>    (2).老年代并发标记过程(Concurrent Marking)<br>    (3).混合回收(Mixed GC)<br>    (4).如果需要，单线程，独占式，高强度的Full GC还是继续存在。它针对GC的评估失败提供了一种失败保护机制，即强力回收<br>    (5).young GC -&gt; young GC + Concurrent Marking -&gt; Mixed GC<br>    (6).回收细节:<br>    young GC 暂停所有应用程序线程，启动多线程执行年轻代回收，然后Eden区移动存活对象到Survivor区间活着老年区间，也有可能两个区间都会涉及到；<br>    当堆内存使用达到一定阈值(默认45%)时，开始老年代并发标记过程；<br>    标记完成马上开始混合回收过程。对于一个混合回收期，G1 GC从老年区间存活对象到空闲区间，这些空闲空间也就成为了老年代的一部分。和年轻代不同，老年代的G1回收器和其他GC不同，G1的老年代回收器不需要整个老年代被回收，依次扫描只需要回收一部分最具回收价值的老年代的Region就可以了。同时这个老年代的Region是和年轻代一起被回收的</p>
<p>二十一.记忆集(Remembered Set)与写屏障(Write Barrier)：<br>    (1).记忆集：<br>    注意:在GC Root的枚举范围加入Remembered Set，可以保证不进行全局扫描，也不会有遗漏; </p>
<p>二十二.G1各阶段回收细节：<br>    (1).年轻代GC：</p>
<p>二十三.GC分析工具：GCViewer，EasyGC(easygc.io)</p>
<p>个版本JDK默认的垃圾回收器：</p>
]]></content>
  </entry>
  <entry>
    <title>分布式事务</title>
    <url>/2021/07/17/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<p>###事务：<br>    用户定义的一系列数据库操作，这些操作可以视为一个完整的逻辑处理工作单元，要么全部执行，要么全部不执行，是不可分割的工作单元</p>
<p>###分布式事务：<br>    分布式事务是指会涉及到操作多个数据库（服务）的事务。其实就是将同一个数据库（服务）事务的概念扩大到了对多个数据库（服务）的事务。目的是为了保证分布式系统中的数据一致性。</p>
<p>###XA规范：<br>    总之一句话：就X/Open DTP组织定义的事务协调者与数据库之间的接口规范（即接口函数），事务协调者用它来通知数据库事务的开始，结束以及提交、回滚等。<br>    XA接口函数由数据库厂商提供；<br>    XA规范的实现：<br>    分布式集群情况下，一般加代理层来充当TM的角色，实现对事务的支持。<br>    二阶段提交协议（2PC)和三阶段提交协议（3PC)就是根据这一思想衍生出来的。<br>    两阶段提交主要保证了分布式事务的原子性：即所有节点要么全做要么全年不做</p>
<p>###二阶段提交的缺点：<br>    1.单点故障：（协调者故障，事务失败）；<br>    2.阻塞资源：（占用数据库连接，性能低下，执行完一阶段提交之后，参与者需要保持数据库连接来保证二阶段的提交或者回滚）<br>    3.数据不一致：（二阶段参与者中部分节点出错造成数据不一致）</p>
<p>###2pc缺点的解决：<br>    1.多节点部署协调者；<br>    2.记录undolog,在一阶段的时候就执行commit操作并释放资源，二阶段成功，则删除undolog,失败则使用undolog回滚数据并删除undolog;<br>    3.人工介入，使用脚本，要么将数据前滚成都commit成功的状态，要么回滚成初始没有执行的状态；</p>
<p>###三阶段提交：<br>    1.can commit：参与者检查sql是否可以执行成功，将检查结果返回给协调者；<br>    2.pre commit：如果一阶段的返回结果都是成功，协调者发送指令通知参与者执行sql,参与者执行sql,并向协调者反馈执行结果<br>    3.do commit：协调者根据二阶段的sql执行结果，如果全部成功，则发送commit指令通知参与者提交，否则发送回滚命令；</p>
<p>###3pc相对与2pc解决的问题：<br>    1.can commmit阶段减少了因为sql出错而占用数据库资源的情况<br>    2.每个参与者都有一个超时的机制，也就是参与者子规定时间内没有收到协调者的指令，则执行abort commit放弃提交；</p>
<p>###TCC(Try Confirm Cancel)解决方案：<br>    1.第一正常执行业务逻辑，可以包含多种的数据库操作（redis,mysql），并且落库commit;<br>    2.如果一阶段存在某个流程出错，则对已经执行成功的流程执行逆操作使数据还原到执行之前；<br>    3.如果一阶段全部执行成功，则事务正常结束；</p>
<p>###最大努力通知方案：<br>    在我们去调用第三方支付系统（支付宝，微信，华为应用内支付）的时候，我方app调用充值接口，调起支付页面，我方App发起支付请求，第三方支付系统完成支付后，第三方需要将充值结果回调给我方的后端系统，我方后端系统更新充值状态； 但是这里就会存在事务问题，第三方充值系统需要保证回调到我方系统，第三方充值系统是我们无法左右的，不可能说让别人改代码配合我们左二阶段，三阶段提交的，所以说第三方支付系统一般为了保证接口能够回调到我方系统，会多次重试回调我方系统（所以说是尽我最大的努力去通知你），但是不是一直重试，这样话黑客不断充值1分钱，不断让系统进行通知，系统很容易崩溃，然后第三不光会重试回调，并且提供主动查询第三方系统支付系统充值结果的接口供调用方使用，第三方支付系统一般会采用这种方案来保证了整个支付流程完整调用完成；</p>
]]></content>
  </entry>
  <entry>
    <title>多线程的相关概念</title>
    <url>/2021/04/19/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h3 id="volatile关键字"><a href="#volatile关键字" class="headerlink" title="volatile关键字"></a>volatile关键字</h3><p>1.保证线程可见性；(MESI； 本质上是使用了CPU的缓存一致性协议)<br>2.禁止指令重排序；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T01_HelloVolatile</span> </span>&#123;</span><br><span class="line">	<span class="comment">/*volatile*/</span> <span class="keyword">boolean</span> running = <span class="keyword">true</span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;m start&quot;</span>);</span><br><span class="line">		<span class="keyword">while</span>(running) &#123;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">&quot;m end!&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		T01_HelloVolatile t = <span class="keyword">new</span> T01_HelloVolatile();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">new</span> Thread(t::m, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		t.running = <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加上synchronized</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T05_VolatileVsSync</span> </span>&#123;</span><br><span class="line">	<span class="comment">/*volatile*/</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123; </span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</span><br><span class="line">			count++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		T05_VolatileVsSync t = <span class="keyword">new</span> T05_VolatileVsSync();</span><br><span class="line"></span><br><span class="line">		List&lt;Thread&gt; threads = <span class="keyword">new</span> ArrayList&lt;Thread&gt;();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">			threads.add(<span class="keyword">new</span> Thread(t::m, <span class="string">&quot;thread-&quot;</span> + i));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		threads.forEach((o) -&gt; o.start());</span><br><span class="line"></span><br><span class="line">		threads.forEach((o) -&gt; &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				o.join();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line"></span><br><span class="line">		System.out.println(t.count);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>###Volatile不能保证原子性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T04_VolatileNotSync</span> </span>&#123;</span><br><span class="line">	<span class="keyword">volatile</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10000</span>; i++) count++;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		T04_VolatileNotSync t = <span class="keyword">new</span> T04_VolatileNotSync();</span><br><span class="line">		</span><br><span class="line">		List&lt;Thread&gt; threads = <span class="keyword">new</span> ArrayList&lt;Thread&gt;();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">			threads.add(<span class="keyword">new</span> Thread(t::m, <span class="string">&quot;thread-&quot;</span>+i));</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		threads.forEach((o)-&gt;o.start());</span><br><span class="line">		</span><br><span class="line">		threads.forEach((o)-&gt;&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				o.join();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">		System.out.println(t.count);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加上synchronized</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T05_VolatileVsSync</span> </span>&#123;</span><br><span class="line">	<span class="comment">/*volatile*/</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123; </span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</span><br><span class="line">			count++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		T05_VolatileVsSync t = <span class="keyword">new</span> T05_VolatileVsSync();</span><br><span class="line"></span><br><span class="line">		List&lt;Thread&gt; threads = <span class="keyword">new</span> ArrayList&lt;Thread&gt;();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">			threads.add(<span class="keyword">new</span> Thread(t::m, <span class="string">&quot;thread-&quot;</span> + i));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		threads.forEach((o) -&gt; o.start());</span><br><span class="line"></span><br><span class="line">		threads.forEach((o) -&gt; &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				o.join();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line"></span><br><span class="line">		System.out.println(t.count);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;	</span><br></pre></td></tr></table></figure>

<p>###流水线技术<br>在CPU工作中汇编指令分多步完成，每一部涉及到的硬件可能不同，于是有了流水线技术来执行指令。<br>没有流水线技术前，如果同时两个指令过来执行 一个需要5秒，那么两个就需要10秒；有了流水线技术之后，可能就只要6秒。多个指令同时执行时性能显著提升。<br>这个和指令重排有啥关系？<br>因为流水线满载后一旦中断，所有的硬件设备会进入一个停顿期，再次满载，需要几个周期，对性能损失比较大。指令重排就是一种减少流水线中断的技术。<br>流水线技术并不是说让多个指令并行执行，可能还是需要等他其他指令执行完才可以执行，那么这个时候等待就有一个停顿，我们可以让和这个指令后面不相干的指令继续执行，这就是指令重排。<br>指令重排有可能带来一个问题——乱序<br>乱序也必须保证程序上下文的因果关系不发生改变，如果无法保证，那么就应该遵守hapen-before原则，不能指令重排。</p>
<p>###指令重排序的好处</p>
<p>###指令重排序的分类<br>1.编译器优化的重排序。编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序。<br>2.指令级并行的重排序。现代处理器采用了指令级并行技术（Instruction-Level Parallelism，ILP）来将多条指令重叠执行。<br>如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序。<br>3.内存系统的重排序。由于处理器使用缓存和读/写缓冲区，这使得加载和存储操作看上去可能是在乱序执行。</p>
<p>###编译期重排序的好处<br>CPU计算的时候要访问值，如果常常利用到寄存器中已有的值就不用去内存读取了</p>
<p>###处理器为啥要重排序<br>因为一个汇编指令也会涉及到很多步骤，每个步骤可能会用到不同的寄存器，现在的CPU一般采用流水线来执行指令，也就是说，CPU有多个功能单元（如获取、解码、运算和结果），一个指令的执行被分成：取指、译码、访存、执行、写回、等若干个阶段，流水线是并行的, 第一条指令执行还没完毕，就可以执行第二条指令，前提是这两条指令功能单元相同或类似，所以一般可以通过指令重排使得具有相似功能单元的指令接连执行来减少流水线中断的情况</p>
<p>###as-if-serial 语义<br>as-if-serial的意思是：不管指令怎么重排序，在单线程下执行结果不能被改变。不管是编译器级别还是处理器级别的重排序都必须遵循as-if-serial语义。</p>
<p>为了遵守as-if-serial语义，编译器和处理器不会对存在数据依赖关系的操作做重排序。但是as-if-serial规则允许对有控制依赖关系的指令做重排序，因为在单线程程序中，对存在控制依赖的操作重排序，不会改变执行结果，但是多线程下确有可能会改变结果。</p>
<p>###happens-before 语义<br>JSR-133使用happens-before的概念来阐述操作之间的内存可见性。在JMM中，如果一个操作执行的结果需要对另一个操作可见，那么这两个操作之间必须要存在happens-before关系。这里提到的两个操作既可以是在一个线程之内，也可以是在不同线程之间。</p>
<p>两个操作之间具有happens-before关系，并不意味着前一个操作必须要在后一个 操作之前执行！happens-before仅仅要求前一个操作（执行的结果）对后一个操作可见，且前一 个操作按顺序排在第二个操作之前（the first is visible to and ordered before the second）。</p>
<p>###happens-before 部分规则<br>程序顺序规则： 一个线程中的每个操作，happens-before于该线程中的任意后续操作。<br>主要含义是：在一个线程内不管指令怎么重排序，程序运行的结果都不会发生改变。和as-if-serial 比较像。</p>
<p>监视器锁规则： 对一个锁的解锁，happens-before于随后对这个锁的加锁。<br>主要含义是：同一个锁的解锁一定发生在加锁之后</p>
<p>管程锁定规则： 一个线程获取到锁后，它能看到前一个获取到锁的线程所有的操作结果。<br>主要含义是：无论是在单线程环境还是多线程环境，对于同一个锁来说，一个线程对这个锁解锁之后，另一个线程获取了这个锁都能看到前一个线程的操作结果！(管程是一种通用的同步原语，synchronized就是管程的实现）</p>
<p>volatile变量规则： 对一个volatile域的写，happens-before于任意后续对这个volatile域的读。<br>主要含义是：如果一个线程先去写一个volatile变量，然后另一个线程又去读这个变量，那么这个写操作的结果一定对读的这个线程可见。</p>
<p>传递性： 如果A happens-before B，且B happens-before C，那么A happens-before C。</p>
<p>start()规则： 如果线程A执行操作ThreadB.start()（启动线程B），那么A线程的ThreadB.start()操作happens-before于线程B中的任意操作。<br>主要含义是：线程A在启动子线程B之前对共享变量的修改结果对线程B可见。</p>
<p>join()规则： 如果线程A执行操作ThreadB.join()并成功返回，那么线程B中的任意操作happens-before于线程A从ThreadB.join()操作成功返回。<br>主要含义是：如果在线程A执行过程中调用了线程B的join方法，那么当B执行完成后，在线程B中所有操作结果对线程A可见。</p>
<p>线程中断规则： 对线程interrupt方法的调用happens-before于被中断线程的代码检测到中断事件的发生。<br>主要含义是：响应中断一定发生在发起中断之后。</p>
<p>对象终结规则： 就是一个对象的初始化的完成，也就是构造函数执行的结束一定 happens-before它的finalize()方法。</p>
<p>一个happens-before规则对应于一个或多个编译器和处理器重排序规则。</p>
<p>as-if-serial和happens-before的主要作用都是：在保证不改变程序运行结果的前提下，允许部分指令的重排序，最大限度的提升程序执行的效率。</p>
<p>###内存屏障</p>
<p>###如何解决指令重排序带来的问题<br>一种是使用内存屏障（volatile）<br>另一种使用临界区（synchronized ）</p>
<p>如果我们使用内存屏障，那么JMM的处理器，会要求Java编译器在生成指令序列时，插入特定类型的内存屏障（Memory Barriers，Intel称之为 Memory Fence）指令，通过内存屏障指令来禁止特定类型的处理器重排序。</p>
<p>###内存屏障的类型<br>LoadLoad屏障：<br>抽象场景：Load1; LoadLoad; Load2<br>Load1 和 Load2 代表两条读取指令。在Load2要读取的数据被访问前，保证Load1要读取的数据被读取完毕。</p>
<p>StoreStore屏障：<br>抽象场景：Store1; StoreStore; Store2<br>Store1 和 Store2代表两条写入指令。在Store2写入执行前，保证Store1的写入操作对其它处理器可见</p>
<p>LoadStore屏障：<br>抽象场景：Load1; LoadStore; Store2<br>在Store2被写入前，保证Load1要读取的数据被读取完毕。</p>
<p>StoreLoad屏障：<br>抽象场景：Store1; StoreLoad; Load2<br>在Load2读取操作执行前，保证Store1的写入对所有处理器可见。StoreLoad屏障的开销是四种屏障中最大的。</p>
<p>StoreLoad Barriers是一个“全能型”的屏障，它同时具有其他3个屏障的效果。现代的多处理器大多支持该屏障（其他类型的屏障不一定被所有处理器支持）。执行该屏障开销会很昂 贵，因为当前处理器通常要把写缓冲区中的数据全部刷新到内存中（Buffer Fully Flush）。</p>
<p>###临界区synchronized<br>JMM使用了临界区（加锁）来保证程序的顺序执行，但是在临界区内是允许出现指令重排的（JMM不允许临界区内的代码“逸出”到临界区之外，那样会破坏监视器的语义）。</p>
<p>###volatile的内存语义<br>可见性： 对一个volatile变量的读，总是能看到（任意线程）对这个volatile变量最后的写入<br>原子性： 对任意单个volatile变量的读/写具有原子性，但类似于volatile++这种复合操作不具有原子性（++不具备原子性，volatile直接赋值具备原子性）</p>
<p>###volatile写和读的内存语义<br>volatile写的内存语义: 当写一个volatile变量时，JMM会把该线程对应的本地内存中的所有共享变量值刷新到主内存<br>volatile读的内存语义：当读一个volatile变量时，JMM会把该线程对应的本地内存置为无效。线程接下来将从主内存中读取所有共享变量</p>
<p>###volatile内存语义的实现<br>为了实现volatile的内存语义，编译器在生成字节码时，会在指令序列中插入内存屏障来禁止特定类型的处理器重排序<br>当第二个操作是volatile写时，不管第一个操作是什么，都不能重排序。这个规则确保 volatile写之前的操作不会被编译器重排序到volatile写之后。<br>当第一个操作是volatile读时，不管第二个操作是什么，都不能重排序。这个规则确保 volatile读之后的操作不会被编译器重排序到volatile读之前。<br>当第一个操作是volatile写，第二个操作是volatile读时，不能重排序。</p>
<p>###具体插入的内存屏障<br>在每个volatile写操作的前面插入一个StoreStore屏障。在每个volatile写操作的后面插入一个StoreLoad屏障。<br>在每个volatile读操作的后面插入一个LoadLoad屏障。在每个volatile读操作的后面插入一个LoadStore屏障。</p>
<p>###锁的内存语义<br>当线程释放锁时，JMM会把该线程对应的本地内存中的共享变量刷新到主内存中。 线程A释放一个锁，实质上是线程A向接下来将要获取这个锁的某个线程发出了（线程A 对共享变量所做修改的）消息。</p>
<p>当线程获取锁时，JMM会把该线程对应的本地内存置为无效。从而使得被监视器保护的临界区代码必须从主内存中读取共享变量。线程B获取一个锁，实质上是线程B接收了之前某个线程发出的（在释放这个锁之前对共 享变量所做修改的）消息。</p>
<p>线程A释放锁，随后线程B获取这个锁，这个过程实质上是线程A通过主内存向线程B发送消息。</p>
<p>###对象半初始化<br>双重检查锁，在前一个线程获取到锁进行对象初始化的时候，对象初始化的正确顺序（1：分配对象的内存空间；<br>2：初始化对象；3：设置instance指向刚分配的内存地址）, 此时发生了指令重排序，先将对象引用指向了内存地址，还没有初始化<br>象但是此时对象还没有赋值，对象引用已经指向了对象的内存地址，这时候其他线程检查对象是否为null的时候，<br>发现对象不为null,此时其他线程使用的是这个半初始化状态的对象从而引发一些问题；</p>
<p>###final的内存语义<br>1.在构造函数内对一个final域的写入，与随后把这个被构造对象的引用赋值给一个引用变量，这两个操作之间不能重排序。也就是说只有将对象实例化完成后，才能将对象引用赋值给变量。<br>2.初次读一个包含final域的对象的引用，与随后初次读这个final域，这两个操作之间不能重排序。也就是下面示例的4和5不能重排序。<br>3.当final域为引用类型时，在构造函数内对一个final引用的对象的成员域的写入，与随后在构造函数外把这个被构造对象的引用赋值给一个引用变量，这两个操作之间不能重排序。</p>
<p>###final语义在处理器中的实现<br>会要求编译器在final域的写之后，构造函数return之前插入一个StoreStore障屏。<br>读final域的重排序规则要求编译器在读final域的操作前面插入一个LoadLoad屏障。</p>
]]></content>
  </entry>
  <entry>
    <title>常用的并发工具类</title>
    <url>/2021/05/23/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    <content><![CDATA[<p>###ThreadLocal<br>    理解：借助Thread类的threadLocals属性对应的ThreadLocalMap,将数据缓存在该map中;(换句话说，ThreadLocal将数据缓存在<br>        Thread的ThreadLocalMap中，键为TreadLocal对象，值为要缓存的数据，也就是说ThreadLocal将数据缓存在了当前调用的<br>        线程的Map结构中，而每个线程都有自己的ThreadLocalMap,所以ThreadLocalMap可以发挥的作用就是对于同一个变量，可以为<br>        每个线程维护一份自己的副本，副本数据不受其他线程影响)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TreadLocal.java - set()</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">        map.set(<span class="keyword">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        createMap(t, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// TreadLocal.java - getMap()</span></span><br><span class="line"><span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t.threadLocals;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Thread类中属性</span></span><br><span class="line">ThreadLocal.ThreadLocalMap threadLocals = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>

<p>###ThreadLocal可能导致内存泄露的原因<br>    理解：通过下面的代码片段的可以看出ThreadLocalMap是一个Entry节点的数组，而ThreadLocalMap中的Entry节点继承<br>    自WeakReference弱引用，且Entry的key是一个弱引用，value任然是一个强引用;<br>    使用弱引用带来的好处和问题：<br>    当当前ThreadLocal没有强引用指向的时候，Entry节点的key的这个弱引用会被自动回收，此时虽然key被回收了，但是此时value<br>    依然存在，仍然占用着内存不会被回收而导致了内存泄露，因为ThreadLocalMap是Thread的属性，它会随着当前线程的存在而存在,<br>    防止ThreadLocal内存泄露的方法，就是在不需要使用的时候调用remove方法；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TreadLocal.java中ThreadLocalMap内部类的部分片段</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalMap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The entries in this hash map extend WeakReference, using</span></span><br><span class="line"><span class="comment">     * its main ref field as the key (which is always a</span></span><br><span class="line"><span class="comment">     * ThreadLocal object).  Note that null keys (i.e. entry.get()</span></span><br><span class="line"><span class="comment">     * == null) mean that the key is no longer referenced, so the</span></span><br><span class="line"><span class="comment">     * entry can be expunged from table.  Such entries are referred to</span></span><br><span class="line"><span class="comment">     * as &quot;stale entries&quot; in the code that follows.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">ThreadLocal</span>&lt;?&gt;&gt; </span>&#123;</span><br><span class="line">        <span class="comment">/** The value associated with this ThreadLocal. */</span></span><br><span class="line">        Object value;</span><br><span class="line"></span><br><span class="line">        Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class="line">            <span class="keyword">super</span>(k);</span><br><span class="line">            value = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Entry[] table;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>###强引用<br>    理解：我们自定义的class类都是强引用</p>
<p>###软引用<br>    理解：当JVM内存空间不足的时候，会回收软引用指向对象的内存空间</p>
<p>###弱引用<br>    理解：当没有强引用指向弱引用指向的对象时，在下次GC的时候就会被回收</p>
<p>###虚引用<br>    理解：虚引用主要用来跟踪对象何时被垃圾回收器回收的；声明虚引用的时候是要传入一个queue，当你的虚引用所引用的对象被回收时，<br>    会被加入到这个queue中，可以通过判断queue里面是不是有对象来判断对象是不是被回收；<br>    应用场景假设：如果我们在使用堆外内存的时候，对象使用完需要释放内存时，无法通过JVM来回收内存，这个时候我们就可以使用虚引用<br>    来确定回收堆外内存的时机，然后调用Unsafe类的freeMemory(long var1)方法来回收内存；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPhantomReference</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Object&gt; LIST = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ReferenceQueue&lt;M&gt; QUEUE = <span class="keyword">new</span> ReferenceQueue&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        PhantomReference&lt;M&gt; phantomReference = <span class="keyword">new</span> PhantomReference&lt;&gt;(<span class="keyword">new</span> M(), QUEUE);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                LIST.add(<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">1024</span>]);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    Thread.currentThread().interrupt();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(phantomReference.get());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                Reference&lt;? extends M&gt; poll = QUEUE.poll();</span><br><span class="line">                <span class="keyword">if</span> (poll != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;--- 虚引用对象被jvm回收了 ---- &quot;</span> + poll);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>###原子类AtomicXXX</p>
<p>###LongAdder</p>
<p>###ReentrantLock<br>    理解：与synchronized的不同<br>    private Lock lock = new ReentrantLock();<br>    // 相当于创建了producer等待队列，调用producer.await()则进入producer等待队列等待，producer.signalAll()则是唤醒<br>    // producer等待队列的所有线程<br>    private Condition producer = lock.newCondition();<br>    // 相当于创建了consumer等待队列，调用consumer.await()则进入consumer等待队列等待，consumer.signalAll()则是唤醒<br>    // consumer等待队列的所有线程<br>    private Condition consumer = lock.newCondition();</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyContainer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">	<span class="keyword">final</span> <span class="keyword">private</span> LinkedList&lt;T&gt; lists = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">	<span class="keyword">final</span> <span class="keyword">private</span> <span class="keyword">int</span> MAX = <span class="number">10</span>; <span class="comment">//最多10个元素</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">	<span class="keyword">private</span> Condition producer = lock.newCondition();</span><br><span class="line">	<span class="keyword">private</span> Condition consumer = lock.newCondition();</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			lock.lock();</span><br><span class="line">			<span class="keyword">while</span>(lists.size() == MAX) &#123; <span class="comment">//想想为什么用while而不是用if？</span></span><br><span class="line">				producer.await();</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			lists.add(t);</span><br><span class="line">			++count;</span><br><span class="line">			consumer.signalAll(); <span class="comment">//通知消费者线程进行消费</span></span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			lock.unlock();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		T t = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			lock.lock();</span><br><span class="line">			<span class="keyword">while</span>(lists.size() == <span class="number">0</span>) &#123;</span><br><span class="line">				consumer.await();</span><br><span class="line">			&#125;</span><br><span class="line">			t = lists.removeFirst();</span><br><span class="line">			count --;</span><br><span class="line">			producer.signalAll(); <span class="comment">//通知生产者进行生产</span></span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			lock.unlock();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> t;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		MyContainer2&lt;String&gt; c = <span class="keyword">new</span> MyContainer2&lt;&gt;();</span><br><span class="line">		<span class="comment">//启动消费者线程</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">5</span>; j++) System.out.println(c.get());</span><br><span class="line">			&#125;, <span class="string">&quot;c&quot;</span> + i).start();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//启动生产者线程</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">2</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">25</span>; j++) c.put(Thread.currentThread().getName() + <span class="string">&quot; &quot;</span> + j);</span><br><span class="line">			&#125;, <span class="string">&quot;p&quot;</span> + i).start();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>###CountDownLatch</p>
<p>###CyclicBarrier</p>
<p>###Phaser</p>
<p>###ReadWriteLock</p>
<p>###Semaphore<br>    理解：限制最多有多个线程同时在运行；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSemaphore</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建拥有2个许可的Semaphore对象</span></span><br><span class="line">        <span class="comment">// Semaphore s = new Semaphore(2);</span></span><br><span class="line">        <span class="comment">// 公平和非公平</span></span><br><span class="line">        Semaphore s = <span class="keyword">new</span> Semaphore(<span class="number">2</span>, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//允许一个线程同时执行</span></span><br><span class="line">        <span class="comment">//Semaphore s = new Semaphore(1);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 从Semaphore对象获取许可，只有获取了许可的线程才能够继续执行</span></span><br><span class="line">                s.acquire();</span><br><span class="line">                System.out.println(<span class="string">&quot;T1 running...&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">200</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;T1 running...&quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                s.release();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                s.acquire();</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;T2 running...&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">200</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;T2 running...&quot;</span>);</span><br><span class="line"></span><br><span class="line">                s.release();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>###Exchanger<br>    理解：Exchanger.exchange()方法是阻塞的，交换两个线程的数据；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestExchanger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Exchanger&lt;String&gt; exchanger = <span class="keyword">new</span> Exchanger&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            String s = <span class="string">&quot;T1&quot;</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                s = exchanger.exchange(s);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; &quot;</span> + s);</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            String s = <span class="string">&quot;T2&quot;</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                s = exchanger.exchange(s);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; &quot;</span> + s);</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>###LockSupport<br>    理解：相比较与wait()和notify()更加灵活，LockSupport.park()阻塞线程，LockSupport.unpark(t)唤醒指定线程，notifyAll()不能只唤醒指定线程，unpark()方法可以先park()方法执行，可以理解为先发一张通行证，但是这个通行证最多为1，也就是调用<br>    多次unpark()方法也只有一张通行证能够用于解除线程阻塞；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLockSupport</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                <span class="keyword">if</span>(i == <span class="number">5</span>) &#123;</span><br><span class="line">                    LockSupport.park();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t.start();</span><br><span class="line">        LockSupport.unpark(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>###wait和notify<br>    理解：notify()可以唤醒线程但是不会释放锁，wait()会释放锁的；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotifyHoldingLock</span> </span>&#123; <span class="comment">//wait notify</span></span><br><span class="line">	<span class="keyword">volatile</span> List lists = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">		lists.add(o);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> lists.size();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		T03_NotifyHoldingLock c = <span class="keyword">new</span> T03_NotifyHoldingLock();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">			<span class="keyword">synchronized</span>(lock) &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;t2开始执行&quot;</span>);</span><br><span class="line">				<span class="keyword">if</span>(c.size() != <span class="number">5</span>) &#123;</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						lock.wait();</span><br><span class="line">					&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">						e.printStackTrace();</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				System.out.println(<span class="string">&quot;t2 执行结束&quot;</span>);</span><br><span class="line">				<span class="comment">// 唤醒t1线程</span></span><br><span class="line">				lock.notify();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e1) &#123;</span><br><span class="line">			e1.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;t1开始执行&quot;</span>);</span><br><span class="line">			<span class="keyword">synchronized</span>(lock) &#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">					c.add(<span class="keyword">new</span> Object());</span><br><span class="line">					System.out.println(<span class="string">&quot;add &quot;</span> + i);</span><br><span class="line">					</span><br><span class="line">					<span class="keyword">if</span>(c.size() == <span class="number">5</span>) &#123;</span><br><span class="line">						<span class="comment">// 唤醒t2线程</span></span><br><span class="line">						lock.notify();</span><br><span class="line">						<span class="comment">// t1线程释放锁</span></span><br><span class="line">						<span class="keyword">try</span> &#123;</span><br><span class="line">							lock.wait();</span><br><span class="line">						&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">							e.printStackTrace();</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">					&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">						e.printStackTrace();</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>###LockSupport</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T07_LockSupport_WithoutSleep</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">volatile</span> List lists = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">		lists.add(o);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> lists.size();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> Thread t1 = <span class="keyword">null</span>, t2 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		T07_LockSupport_WithoutSleep c = <span class="keyword">new</span> T07_LockSupport_WithoutSleep();</span><br><span class="line"></span><br><span class="line">		t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;t1线程开始&quot;</span>);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">				c.add(<span class="keyword">new</span> Object());</span><br><span class="line">				System.out.println(<span class="string">&quot;add &quot;</span> + i);</span><br><span class="line">				<span class="keyword">if</span> (c.size() == <span class="number">5</span>) &#123;</span><br><span class="line">					LockSupport.unpark(t2);</span><br><span class="line">					LockSupport.park();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line"></span><br><span class="line">		t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">			LockSupport.park();</span><br><span class="line">			System.out.println(<span class="string">&quot;t2线程结束&quot;</span>);</span><br><span class="line">			LockSupport.unpark(t1);</span><br><span class="line">		&#125;, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line"></span><br><span class="line">		t2.start();</span><br><span class="line">		t1.start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>类的加载器</title>
    <url>/2021/08/29/%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E5%99%A8/</url>
    <content><![CDATA[<p>一.类加载器的分类：<br>    启动类加载器(引导类加载器，Bootstrap ClassLoader)：加载一些java核心类的jar包及扩展类加载器和系统类加载器<br>    扩展类加载器(Extension ClassLoader)：主要用于加载(D:\jdk1.8\jre\lib\ext，C:\WINDOWS\Sun\Java\lib\ext)<br>    下的jar包<br>    系统类加载器(应用程序类加载器，Application ClassLoader)：父类加载器为扩展类加载器，它负责加载环境变量classpath<br>    或系统属性java.class.path指定路径下的类库，可以通过ClassLoader.getSystemClassLoader()来获取该类的加载器<br>    用户自定义加载器(User ClassLoader)：java开发者可以自定义类加载器来实现类库的动态加载，加载源可以是本地的jar包，也可以是<br>    网络上的远程资源</p>
<p>二.ClassLoader源码解析：<br>    重要的方法:loadClass() 、 findClass() 、 defineClass() 、 preDefineClass()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve)</span><br><span class="line">        <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">            <span class="comment">// First, check if the class has already been loaded</span></span><br><span class="line">            Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">long</span> t0 = System.nanoTime();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        c = findBootstrapClassOrNull(name);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                    <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                    <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">                    <span class="comment">// to find the class.</span></span><br><span class="line">                    <span class="keyword">long</span> t1 = System.nanoTime();</span><br><span class="line">                    c = findClass(name);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                    sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">                resolveClass(c);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>


<p>三.Class.forName是一个静态方法与ClassLoader.loadClass<br>    区别：Class.forName是一个静态方法，该方法将Class加载到内存的同时，会执行类的初始化；<br>    ClassLoader.loadClass是一个实例方法，该方法将Class文件加载到内存时，并不会执行类的初始化，直到这个类第一次使用时<br>    才会初始化</p>
<p>四.双亲委派机制：<br>    (1).定义：双亲委派机制的的具体体现为：当前ClassLoader加载类时会先检查他的父类加载器命名空间中是否加载过该类型，加载了，直接返回该类，没有加载，继续检查父类加载器，直到引导类加载器，如果父类加载器任务能够完成加载任务，则成功返回，只有父类加载器无法完成此加载任务时，才会自己去加载；<br>    (2).为什么要使用双亲委派机制：<br>        避免了类的重复加载，确保一个类是全局唯一性的，通过这种层级关系避免了类的重复加载；<br>        保护程序安全，防止核心API被随意篡改(例如在src下创建java.lang包，编写自己的String类)；<br>        补充：在一个类加载器的命名空间中，同一个类型的类只会有一个；<br>        注意：同一个类型由不同的类加载器加载，执行类型转换时会发生异常；<br>    (3).双亲委派机制的弊端：<br>        底层ClassLoader可以通过parent属性来获取父类的所加载的类，但是顶层ClassLoader无法访问底层ClassLoader所加载的类</p>
<p>五.在代码层面双亲委派机制是如何体现的：<br>    主要体现在loadClass方法中，会先检查当前ClassLoader命名空间中是否加载过该类型，加载过，直接返回，否则会调用<br>    当前ClassLoader的parent也就是父加载器的loadClass方法，直到parent为null，会去检查引导类加载器是否加载过该类型，如果父类加载器任务能够完成加载任务，则成功返回，只有父类加载器无法完成此加载任务时，才会自己去加载；</p>
<p>六.双亲委派机制对java核心类库的保护:<br>    在findClass方法中会调用defineClass方法，该方法中会调用defineClass方法，最终会调用preDefineClass方法，该方法会对加载类进行检查，对java核心类库的保护</p>
<p>七.破坏双亲委派机制的行为有哪些:<br>    (1).第一次双亲委派机制的破坏：自定义类加载器重写loadClass方法破坏双亲委派机制，解决建议：不推荐重写loadClass方法，<br>    建议重写findClass方法，保证双亲委派机制；<br>    (2).第二次双亲委派机制的破坏：顶层ClassLoader加载的基础类(如JNDI)，无法加载第三方提供的一些代码实现，解决方法：<br>    使用线程上下文加载器,通过Launcher类将线程的上下文加载器设置为系统类加载器，再通过系统类加载器去加载第三方代码实现；<br>    (3).第三次双亲委派机制的破坏：代码的热替换，模块的热部署</p>
<p>八.线程上下文类加载器:<br>    Launcher() —&gt; Thread.currentThread().setContextClassLoader(this.loader);</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Launcher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Launcher.ExtClassLoader var1;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            var1 = Launcher.ExtClassLoader.getExtClassLoader();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var10) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(<span class="string">&quot;Could not create extension class loader&quot;</span>, var10);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.loader = Launcher.AppClassLoader.getAppClassLoader(var1);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var9) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(<span class="string">&quot;Could not create application class loader&quot;</span>, var9);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Thread.currentThread().setContextClassLoader(<span class="keyword">this</span>.loader);</span><br><span class="line">        String var2 = System.getProperty(<span class="string">&quot;java.security.manager&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (var2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            SecurityManager var3 = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(var2) &amp;&amp; !<span class="string">&quot;default&quot;</span>.equals(var2)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    var3 = (SecurityManager)<span class="keyword">this</span>.loader.loadClass(var2).newInstance();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IllegalAccessException var5) &#123;</span><br><span class="line">                    ;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InstantiationException var6) &#123;</span><br><span class="line">                    ;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException var7) &#123;</span><br><span class="line">                    ;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassCastException var8) &#123;</span><br><span class="line">                    ;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                var3 = <span class="keyword">new</span> SecurityManager();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (var3 == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(<span class="string">&quot;Could not create SecurityManager: &quot;</span> + var2);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.setSecurityManager(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>九.沙箱安全机制：<br>    保证程序安全<br>    保护Java原生的JDK代码</p>
<p>十.Java9新特性关于双亲委派机制的改变：<br>    (1).扩展类加载器(Extension ClassLoader)变成了PlatformClassLoader(平台类加载器)；<br>    (2).可以通过ClassLoader.getPlatformClassLoader()获取平台类加载器；<br>    (3).删除了URLClassLoader;<br>    (4).引导类加载更名为BootClassLoader并集成进java API；</p>
<p>-XX:+TraceClassLoading：打印当前加载的类</p>
]]></content>
  </entry>
  <entry>
    <title>类的加载过程</title>
    <url>/2021/08/27/%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<p>一.概述：<br>    Java中数据类型分为基本数据类型和引用数据类型，基本数据类型由Java虚拟机预先定义，引用数据类型则需要类的加载（类，接口，枚举，注解）</p>
<p>二.类的生命周期主要包括如下7个阶段：<br>    加载（Loading） –&gt; [{验证(Verification) –&gt; 准备(Preparation) –&gt; 解析(Resolution)}<br>    链接(Linking)] –&gt; 初始化（Initialization）–&gt; 使用（Using）–&gt; 卸载（Unloading）<br>    其中验证，准备，解析3各部分统称为链接</p>
<p>三.类的加载：<br>    简而言之就是将Java类的字节码文件加载到机器内存中，并在内存中构建出Java类的原型—类模板对象。所谓的类模板对象，其实就是Java类在JVM内存中的一个快照，JVM将从字节码中解析出的常量池，类字段，类方法等信息存储到类模板中，这样在JVM运行期间能够通过类模板获取到java类的任何信息和进行方法调用等操作，反射的机制即基于这一基础。如果JVM没有将java类的声明信息存储起来，则JVM运行期间无法进行反射。<br>    类加载结束后的效果：堆中创建并存储该类对象实例数据，方法区（Hostport虚拟机–jdk7以前永久代–jdk8<br>    元空间）中创建类该Class对象的引用并指向堆中该类对象的实例数据</p>
<p>四.链接—验证阶段：<br>    当类加载到系统后，就开始连接操作，验证是链接的第一步。它的目的是保证加载的字节码是合法的，合理并符合规范的。验证的步骤比较复杂，大体上java虚拟机需要做以下步骤的检查：<br>    格式检查（该检查其实在加载阶段已经完成）<br>    语义检查<br>    字节码验证<br>    符号引用验证</p>
<p>五.链接—准备阶段:<br>    简而言之就是为类的静态变量分配内存，并将其初始化为默认值。<br>    注意：非final修饰的变量，在准备环节进行默认初始化赋值。 final修饰以后，在编译阶段进行初始化赋值，在准备环节直接进行显示赋值。如果使用字面量的方式定义一个字符串的常量的话，也是在准备环节直接进行显示赋值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String constStr = <span class="string">&quot;CONST&quot;</span>;  <span class="comment">// 准备阶段显示赋值</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String constStr1 = <span class="keyword">new</span> String(<span class="string">&quot;CONST&quot;</span>); <span class="comment">// 准备阶段不会显示赋值</span></span><br></pre></td></tr></table></figure>

<p>六.链接—解析阶段:<br>    简而言之就是将类，接口，字段和方法的符号引用转为直接引用<br>    注意：链接阶段中解析操作往往伴随着JVM在执行初始化之后才再执行</p>
<p>七.初始化：<br>    简而言之就是为类的静态变量赋予正确的初始值，初始化阶段的重要工作是执行类的初始化方法及静态代码块。</p>
<p>八.使用static + final修饰的字段的显式赋值的操作，到底是在哪个阶段进行的赋值？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">情况<span class="number">1</span>：在链接阶段的准备环节赋值</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 情况2：在初始化阶段&lt;clinit&gt;()中赋值</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 结论：</span></span><br><span class="line"><span class="comment"> * 在链接阶段的准备环节赋值的情况：</span></span><br><span class="line"><span class="comment"> * 1. 对于基本数据类型的字段来说，如果使用static final修饰，则显式赋值(直接赋值常量，而非调用方法）通常是在链接阶段的准备环节进行</span></span><br><span class="line"><span class="comment"> * 2. 对于String来说，如果使用字面量的方式赋值，使用static final修饰的话，则显式赋值通常是在链接阶段的准备环节进行</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 在初始化阶段&lt;clinit&gt;()中赋值的情况：</span></span><br><span class="line"><span class="comment"> * 排除上述的在准备环节赋值的情况之外的情况。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 最终结论：使用static + final修饰，且显示赋值中不涉及到方法或构造器调用的基本数据类型或String类型的显式赋值，是在链接阶段的准备环节进行。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitializationTest2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">1</span>;<span class="comment">//在初始化阶段&lt;clinit&gt;()中赋值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INT_CONSTANT = <span class="number">10</span>;<span class="comment">//在链接阶段的准备环节赋值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer INTEGER_CONSTANT1 = Integer.valueOf(<span class="number">100</span>);<span class="comment">//在初始化阶段&lt;clinit&gt;()中赋值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Integer INTEGER_CONSTANT2 = Integer.valueOf(<span class="number">1000</span>);<span class="comment">//在初始化阶段&lt;clinit&gt;()中赋值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String s0 = <span class="string">&quot;helloworld0&quot;</span>;<span class="comment">//在链接阶段的准备环节赋值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String s1 = <span class="keyword">new</span> String(<span class="string">&quot;helloworld1&quot;</span>);<span class="comment">//在初始化阶段&lt;clinit&gt;()中赋值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String s2 = <span class="string">&quot;helloworld2&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NUM1 = <span class="keyword">new</span> Random().nextInt(<span class="number">10</span>);<span class="comment">//在初始化阶段&lt;clinit&gt;()中赋值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>九.<clinit>()线程安全问题：<br>    虚拟机会保证一个类的<clinit>()方法在多线程环境中被正确地加锁，同步，如果多个线程同时去初始化一个类，那么只会有一个线程去<br>    执行这个类的<clinit>()方法，其他线程都需要阻塞等待，直到活动线程执行<clinit>()方法完毕。<br>    但是需要注意以下会发生死锁的情况：</clinit></clinit></clinit></clinit></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化线程A需要初始化B</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaticA</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.atguigu.java1.StaticB&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;StaticA init OK&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化线程B需要初始化A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaticB</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.atguigu.java1.StaticA&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;StaticB init OK&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticDeadLockMain</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span> flag;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StaticDeadLockMain</span><span class="params">(<span class="keyword">char</span> flag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = flag;</span><br><span class="line">        <span class="keyword">this</span>.setName(<span class="string">&quot;Thread&quot;</span> + flag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.atguigu.java1.Static&quot;</span> + flag);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(getName() + <span class="string">&quot; over&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    	<span class="comment">// 线程A初始化A,持有A的锁,但是想要完成A的&lt;clinit&gt;()就需要获取B的锁完成B的&lt;clinit&gt;()</span></span><br><span class="line">        StaticDeadLockMain loadA = <span class="keyword">new</span> StaticDeadLockMain(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">        loadA.start();</span><br><span class="line">        <span class="comment">// 线程A初始化B,持有B的锁,但是想要完成B的&lt;clinit&gt;()就需要获取A的锁完成A的&lt;clinit&gt;()</span></span><br><span class="line">        StaticDeadLockMain loadB = <span class="keyword">new</span> StaticDeadLockMain(<span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">        loadB.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>十.类的主动使用:意味着会调用类的<clinit>()，即执行了类的初始化阶段<br>    1. 当创建一个类的实例时，比如使用new关键字，或者通过反射、克隆、反序列化。<br>     2. 当调用类的静态方法时，即当使用了字节码invokestatic指令。<br>     3. 当使用类、接口的静态字段时(final修饰特殊考虑)，比如，使用getstatic或者putstatic指令。（对应访问变量、赋值变量操作）<br>     4. 当使用java.lang.reflect包中的方法反射类的方法时。比如：Class.forName(“com.atguigu.java.Test”)<br>     5. 当初始化子类时，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化。<br>     6. 如果一个接口定义了default方法，那么直接实现或者间接实现该接口的类的初始化，该接口要在其之前被初始化。<br>     7. 当虚拟机启动时，用户需要指定一个要执行的主类（包含main()方法的那个类），虚拟机会先初始化这个主类。<br>     8. 当初次调用 MethodHandle 实例时，初始化该 MethodHandle 指向的方法所在的类。<br>     （涉及解析REF_getStatic、REF_putStatic、REF_invokeStatic方法句柄对应的类）<br>     补充说明：<br>     当Java虚拟机初始化一个类时，要求它的所有父类都已经被初始化，但是这条规则并不适用于接口。<br>         &gt;在初始化一个类时，并不会先初始化它所实现的接口<br>         &gt;在初始化一个接口时，并不会先初始化它的父接口<br>     因此，一个父接口并不会因为它的子接口或者实现类的初始化而初始化。只有当程序首次使用特定接口的静态字段时，才会导致该接口的初始化。</clinit></p>
<p> 十一.类的被动使用:即不会进行类的初始化操作，即不会调用<clinit>()<br>     1. 当访问一个静态字段时，只有真正声明这个字段的类才会被初始化。<br>        &gt; 当通过子类引用父类的静态变量，不会导致子类初始化<br>    2. 通过数组定义类引用，不会触发此类的初始化<br>    3. 引用常量不会触发此类或接口的初始化。因为常量在链接阶段就已经被显式赋值了。<br>     4. 调用ClassLoader类的loadClass()方法加载一个类，并不是对类的主动使用，不会导致类的初始化。<br>    说明：没有初始化的类，不意味着没有加载！</clinit></p>
]]></content>
  </entry>
  <entry>
    <title>JVM垃圾回收</title>
    <url>/2022/08/07/JVM/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</url>
    <content><![CDATA[<h3 id="垃圾的定义"><a href="#垃圾的定义" class="headerlink" title="垃圾的定义"></a>垃圾的定义</h3><ul>
<li>没有任何引用指向的对象或Class,因为在Java1.8之后可以对Meta Space中的class进行回收(FGC)</li>
</ul>
<h3 id="为什么要分代"><a href="#为什么要分代" class="headerlink" title="为什么要分代"></a>为什么要分代</h3><ul>
<li>分代目的其实为了将长期被其他对象指向的对象与短暂被使用的对象进行分离，当对象被判定为长期被使用的对象，就会进入老年代，从而降低了这些长期被使用的对象的回收频率；</li>
</ul>
<h3 id="吞吐量和停顿时间"><a href="#吞吐量和停顿时间" class="headerlink" title="吞吐量和停顿时间"></a>吞吐量和停顿时间</h3><ol>
<li>吞吐量：用户代码时间 /（用户代码执行时间 + 垃圾回收时间）</li>
<li>响应时间：STW越短，响应时间越好</li>
</ol>
<h3 id="线程和纤程"><a href="#线程和纤程" class="headerlink" title="线程和纤程"></a>线程和纤程</h3><ol>
<li>进程 cpu资源分配的基本单位；    </li>
<li>线程 cpu执行或调度的基本单位；（进程里最小的一个执行单元）（程序里不同的执行路径); 线程是需要在操作系统内核态下进行启动和上下文切换的,所以启动线程和上下文切换是比较耗时的；</li>
<li>纤程：它和线程的主要差别是，它可以在用户态下进行启动和上下文切换，所以相对与线程来说在某些场景下可能更合适;(例如处理内存中计算密集型的业务)</li>
</ol>
<h3 id="GC的基本概念"><a href="#GC的基本概念" class="headerlink" title="GC的基本概念:"></a>GC的基本概念:</h3><ul>
<li>Card Table:<br>为什么会有card的设计：因为YGC时通过GC root来找到可达对象(通过对象地址查找)，但是有些可达对象可能已经进入老年代了，并且它还指向了新生代对象，这样当查找对象时，需要扫描整个old区，效率非常低，所以JVM将内存分为一个个的card,如果old区有对象指向了新生代，就将其比标记为dirty,下次扫描时，只需要扫描dirty card, 哪些card为dirty记录在card table中，card table的数据结构是一个bitMap;</li>
</ul>
<h3 id="如何定位到垃圾-垃圾标记阶段"><a href="#如何定位到垃圾-垃圾标记阶段" class="headerlink" title="如何定位到垃圾(垃圾标记阶段)"></a>如何定位到垃圾(垃圾标记阶段)</h3><ol>
<li>引用计数算法（无法解决循环引用的问题）</li>
<li>可达性分析算法(或称为根搜索算法、追踪垃圾收集),分析工作必须在一个可以保证一致性的快照中进行，如果不满足准确性将无法得到满足，这也是进行GC时必须Stop the World的一个重要原因</li>
</ol>
<h3 id="GC-Root"><a href="#GC-Root" class="headerlink" title="GC Root"></a>GC Root</h3><ul>
<li>GC Root包括那些类别的元素：<br>  1.线程栈中的变量：各个线程调用的方法的参数，局部变量等；准确来说就是栈中所有栈帧局部变量表中的变量；<br>  2.静态变量：静态属性引用的变量<br>  3.常量池中对象、<br>  4.本地方法栈中引用的对象<br>  5.所有被同步锁Synchronized持有的对象<br>  6.Java虚拟机内部的引用：基本数据类型对应的class对象，系统类加载器，以及一些常驻的异常对象(如：NullPointerException、OutOfMemoryError)</li>
</ul>
<h3 id="标记-清除（Mark-Sweep）算法-垃圾清除阶段"><a href="#标记-清除（Mark-Sweep）算法-垃圾清除阶段" class="headerlink" title="标记-清除（Mark-Sweep）算法(垃圾清除阶段)"></a>标记-清除（Mark-Sweep）算法(垃圾清除阶段)</h3><ol>
<li>执行过程：<br>标记阶段：垃圾收集器会从GC Root开始遍历，会在可达对象的对象头中记录标记<br>清除阶段：垃圾收集器对堆内存整体进行遍历，对没有标记为可达对象的对象进行回收</li>
<li>缺点：<br> 1.标记阶段和清除阶段分别进行一次扫描，效率不高；<br> 2.容易产生内存碎片化；需要维护一个空闲列表；<br> 3.执行过程中需要Stop the World;<pre><code> 注意：为什么要维护一个空闲列表？
 因为为对象分配内存的时候，会有两种情况：
 1.内存规整：指针碰撞，直接根据偏移量为对象分配内存；
 2.内存不规整：需要去空闲列表查找可以分配内存的空间；
 由于这里会导致内存碎片化，所以需要维护空闲列表来记录内存的使用情况；
</code></pre>
</li>
<li>优点：算法相对简单，在存活对象比较多的时候效率比较高；</li>
<li>所谓的清除：这里的清除并不是将需要清除的对象内存空间置空，而是把需要清除对象的内存地址维护在空闲列表里。在下次有新的对象需要分配内存空间时，会根据对象大小及空闲列表中记录来为新对象分配内存；</li>
</ol>
<h3 id="复制-Copying-算法（针对新生代的垃圾收集）"><a href="#复制-Copying-算法（针对新生代的垃圾收集）" class="headerlink" title="复制(Copying)算法（针对新生代的垃圾收集）"></a>复制(Copying)算法（针对新生代的垃圾收集）</h3><ol>
<li>核心思想：将内存空间分成两块，每次使用其中的一块，在垃圾回收时，将正在使用的内存中的存活对象复制到另一块未被使用的内存块中，然后清除正在被使用的内存块中的所有对象，交换两个内存块的角色，完成垃圾收集</li>
<li>优点：<br> 1.直接复制存活对象，没有标记和清除过程，实现简单，运行高效；<br> 2.复制对象时候，直接使用指针碰撞的方式来分配内存，不会出现内存碎片化；</li>
<li>缺点：<br> 1.需要两倍的内存空间；<br> 2.复制是需要移动存活对象，HotSpot使用的是直接引用的方式将对象引用直接指向对象内存地址，而复制操作改变了内存地址，此时也需要变更对象引用指向的内存地址，带来了额外的开销；</li>
<li>适合的应用场景:存活对象较少的场景，因为存活对象比较多，需要复制的对象就比较多，效率就比较低；而这与垃圾收集的Survivor区比较契合，由于Java中百分之八十以上对象都是朝生夕死的，所以复制算法很契合Survivor区进行垃圾回收；</li>
</ol>
<h3 id="标记压缩-或标记整理、Mark-Compact-算法（针对老年代代的垃圾收集）"><a href="#标记压缩-或标记整理、Mark-Compact-算法（针对老年代代的垃圾收集）" class="headerlink" title="标记压缩(或标记整理、Mark - Compact)算法（针对老年代代的垃圾收集）"></a>标记压缩(或标记整理、Mark - Compact)算法（针对老年代代的垃圾收集）</h3><ol>
<li>背景：复制算法在存活对象比较多的时候效率比较低，而基于老年代垃圾回收的特性，显然复制算法是不合适的，标记-清除算法的确可以使用在老年代垃圾收集，但是该算法不仅执行效率低下且会产生内存碎片化，显然是不合适的；</li>
<li>执行过程：<br> 1.第一阶段：和标记清除算法一样，从GC Root出发，对所有可达对象进行标记；<br> 2.第二阶段：将所有对象压缩到内存的一端，按顺序排放; —&gt;(整理碎片化)；<br> 3.第三阶段：清除存活对象边界外的所有空间；</li>
<li>优点：<br> 1.解决内存碎片化的问题；<br> 2.消除了复制算法中，两倍内存的高额代价；</li>
<li>缺点：<br> 1.从效率上来说，标记-整理算法效率要低于复制算法；<br> 2.整理对象会移动对象，会改变对象的内存地址，需要维护对象引用所指向的对象地址；<br> 3.整理对象过程中，需要Stop the World;</li>
</ol>
<h3 id="JVM内存分代模型-用于分代垃圾回收算法"><a href="#JVM内存分代模型-用于分代垃圾回收算法" class="headerlink" title="JVM内存分代模型(用于分代垃圾回收算法)"></a>JVM内存分代模型(用于分代垃圾回收算法)</h3><h3 id="各个区比例"><a href="#各个区比例" class="headerlink" title="各个区比例"></a>各个区比例</h3><ol>
<li>新生代各部分默认占比：eden : s1 : s2 = 8 : 1 : 1</li>
<li>新生代与老年代默认比例：new/young : old = 1 : 2；new/young = eden + s1 + s2</li>
</ol>
<h3 id="对象各阶段的GC流程"><a href="#对象各阶段的GC流程" class="headerlink" title="对象各阶段的GC流程"></a>对象各阶段的GC流程</h3><ol>
<li>尝试栈上分配；</li>
<li>进入Eden区;</li>
<li>s0 - s1之间的复制年龄超过限制时，进入old区，可以通过参数来设置年龄：-XX：MaxTenuringThreshold配置</li>
<li>Minor GC/YGC:年轻代空间耗尽时触发；</li>
<li>Major GC/Full GC：在老年代无法继续分配空间时触发，新生代老年代同时进行；</li>
</ol>
<h3 id="栈上分配"><a href="#栈上分配" class="headerlink" title="栈上分配"></a>栈上分配</h3><ol>
<li>线程的私有小对象；</li>
<li>没有逃逸出方法(对象的使用范围就在方法内部，没有外部引用指向它)</li>
<li>支持标量替换；</li>
</ol>
<h3 id="线程本地分配TLAB-Thread-Local-Allocation-Buffer"><a href="#线程本地分配TLAB-Thread-Local-Allocation-Buffer" class="headerlink" title="线程本地分配TLAB(Thread Local Allocation Buffer)"></a>线程本地分配TLAB(Thread Local Allocation Buffer)</h3><ul>
<li>理解：Eden为了避免多线程分配对象时需要线程同步,线程同步的话就会带来影响分配效率,所以引入了TLAB,为每个线程分配自己的空间<br>  1.占用eden，默认为1%；<br>  2.多线程的时候不用竞争eden就可以申请空间，提高效率；<br>  3.小对象；</li>
</ul>
<h3 id="对象何时进入老年代"><a href="#对象何时进入老年代" class="headerlink" title="对象何时进入老年代"></a>对象何时进入老年代</h3><ol>
<li>超过XX:MaxTenuringThreshold指定次数(YGC)<br> 1.Parallel Scavenge 15<br> 2.CMS 6<br> 3.G1 15</li>
<li>动态年龄<br> 1.年龄从小到大进行累加，当加入某个年龄段后，累加和超过survivor区域TargetSurvivorRatio的时候，就从这个年龄段往上的年龄的对象进行晋升。<br> -XX:TargetSurvivorRatio目标存活率，默认为50%</li>
<li>大对象直接进入老年区；</li>
<li>Minor GC后，survivor区容量不够，直接进入老年区；</li>
</ol>
<h3 id="安全点"><a href="#安全点" class="headerlink" title="安全点"></a>安全点</h3><ul>
<li>程序执行时并非所有地方都能停下来开始GC，只有在特定的位置才能停顿下来开始GC，这些位置称为”安全点(Safepoint)”</li>
</ul>
<h3 id="常见的垃圾收集器"><a href="#常见的垃圾收集器" class="headerlink" title="常见的垃圾收集器"></a>常见的垃圾收集器</h3><ol>
<li>Serial回收器（串行回收）：<br> (1).特点：单线程垃圾回收，Serial作用于新生代垃圾收集，使用的是复制算法；Serial Old作用于老年代垃圾收集，使用的是标记压缩算法<br> (2).使用：-XX:+UseSerialGC<br> (3).使用的算法:年轻代使用的是复制算法<br> (4).垃圾回收器组合：Serial Old</li>
<li>ParNew回收器(并行回收)：<br> (1).特点：并行回收,与Serial主要区别采用了并行回收<br> (2).使用：-XX:+UseParNewGC<br> (3).使用的算法:年轻代使用的是复制算法<br> (4).垃圾回收器组合：CMS<br> (5).核心参数：-XX:ParallelGCThreads限制线程数量，默认开启与CPU核数相同的数量</li>
<li>Parallel Scavenge回收器（吞吐量优先）：<br> (1).特点：和ParNew不同，Parallel Scavenge的目标是达到一个可控制的吞吐量，它被成为吞吐量优先的垃圾回收器;自适应策略也是Parallel与ParNew的一个重要区别,JDK8默认的垃圾回收器<br> (2).使用：-XX:+UseParNewGC<br> (3).使用的算法:年轻代使用的是复制算法<br> (4).垃圾回收器组合：Parallel Old<br> (5).核心参数：-XX:MaxGCPauseMillis;(设置垃圾回收器的最大停顿时间，即STW时间，单位毫秒);-XX:GCTimeRatio;(垃圾收集时间占总时间的比例，取值范围(0,100),默认值99);-XX:+UseAdaptiveSizePolicy;(设置Parallel Scavenge收集器具有自适应调节策略)</li>
</ol>
<h3 id="CMS回收器-低延迟"><a href="#CMS回收器-低延迟" class="headerlink" title="CMS回收器(低延迟)"></a>CMS回收器(低延迟)</h3><ol>
<li>特点：并发标记阶段,不会STW,垃圾回收线程与用户线程并行执行</li>
<li>工作环节：<br> 1.初始标记阶段(initial mark) — 标记所有的GC root — 当前阶段是STW的 — 虽然此阶段是STW的，但是只是标记GC root, GC root相对于内存中的对象来说是比较少的，所以STW的时间非常的短；<br> 2.并发标记(concurrent mark)：根据GC root标记GC root的所有可达对象  — 该阶段需要标记的对象比较多，比较耗时，但是此阶段是和用户线程是并发执行的，不产生STW, 对于用户的响应就会比较及时，但是这会造成一个问题，标记过程，有的对象原来是垃圾，现在又有新的对象指向了，有的对象变成新垃圾，<br> 3.重新标记(remark):此阶段用于标记并发阶段新指向的对象； — 此阶段是STW的，但是remark标记的对象不会很多，<br> 4.并发清理：用户线程也在同时进行，此时任然会产生新的浮动垃圾，这些浮动会在下一次的GC过程中回收所以该阶段的时间也很短</li>
<li>弊端分析：会产生内存碎片化</li>
</ol>
<h3 id="G1垃圾回收器"><a href="#G1垃圾回收器" class="headerlink" title="G1垃圾回收器"></a>G1垃圾回收器</h3><ol>
<li>核心做法及思维模式亮点：彻底改变了以前垃圾回收器的内存布局，前代垃圾回收器都是分代但是各代都是一整块内存，带来的问题就是整块内存过大，导致回收时间过长，而G1将老年代和新生代分成一个个小的region,每次回收部分region中的对象，从而提高响应时间；充分利用了分而治之的思想;</li>
<li>内存分区：G1在逻辑依然是分代的，依然有Eden,Survivor,Old,添加了Humongous区域来分配大对象；而且G1的各个区域分配不是固定的，比如Eden区的对象进行了回收后，他可能下次会被分配为old区;</li>
<li>特点：<br> 1.并发收集<br> 2.压缩空闲空间不会延长GC的暂停时间<br> 3.更易预测的GC暂停时间<br> 4.适用不需要实现很高吞吐量的场景,G1相对与Parallel再吞吐量下降低了10%，但在响应时间上提升了很多;<br> 5.追求响应时间：-XX:MaxGCPauseMillis 200,对STW进行控制<br> 6.灵活：分Region回收,优先回收花费时间少，垃圾比例高的Region</li>
<li>新老年代比例：<br> 5% - 60%<br> 一般不用手工指定,也不要手工指定，因为这是G1预测停顿时间的基准;<br> G1会对每次垃圾回收的时间进行回收，如果STW超过了预测时间，则会动态的调整新生代比例，来减少STW的时间</li>
<li>GC何时触发<br> YGC:Eden空间不足，多线程并行执行;<br> FGC:Old区空间不足，System.gc();<br> G1是否分代？G1垃圾回收器会产生FGC吗？  – G1逻辑上还是分代的,会产生FullGC<br> G1会产生FGC吗？  – 选择G1要尽可能的避免FGC</li>
</ol>
<h3 id="G1如果G1产生FGC，应该怎么做"><a href="#G1如果G1产生FGC，应该怎么做" class="headerlink" title="G1如果G1产生FGC，应该怎么做"></a>G1如果G1产生FGC，应该怎么做</h3><ol>
<li>扩内存</li>
<li>提高CPU性能（回收的快，业务逻辑产生对象的速度固定，垃圾回收越快，内存空间越大）</li>
<li>降低MixedGC触发的阈值，让MixedGC提早发生（默认是45%）MixedGC在堆内存达到设置的阈值时，就会进行，它的回收过程和CMS几乎一致，只是最后的回收阶段，是采用并行筛选回收，会有一个筛选过程，优先回收花费时间少，垃圾比例高的Region，没有满的Region能够合并会合并到一个Region,且回收后会进行内存的压缩，也不会产生内存碎片化；</li>
</ol>
<h3 id="Collection-Set"><a href="#Collection-Set" class="headerlink" title="Collection Set"></a>Collection Set</h3><ul>
<li>一组可被回收的分区的集合，这里的分区指的是card;</li>
</ul>
<h3 id="RememberedSet"><a href="#RememberedSet" class="headerlink" title="RememberedSet"></a>RememberedSet</h3><ul>
<li>在数据结构上它是一个HashSet,记录其他Region中对象对本Region中对象的引用；</li>
<li>RSet的价值在于：它可以让垃圾回收器在不需要扫描整个堆就能够找到谁引用了当前分区中的对象，只需要扫描RSet即可;</li>
</ul>
<h3 id="并发标记算法"><a href="#并发标记算法" class="headerlink" title="并发标记算法"></a>并发标记算法</h3><ol>
<li>难点：在标记过程中，对象引用关系正在发生改变;</li>
<li>三色标记：<br> 黑色：自身和成员变量均已标记完成的;<br> 灰色：自身被标记，成员变量未被标记；<br> 白色：未被标记的对象;</li>
<li>漏标：<br> 达成漏标的充分必要条件：1.黑对象指向了白色对象；2.删除了所有灰色到白色对象的引用;<br> 上述条件想要达到不漏标：需要重新扫描黑色对象;<br> 避免漏标的做法：<br> 1.incremental update – 增量更新(关注引用的增加),把黑色对象重新标记为黑色，下次重新扫描属性； —CMS<br> 2.SATB snapshot at the beginning – 关注引用的删除，当B-&gt;D消失时，要指向白色对象的这个引用推到GC的堆栈，保证D还能被GC扫描到;  —G1</li>
<li>为什们G1用SATB?<br> 灰色对象指向白色对象引用消失时，指向白色对像的引用会被push到堆栈，下次扫描时拿到这个引用，由于有RSet的存在，不需要扫描整个堆去查找指向白色的引用，效率比较高；</li>
</ol>
]]></content>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM常用参数</title>
    <url>/2022/08/14/JVM/JVM%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<h3 id="GC常用参数"><a href="#GC常用参数" class="headerlink" title="GC常用参数"></a>GC常用参数</h3><ul>
<li>-Xmn2048M  — 年轻代大小</li>
<li>-Xms4096M  — 最小堆大小</li>
<li>-Xmx4096M  — 最大堆大小</li>
<li>-Xss500M   — 栈空间</li>
<li>-XX:+UseTLAB  — 使用TLAB,默认打开</li>
<li>-XX:+PrintTLAB  — 打印TLAB的使用情况</li>
<li>-XX:+DisableExplictGC  — 禁用System.gc()</li>
<li>-XX:+PrintGC  — 打印GC信息</li>
<li>-XX:+PrintGCDetails  — 打印详细GC信息</li>
<li>-XX:+PrintHeapAtGC  — 打印GC前后堆的使用情况</li>
<li>-XX:+PrintGCTimeStamps — 打印GC产生的时间</li>
<li>-XX:+PrintFlagsFinal -version | grep G1  — 打印JVM最终参数设置情况</li>
<li>-XX:+PrintFlagsInitail -version | grep G1 — 打印JVM初始参数设置情况</li>
<li>-Xloggc:opt/gclog/gc.log  — 指定GC日志文件位置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">线上环境实际因按照下面的使用方式：</span><br><span class="line">-Xloggc:&#x2F;opt&#x2F;gclog&#x2F;logs&#x2F;xxx-xxx-gc-%t.log -XX:+UseGCLogFileRotation </span><br><span class="line">-XX:NumberOfGCLogFiles&#x3D;5 -XX:GCLogFileSize&#x3D;20M -XX:+PrintGCDetails </span><br><span class="line">-XX:+PrintGCDateStamps -XX:+PrintGCCause</span><br></pre></td></tr></table></figure></li>
<li>-XX:MaxTenuringThreshold  — 年轻代升到老年代的年龄，默认值/最大值：15</li>
</ul>
<h3 id="Parallel常用参数"><a href="#Parallel常用参数" class="headerlink" title="Parallel常用参数"></a>Parallel常用参数</h3><ul>
<li>-XX:+UseParallelGC； -XX:+UseParallelOldGC  — 使用Parallel垃圾回收器</li>
<li>-XX:MaxTenuringThreshold  — 年轻代升到老年代的年龄，默认值/最大值：15</li>
<li>-XX:+ParallelGCThreads  — 并行收集器的线程数，parallel可以设置为和CPU核数相当，因为parallel垃圾回收过程是STW的</li>
<li>-XX:MaxGCPauseMillis;(设置垃圾回收器的最大停顿时间，即STW时间，单位毫秒)</li>
<li>-XX:GCTimeRatio;(垃圾收集时间占总时间的比例，取值范围(0,100),默认值99)</li>
<li>-XX:+UseAdaptiveSizePolicy;(设置Parallel Scavenge收集器具有自适应调节策略)</li>
</ul>
<h3 id="CMS常用参数"><a href="#CMS常用参数" class="headerlink" title="CMS常用参数"></a>CMS常用参数</h3><ul>
<li>-XX:+UseConcMarkSweepGC  — 使用CMS垃圾回收器</li>
<li>-XX:ParallelCMSThreads — 并行收集的线程数，cms不可以设置为和CPU核数相当,建议设置为cpu核数的一半，因为cms垃圾回收过程并不是完全STW的，如果占用所有的核，用户线程就停止执行了，相当于STW了,CMS默认启动线程数是：（年轻代并行收集器的线程数 + 3）/4;</li>
<li>-XX:CMSInitiatingOccupancyFraction  — 使用多少比例的老年代后开始CMS收集，默认是68%(近似值),如果频繁发生SerialOld卡顿，应该调小，（频繁CMS回收）</li>
<li>-XX:+UseCMSCompactAtFullCollection — 在FGC时进行内存压缩整理,解决碎片</li>
<li>-XX:CMSFullGCsBeforeCompaction  — 多少次FGC之后进行压缩整理</li>
<li>-XX:GCTimeRatio  — 设置GC时间占用程序运行时间的百分比</li>
<li>-XX:MaxGCPauseMillis  — 停顿时间，是一个建议时间，GC会尝试用各种手段达到这个时间，比如减小年轻代(该参数应谨慎使用。太小的值将导致系统花费过多的时间进行垃圾回收。原因是为满足最小暂停时间，VM将设置更小的堆，以存储相对少量的对象，来提升回收速率，会导致更高频率的GC)</li>
</ul>
<h3 id="G1常用参数"><a href="#G1常用参数" class="headerlink" title="G1常用参数"></a>G1常用参数</h3><ul>
<li>-XX:+UseG1GC  — 使用G1垃圾回收器</li>
<li>-XX:MaxGCPauseMillis  — 建议值，G1会尝试调整Young区的块数来达到这个值</li>
<li>-XX:+G1HeapRegionSize  — 分区大小，建议逐渐增大该值，1 2 4 8 16 32<br>  随着size增加，垃圾的存活时间更长，GC间隔更长，但每次GC的时间也会更长,该值的设置需要谨慎，需要根据机器配置，进行一定压测后来决定具体设置为多少;</li>
<li>-XX:G1NewSizePercent  — 新生代最小比例，默认为5%</li>
<li>-XX:G1MaxNewSizePercent  — 新生代最大比例，默认为60%</li>
<li>-XX:GCTimeRatio  — GC时间建议比例，G1会根据这个值调整堆空间</li>
<li>-XX:ConcGCThreads — 并行收集的线程数，G1不可以设置为和CPU核数相当,建议设置为cpu核数的一半，因为G1垃圾回收过程并不是完全STW的，如果占用所有的核，用户线程就停止执行了，相当于STW了;</li>
<li>-XX:InitiatingHeapOccupancyPercent  — 启动G1的堆空间占用比例</li>
</ul>
]]></content>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM运行时数据区</title>
    <url>/2022/08/06/JVM/JVM%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/</url>
    <content><![CDATA[<h3 id="Program-Counter-程序计数器"><a href="#Program-Counter-程序计数器" class="headerlink" title="Program Counter(程序计数器)"></a>Program Counter(程序计数器)</h3><h3 id="JVM-stacks-JVM栈，用于存放栈帧"><a href="#JVM-stacks-JVM栈，用于存放栈帧" class="headerlink" title="JVM stacks(JVM栈，用于存放栈帧)"></a>JVM stacks(JVM栈，用于存放栈帧)</h3><h3 id="native-method-stacks-本地方法栈"><a href="#native-method-stacks-本地方法栈" class="headerlink" title="native method stacks(本地方法栈)"></a>native method stacks(本地方法栈)</h3><h3 id="Heap-堆"><a href="#Heap-堆" class="headerlink" title="Heap(堆)"></a>Heap(堆)</h3><h3 id="method-area-方法区，用于存储class结构-—include—-gt-run-time-constant-pool"><a href="#method-area-方法区，用于存储class结构-—include—-gt-run-time-constant-pool" class="headerlink" title="method area(方法区，用于存储class结构) —include—&gt; run-time constant pool"></a>method area(方法区，用于存储class结构) —include—&gt; run-time constant pool</h3><ol>
<li>Perm Space是HotSpot在Java1.8之前方法区具体的实现；<br> 字符串常量位于PermSpace<br> FGC不会清理<br> 大小启动的时候指定，不能变</li>
<li>Meta Space是HotSpot在Java1.8及以后方法区具体的实现；<br> 字符串常量位于堆<br> 会触发FGC清理<br> 不设定的话，最大就是物理内存</li>
</ol>
<h3 id="Direct-Memory-直接内存"><a href="#Direct-Memory-直接内存" class="headerlink" title="Direct Memory(直接内存)"></a>Direct Memory(直接内存)</h3><ul>
<li>用户空间JVM可以直接去访问内核空间的内存(OS管理的内存),NIO,提高效率，实现零拷贝</li>
</ul>
<h3 id="栈帧-Frame"><a href="#栈帧-Frame" class="headerlink" title="栈帧(Frame)"></a>栈帧(Frame)</h3><ul>
<li>每个方法对应一个栈帧<br>  1.Local Variable Table(本地变量表)<br>  2.Operand Stack(操作数栈)<br>  3.Dynamic Linking(动态链接)：动态链接是一个将符号引用解析为直接引用的过程<br>  4.return address(返回值地址)：a() -&gt; b()，方法a调用了方法b, b方法的返回值放在的地方，以及方法继续执行的地址</li>
</ul>
]]></content>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM运行时参数</title>
    <url>/2021/06/04/JVM%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<p>一.标准参数选项：<br>    (1).常用命令：<br>        -version，-help</p>
<p>二.-X类型参数：<br>    java -X命令可以查看所有-X类型命令<br>    -Xbatch           禁用后台编译<br>    -Xbootclasspath/a:&lt;以 ; 分隔的目录和 zip/jar 文件&gt;<br>                      附加在引导类路径末尾<br>    -Xcheck:jni       对 JNI 函数执行其他检查<br>    -Xcomp            在首次调用时强制编译方法<br>    -Xdebug           为实现向后兼容而提供<br>    -Xdiag            显示附加诊断消息<br>    -Xfuture          启用最严格的检查，预期将来的默认值<br>    -Xint             仅解释模式执行<br>    -Xinternalversion<br>                      显示比 -version 选项更详细的 JVM<br>                      版本信息<br>    -Xloggc:&lt;文件&gt;    将 GC 状态记录在文件中（带时间戳）<br>    -Xmixed           混合模式执行（默认值）<br>    -Xmn&lt;大小&gt;        为年轻代（新生代）设置初始和最大堆大小<br>                      （以字节为单位）<br>    -Xms&lt;大小&gt;        设置初始 Java 堆大小<br>    -Xmx&lt;大小&gt;        设置最大 Java 堆大小<br>    -Xnoclassgc       禁用类垃圾收集<br>    -Xrs              减少 Java/VM 对操作系统信号的使用（请参见文档）<br>    -Xshare:auto      在可能的情况下使用共享类数据（默认值）<br>    -Xshare:off       不尝试使用共享类数据<br>    -Xshare:on        要求使用共享类数据，否则将失败。<br>    -XshowSettings    显示所有设置并继续<br>    -XshowSettings:all<br>                      显示所有设置并继续<br>    -XshowSettings:locale<br>                      显示所有与区域设置相关的设置并继续<br>    -XshowSettings:properties<br>                      显示所有属性设置并继续<br>    -XshowSettings:vm<br>                      显示所有与 vm 相关的设置并继续<br>    -XshowSettings:system<br>                      （仅 Linux）显示主机系统或容器<br>                      配置并继续<br>    -Xss&lt;大小&gt;        设置 Java 线程堆栈大小<br>    -Xverify          设置字节码验证器的模式</p>
<pre><code>(1).重要参数解释：
 -Xint             仅解释模式执行
 -Xcomp            在首次调用时强制编译方法
 -Xmixed           混合模式执行（默认值）

 -Xmn&lt;大小&gt;        为年轻代（新生代）设置初始和最大堆大小（以字节为单位）
 -Xms&lt;大小&gt;        设置初始 Java 堆大小，等价于-XX:InitialHeapSize
 -Xmx&lt;大小&gt;        设置最大 Java 堆大小，等价于-XX:MaxHeapSize
 -Xss&lt;大小&gt;        设置 Java 线程堆栈大小，等价于-XX:ThreadStackSize
</code></pre>
<p>三.-XX类型参数：<br>    -XX:+PrintFlagsFinal   输出所有JVM参数名称和默认值</p>
<p>四.添加JVM参数：<br>    运行jar包：java -Xms500m -Xmx500m -xx:+PrintGCDetails -xx:+PrintGCTimeStamps -jar demo.jar<br>    程序运行过程中：jinfo -flag 参数 值 <pid> 只有部分值支持修改</pid></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">C:\Users\shuaixiang&gt;jinfo -flag +UseG1GC <span class="number">14228</span></span><br><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> com.sun.tools.attach.AttachOperationFailedException: flag <span class="string">&#x27;UseG1GC&#x27;</span> cannot be changed</span><br><span class="line">        at jdk.attach/sun.tools.attach.VirtualMachineImpl.execute(VirtualMachineImpl.java:<span class="number">130</span>)</span><br><span class="line">        at jdk.attach/sun.tools.attach.HotSpotVirtualMachine.executeCommand(HotSpotVirtualMachine.java:<span class="number">309</span>)</span><br><span class="line">        at jdk.attach/sun.tools.attach.HotSpotVirtualMachine.setFlag(HotSpotVirtualMachine.java:<span class="number">282</span>)</span><br><span class="line">        at jdk.jcmd/sun.tools.jinfo.JInfo.flag(JInfo.java:<span class="number">152</span>)</span><br><span class="line">        at jdk.jcmd/sun.tools.jinfo.JInfo.main(JInfo.java:<span class="number">127</span>)</span><br></pre></td></tr></table></figure>

<p>五.常用的JVM参数选项：<br>    (1).打印设置的XX选项及值:<br>        -XX:+PrintFlagsFinal   打印出XX选项在运行程序时生效的值<br>        jinfo -flag UseParNewGC <pid>  查看具体某项的值<br>    (2).堆，栈，方法区等内存大小的设置：<br>        1.栈：<br>            -Xss128k        设置 Java 线程的栈大小，等价于-XX:ThreadStackSize<br>        2.堆内存：<br>            -Xmn&lt;大小&gt;                        设置年轻代（新生代）大小，官方推荐配置为整个堆的3/8<br>            -Xms&lt;大小&gt;                        设置初始 Java 堆大小，等价于-XX:InitialHeapSize<br>            -Xmx&lt;大小&gt;                        设置最大 Java 堆大小，等价于-XX:MaxHeapSize<br>            -XX:NewSize=1024m                 设置年轻代初始值为1024m<br>            -XX:MaxNewSize=1024m              设置年轻代最大值为1024m<br>            -XX:SurvivorRatio=8               设置年轻代中Eden区与一个Survivor区的比值，默认为8<br>            -XX:+UseAdaptiveSizePolicy        自动选择新生代各区大小比例（默认是开启状态，会对Eden，Survivor的比例自动分配）<br>            // 若想禁用除了加上-XX:-UseAdaptiveSizePolicy外，还需要加上-XX:SurvivorRatio=8<br>            -XX:NewRatio=4                    设置老年代与年轻代（包括一个Eden和两个Survivor区）的比值,默认2：1<br>            -XX:PretenureSizeThreadshold=1024 设置让大于此阈值的对象直接分配在老年代，单位为字节，只对Serial,ParNew收集器有效<br>            -XX:MaxTenuringThreshold=15       默认值为15，新生代每次MinorGC后，还存活的对象年龄 + 1，当对象的年龄大于这个值时就会进入老年代<br>            -XX:+PrintTenuringDistribution    让JVM在每次MinorGC后打印出当前使用的Survivor中对象的年龄分布<br>            -XX:TargetSurvivorRatio           表示MinorGC结束后Survivor区域中占用空间的期望比例<br>        3.永久代（jdk7）,元空间（jdk8+）:<br>            永久代：-XX:PermSize=256m      设置永久代初始值为256m<br>                   -XX:MaxPermSize=256m   设置永久代最大值为256m<br>            元空间：-XX:MetaspaceSize      初始空间大小<br>                   -XX:MaxMetaspaceSize   最大空间，默认没有限制<br>                   -XX:+UseCompressedOops 压缩对象指针<br>                   -XX:+UseCompressedClassPointers    压缩类指针<br>                   -XX:CompressedClassSpaceSize       设置Klass Metaspace的大小，默认1G<br>        4.直接内存：-XX:MaxDirectMemorySize      指定DirectMemory容量，若未指定，则默认与java堆最大值一样<br>    (3).OMM相关参数：<br>        -XX:+HeapDumpOnOutOfMemoryError   表示在内存出现OOM的时候，把Heap转存（Dump）到文件以便后续分析<br>        -XX:+HeapDumpBeforeFullGC         表示在出现FullGC之前，生成Heap转储文件<br>        -XX:HeapDumpPath=d:\heapdumpinstance.hprof  指定heap转储文件路径<br>        -XX:OnOutOfMemoryError            指定一个可行性程序或者脚本路径，当发生OOM的时候，去执行这个脚本<br>        例如：-XX:OnOutOfMemoryError=/opt/Server/restart.sh   发生OOM，执行restart.sh文件进行重启<br>    (4).垃圾收集相关参数：<br>        -XX:+PrintCommandLineFlags       查看命令行相关参数（包含使用的垃圾回收器）<br>        jinfo -flag 相关垃圾回收器参数 <pid><br>        1.SerialGC与SerialOldGC(MSC):-XX:+UseSerialGC(主要应用于特定的低配环境，单核cup的情景)<br>        2.ParNewGC:-XX:+UseParNewGC(并行的垃圾回收器),-XX:ParallelGCThreads=N(设置线程数量, 8个CPU内默认和CPU数量相同)<br>        3.ParallelScavengeGC(吞吐量优先)与ParallelOldGC:<br>          -XX:+UseParallelGC与-XX:+UseParallelOldGC搭配，这两可以互相激活，<br>          -XX:ParallelGCThreads=N当CPU个数大于8个时，ParallelGCThreads的值等于3+[5 * CPU_Count/8]<br>          -XX:MaxGCPauseMillis 设置垃圾收集的最大停顿时间（即STW的时间），单位毫秒<br>          为了尽可能的把停顿时间控制在MaxGCPauseMillis以内，收集器在工作时会调整java堆大小或者其他的一些参数，<br>          该参数谨慎使用<br>          -XX:GCTimeRatio=N 设置垃圾收集时间占总时间的比例（1 / (N + 1)）。用于衡量吞吐量的大小<br>          取值范围（0，100），默认值99，也就是垃圾回收时间不超过1%<br>          与上面的MaxGCPauseMillis参数有一定的矛盾性。暂停时间越长，Radio参数就容易超过设定比例<br>          -XX:+UseAdaptiveSizePolicy 设置Parallel Scavenge收集器具有自适应调节策略<br>        4.CMSGC:-XX:+UseConcMarkSweepGC (HostPort虚拟机第一款并发的垃圾回收器，用户线程和垃圾回收线程可以同时执行)<br>          可惜的是CMS只能与ParNewGC和SerialGC搭配，不能与ParallelGC搭配<br>          使用的是标记清除算法，会导致内存碎片化的问题，可以使用-XX:+UseCMSCompactAtFullCollection在Full GC之后进行碎片化的整理，但是这样会导致STW的时间会更长<br>          在JDK9已经被标记为过时了，在JDK14中已经被拿掉了<br>        5.G1：-XX:+UseG1GC（分代收集，堆空间被分为一个一个的Region）<br>          -XX:G1HeapRegionSize  设置每个Region的大小，值是2的幂，范围在1MB到32MB之间，目标是根据java堆大小划分出约2048个<br>          区域，默认是堆内存的1/2000<br>          -XX:MaxGCPauseMillis 设置垃圾收集的最大停顿时间（即STW的时间），默认值200ms<br>          -XX:ParallelGCThreads=N  设置STW时GC线程数量,最多设置为8个<br>          -XX:ConcGCThreads  设置并发标记的线程数，将设置为ParallelGCThreads的1/4左右<br>          -XX:InitiatingHeapOccupancyPercent 设置触发并发GC周期的Java堆占用率阈值，超过此值，就触发GC<br>          -XX:G1NewSizePercent、-XX:G1MaxNewSizePercent  设置新生代占用整个堆内存的最小百分比<br>          （默认5%）,最大百分比（默认60%）<br>          -XX:G1ReservePercent=10保留内存区域，防止to space(Survivor中的to区)溢出<br>    垃圾回收器组合关系图：</pid></pid></p>
<pre><code>(5).GC日志相关参数：
    -verbose:gc或者-XX:+PrintGC 表示打开简化的GC日志
</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[GC (Allocation Failure)  16302K-&gt;14914K(59392K), <span class="number">0.0044727</span> secs]</span><br><span class="line">[GC (Allocation Failure)  31234K-&gt;31192K(59392K), <span class="number">0.0059224</span> secs]</span><br><span class="line">[<span class="function">Full <span class="title">GC</span> <span class="params">(Ergonomics)</span>  31192K-&gt;30961<span class="title">K</span><span class="params">(59392K)</span>, 0.0094891 secs]</span></span><br><span class="line"><span class="function">[Full <span class="title">GC</span> <span class="params">(Ergonomics)</span>  47312K-&gt;46963<span class="title">K</span><span class="params">(59392K)</span>, 0.0071196 secs]</span></span><br></pre></td></tr></table></figure>
<pre><code>    -XX:+PrintGCDetails        在发生垃圾回收时打印内存回收详细的日志，并在进程退出时输出当前的内存各区域分配的情况
</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[GC (Allocation Failure) [PSYoungGen: 16302K-&gt;2016K(18432K)] 16302K-&gt;14850K(59392K), <span class="number">0.0056557</span> secs] [Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.01</span> secs] </span><br><span class="line">[GC (Allocation Failure) [PSYoungGen: 18336K-&gt;2032K(18432K)] 31170K-&gt;31204K(59392K), <span class="number">0.0070365</span> secs] [Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.01</span> secs] </span><br><span class="line">[<span class="function">Full <span class="title">GC</span> <span class="params">(Ergonomics)</span> [PSYoungGen: 2032K-&gt;0<span class="title">K</span><span class="params">(18432K)</span>] [ParOldGen: 29172K-&gt;30961<span class="title">K</span><span class="params">(40960K)</span>] 31204K-&gt;30961<span class="title">K</span><span class="params">(59392K)</span>, [Metaspace: 3448K-&gt;3448<span class="title">K</span><span class="params">(1056768K)</span>], 0.0074910 secs] [Times: user</span>=<span class="number">0.14</span> sys=<span class="number">0.02</span>, real=<span class="number">0.01</span> secs] </span><br><span class="line">[<span class="function">Full <span class="title">GC</span> <span class="params">(Ergonomics)</span> [PSYoungGen: 16350K-&gt;6100<span class="title">K</span><span class="params">(18432K)</span>] [ParOldGen: 30961K-&gt;40862<span class="title">K</span><span class="params">(40960K)</span>] 47312K-&gt;46963<span class="title">K</span><span class="params">(59392K)</span>, [Metaspace: 3448K-&gt;3448<span class="title">K</span><span class="params">(1056768K)</span>], 0.0075273 secs] [Times: user</span>=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.01</span> secs] </span><br><span class="line">Heap</span><br><span class="line"> PSYoungGen      total 18432K, used 9983K [<span class="number">0x00000000fec00000</span>, <span class="number">0x0000000100000000</span>, <span class="number">0x0000000100000000</span>)</span><br><span class="line">  eden space 16384K, <span class="number">60</span>% used [<span class="number">0x00000000fec00000</span>,<span class="number">0x00000000ff5bfdc0</span>,<span class="number">0x00000000ffc00000</span>)</span><br><span class="line">  from space 2048K, <span class="number">0</span>% used [<span class="number">0x00000000ffe00000</span>,<span class="number">0x00000000ffe00000</span>,<span class="number">0x0000000100000000</span>)</span><br><span class="line">  to   space 2048K, <span class="number">0</span>% used [<span class="number">0x00000000ffc00000</span>,<span class="number">0x00000000ffc00000</span>,<span class="number">0x00000000ffe00000</span>)</span><br><span class="line"> ParOldGen       total 40960K, used 40862K [<span class="number">0x00000000fc400000</span>, <span class="number">0x00000000fec00000</span>, <span class="number">0x00000000fec00000</span>)</span><br><span class="line">  object space 40960K, <span class="number">99</span>% used [<span class="number">0x00000000fc400000</span>,<span class="number">0x00000000febe7be0</span>,<span class="number">0x00000000fec00000</span>)</span><br><span class="line"> Metaspace       used 3454K, capacity 4496K, committed 4864K, reserved 1056768K</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">space</span>    <span class="title">used</span> 378<span class="title">K</span>, <span class="title">capacity</span> 388<span class="title">K</span>, <span class="title">committed</span> 512<span class="title">K</span>, <span class="title">reserved</span> 1048576<span class="title">K</span></span></span><br></pre></td></tr></table></figure>
<pre><code>    -XX:+PrintGCTimeStamps(不可以单独使用):输出GC发生时的时间戳 -XX:+PrintGCDetails
</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">4.489</span>: [GC (Allocation Failure) [PSYoungGen: 16302K-&gt;2032K(18432K)] 16302K-&gt;14858K(59392K), <span class="number">0.0058347</span> secs] [Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.01</span> secs] </span><br><span class="line"><span class="number">9.539</span>: [GC (Allocation Failure) [PSYoungGen: 18352K-&gt;2016K(18432K)] 31178K-&gt;31160K(59392K), <span class="number">0.0069080</span> secs] [Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.01</span> secs] </span><br><span class="line"><span class="number">9.546</span>: [<span class="function">Full <span class="title">GC</span> <span class="params">(Ergonomics)</span> [PSYoungGen: 2016K-&gt;0<span class="title">K</span><span class="params">(18432K)</span>] [ParOldGen: 29144K-&gt;30961<span class="title">K</span><span class="params">(40960K)</span>] 31160K-&gt;30961<span class="title">K</span><span class="params">(59392K)</span>, [Metaspace: 3448K-&gt;3448<span class="title">K</span><span class="params">(1056768K)</span>], 0.0076182 secs] [Times: user</span>=<span class="number">0.16</span> sys=<span class="number">0.00</span>, real=<span class="number">0.01</span> secs] </span><br><span class="line"><span class="number">14.521</span>: [<span class="function">Full <span class="title">GC</span> <span class="params">(Ergonomics)</span> [PSYoungGen: 16350K-&gt;6100<span class="title">K</span><span class="params">(18432K)</span>] [ParOldGen: 30961K-&gt;40862<span class="title">K</span><span class="params">(40960K)</span>] 47312K-&gt;46963<span class="title">K</span><span class="params">(59392K)</span>, [Metaspace: 3448K-&gt;3448<span class="title">K</span><span class="params">(1056768K)</span>], 0.0071428 secs] [Times: user</span>=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.01</span> secs] </span><br></pre></td></tr></table></figure>
<pre><code>    -XX:+PrintGCDateStamps(不可以单独使用)：输出GC发生的日期 -XX:+PrintGCDetails
</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2022</span>-<span class="number">06</span>-04T23:<span class="number">20</span>:<span class="number">35.268</span>+0800: [GC (Allocation Failure) [PSYoungGen: 16302K-&gt;2016K(18432K)] 16302K-&gt;14890K(59392K), <span class="number">0.0979226</span> secs] [Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.10</span> secs] </span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-04T23:<span class="number">20</span>:<span class="number">40.410</span>+0800: [GC (Allocation Failure) [PSYoungGen: 18336K-&gt;2008K(18432K)] 31210K-&gt;31192K(59392K), <span class="number">0.0048006</span> secs] [Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.00</span> secs] </span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-04T23:<span class="number">20</span>:<span class="number">40.415</span>+0800: [<span class="function">Full <span class="title">GC</span> <span class="params">(Ergonomics)</span> [PSYoungGen: 2008K-&gt;0<span class="title">K</span><span class="params">(18432K)</span>] [ParOldGen: 29184K-&gt;30963<span class="title">K</span><span class="params">(40960K)</span>] 31192K-&gt;30963<span class="title">K</span><span class="params">(59392K)</span>, [Metaspace: 3448K-&gt;3448<span class="title">K</span><span class="params">(1056768K)</span>], 0.0086367 secs] [Times: user</span>=<span class="number">0.16</span> sys=<span class="number">0.00</span>, real=<span class="number">0.01</span> secs] </span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-04T23:<span class="number">20</span>:<span class="number">45.483</span>+0800: [<span class="function">Full <span class="title">GC</span> <span class="params">(Ergonomics)</span> [PSYoungGen: 16322K-&gt;6501<span class="title">K</span><span class="params">(18432K)</span>] [ParOldGen: 30963K-&gt;40764<span class="title">K</span><span class="params">(40960K)</span>] 47286K-&gt;47265<span class="title">K</span><span class="params">(59392K)</span>, [Metaspace: 3448K-&gt;3448<span class="title">K</span><span class="params">(1056768K)</span>], 0.0116466 secs] [Times: user</span>=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.01</span> secs] </span><br></pre></td></tr></table></figure>
<pre><code>    -XX:+PrintHeapAtGC    每一次GC前和GC后，都打印堆信息
</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;Heap before GC invocations=<span class="number">1</span> (full <span class="number">0</span>):</span><br><span class="line"> PSYoungGen      total 18432K, used 16302K [<span class="number">0x00000000fec00000</span>, <span class="number">0x0000000100000000</span>, <span class="number">0x0000000100000000</span>)</span><br><span class="line">  eden space 16384K, <span class="number">99</span>% used [<span class="number">0x00000000fec00000</span>,<span class="number">0x00000000ffbeb818</span>,<span class="number">0x00000000ffc00000</span>)</span><br><span class="line">  from space 2048K, <span class="number">0</span>% used [<span class="number">0x00000000ffe00000</span>,<span class="number">0x00000000ffe00000</span>,<span class="number">0x0000000100000000</span>)</span><br><span class="line">  to   space 2048K, <span class="number">0</span>% used [<span class="number">0x00000000ffc00000</span>,<span class="number">0x00000000ffc00000</span>,<span class="number">0x00000000ffe00000</span>)</span><br><span class="line"> ParOldGen       total 40960K, used 0K [<span class="number">0x00000000fc400000</span>, <span class="number">0x00000000fec00000</span>, <span class="number">0x00000000fec00000</span>)</span><br><span class="line">  object space 40960K, <span class="number">0</span>% used [<span class="number">0x00000000fc400000</span>,<span class="number">0x00000000fc400000</span>,<span class="number">0x00000000fec00000</span>)</span><br><span class="line"> Metaspace       used 3447K, capacity 4496K, committed 4864K, reserved 1056768K</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">space</span>    <span class="title">used</span> 377<span class="title">K</span>, <span class="title">capacity</span> 388<span class="title">K</span>, <span class="title">committed</span> 512<span class="title">K</span>, <span class="title">reserved</span> 1048576<span class="title">K</span></span></span><br><span class="line"><span class="class"><span class="title">Heap</span> <span class="title">after</span> <span class="title">GC</span> <span class="title">invocations</span></span>=<span class="number">1</span> (full <span class="number">0</span>):</span><br><span class="line"> PSYoungGen      total 18432K, used 2016K [<span class="number">0x00000000fec00000</span>, <span class="number">0x0000000100000000</span>, <span class="number">0x0000000100000000</span>)</span><br><span class="line">  eden space 16384K, <span class="number">0</span>% used [<span class="number">0x00000000fec00000</span>,<span class="number">0x00000000fec00000</span>,<span class="number">0x00000000ffc00000</span>)</span><br><span class="line">  from space 2048K, <span class="number">98</span>% used [<span class="number">0x00000000ffc00000</span>,<span class="number">0x00000000ffdf8100</span>,<span class="number">0x00000000ffe00000</span>)</span><br><span class="line">  to   space 2048K, <span class="number">0</span>% used [<span class="number">0x00000000ffe00000</span>,<span class="number">0x00000000ffe00000</span>,<span class="number">0x0000000100000000</span>)</span><br><span class="line"> ParOldGen       total 40960K, used 12865K [<span class="number">0x00000000fc400000</span>, <span class="number">0x00000000fec00000</span>, <span class="number">0x00000000fec00000</span>)</span><br><span class="line">  object space 40960K, <span class="number">31</span>% used [<span class="number">0x00000000fc400000</span>,<span class="number">0x00000000fd0907e0</span>,<span class="number">0x00000000fec00000</span>)</span><br><span class="line"> Metaspace       used 3447K, capacity 4496K, committed 4864K, reserved 1056768K</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">space</span>    <span class="title">used</span> 377<span class="title">K</span>, <span class="title">capacity</span> 388<span class="title">K</span>, <span class="title">committed</span> 512<span class="title">K</span>, <span class="title">reserved</span> 1048576<span class="title">K</span></span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span>&#123;Heap before GC invocations=<span class="number">3</span> (full <span class="number">1</span>):</span><br><span class="line"> PSYoungGen      total 18432K, used 2040K [<span class="number">0x00000000fec00000</span>, <span class="number">0x0000000100000000</span>, <span class="number">0x0000000100000000</span>)</span><br><span class="line">  eden space 16384K, <span class="number">0</span>% used [<span class="number">0x00000000fec00000</span>,<span class="number">0x00000000fec00000</span>,<span class="number">0x00000000ffc00000</span>)</span><br><span class="line">  from space 2048K, <span class="number">99</span>% used [<span class="number">0x00000000ffe00000</span>,<span class="number">0x00000000ffffe110</span>,<span class="number">0x0000000100000000</span>)</span><br><span class="line">  to   space 2048K, <span class="number">0</span>% used [<span class="number">0x00000000ffc00000</span>,<span class="number">0x00000000ffc00000</span>,<span class="number">0x00000000ffe00000</span>)</span><br><span class="line"> ParOldGen       total 40960K, used 29184K [<span class="number">0x00000000fc400000</span>, <span class="number">0x00000000fec00000</span>, <span class="number">0x00000000fec00000</span>)</span><br><span class="line">  object space 40960K, <span class="number">71</span>% used [<span class="number">0x00000000fc400000</span>,<span class="number">0x00000000fe080210</span>,<span class="number">0x00000000fec00000</span>)</span><br><span class="line"> Metaspace       used 3448K, capacity 4496K, committed 4864K, reserved 1056768K</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">space</span>    <span class="title">used</span> 377<span class="title">K</span>, <span class="title">capacity</span> 388<span class="title">K</span>, <span class="title">committed</span> 512<span class="title">K</span>, <span class="title">reserved</span> 1048576<span class="title">K</span></span></span><br><span class="line"><span class="class"><span class="title">Heap</span> <span class="title">after</span> <span class="title">GC</span> <span class="title">invocations</span></span>=<span class="number">3</span> (full <span class="number">1</span>):</span><br><span class="line"> PSYoungGen      total 18432K, used 0K [<span class="number">0x00000000fec00000</span>, <span class="number">0x0000000100000000</span>, <span class="number">0x0000000100000000</span>)</span><br><span class="line">  eden space 16384K, <span class="number">0</span>% used [<span class="number">0x00000000fec00000</span>,<span class="number">0x00000000fec00000</span>,<span class="number">0x00000000ffc00000</span>)</span><br><span class="line">  from space 2048K, <span class="number">0</span>% used [<span class="number">0x00000000ffe00000</span>,<span class="number">0x00000000ffe00000</span>,<span class="number">0x0000000100000000</span>)</span><br><span class="line">  to   space 2048K, <span class="number">0</span>% used [<span class="number">0x00000000ffc00000</span>,<span class="number">0x00000000ffc00000</span>,<span class="number">0x00000000ffe00000</span>)</span><br><span class="line"> ParOldGen       total 40960K, used 30961K [<span class="number">0x00000000fc400000</span>, <span class="number">0x00000000fec00000</span>, <span class="number">0x00000000fec00000</span>)</span><br><span class="line">  object space 40960K, <span class="number">75</span>% used [<span class="number">0x00000000fc400000</span>,<span class="number">0x00000000fe23c758</span>,<span class="number">0x00000000fec00000</span>)</span><br><span class="line"> Metaspace       used 3448K, capacity 4496K, committed 4864K, reserved 1056768K</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">space</span>    <span class="title">used</span> 377<span class="title">K</span>, <span class="title">capacity</span> 388<span class="title">K</span>, <span class="title">committed</span> 512<span class="title">K</span>, <span class="title">reserved</span> 1048576<span class="title">K</span></span></span><br><span class="line"><span class="class">&#125;</span></span><br></pre></td></tr></table></figure>
<pre><code>    -Xloggc:d:/JVM/heaplog.log   将日志信息输出到指定位置
(6).其他参数：
    -XX:+UseTLAB  使用TLAB，默认开启的
</code></pre>
<p>六.通过java代码获取JVM参数：(监控我们的应用服务器的堆内存使用情况，设置一些阈值进行报警等处理)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MemoryMXBean memorymbean = ManagementFactory.getMemoryMXBean();</span><br><span class="line">      MemoryUsage usage = memorymbean.getHeapMemoryUsage();</span><br><span class="line">      System.out.println(<span class="string">&quot;INIT HEAP: &quot;</span> + usage.getInit() / <span class="number">1024</span> / <span class="number">1024</span> + <span class="string">&quot;m&quot;</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;MAX HEAP: &quot;</span> + usage.getMax() / <span class="number">1024</span> / <span class="number">1024</span> + <span class="string">&quot;m&quot;</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;USE HEAP: &quot;</span> + usage.getUsed() / <span class="number">1024</span> / <span class="number">1024</span> + <span class="string">&quot;m&quot;</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;\nFull Information:&quot;</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;Heap Memory Usage: &quot;</span> + memorymbean.getHeapMemoryUsage());</span><br><span class="line">      System.out.println(<span class="string">&quot;Non-Heap Memory Usage: &quot;</span> + memorymbean.getNonHeapMemoryUsage());</span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">&quot;=======================通过java来获取相关系统状态============================ &quot;</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;当前堆内存大小totalMemory &quot;</span> + (<span class="keyword">int</span>) Runtime.getRuntime().totalMemory() / <span class="number">1024</span> / <span class="number">1024</span> + <span class="string">&quot;m&quot;</span>);<span class="comment">// 当前堆内存大小</span></span><br><span class="line">      System.out.println(<span class="string">&quot;空闲堆内存大小freeMemory &quot;</span> + (<span class="keyword">int</span>) Runtime.getRuntime().freeMemory() / <span class="number">1024</span> / <span class="number">1024</span> + <span class="string">&quot;m&quot;</span>);<span class="comment">// 空闲堆内存大小</span></span><br><span class="line">      System.out.println(<span class="string">&quot;最大可用总堆内存maxMemory &quot;</span> + Runtime.getRuntime().maxMemory() / <span class="number">1024</span> / <span class="number">1024</span> + <span class="string">&quot;m&quot;</span>);<span class="comment">// 最大可用总堆内存大小</span></span><br></pre></td></tr></table></figure>
<p>七.GC日志分类：<br>    部分收集：<br>    (1).新生代收集(Minor GC / Young GC):只是新生代（Eden\S0,S1）的垃圾收集<br>    (2).老年代收集(Major GC / Old GC):只是老年代的垃圾收集。<br>        目前：只有CMS GC会有单独收集老年代的行为。<br>        注意：很多时候Major GC会和Full GC混淆使用，需要具体分辨是老年代回收还是整堆回收<br>    (3).混合收集（Mixed GC):收集整个新生代以及部分老年代的垃圾收集<br>        目前：只有G1、GC会有这种行为<br>    整堆收集：<br>    (1).Full GC：收集整个java堆和方法区的垃圾收集</p>
<p>八.那些情况会触发Full GC?<br>    1.老年代空间不足；<br>    2.方法区空间不足；<br>    3.显示调用System.gc();<br>    4.Minor GC进入老年代的数据的平均大小大于老年代的可用内存；<br>    5.大对象直接进入老年代，而老年代空间不足；</p>
<p>九.常见的日志分析工具：<br>    GCEasy:<a href="https://gceasy.io/">https://gceasy.io/</a><br>    GCViewer</p>
<p>十.OOM常见各种场景及解决方案：<br>    1.堆溢出：<br>    2.元空间溢出：<br>    3.GC overhead limit exceeded:<br>    4.线程溢出：</p>
<p>十一.性能优化案例：<br>    性能测试工具：Jmeter<br>    1.调整堆大小提高服务的吞吐量;<br>    2.调整垃圾回收器提高服务的吞吐量；<br>    3.JVM优化之JIT优化；<br>    4.G1并发执行的线程数对性能的影响；<br>    5.合理配置堆内存；<br>    6.特殊问题：新生代与老年代的比例；<br>    7.CPU占用很高排查方案；<br>    8.日均百万级订单交易系统如何设置JVM参数；</p>
]]></content>
  </entry>
  <entry>
    <title>ETL监听业务表分发到各个service具体实现</title>
    <url>/2021/03/20/ETL%E7%9B%91%E5%90%AC%E4%B8%9A%E5%8A%A1%E8%A1%A8%E5%88%86%E5%8F%91%E5%88%B0%E5%90%84%E4%B8%AA%E4%B8%9A%E5%8A%A1%E5%A4%84%E7%90%86service%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0/ETL%E7%9B%91%E5%90%AC%E4%B8%9A%E5%8A%A1%E8%A1%A8%E5%88%86%E5%8F%91%E5%88%B0%E5%90%84%E4%B8%AAservice%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h3 id="开发背景："><a href="#开发背景：" class="headerlink" title="开发背景："></a>开发背景：</h3><p>大数据部门需要其他各个业务部门业务表的数据，并且需要做到与其他业务部门业务表达到数据一致，也就会有与其他业务表达到数据同步这么一个过程，本组件的开发这是用来实现与各个业务部门表数据做到数据同步</p>
<h3 id="实现原理："><a href="#实现原理：" class="headerlink" title="实现原理："></a>实现原理：</h3><p>Mysql Binlog日志文件:(每次对mysql进行一次写请求，都会写一次二进制日志，记录Mysql具体执行了什么操作，mysql主从复制就是基于binlog日志的)<br>本组件通过解析Binlog文件得到mysql对那张表具体执行了什么操作，然后将数据封装到MessageQueueDTO中，然后推消息到对应的kafak消息队列，对应的kafak监听器监听到消息，根据表名将Mysql执行的具体操作分发到对应的service进行相应的处理</p>
<h3 id="业务service标记表名枚举：MonitorTableName"><a href="#业务service标记表名枚举：MonitorTableName" class="headerlink" title="业务service标记表名枚举：MonitorTableName"></a>业务service标记表名枚举：MonitorTableName</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Indexed;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Indexed</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MonitorTableName &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监控的表名称</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 表名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="各服务操作基础接口：IMonitorOperateService"><a href="#各服务操作基础接口：IMonitorOperateService" class="headerlink" title="各服务操作基础接口：IMonitorOperateService"></a>各服务操作基础接口：IMonitorOperateService</h3><p>实现了该接口的service或者继承了实现该接口的类都会被后置处理器放入到ConcurrentHashMap中，key为对应的service，值为service对应的class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.kafakdemo.demo.dto.MessageQueueDTO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IMonitorOperateService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> messageQueueDTO 消息数据实体</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">(MessageQueueDTO messageQueueDTO)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> messageQueueDTO 消息数据实体</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(MessageQueueDTO messageQueueDTO)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> messageQueueDTO 消息数据实体</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(MessageQueueDTO messageQueueDTO)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ETL监听后置处理器"><a href="#ETL监听后置处理器" class="headerlink" title="ETL监听后置处理器:"></a>ETL监听后置处理器:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.aop.support.AopUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractEtlListenerBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存监听操作服务集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;IMonitorOperateService, Class&lt;?&gt;&gt; lstMonitorOperateServices = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//是否是监听表接口</span></span><br><span class="line">        <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> IMonitorOperateService) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>.lstMonitorOperateServices) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.lstMonitorOperateServices.containsKey(bean)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> bean;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">this</span>.lstMonitorOperateServices.put((IMonitorOperateService) bean, AopUtils.getTargetClass(bean));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有的监听操作类</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Map&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> Map&lt;IMonitorOperateService, Class&lt;?&gt;&gt; getLstMonitorOperateServices() &#123;</span><br><span class="line">        <span class="keyword">return</span> lstMonitorOperateServices;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="对IMonitorOperateService的基础实现类："><a href="#对IMonitorOperateService的基础实现类：" class="headerlink" title="对IMonitorOperateService的基础实现类："></a>对IMonitorOperateService的基础实现类：</h3><p>IMonitorOperateService接口的一个简单实现，各个service只需要继承该类就可以被加载到ConcurrentHashMap中，这样写的好处是，不需要在各个service中进行打印日志，减轻了些许代码量，并且提供了返回MessageQueueDTO中实体集合的父类方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.type.TypeReference;</span><br><span class="line"><span class="keyword">import</span> com.kafakdemo.demo.dto.MessageQueueDTO;</span><br><span class="line"><span class="keyword">import</span> com.kafakdemo.demo.util.BaseUtils;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractMonitorOperateService</span> <span class="keyword">implements</span> <span class="title">IMonitorOperateService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> messageQueueDTO 消息数据实体</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(MessageQueueDTO messageQueueDTO)</span> </span>&#123;</span><br><span class="line">        log.debug(<span class="string">&quot;---过滤新增数据表名：&#123;&#125;&quot;</span>, messageQueueDTO.getTable());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> messageQueueDTO 消息数据实体</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(MessageQueueDTO messageQueueDTO)</span> </span>&#123;</span><br><span class="line">        log.debug(<span class="string">&quot;---过滤删除数据表名：&#123;&#125;&quot;</span>, messageQueueDTO.getTable());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> messageQueueDTO 消息数据实体</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(MessageQueueDTO messageQueueDTO)</span> </span>&#123;</span><br><span class="line">        log.debug(<span class="string">&quot;---过滤更新数据表名：&#123;&#125;&quot;</span>, messageQueueDTO.getTable());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取实体集合</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> messageQueueDTO 消息实体</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> typeReference   实体类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;             泛型约束</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 实体集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">parseArray</span><span class="params">(MessageQueueDTO messageQueueDTO, TypeReference&lt;List&lt;T&gt;&gt; typeReference)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(messageQueueDTO)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> BaseUtils.parseArray(messageQueueDTO.getData(), typeReference);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取实体集合</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> messageQueueDTO 消息实体</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> typeReference   实体类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;             泛型约束</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 实体集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">parseOldArray</span><span class="params">(MessageQueueDTO messageQueueDTO, TypeReference&lt;List&lt;T&gt;&gt; typeReference)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(messageQueueDTO)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> BaseUtils.parseArray(messageQueueDTO.getOld(), typeReference);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="具体操作处理工厂："><a href="#具体操作处理工厂：" class="headerlink" title="具体操作处理工厂："></a>具体操作处理工厂：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.kafakdemo.demo.dto.MessageQueueDTO;</span><br><span class="line"><span class="keyword">import</span> com.kafakdemo.demo.enums.DataBaseOperateTypeEnum;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultOperateFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理监控操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> messageQueueDTO binlog日志消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lstTargets      操作服务集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doExecute</span><span class="params">(MessageQueueDTO messageQueueDTO, List&lt;IMonitorOperateService&gt; lstTargets)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = messageQueueDTO.isFromException();</span><br><span class="line">        String className = messageQueueDTO.getClassName();</span><br><span class="line">        String type = messageQueueDTO.getType().toUpperCase();</span><br><span class="line">        <span class="keyword">for</span> (IMonitorOperateService monitorOperateService : lstTargets) &#123;</span><br><span class="line">            messageQueueDTO.setFromException(flag);</span><br><span class="line">            messageQueueDTO.setClassName(className);</span><br><span class="line">            <span class="keyword">if</span> (DataBaseOperateTypeEnum.INSERT.getType().equals(type)) &#123;</span><br><span class="line">                monitorOperateService.create(messageQueueDTO);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (DataBaseOperateTypeEnum.UPDATE.getType().equals(type)) &#123;</span><br><span class="line">                monitorOperateService.update(messageQueueDTO);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (DataBaseOperateTypeEnum.DELETE.getType().equals(type)) &#123;</span><br><span class="line">                monitorOperateService.delete(messageQueueDTO);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="监听调用策略类"><a href="#监听调用策略类" class="headerlink" title="监听调用策略类:"></a>监听调用策略类:</h3><p>继承了AbstractEtlListenerBeanPostProcessor类，调用了父类的getLstMonitorOperateServicesByTableName(String tableName)方法，得到了所有实现了IMonitorOperateService或者继承AbstractMonitorOperateService的service，拿到service上标注的MonitorTableName注解的value值，根据表名拿到对应的service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.collect.Lists;</span><br><span class="line"><span class="keyword">import</span> com.kafakdemo.demo.annotation.MonitorTableName;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.MapUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 监听调用策略类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EtlListenerServiceStrategy</span> <span class="keyword">extends</span> <span class="title">AbstractEtlListenerBeanPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据监控的表名称获取所有的监听操作服务</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 监听表名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 监听操作服务集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;IMonitorOperateService&gt; <span class="title">getLstMonitorOperateServicesByTableName</span><span class="params">(String tableName)</span> </span>&#123;</span><br><span class="line">        List&lt;IMonitorOperateService&gt; lstTargets = Lists.newArrayList();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(tableName)) &#123;</span><br><span class="line">            <span class="keyword">return</span> lstTargets;</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;IMonitorOperateService, Class&lt;?&gt;&gt; lstMonitorOperateServices = getLstMonitorOperateServices();</span><br><span class="line">        <span class="keyword">if</span> (MapUtils.isNotEmpty(lstMonitorOperateServices)) &#123;</span><br><span class="line"></span><br><span class="line">            Iterator&lt;Map.Entry&lt;IMonitorOperateService, Class&lt;?&gt;&gt;&gt; monitorOperateServiceIterators = lstMonitorOperateServices.entrySet().iterator();</span><br><span class="line">            <span class="keyword">while</span> (monitorOperateServiceIterators.hasNext()) &#123;</span><br><span class="line">                Map.Entry&lt;IMonitorOperateService, Class&lt;?&gt;&gt; monitorOperateServiceEntry = monitorOperateServiceIterators.next();</span><br><span class="line">                MonitorTableName monitorTableName =</span><br><span class="line">                        monitorOperateServiceEntry.getValue().getAnnotation(MonitorTableName.class);</span><br><span class="line">                <span class="keyword">if</span> (Objects.nonNull(monitorTableName) &amp;&amp; tableName.equals(monitorTableName.value())) &#123;</span><br><span class="line">                    lstTargets.add(monitorOperateServiceEntry.getKey());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lstTargets;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="监控操作分发器"><a href="#监控操作分发器" class="headerlink" title="监控操作分发器:"></a>监控操作分发器:</h3><p>根据表名拿到具体的service，然后执行具体的操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.kafakdemo.demo.dto.MessageQueueDTO;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.CollectionUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MonitorOperateDispatcher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    EtlListenerServiceStrategy etlListenerServiceStrategy;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    DefaultOperateFactory defaultOperateFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接到消息处理分发操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> messageQueueDTO binlog反序列化实体</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(MessageQueueDTO messageQueueDTO)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//根据表名称获取对应监控操作服务集合</span></span><br><span class="line">        List&lt;IMonitorOperateService&gt; lstMonitorOperateServices = etlListenerServiceStrategy.getLstMonitorOperateServicesByTableName(messageQueueDTO.getTable());</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(lstMonitorOperateServices)) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;没有配置当前数据表，是否需要配置请业务方确认，表名：&#123;&#125;&quot;</span>, messageQueueDTO.getTable());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//开始处理操作</span></span><br><span class="line">        defaultOperateFactory.doExecute(messageQueueDTO, lstMonitorOperateServices);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Java内存模型</title>
    <url>/2022/08/02/JVM/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h3 id="存储器的层次结构"><a href="#存储器的层次结构" class="headerlink" title="存储器的层次结构"></a>存储器的层次结构</h3><p><img src="/images/jvm/%E5%AD%98%E5%82%A8%E5%99%A8%E7%9A%84%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84.jpg"></p>
<ul>
<li>理解：cpu的存储和获取数据的速度相较于内存的速度要大约快上百个数量级，内存相较于硬盘要快上百个数量级，如果对存取速度比较高的时候，就可以将数据放在内存里，如果要求更快的话，可以将数据放在高速缓存里，但是即使是高速缓存(L3)相对于cpu来说也是非常慢的,其实在cpu内部还有两层高速缓存（L1和L2）,所以cpu在读数据的时候会先去高速缓存L1找，cpu从高速缓存中取数据非常快，如果L1中没有就回去L2中找，在没有就会去分别去L3，内存或者硬盘中找，找到后放入高速缓存中，下次取数据时直接从高速缓存中拿；</li>
<li>注意：从存储器的层次结构可以了解到，最终cpu读取数据后会将数据缓存在L1和L2中，而每个cpu都有自己的高速缓存L1和L2,也就是主存或者L3中的数据会被加载到不同的cpu中，如果第一个cpu把某一个数据改为了1，另一个cpu把该数据改成了2，这时候就会存在数据不一致的问题</li>
</ul>
<h3 id="多线程一致性硬件层的支持"><a href="#多线程一致性硬件层的支持" class="headerlink" title="多线程一致性硬件层的支持"></a>多线程一致性硬件层的支持</h3><ol>
<li>早期的cpu采用总线锁来解决这种数据不一致的问题，具体可以解释为某个cpu访问主存中的数据，就会给总线上一把锁，相当于在cpu和主存之间建了一道屏障，来使其他cpu此时不能操作同一份数据来达到数据一致，存在明显的缺陷，因为是对总线加锁，其他cpu同时也不能访问其他数据了，极大的影响了效率；    </li>
<li>各种cpu厂商采用了各种各样的缓存一致性协议<br> intel的cpu使用的MESI缓存一致性协议<br> MESI:分别指四种状态，cpu缓存行(caceh line)标记四种状态<br> 1.Modified（被修改）:如果某个缓存行被某个cpu被修改过且只缓存在该CPU中，即与主存中的数据不一致，则将缓存行标记为Modified，该缓存行中的内存需要在未来的某个时间点写回主存。<br> 2.Exclusive（独享的）:该缓存行只被缓存在该CPU的缓存中，它是未被修改过的（clean)，与主存中数据一致。该状态可以在任何时刻当有其它CPU读取该内存时变成共享状态（shared)。<br> 3.Shared（共享的）:该状态意味着该缓存行可能被多个CPU缓存，并且各个缓存中的数据与主存数据一致（clean)，当有一个CPU修改该缓存行中，其它CPU中该缓存行可以被作废（变成无效状态（Invalid））。<br> 4.Invalid(无效的):该缓存是无效的（可能有其它CPU修改了该缓存行）。</li>
</ol>
<ul>
<li>注意：虽然缓存一致性协议的效率比总线锁要高的,但是缓存一致性协议并不能满足所有场景保证一致性,比如：有些无法被缓存的数据，或者跨越多个缓存行的数据，无法使用缓存一致性协议,依然必须使用总线锁；现代CPU的数据一致性实现 = 缓存锁(MESI …) + 总线锁</li>
</ul>
<h3 id="缓存行"><a href="#缓存行" class="headerlink" title="缓存行"></a>缓存行</h3><ul>
<li>理解：当cpu把某个数据读取到缓存中时,比如读取某个int类型的值,它并不是只是把这个int类型的值读取进缓存，而是把int数据所在的64字节的内存块读取进缓存,我们把这个64字节的内存块作为基本单位,称之为缓存行；（这个缓存行目前多数cpu厂商设置为64字节）</li>
<li>硬件的设计上很多时候是按块来执行的，并不是一个字节一个字节来执行的，处理整个块会更加方便且在很多时候会更高效；</li>
</ul>
<h3 id="伪共享"><a href="#伪共享" class="headerlink" title="伪共享"></a>伪共享</h3><ul>
<li>理解：同一个缓存行中同时有a和b两个数据，cpu1需要使用x,读取缓存行到自己的缓存中，cpu2需要使用y,同样也需要读取缓存行到自己的缓存中，这时如果cpu1修改x,就需要将cpu2的缓存行标记为Invalid失效的，cpu2就需要去主存中重写读取数据，同理cpu2如果修改了y数据，同样也会将cpu1的缓存行标记为Invalid，cpu1也会去主存中重新读取数据，但是实际上cpu1是不需要知道y数据的状态，cpu2也不需要知道x的状态，但是上面说的情况却让他们共享x,y数据，从而产生伪共享；</li>
<li>一句话总结一下：位于同一缓存行的两个不同数据，被两个不同CPU锁定，产生互相影响的伪共享问题</li>
</ul>
<h3 id="使用缓存行的对齐提高效率"><a href="#使用缓存行的对齐提高效率" class="headerlink" title="使用缓存行的对齐提高效率"></a>使用缓存行的对齐提高效率</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheLinePadding</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> COUNT = <span class="number">10_0000_0000L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">long</span> p1, p2, p3, p4, p5, p6, p7; <span class="comment">// 占用缓存行前56位</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">long</span> x = <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">long</span> p9, p10, p11, p12, p13, p14, p15; <span class="comment">// 保证两个对象T的x属性不在一个缓存行中</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> T[] arr = <span class="keyword">new</span> T[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        arr[<span class="number">0</span>] = <span class="keyword">new</span> T();</span><br><span class="line">        arr[<span class="number">1</span>] = <span class="keyword">new</span> T();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>; i &lt; COUNT; i++) &#123;</span><br><span class="line">                arr[<span class="number">0</span>].x = i;</span><br><span class="line">            &#125;</span><br><span class="line">            latch.countDown();</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>; i &lt; COUNT; i++) &#123;</span><br><span class="line">                arr[<span class="number">1</span>].x = i;</span><br><span class="line">            &#125;</span><br><span class="line">            latch.countDown();</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> start = System.nanoTime();</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        latch.await();</span><br><span class="line">        System.out.println((System.nanoTime() - start)/<span class="number">100_0000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="指令重排序"><a href="#指令重排序" class="headerlink" title="指令重排序"></a>指令重排序</h3><ul>
<li>CPU为了提高指令执行效率，会在一条指令执行过程中（比如去内存读数据（慢100倍）），同时也会执行另一条指令，前提是，两条指令没有依赖关系，这种方式在单线程环境下可以提高cpu的执行效率，但是在多线程环境就会存在数据不一致的问题；</li>
<li>虽然可以指令重排序，但并不意味可以随便排序，在JVM规范中规定了重排序必须遵循：<br>  1.hanppens-before原则<br>  2.as-if-serial 语义：不管如何重排序，单线程的执行结果不会改变</li>
<li>这两条原则的规范，具体的实现还要看各大JVM厂商的具体实现；</li>
</ul>
<h3 id="指令重排序证明"><a href="#指令重排序证明" class="headerlink" title="指令重排序证明"></a>指令重排序证明</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Disorder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">0</span>, b =<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;;) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            x = <span class="number">0</span>; y = <span class="number">0</span>;</span><br><span class="line">            a = <span class="number">0</span>; b = <span class="number">0</span>;</span><br><span class="line">            Thread one = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="comment">//由于线程one先启动，下面这句话让它等一等线程two. 读着可根据自己电脑的实际性能适当调整等待时间.</span></span><br><span class="line">                    <span class="comment">//shortWait(100000);</span></span><br><span class="line">                    a = <span class="number">1</span>;</span><br><span class="line">                    x = b;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            Thread other = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    b = <span class="number">1</span>;</span><br><span class="line">                    y = a;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            one.start();other.start();</span><br><span class="line">            one.join();other.join();</span><br><span class="line">            String result = <span class="string">&quot;第&quot;</span> + i + <span class="string">&quot;次 (&quot;</span> + x + <span class="string">&quot;,&quot;</span> + y + <span class="string">&quot;）&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span>(x == <span class="number">0</span> &amp;&amp; y == <span class="number">0</span>) &#123;</span><br><span class="line">                System.err.println(result);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//System.out.println(result);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shortWait</span><span class="params">(<span class="keyword">long</span> interval)</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.nanoTime();</span><br><span class="line">        <span class="keyword">long</span> end;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            end = System.nanoTime();</span><br><span class="line">        &#125;<span class="keyword">while</span>(start + interval &gt;= end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="合并写"><a href="#合并写" class="headerlink" title="合并写"></a>合并写</h3><ul>
<li>CPU除了指令重排序之外，还对数据写入高速缓存L2进行了优化，添加了Write Combining Buffer，一般是4个字节，在写入L1的同时，也会写入WC Buffer，满了之后，再直接更新到L2</li>
</ul>
<p>###为什么需要合并写技术<br>    由于CPU的ALU算算术逻辑单元的处理速度非常快，而将数据写入到高速缓存L2的速度相对来说非常慢，所以添加了Write Combining Buffer，将数据先写入合并写缓冲区，满了之后再一次性写入到L2;</p>
<h3 id="利用合并写技术提高程序执行效率"><a href="#利用合并写技术提高程序执行效率" class="headerlink" title="利用合并写技术提高程序执行效率"></a>利用合并写技术提高程序执行效率</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">WriteCombining</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ITERATIONS = Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ITEMS = <span class="number">1</span> &lt;&lt; <span class="number">24</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MASK = ITEMS - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] arrayA = <span class="keyword">new</span> <span class="keyword">byte</span>[ITEMS];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] arrayB = <span class="keyword">new</span> <span class="keyword">byte</span>[ITEMS];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] arrayC = <span class="keyword">new</span> <span class="keyword">byte</span>[ITEMS];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] arrayD = <span class="keyword">new</span> <span class="keyword">byte</span>[ITEMS];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] arrayE = <span class="keyword">new</span> <span class="keyword">byte</span>[ITEMS];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] arrayF = <span class="keyword">new</span> <span class="keyword">byte</span>[ITEMS];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;</span><br><span class="line">            System.out.println(i + <span class="string">&quot; SingleLoop duration (ns) = &quot;</span> + runCaseOne());</span><br><span class="line">            System.out.println(i + <span class="string">&quot; SplitLoop  duration (ns) = &quot;</span> + runCaseTwo());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">runCaseOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.nanoTime();</span><br><span class="line">        <span class="keyword">int</span> i = ITERATIONS;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (--i != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> slot = i &amp; MASK;</span><br><span class="line">            <span class="keyword">byte</span> b = (<span class="keyword">byte</span>) i;</span><br><span class="line">            arrayA[slot] = b;</span><br><span class="line">            arrayB[slot] = b;</span><br><span class="line">            arrayC[slot] = b;</span><br><span class="line">            arrayD[slot] = b;</span><br><span class="line">            arrayE[slot] = b;</span><br><span class="line">            arrayF[slot] = b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> System.nanoTime() - start;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">runCaseTwo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.nanoTime();</span><br><span class="line">        <span class="keyword">int</span> i = ITERATIONS;</span><br><span class="line">        <span class="keyword">while</span> (--i != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> slot = i &amp; MASK;</span><br><span class="line">            <span class="keyword">byte</span> b = (<span class="keyword">byte</span>) i;</span><br><span class="line">            arrayA[slot] = b;</span><br><span class="line">            arrayB[slot] = b;</span><br><span class="line">            arrayC[slot] = b;</span><br><span class="line">        &#125;</span><br><span class="line">        i = ITERATIONS;</span><br><span class="line">        <span class="keyword">while</span> (--i != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> slot = i &amp; MASK;</span><br><span class="line">            <span class="keyword">byte</span> b = (<span class="keyword">byte</span>) i;</span><br><span class="line">            arrayD[slot] = b;</span><br><span class="line">            arrayE[slot] = b;</span><br><span class="line">            arrayF[slot] = b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> System.nanoTime() - start;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="硬件级别保证有序"><a href="#硬件级别保证有序" class="headerlink" title="硬件级别保证有序"></a>硬件级别保证有序</h3><ol>
<li><p>硬件内存屏障 X86:<br> sfence: 在sfence指令前的写操作当必须在sfence指令后的写操作前完成。<br> lfence：在lfence指令前的读操作当必须在lfence指令后的读操作前完成。<br> mfence：在mfence指令前的读写操作当必须在mfence指令后的读写操作前完成。<br> 原子指令，如x86上的”lock …” 指令是一个Full Barrier，执行时会锁住内存子系统来确保执行顺序，甚至跨多个CPU。Software Locks通常使用了内存屏障或原子指令来实现变量可见性和保持程序顺序</p>
</li>
<li><p>JVM级别内存屏障如何规范（JSR133）<br> LoadLoad屏障： 对于这样的语句Load1; LoadLoad; Load2，在Load2及后续读取操作要读取的数据被访问前，保证Load1要读取的数据被读取完毕；<br> StoreStore屏障：对于这样的语句Store1; StoreStore; Store2，在Store2及后续写入操作执行前，保证Store1的写入操作对其它处理器可见；<br> LoadStore屏障：对于这样的语句Load1; LoadStore; Store2，在Store2及后续写入操作被刷出前，保证Load1要读取的数据被读取完毕；<br> StoreLoad屏障： 对于这样的语句Store1; StoreLoad; Load2，在Load2及后续所有读取操作执行前，保证Store1的写入对所有处理器可见；</p>
</li>
</ol>
<h3 id="volatile实现细节"><a href="#volatile实现细节" class="headerlink" title="volatile实现细节"></a>volatile实现细节</h3><ol>
<li>字节码层面<br> 会在对应的volatile标记的变量前加上访问标识符：0x0040 [volatile]:ACC_VOLATILE（可以通过Jclasslib查看字节码）</li>
<li>JVM层面<br> （1）对于所有的volatile变量的写操作，前面加上StoreStoreBarrier，volatile写，后面加上StoreLoadBarrier<br> （2）对于所有的volatile变量的读操作，前面加上LoadLoadBarrier，volatile读，后面加上LoadStoreBarrier</li>
<li>OS和硬件层面<br> 上述只是JVM规范中这样加上内存屏障，硬件底层也会有一些指令来完成volatile的实现：<br> hsdis - HotSpot Dis Assembler （HotSpot虚拟机的反汇编，这个工具是观察虚拟机编译好的那些字节码，在cpu级别到底使用什么样的汇编指令来完成的）在windows下是使用lock前缀指令实现的；</li>
</ol>
<h3 id="lock前缀指令在cpu级别做了什么"><a href="#lock前缀指令在cpu级别做了什么" class="headerlink" title="lock前缀指令在cpu级别做了什么"></a>lock前缀指令在cpu级别做了什么</h3><ol>
<li>在早期的cpu中，lock前缀指令会进行显式的总线锁定；通过这种机制来达到数据一致；</li>
<li>随着技术的发展及缓存一致性协议的应用,当数据满足被单个缓存行缓存的时候，Lock前缀指令会遵循缓存一致性协议给对应的缓存行标记上对应的状态，以MESI为例，分别对应着四种不同的状态，Modified（被修改），Exclusive（独享的）,Shared（共享的）,Invalid(无效的)分别对应的不同的处理方式，如果数据不满足被单个缓存行缓存的时候，lock前缀指令会进行显式的总线锁定；通过这种机制来达到数据一致；</li>
</ol>
<h3 id="synchronized实现细节"><a href="#synchronized实现细节" class="headerlink" title="synchronized实现细节"></a>synchronized实现细节</h3><ol>
<li>字节码层面<br> synchronized方法：访问标识符标记为0x0020 [synchronized]:ACC_SYNCHRONIZED<br> synchronized代码块：monitorenter、monitorexit、monitorexit,注意这里为什么会有两个monitorexit，是因为一个发生异常退出，另一个是代码块正常执行完毕退出；</li>
<li>JVM层面<br>(1).在HotSpot虚拟机中，Monitor底层是由C++实现的，它的实现对象是ObjectMonitor.<br>(2).ObjectMonitor对象的主要属性如下：<br> _count：记录该线程获取锁的次数（也就是前前后后，这个线程一共获取此锁多少次）；<br> _recursions：锁的重入次数；<br> _owner：The Owner拥有者，是持有该ObjectMonitor（监视器）对象的线程；<br> _EntryList：EntryList 监控集合，存放的是处于阻塞状态的线程队列，在多线程下，竞争失败的线程会进入 EntryList 队列；<br> _WaitSet：WaitSet 待授权集合，存放的是处于 wait 状态的线程队列,当线程执行了 wait() 方法之后,会进入 WaitSet 队列；<br>(3).监视器执行的流程如下：<br> 1.线程通过 CAS（对比并替换）尝试获取锁，如果获取成功，就将 _owner 字段设置为当前线程，说明当前线程已经持有锁，并将 _recursions 重入次数的属性 +1。如果获取失败则先通过自旋 CAS 尝试获取锁，如果还是失败则将当前线程放入到 EntryList 监控队列（阻塞）;<br> 2.当拥有锁的线程执行了 wait 方法之后，线程释放锁，将 owner 变量恢复为 null 状态，同时将该线程放入 WaitSet 待授权队列中等待被唤醒;<br> 3.当调用 notify 方法时，随机唤醒 WaitSet 队列中的某一个线程，当调用 notifyAll 时唤醒所有的 WaitSet 中的线程尝试获取锁;<br> 4.线程执行完释放了锁之后，会唤醒 EntryList 中的所有线程尝试获取锁;</li>
<li>OS和硬件层面<br> X86 : lock cmpxchg<br><img src="/images/jvm/%E5%90%8C%E6%AD%A5%E7%9B%91%E8%A7%86%E5%99%A8%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.jpg"></li>
</ol>
<h3 id="Java并发内存模型"><a href="#Java并发内存模型" class="headerlink" title="Java并发内存模型"></a>Java并发内存模型</h3><p><img src="/images/jvm/Java%E5%B9%B6%E5%8F%91%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.jpg"></p>
]]></content>
  </entry>
  <entry>
    <title>Java类加载机制</title>
    <url>/2022/07/31/JVM/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h3 id="JVM相关的理论"><a href="#JVM相关的理论" class="headerlink" title="JVM相关的理论"></a>JVM相关的理论</h3><ol>
<li>JVM跨语言的平台，不管任何语言，只要能编译程class文件，都可以在JVM上执行;</li>
<li>JVM是一种规范</li>
</ol>
<h3 id="JVM-JRE-JDK"><a href="#JVM-JRE-JDK" class="headerlink" title="JVM,JRE,JDK"></a>JVM,JRE,JDK</h3><ol>
<li>JVM：java虚拟机</li>
<li>JRE：java运行时环境 = JVM + Java核心类库</li>
<li>JDK：JRE + 编译器等开发工具</li>
</ol>
<h3 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h3><ol>
<li>加载（Loading）：将class文件加载进内存；</li>
<li>链接(Linking)[验证(Verification) –&gt; 准备(Preparation) –&gt; 解析(Resolution)]<br> 1.验证(Verification)：校验加载进来的class文件是否符合class文件的标准；(校验文件是否符合JVM规定)<br> 2.准备(Preparation)：为class文件的静态成员变量赋默认值；<br> 3.解析(Resolution)：将class文件的符号引用转换成直接引用；将类，方法，属性等符号引用解析为直接引用，常量池中的各种符号引用解析为指针、偏移量等内存地址的直接引用；</li>
<li>初始化（Initialization）：给静态成员变量赋初始值，这一步才执行静态代码块；调用类初始化代码<clinit>,给静态成员变量<br> 赋初始值</clinit></li>
</ol>
<h3 id="类加载过程中赋初始值和new对象的赋初始值"><a href="#类加载过程中赋初始值和new对象的赋初始值" class="headerlink" title="类加载过程中赋初始值和new对象的赋初始值"></a>类加载过程中赋初始值和new对象的赋初始值</h3><ol>
<li>load - 默认值 - 初始值</li>
<li>new - 申请内存 - 默认值 - 初始值</li>
</ol>
<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><ul>
<li>双重检查锁，在前一个线程获取到锁进行对象初始化的时候，对象初始化的正确顺序（1：分配对象的内存空间；2：初始化对象；3：设置instance指向刚分配的内存地址）, 此时发生了指令重排序，先将对象引用指向了内存地址，还没有初始化象但是此时对象还没有赋值，对象引用已经指向了对象的内存地址，这时候其他线程检查对象是否为null的时候，发现对象不为null,此时其他线程使用的是这个半初始化状态的对象从而引发一些问题；解决方案：单例对象加上volatile<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoadingProcedure</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(T.count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> T t = <span class="keyword">new</span> T(); <span class="comment">// null</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">2</span>; <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//private int m = 8;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">T</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        count ++;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;--&quot; + count);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="JVM的懒加载"><a href="#JVM的懒加载" class="headerlink" title="JVM的懒加载"></a>JVM的懒加载</h3><ul>
<li>理解：Jvm采用的是懒加载的方式进行类加载的，也就是按需加载，只有这个类被用到时候才会去加载；</li>
</ul>
<h3 id="类加载器的分类："><a href="#类加载器的分类：" class="headerlink" title="类加载器的分类："></a>类加载器的分类：</h3><ol>
<li>启动类加载器(引导类加载器，Bootstrap ClassLoader)：加载一些java核心类的jar包及扩展类加载器和系统类加载器</li>
<li>扩展类加载器(Extension ClassLoader)：主要用于加载(D:\jdk1.8\jre\lib\ext，C:\WINDOWS\Sun\Java\lib\ext)下的jar包</li>
<li>系统类加载器(应用程序类加载器，Application ClassLoader)：父类加载器为扩展类加载器，它负责加载环境变量classpath或系统属性java.class.path指定路径下的类库，可以通过ClassLoader.getSystemClassLoader()来获取该类的加载器</li>
<li>用户自定义加载器(User ClassLoader)：java开发者可以自定义类加载器来实现类库的动态加载，加载源可以是本地的jar包，也可以是网络上的远程资源<br> 注意：Application ClassLoader和Extension ClassLoader类加载器的加载器是Bootstrap ClassLoader;</li>
</ol>
<h3 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h3><p>1.双亲委派机制里的父加载器：这里父加载器并不是指父类加载器，Application ClassLoader和Extension ClassLoader都继承自URLClassLoader,之所以称之为父加载器，是因为双亲委派机制的逻辑类似于字类将任务委托给父类查找是否加载了某个类，所以称之为父加载器;</p>
<h3 id="为什么要使用双亲委派机制"><a href="#为什么要使用双亲委派机制" class="headerlink" title="为什么要使用双亲委派机制"></a>为什么要使用双亲委派机制</h3><ol>
<li>保护程序安全，防止核心API被随意篡改(例如在src下创建java.lang包，编写自己的String类)；</li>
<li>避免了类的重复加载，确保一个类是全局唯一性的，通过这种层级关系避免了类的重复加载；<br> 补充：在一个类加载器的命名空间中，同一个类型的类只会有一个；<br> 注意：同一个类型由不同的类加载器加载，执行类型转换时会发生异常；<br> 双亲委派机制的弊端：底层ClassLoader可以通过parent属性来获取父类的所加载的类，但是顶层ClassLoader无法访问底层ClassLoader所加载的类</li>
</ol>
<h3 id="打破双亲委派机制"><a href="#打破双亲委派机制" class="headerlink" title="打破双亲委派机制"></a>打破双亲委派机制</h3><ol>
<li>JDK1.2之前，自定义ClassLoader是需要重写LoadClass方法的；</li>
<li>可以设置线程上下文类加载器，Thread.currentThread().setContextClassLoader(this.loader);</li>
<li>热部署：自定义classLoader重写loadClass方法，当触发热部署条件时，直接重写构建一个新的classLoader进行类加载，这样就可以保证加载的内容都是最新的;同一个tomcat的web容器中两个应用可以加载不同版本jar包：每个模块都有自己的classLoader;</li>
</ol>
<h3 id="Launcher"><a href="#Launcher" class="headerlink" title="Launcher"></a>Launcher</h3><ul>
<li>理解：Launcher为类加载器的启动类，常见的类加载器为其内部类，内部定义了类加载器的加载范围；</li>
</ul>
<ol>
<li>Bootstrap ClassLoader： String bootClassPath = System.getProperty(“sun.boot.class.path”);</li>
<li>ExtClassLoader：String var0 = System.getProperty(“java.ext.dirs”);</li>
<li>AppClassLoader：String var1 = System.getProperty(“java.class.path”);</li>
</ol>
<h3 id="Java是解释执行的语言还是编译执行的语言"><a href="#Java是解释执行的语言还是编译执行的语言" class="headerlink" title="Java是解释执行的语言还是编译执行的语言"></a>Java是解释执行的语言还是编译执行的语言</h3><ol>
<li>解释器：bytecode intepreter</li>
<li>JIT：Just In-Time compiler</li>
<li>混合模式：<br> 1.混合使用解释器 + 热点代码编译<br> 2.起始阶段采用解释执行<br> 3.热点代码检测 ： -XX:CompileThreshold = 10000<br> -多次被调用的方法（方法计数器：监测方法执行频率）<br> -多次被调用的循环（循环计数器：检测循环执行频率）<br> -进行编译<br> -Xmixed 默认为混合模式<br> 开始解释执行，启动速度较快，对热点代码实行检测和编译<br> -Xint 使用解释模式，启动很快，执行稍慢<br> -Xcomp 使用纯编译模式，执行很快，启动很慢</li>
</ol>
]]></content>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>contorller层统一异常处理组件</title>
    <url>/2020/06/25/contorller%E5%B1%82%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%BB%84%E4%BB%B6/contorller%E5%B1%82%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理:"></a>实现原理:</h3><p>异常结果拦截逻辑<br>contorller层统一异常处理组件是通过spring的ControllerAdvice和ExceptionHandler来 拦截系统controller方法执行抛异常的请求，然后对异常结果做统一的封装，底层还是spring的aop实现。</p>
<h3 id="异常处理逻辑："><a href="#异常处理逻辑：" class="headerlink" title="异常处理逻辑："></a>异常处理逻辑：</h3><p>配置文件指定异常处理策略：在系统启动时，加载exceptionCode.properties配置文件来 指定对特定异常进行统一错误响应码、统一错误消息的封装策略(通过 exceptionCode.properties指定的方式后续需要去掉)。 继承BuzzErrorException指定异常处理策 </p>
<h3 id="异常处理类解析：-业务异常类BuzzErrorException"><a href="#异常处理类解析：-业务异常类BuzzErrorException" class="headerlink" title="异常处理类解析： 业务异常类BuzzErrorException"></a>异常处理类解析： 业务异常类BuzzErrorException</h3><p>在我们进行业务处理时，绝大多数时不会对业务执行过程中抛出的异常进行捕获后进行特殊 的业务处理，而是直接抛出，所以BuzzErrorException通过基础RuntimeException，这样 业务系统抛出的业务异常不要每次都去捕获后又原封不动抛出，或在方法签名上加上一个很长的异常列表。 在实现自己的业务异常类时需要继承BuzzErrorException，并且可以通过errorCode来指定返回给前端的错误码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 〈一句话功能简述〉&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * Description: 统一业务异常处理类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuzzErrorException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> errorCode = <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BuzzErrorException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="string">&quot;未知异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BuzzErrorException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BuzzErrorException</span><span class="params">(String message, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BuzzErrorException</span><span class="params">(Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BuzzErrorException</span><span class="params">(<span class="keyword">int</span> errorCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(errorCode,<span class="string">&quot;未知异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BuzzErrorException</span><span class="params">(String message, Throwable cause, <span class="keyword">boolean</span> enableSuppression, <span class="keyword">boolean</span> writableStackTrace)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BuzzErrorException</span><span class="params">(<span class="keyword">int</span> errorCode, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">        <span class="keyword">this</span>.errorCode = errorCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BuzzErrorException</span><span class="params">(<span class="keyword">int</span> errorCode,String message, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, cause);</span><br><span class="line">        <span class="keyword">this</span>.errorCode = errorCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BuzzErrorException</span><span class="params">(<span class="keyword">int</span> errorCode,Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(cause);</span><br><span class="line">        <span class="keyword">this</span>.errorCode = errorCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getErrorCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> errorCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setErrorCode</span><span class="params">(<span class="keyword">int</span> errorCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.errorCode = errorCode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="controller统一业务异常处类-GlobalExceptionHandler"><a href="#controller统一业务异常处类-GlobalExceptionHandler" class="headerlink" title="controller统一业务异常处类:GlobalExceptionHandler"></a>controller统一业务异常处类:GlobalExceptionHandler</h3><p>统一异常处理入口方法： 在拦截到controller方法执行异常时，会通过执行所抛出的异常生成异常信息和响应错误码 包装到GlobalExceptionHandler.ErrorMessage 类中，然后包装成响应结果对象返回给前端：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(value = Exception.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">defaultErrorHandler</span><span class="params">(HttpServletRequest request,HttpServletResponse response, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	logger.error(ex.getMessage(), ex);</span><br><span class="line">	ErrorMessage mess = getMessage(ex);</span><br><span class="line">	ResponseEntity result = returnException(mess);</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		response.setContentType(<span class="string">&quot;text/plain; charset=UTF-8&quot;</span>);</span><br><span class="line">		response.getWriter().write(JSONObject.toJSONString(result));</span><br><span class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">		logger.error(<span class="string">&quot;返回异常&quot;</span>,e.getMessage());</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> ModelAndView();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="根据异常对象生成异常结果对象ErrorMessage"><a href="#根据异常对象生成异常结果对象ErrorMessage" class="headerlink" title="根据异常对象生成异常结果对象ErrorMessage:"></a>根据异常对象生成异常结果对象ErrorMessage:</h3><p>生成异常结果对象的步骤如下：<br>1.通过配置文件指定的异常处理策略来生成异常结果对象;<br>2.如果是BuzzErrorException的子类，则通过BuzzErrorException的errorCode和 message来生成异常结果对象;<br>3.如果不为BuzzErrorException的子类但为包装异常类，则通过包装的异常类生成异常结果对象;<br>4.如果为其他情况，就按照Exception类生成默认的系统异常结果对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ErrorMessage <span class="title">getMessage</span><span class="params">(Throwable th)</span> </span>&#123;</span><br><span class="line">	ErrorMessage mess = <span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">if</span> (th <span class="keyword">instanceof</span> BuzzErrorException)&#123;</span><br><span class="line">		BuzzErrorException buzzErrorException = (BuzzErrorException)th;</span><br><span class="line">		mess = <span class="keyword">new</span> ErrorMessage(buzzErrorException.getErrorCode(),buzzErrorException.getMessage());</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (th <span class="keyword">instanceof</span> BncErrorException) &#123;</span><br><span class="line">		BncErrorException bncErrorException = (BncErrorException)th;</span><br><span class="line">		mess = <span class="keyword">new</span> ErrorMessage(<span class="number">4002</span>,bncErrorException.getMessage());</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (th.getCause() != <span class="keyword">null</span>)&#123;</span><br><span class="line">		mess = getMessage(th.getCause());</span><br><span class="line">	&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">		ErrorMsgDetail errorMsgDetail = getErrorMsgDetail(th);</span><br><span class="line">		String exceptionMsg = errorMsgDetail.getExceptionMsg();</span><br><span class="line">		<span class="keyword">boolean</span> hasMsg = StringUtils.isBlank(exceptionMsg) || exceptionMsg.equals(<span class="string">&quot;null&quot;</span>);</span><br><span class="line">		mess = <span class="keyword">new</span> ErrorMessage(<span class="number">500</span>, hasMsg ? <span class="string">&quot;系统异常,请联系管理员!&quot;</span> : exceptionMsg, errorMsgDetail);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> mess;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>MySql调优</title>
    <url>/2022/07/17/MySql/MySql%E8%B0%83%E4%BC%98/</url>
    <content><![CDATA[<h3 id="show-profiles"><a href="#show-profiles" class="headerlink" title="show profiles"></a>show profiles</h3><ul>
<li>查看SQL各阶段的执行时间,可以具体到SQL的哪个点执行慢;<br><img src="/images/mysql/showProfile%E7%9A%84%E4%BD%BF%E7%94%A8.jpg"></li>
</ul>
<h3 id="performance-schema"><a href="#performance-schema" class="headerlink" title="performance_schema"></a>performance_schema</h3><pre><code>作用：监控当前这台服务器上面MySql的一些性能使用情况，我们一般说性能的时候，不能说只看SQL语句，这不对，
需要直到当前这条SQL语句耗费了多少cpu资源，耗费了多少IO资源，耗费多少内存资源
</code></pre>
<h3 id="show-processlist"><a href="#show-processlist" class="headerlink" title="show processlist"></a>show processlist</h3><ul>
<li>使用show processlist查看连接的线程个数,来观察是否有大量线程处于不正常的状态或者其他不正常的特征；</li>
</ul>
<h3 id="索引优化细节"><a href="#索引优化细节" class="headerlink" title="索引优化细节"></a>索引优化细节</h3><ol>
<li></li>
<li>隐式类型转换导致走不上索引</li>
<li>实测count(1)和count(※)效率一样,可以使用show status like ‘last_query_cost’查看两者的执行成本</li>
<li>order by和groupby的列尽量建索引，确保任何的order by和groupby中的表达式只涉及到一个表中的列，这样mysql才有可能使用索引来优化这个过程</li>
<li>优化子查询,子查询的优化最重要的优化建议是尽可能使用关联查询代替,子查询会产生临时表,但是这里替换成关联查询的效率不一定效率会更高，还是需要根据实际情况对两条SQL进行分析，提出这一点的目的是为了在实际生产中能够保持优化的习惯，更多的去对比多种查询方式所带来的实际效果</li>
</ol>
<h3 id="关联查询优化"><a href="#关联查询优化" class="headerlink" title="关联查询优化"></a>关联查询优化</h3><ol>
<li><p>Simple Nested-Loop Join<br><img src="/images/mysql/Simple-Nested-Loop-Join.jpg"></p>
</li>
<li><p>Index Nested-Loop Join<br><img src="/images/mysql/Index-Nested-Loop-Join.jpg"></p>
</li>
<li><p>Block Nested-Loop Join<br><img src="/images/mysql/Block-Nested-Loop-Join.jpg"></p>
<p> （1）Join Buffer会缓存所有参与查询的列而不是只有Join的列。<br> （2）可以通过调整join_buffer_size缓存大小<br> （3）join_buffer_size的默认值是256K,join_buffer_size的最大值在MySQL5.1.22版本前是4G-1，而之后的版本才能在64位操作系统下申请大于4G的Join Buffer空间。<br> （4）使用Block Nested-Loop Join算法需要开启优化器管理配置的optimizer_switch的设置block_nested_loop为on，默认为开启。<br> （5）show variables like ‘%optimizer_switch%’</p>
</li>
<li><p>查看不同的顺序执行方式对查询性能的影响： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">explain select film.film_id,film.title,film.release_year,</span><br><span class="line">actor.actor_id,actor.first_name,actor.last_name </span><br><span class="line">from film inner join film_actor using(film_id) </span><br><span class="line">inner join actor using(actor_id); </span><br><span class="line">查看执行的成本： </span><br><span class="line">show status like &#39;last_query_cost&#39;;  </span><br><span class="line">按照自己预想的规定顺序执行： </span><br><span class="line">explain select straight_join film.film_id,film.title,film.release_year,</span><br><span class="line">actor.actor_id,actor.first_name,actor.last_name </span><br><span class="line">from film inner join film_actor using(film_id) </span><br><span class="line">inner join actor using(actor_id); </span><br><span class="line">查看执行的成本： </span><br><span class="line">show status like &#39;last_query_cost&#39;;  </span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="排序优化"><a href="#排序优化" class="headerlink" title="排序优化"></a>排序优化</h3><p>理解：无论如何排序都是一个成本很高的操作，所以从性能的角度出发，应该尽可能避免排序或者尽可能避免对大量数据进行排序。<br>推荐使用利用索引进行排序，但是当不能使用索引的时候，mysql就需要自己进行排序，如果数据量小则在内存中进行，如果数据量大就需要使用磁盘，mysql中称之为filesort。<br>如果需要排序的数据量小于排序缓冲区(show variables like ‘%sort_buffer_size%’;),mysql使用内存进行快速排序操作，如果内存不够排序，那么mysql就会先将树分块，对每个独立的块使用快速排序进行排序，并将各个块的排序结果存放再磁盘上，然后将各个排好序的块进行合并，最后返回排序结果 </p>
<h3 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h3><ol>
<li>两次传输排序：第一次数据读取是将需要排序的字段读取出来，然后进行排序，第二次是将排好序的结果按照需要去读取数据行。<br>两次传输的优势，在排序的时候存储尽可能少的数据，让排序缓冲区可以尽可能多的容纳行数来进行排序操作,但增加第二次读取数据的IO成本</li>
<li>单次传输排序：先读取查询所需要的所有列，然后再根据给定列进行排序，最后直接返回排序结果，此方式只需要一次顺序IO读取所有的数据，而无须任何的随机IO，问题在于查询的列特别多的时候，会占用大量的存储空间，无法存储大量的数据 </li>
<li>当需要排序的列的总大小超过max_length_for_sort_data定义的字节,mysql会选择双次排序,反之使用单次排序,当然,用户可以设置此参数的值来选择排序的方式</li>
</ol>
]]></content>
      <tags>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title>dubbo统一异常处理组件</title>
    <url>/2021/03/02/dubbo%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%BB%84%E4%BB%B6/dubbo%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="dubbo统一异常处理原理："><a href="#dubbo统一异常处理原理：" class="headerlink" title="dubbo统一异常处理原理："></a>dubbo统一异常处理原理：</h3><p> dubbo作为rpc服务，会存在服务提供方抛出的异常的类型信息在传输到服务使用方时存在 类型丢失。类型丢失的原因如下: 1.基于java的多态性，所以rpc接口的生产者在接口服务实现时抛出的异常时接口api定义的 异常的子类，但该异常不在api的jar包中导致有可能在使用方的上下文中没有加载该异常 类。2.非捕获异常RuntimeException因为不需要在代码中显示捕获异常并处理，所以这类异常 可以不在方法签名中定义，所以服务生产者抛出的RuntimeException有可能在使用方的上 下文中没有加载该异常类。 如果服务提供方包装的异常类传递到服务使用方，但是因为上下文中没有加载该异常类，就 会导致解析rpc响应结果失败，所以dubbo在框架上通过ExceptionFilter来对rpc调用过程 中的异常进行统一处理。 </p>
<h3 id="dubbo统一异常处理默认扩展点实现类"><a href="#dubbo统一异常处理默认扩展点实现类" class="headerlink" title="dubbo统一异常处理默认扩展点实现类:"></a>dubbo统一异常处理默认扩展点实现类:</h3><p>com.alibaba.dubbo.rpc.filter.ExceptionFilter该扩展点为provider的扩展点，ExceptionFilter对异常的处理逻辑如下： 1.判断rpc结果中是否有异常，如果没有异常，则直接返回 2.如果抛出的异常是可捕获异常，则直接返回 3.如果所抛出异常在api的方法签名上有，则直接将结果返回 4.如果抛出异常类定义的jar包和rpc接口服务类定义的jar包文件是同一个，则直接将结果返 回5.如果异常为RpcException则直接将结果返回 6.如果为其他情况(RuntimeException子类并且没有在api对应的jar包中未定义)，这时服务 生产者就不能推断出服务消费者已经加载了这个异常类，则创建一个RuntimeException异 常并将原异常的堆栈信息设置成新异常的message作为最后响应结果的异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.dubbo.rpc.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.common.extension.Activate;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.common.logger.Logger;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.common.logger.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.common.utils.ReflectUtils;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.common.utils.StringUtils;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.rpc.Filter;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.rpc.Invocation;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.rpc.Invoker;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.rpc.Result;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.rpc.RpcContext;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.rpc.RpcException;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.rpc.RpcResult;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.rpc.service.GenericService;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Activate(</span></span><br><span class="line"><span class="meta">    group = &#123;&quot;provider&quot;&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExceptionFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(LoggerFactory.getLogger(ExceptionFilter.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExceptionFilter</span><span class="params">(Logger logger)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.logger = logger;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(Invoker&lt;?&gt; invoker, Invocation invocation)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Result result = invoker.invoke(invocation);</span><br><span class="line">            <span class="keyword">if</span> (result.hasException() &amp;&amp; GenericService.class != invoker.getInterface()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Throwable exception = result.getException();</span><br><span class="line">                    <span class="keyword">if</span> (!(exception <span class="keyword">instanceof</span> RuntimeException) &amp;&amp; exception <span class="keyword">instanceof</span> Exception) &#123;</span><br><span class="line">                        <span class="keyword">return</span> result;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Method method = invoker.getInterface().getMethod(invocation.getMethodName(), invocation.getParameterTypes());</span><br><span class="line">                            Class&lt;?&gt;[] exceptionClassses = method.getExceptionTypes();</span><br><span class="line">                            Class[] arr$ = exceptionClassses;</span><br><span class="line">                            <span class="keyword">int</span> len$ = exceptionClassses.length;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">int</span> i$ = <span class="number">0</span>; i$ &lt; len$; ++i$) &#123;</span><br><span class="line">                                Class&lt;?&gt; exceptionClass = arr$[i$];</span><br><span class="line">                                <span class="keyword">if</span> (exception.getClass().equals(exceptionClass)) &#123;</span><br><span class="line">                                    <span class="keyword">return</span> result;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (NoSuchMethodException var11) &#123;</span><br><span class="line">                            <span class="keyword">return</span> result;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">this</span>.logger.error(<span class="string">&quot;Got unchecked and undeclared exception which called by &quot;</span> + RpcContext.getContext().getRemoteHost() + <span class="string">&quot;. service: &quot;</span> + invoker.getInterface().getName() + <span class="string">&quot;, method: &quot;</span> + invocation.getMethodName() + <span class="string">&quot;, exception: &quot;</span> + exception.getClass().getName() + <span class="string">&quot;: &quot;</span> + exception.getMessage(), exception);</span><br><span class="line">                        String serviceFile = ReflectUtils.getCodeBase(invoker.getInterface());</span><br><span class="line">                        String exceptionFile = ReflectUtils.getCodeBase(exception.getClass());</span><br><span class="line">                        <span class="keyword">if</span> (serviceFile != <span class="keyword">null</span> &amp;&amp; exceptionFile != <span class="keyword">null</span> &amp;&amp; !serviceFile.equals(exceptionFile)) &#123;</span><br><span class="line">                            String className = exception.getClass().getName();</span><br><span class="line">                            <span class="keyword">if</span> (!className.startsWith(<span class="string">&quot;java.&quot;</span>) &amp;&amp; !className.startsWith(<span class="string">&quot;javax.&quot;</span>)) &#123;</span><br><span class="line">                                <span class="keyword">return</span> (Result)(exception <span class="keyword">instanceof</span> RpcException ? result : <span class="keyword">new</span> RpcResult(<span class="keyword">new</span> RuntimeException(StringUtils.toString(exception))));</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="keyword">return</span> result;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span> result;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable var12) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.logger.warn(<span class="string">&quot;Fail to ExceptionFilter when called by &quot;</span> + RpcContext.getContext().getRemoteHost() + <span class="string">&quot;. service: &quot;</span> + invoker.getInterface().getName() + <span class="string">&quot;, method: &quot;</span> + invocation.getMethodName() + <span class="string">&quot;, exception: &quot;</span> + var12.getClass().getName() + <span class="string">&quot;: &quot;</span> + var12.getMessage(), var12);</span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException var13) &#123;</span><br><span class="line">            <span class="keyword">this</span>.logger.error(<span class="string">&quot;Got unchecked and undeclared exception which called by &quot;</span> + RpcContext.getContext().getRemoteHost() + <span class="string">&quot;. service: &quot;</span> + invoker.getInterface().getName() + <span class="string">&quot;, method: &quot;</span> + invocation.getMethodName() + <span class="string">&quot;, exception: &quot;</span> + var13.getClass().getName() + <span class="string">&quot;: &quot;</span> + var13.getMessage(), var13);</span><br><span class="line">            <span class="keyword">throw</span> var13;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义dubbo统一异常处理组件原理："><a href="#自定义dubbo统一异常处理组件原理：" class="headerlink" title="自定义dubbo统一异常处理组件原理："></a>自定义dubbo统一异常处理组件原理：</h3><p>如果直接通过dubbo默认的统一异常处理策略，则在我们的服务生产者中抛出的 BuzzErrorException都会包装成RuntimeException并且异常消息变成了异常堆栈信息，就 不能通过controller的统一异常处理来生成正确的前端异常响应结果。 本组件通过添加自定义的默认Filter扩展点来对服务生产者抛出的BuzzErrorException统一 处理。 </p>
<h3 id="dubbo的FIlter执行顺序的逻辑："><a href="#dubbo的FIlter执行顺序的逻辑：" class="headerlink" title="dubbo的FIlter执行顺序的逻辑："></a>dubbo的FIlter执行顺序的逻辑：</h3><p><img src="/images/dubbo%E7%9A%84FIlter%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F%E7%9A%84%E9%80%BB%E8%BE%91.jpg"></p>
<p>根据dubbo的FIlter执行顺序的逻辑，因为请求的异常处理，是在一个Filter的后置处理中执 行的。所以如果自定义的异常处理Filter需要在dubbo默认的异常处理ExceptionFilter之前 进行执行，则需要将自定义的异常处理Filter的执行顺序编号要比ExceptionFilter，所以可 以将自定义异常处理的Filter的执行顺序编号定义为最大值. </p>
<h3 id="自定义dubbo统一异常处理组件扩展原理图："><a href="#自定义dubbo统一异常处理组件扩展原理图：" class="headerlink" title="自定义dubbo统一异常处理组件扩展原理图："></a>自定义dubbo统一异常处理组件扩展原理图：</h3><p><img src="/images/%E8%87%AA%E5%AE%9A%E4%B9%89dubbo%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%BB%84%E4%BB%B6%E6%89%A9%E5%B1%95%E5%8E%9F%E7%90%86%E5%9B%BE.jpg"></p>
<h3 id="服务端统一异常处理拦截器：-BuzzProviderExceptionFilter"><a href="#服务端统一异常处理拦截器：-BuzzProviderExceptionFilter" class="headerlink" title="服务端统一异常处理拦截器： BuzzProviderExceptionFilter"></a>服务端统一异常处理拦截器： BuzzProviderExceptionFilter</h3><p>现有的实现逻辑中跟大部分逻辑在dubbo的默认异常处理中的逻辑异常相同，后续可以优 化掉，只保留对BuzzErrorException的异常处理逻辑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.common.Constants;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.common.extension.Activate;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.common.utils.StringUtils;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.rpc.*;</span><br><span class="line"><span class="keyword">import</span> com.banksteel.openerp.commons.exception.BuzzErrorException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Activate(group = Constants.PROVIDER,order =Integer.MAX_VALUE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuzzProviderExceptionFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(Invoker&lt;?&gt; invoker, Invocation invocation)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> buildErrorResult(invoker,invocation,invoker.invoke(invocation));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Result <span class="title">buildErrorResult</span><span class="params">(Invoker&lt;?&gt; invoker,Invocation invocation,Result result)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (result.hasException())&#123;</span><br><span class="line">            <span class="keyword">if</span> (noBuildException(invoker,invocation,result.getException()))&#123;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">            Throwable error = buildErrorException(result.getException());</span><br><span class="line">            <span class="keyword">if</span> (result <span class="keyword">instanceof</span> RpcResult)&#123;</span><br><span class="line">                ((RpcResult) result).setException(error);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> RpcResult(error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Throwable <span class="title">buildErrorException</span><span class="params">(Throwable exception)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(exception.getMessage()))&#123;</span><br><span class="line">            <span class="keyword">if</span> (Objects.nonNull(exception.getCause()))&#123;</span><br><span class="line">                <span class="keyword">return</span> buildErrorException(exception.getCause());</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> exception;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            Exception causeError = <span class="keyword">new</span> Exception(StringUtils.toString(exception));</span><br><span class="line">            <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> BuzzErrorException)&#123;</span><br><span class="line">                RpcException error = <span class="keyword">new</span> RpcException(exception.getMessage(),causeError);</span><br><span class="line">                error.setCode(RpcException.BIZ_EXCEPTION);</span><br><span class="line">                <span class="keyword">return</span> error;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> exception;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">noBuildException</span><span class="params">(Invoker&lt;?&gt; invoker, Invocation invocation, Throwable exception)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 如果是checked异常，直接抛出</span></span><br><span class="line">        <span class="keyword">if</span> (! (exception <span class="keyword">instanceof</span> RuntimeException) &amp;&amp; (exception <span class="keyword">instanceof</span> Exception)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在方法签名上有声明，直接抛出</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Method method = invoker.getInterface().getMethod(invocation.getMethodName(), invocation.getParameterTypes());</span><br><span class="line">            Class&lt;?&gt;[] exceptionClassses = method.getExceptionTypes();</span><br><span class="line">            <span class="keyword">for</span> (Class&lt;?&gt; exceptionClass : exceptionClassses) &#123;</span><br><span class="line">                <span class="keyword">if</span> (exception.getClass().equals(exceptionClass)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="消费端统一异常处理拦截器：-BuzzConsumerExceptionFilter"><a href="#消费端统一异常处理拦截器：-BuzzConsumerExceptionFilter" class="headerlink" title="消费端统一异常处理拦截器： BuzzConsumerExceptionFilter"></a>消费端统一异常处理拦截器： BuzzConsumerExceptionFilter</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.common.Constants;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.common.extension.Activate;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.rpc.*;</span><br><span class="line"><span class="keyword">import</span> com.banksteel.openerp.commons.exception.BuzzErrorException;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Activate(group = Constants.CONSUMER,order =Integer.MAX_VALUE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuzzConsumerExceptionFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(Invoker&lt;?&gt; invoker, Invocation invocation)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> buildErrorResult(invoker.invoke(invocation));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Result <span class="title">buildErrorResult</span><span class="params">(Result result)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (result.hasException())&#123;</span><br><span class="line">            Throwable error = buildErrorException(result.getException());</span><br><span class="line">            <span class="keyword">if</span> (result <span class="keyword">instanceof</span> RpcResult)&#123;</span><br><span class="line">                ((RpcResult) result).setException(error);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> RpcResult(error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Throwable <span class="title">buildErrorException</span><span class="params">(Throwable exception)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> RpcException)&#123;</span><br><span class="line">            RpcException rpcException = (RpcException) exception;</span><br><span class="line">            <span class="keyword">if</span> (Objects.equals(rpcException.getCode(),RpcException.BIZ_EXCEPTION))&#123;</span><br><span class="line">                BuzzErrorException errorException = <span class="keyword">new</span> BuzzErrorException(rpcException.getMessage(),exception);</span><br><span class="line">                <span class="keyword">return</span> errorException;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> exception;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="设置默认装载自定义过滤器："><a href="#设置默认装载自定义过滤器：" class="headerlink" title="设置默认装载自定义过滤器："></a>设置默认装载自定义过滤器：</h3><p>在commans工程resource下的META-INF目录下创建dubbo 目录，并创建文件com.alibaba.dubbo.rpc.Filter，指定自定义的异常处理Filter类为默认扩展点:<br>buzzProviderExceptionFilter=com.commons.rpc.BuzzProviderExceptionFilter<br>BuzzConsumerExceptionFilter=com.commons.rpc.BuzzConsumerExceptionFilter</p>
]]></content>
  </entry>
  <entry>
    <title>MySql执行计划</title>
    <url>/2022/08/15/MySql/MySql%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<h3 id="1、执行计划中包含的信息"><a href="#1、执行计划中包含的信息" class="headerlink" title="1、执行计划中包含的信息"></a>1、执行计划中包含的信息</h3><table>
<thead>
<tr>
<th align="center">Column</th>
<th align="center">Meaning</th>
</tr>
</thead>
<tbody><tr>
<td align="center">id</td>
<td align="center">表示查询中执行select子句或者操作表的顺序,值越大越先执行</td>
</tr>
<tr>
<td align="center">select_type</td>
<td align="center">主要用来分辨查询的类型，是普通查询还是联合查询还是子查询</td>
</tr>
<tr>
<td align="center">table</td>
<td align="center">对应行正在访问哪一个表，表名或者别名，可能是临时表或者union合并结果集</td>
</tr>
<tr>
<td align="center">partitions</td>
<td align="center">The matching partitions</td>
</tr>
<tr>
<td align="center">type</td>
<td align="center">type显示的是访问类型,一般情况下，得保证查询至少达到range级别，最好能达到ref</td>
</tr>
<tr>
<td align="center">possible_keys</td>
<td align="center">显示可能应用在这张表中的索引，一个或多个</td>
</tr>
<tr>
<td align="center">key</td>
<td align="center">实际使用的索引，如果为null，则没有使用索引</td>
</tr>
<tr>
<td align="center">key_len</td>
<td align="center">表示索引中使用的字节数，可以通过key_len计算查询中使用的索引长度</td>
</tr>
<tr>
<td align="center">ref</td>
<td align="center">显示索引的哪一列被使用了，如果可能的话，是一个常数</td>
</tr>
<tr>
<td align="center">rows</td>
<td align="center">根据表的统计信息及索引使用情况，大致估算出找出所需记录需要读取的行数</td>
</tr>
<tr>
<td align="center">filtered</td>
<td align="center">Percentage of rows filtered by table condition</td>
</tr>
<tr>
<td align="center">extra</td>
<td align="center">包含额外的信息</td>
</tr>
</tbody></table>
<h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3><p>select查询的序列号，包含一组数字，表示查询中执行select子句或者操作表的顺序<br>id号分为三种情况：<br>​1、如果id相同，那么执行顺序从上到下</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp e <span class="keyword">join</span> dept d <span class="keyword">on</span> e.deptno <span class="operator">=</span> d.deptno <span class="keyword">join</span> salgrade sg <span class="keyword">on</span> e.sal </span><br><span class="line"><span class="keyword">between</span> sg.losal <span class="keyword">and</span> sg.hisal;</span><br></pre></td></tr></table></figure>
<p>​2、如果id不同，如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp e <span class="keyword">where</span> e.deptno <span class="keyword">in</span> (<span class="keyword">select</span> d.deptno <span class="keyword">from</span> dept d <span class="keyword">where</span> d.dname <span class="operator">=</span> <span class="string">&#x27;SALES&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>​3、id相同和不同的，同时存在：相同的可以认为是一组，从上往下顺序执行，在所有组中，id值越大，优先级越高，越先执行</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp e <span class="keyword">join</span> dept d <span class="keyword">on</span> e.deptno <span class="operator">=</span> d.deptno <span class="keyword">join</span> salgrade sg <span class="keyword">on</span> e.sal </span><br><span class="line"><span class="keyword">between</span> sg.losal <span class="keyword">and</span> sg.hisal <span class="keyword">where</span> e.deptno <span class="keyword">in</span> (<span class="keyword">select</span> d.deptno <span class="keyword">from</span> dept d <span class="keyword">where</span> d.dname <span class="operator">=</span> <span class="string">&#x27;SALES&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="select-type"><a href="#select-type" class="headerlink" title="select_type"></a>select_type</h3><p>主要用来分辨查询的类型，是普通查询还是联合查询还是子查询</p>
<table>
<thead>
<tr>
<th align="center">select_type Value</th>
<th align="center">Meaning</th>
</tr>
</thead>
<tbody><tr>
<td align="center">SIMPLE</td>
<td align="center">Simple SELECT (not using UNION or subqueries)</td>
</tr>
<tr>
<td align="center">PRIMARY</td>
<td align="center">Outermost SELECT</td>
</tr>
<tr>
<td align="center">UNION</td>
<td align="center">Second or later SELECT statement in a UNION</td>
</tr>
<tr>
<td align="center">DEPENDENT UNION</td>
<td align="center">Second or later SELECT statement in a UNION, dependent on outer query</td>
</tr>
<tr>
<td align="center">UNION RESULT</td>
<td align="center">Result of a UNION.</td>
</tr>
<tr>
<td align="center">SUBQUERY</td>
<td align="center">First SELECT in subquery</td>
</tr>
<tr>
<td align="center">DEPENDENT SUBQUERY</td>
<td align="center">First SELECT in subquery, dependent on outer query</td>
</tr>
<tr>
<td align="center">DERIVED</td>
<td align="center">Derived table</td>
</tr>
<tr>
<td align="center">UNCACHEABLE SUBQUERY</td>
<td align="center">A subquery for which the result cannot be cached and must be re-evaluated for each row of the outer query</td>
</tr>
<tr>
<td align="center">UNCACHEABLE UNION</td>
<td align="center">The second or later select in a UNION that belongs to an uncacheable subquery (see UNCACHEABLE SUBQUERY)</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--sample:简单的查询，不包含子查询和union</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">--primary:查询中若包含任何复杂的子查询，最外层查询则被标记为Primary</span></span><br><span class="line">explain <span class="keyword">select</span> staname,ename supname <span class="keyword">from</span> (<span class="keyword">select</span> ename staname,mgr <span class="keyword">from</span> emp) t </span><br><span class="line"><span class="keyword">join</span> emp <span class="keyword">on</span> t.mgr<span class="operator">=</span>emp.empno ;</span><br><span class="line"></span><br><span class="line"><span class="comment">--union:若第二个select出现在union之后，则被标记为union</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> deptno <span class="operator">=</span> <span class="number">10</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="operator">&gt;</span><span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--dependent union:跟union类似，此处的depentent表示union或union all联合而成的结果会受外部表影响</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp e <span class="keyword">where</span> e.empno  <span class="keyword">in</span> ( <span class="keyword">select</span> empno <span class="keyword">from</span> emp <span class="keyword">where</span> deptno <span class="operator">=</span> <span class="number">10</span> </span><br><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> empno <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="operator">&gt;</span><span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--union result:从union表获取结果的select</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> deptno <span class="operator">=</span> <span class="number">10</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="operator">&gt;</span><span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--subquery:在select或者where列表中包含子查询</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="operator">&gt;</span> (<span class="keyword">select</span> <span class="built_in">avg</span>(sal) <span class="keyword">from</span> emp) ;</span><br><span class="line"></span><br><span class="line"><span class="comment">--dependent subquery:subquery的子查询要受到外部表查询的影响</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp e <span class="keyword">where</span> e.deptno <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">distinct</span> deptno <span class="keyword">from</span> dept);</span><br><span class="line"></span><br><span class="line"><span class="comment">--DERIVED: from子句中出现的子查询，也叫做派生类，</span></span><br><span class="line">explain <span class="keyword">select</span> staname,ename supname <span class="keyword">from</span> (<span class="keyword">select</span> ename staname,mgr <span class="keyword">from</span> emp) t </span><br><span class="line"><span class="keyword">join</span> emp <span class="keyword">on</span> t.mgr<span class="operator">=</span>emp.empno ;</span><br><span class="line"></span><br><span class="line"><span class="comment">--UNCACHEABLE SUBQUERY：表示使用子查询的结果不能被缓存</span></span><br><span class="line"> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> empno <span class="operator">=</span> (<span class="keyword">select</span> empno <span class="keyword">from</span> emp <span class="keyword">where</span> deptno<span class="operator">=</span>@<span class="variable">@sort</span>_buffer_size);</span><br><span class="line"> </span><br><span class="line"><span class="comment">--uncacheable union:表示union的查询结果不能被缓存：sql语句未验证</span></span><br></pre></td></tr></table></figure>

<h3 id="table"><a href="#table" class="headerlink" title="table"></a>table</h3><p>对应行正在访问哪一个表，表名或者别名，可能是临时表或者union合并结果集<br>1、如果是具体的表名，则表明从实际的物理表中获取数据，当然也可以是表的别名</p>
<p>​2、表名是derivedN的形式，表示使用了id为N的查询产生的衍生表</p>
<p>3、当有union result的时候，表名是union n1,n2等的形式，n1,n2表示参与union的id</p>
<h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><p>type显示的是访问类型，访问类型表示我是以何种方式去访问我们的数据，最容易想的是全表扫描，直接暴力的遍历一张表去寻找需要的数据，效率非常低下，访问的类型有很多，效率从最好到最坏依次是：</p>
<p>system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL </p>
<p>一般情况下，得保证查询至少达到range级别，最好能达到ref</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--all:全表扫描，一般情况下出现这样的sql语句而且数据量比较大的话那么就需要进行优化。</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">--index：全索引扫描这个比all的效率要好，主要有两种情况，一种是当前的查询时覆盖索引，即我们需要的数据在索引中就可以索取,</span></span><br><span class="line">或者是使用了索引进行排序，这样就避免数据的重排序</span><br><span class="line">explain  <span class="keyword">select</span> empno <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">--range：表示利用索引查询的时候限制了范围，在指定范围内进行查询，这样避免了index的全索引扫描，</span></span><br><span class="line">适用的操作符： <span class="operator">=</span>, <span class="operator">&lt;&gt;</span>, <span class="operator">&gt;</span>, <span class="operator">&gt;=</span>, <span class="operator">&lt;</span>, <span class="operator">&lt;=</span>, <span class="keyword">IS</span> <span class="keyword">NULL</span>, <span class="keyword">BETWEEN</span>, <span class="keyword">LIKE</span>, <span class="keyword">or</span> <span class="keyword">IN</span>() </span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> empno <span class="keyword">between</span> <span class="number">7000</span> <span class="keyword">and</span> <span class="number">7500</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--index_subquery：利用索引来关联子查询，不再扫描全表</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> emp.job <span class="keyword">in</span> (<span class="keyword">select</span> job <span class="keyword">from</span> t_job);</span><br><span class="line"></span><br><span class="line"><span class="comment">--unique_subquery:该连接类型类似与index_subquery,使用的是唯一索引</span></span><br><span class="line"> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp e <span class="keyword">where</span> e.deptno <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">distinct</span> deptno <span class="keyword">from</span> dept);</span><br><span class="line"> </span><br><span class="line"><span class="comment">--index_merge：在查询过程中需要多个索引组合使用，没有模拟出来</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--ref_or_null：对于某个字段即需要关联条件，也需要null值的情况下，查询优化器会选择这种访问方式</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp e <span class="keyword">where</span>  e.mgr <span class="keyword">is</span> <span class="keyword">null</span> <span class="keyword">or</span> e.mgr<span class="operator">=</span><span class="number">7369</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--ref：使用了非唯一性索引进行数据的查找</span></span><br><span class="line"> <span class="keyword">create</span> index idx_3 <span class="keyword">on</span> emp(deptno);</span><br><span class="line"> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp e,dept d <span class="keyword">where</span> e.deptno <span class="operator">=</span>d.deptno;</span><br><span class="line"></span><br><span class="line"><span class="comment">--eq_ref ：使用唯一性索引进行数据查找</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp,emp2 <span class="keyword">where</span> emp.empno <span class="operator">=</span> emp2.empno;</span><br><span class="line"></span><br><span class="line"><span class="comment">--const：这个表至多有一个匹配行，</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> empno <span class="operator">=</span> <span class="number">7369</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">--system：表只有一行记录（等于系统表），这是const类型的特例，平时不会出现</span></span><br></pre></td></tr></table></figure>

<h3 id="possible-keys"><a href="#possible-keys" class="headerlink" title="possible_keys"></a>possible_keys</h3><p>显示可能应用在这张表中的索引，一个或多个，查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询实际使用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp,dept <span class="keyword">where</span> emp.deptno <span class="operator">=</span> dept.deptno <span class="keyword">and</span> emp.deptno <span class="operator">=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<h3 id="key"><a href="#key" class="headerlink" title="key"></a>key</h3><p>实际使用的索引，如果为null，则没有使用索引，查询中若使用了覆盖索引，则该索引和查询的select字段重叠。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp,dept <span class="keyword">where</span> emp.deptno <span class="operator">=</span> dept.deptno <span class="keyword">and</span> emp.deptno <span class="operator">=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<h3 id="key-len"><a href="#key-len" class="headerlink" title="key_len"></a>key_len</h3><p>表示索引中使用的字节数，可以通过key_len计算查询中使用的索引长度，在不损失精度的情况下长度越短越好。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp,dept <span class="keyword">where</span> emp.deptno <span class="operator">=</span> dept.deptno <span class="keyword">and</span> emp.deptno <span class="operator">=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><p>显示索引的哪一列被使用了，如果可能的话，是一个常数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp,dept <span class="keyword">where</span> emp.deptno <span class="operator">=</span> dept.deptno <span class="keyword">and</span> emp.deptno <span class="operator">=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<h3 id="rows"><a href="#rows" class="headerlink" title="rows"></a>rows</h3><p>根据表的统计信息及索引使用情况，大致估算出找出所需记录需要读取的行数，此参数很重要，直接反应的sql找了多少数据，在完成目的的情况下越少越好</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure>

<h3 id="extra"><a href="#extra" class="headerlink" title="extra"></a>extra</h3><p>包含额外的信息。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--using filesort:说明mysql无法利用索引进行排序，只能利用排序算法进行排序，会消耗额外的位置</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal;</span><br><span class="line"></span><br><span class="line"><span class="comment">--using temporary:建立临时表来保存中间结果，查询完成之后把临时表删除</span></span><br><span class="line">explain <span class="keyword">select</span> ename,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> emp <span class="keyword">where</span> deptno <span class="operator">=</span> <span class="number">10</span> <span class="keyword">group</span> <span class="keyword">by</span> ename;</span><br><span class="line"></span><br><span class="line"><span class="comment">--using index:这个表示当前的查询时覆盖索引的，直接从索引中读取数据，而不用访问数据表。如果同时出现using where 表名索引被用来执行索引键值的查找，如果没有，表面索引被用来读取数据，而不是真的查找</span></span><br><span class="line">explain <span class="keyword">select</span> deptno,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno limit <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--using where:使用where进行条件过滤</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--using join buffer:使用连接缓存，情况没有模拟出来</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--impossible where：where语句的结果总是false</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> empno <span class="operator">=</span> <span class="number">7469</span>;</span><br></pre></td></tr></table></figure>






]]></content>
      <tags>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql数据结构</title>
    <url>/2022/08/15/MySql/MySql%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h3 id="MySql数据结构选择"><a href="#MySql数据结构选择" class="headerlink" title="MySql数据结构选择"></a>MySql数据结构选择</h3><p><img src="/images/mysql/mysql%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%80%89%E6%8B%A9.jpg"><br><img src="/images/mysql/%E7%BA%A2%E9%BB%91%E6%A0%91.jpg"><br><img src="/images/mysql/mysql%E7%B4%A2%E5%BC%95%E7%B3%BB%E7%BB%9F.jpg"></p>
<h3 id="为什么不使用B树而采用B-树"><a href="#为什么不使用B树而采用B-树" class="headerlink" title="为什么不使用B树而采用B+树"></a>为什么不使用B树而采用B+树</h3><p>B树和B+树的主要区别：<br>1.B的数据分布在所有节点之上，而B+树的数据都是分布在叶子节点上,非叶子节点存储都是key和子节点地址信息;<br>2.B+最下层两个节点之间有双向指针,能够更好的支持范围查询;</p>
<p>知识储备：MySql在读取数据的时候采用的是磁盘预读;<br>磁盘预读的好处：<br>    1.当某个数据库操作，数据库需要从磁盘上频繁读取数据的时候，会产生相对较多的IO等待，影响性能；<br>    2.为了避免这个情况，数据库采用了预读的机制，也就是当读取的内存中还有若干页需要处理的时候就开始触发磁盘预读，而且是预读若干连续的数据页，从而提高效率<br>Linux默认页大小4kb<br>Mysql默认的innodb_page_size：16KB<br>在默认情况下,MySql每次最多读取4页数据进内存，如果data分布在所有节点上,这里我们可以做一个估算，假设每个data数据 + key + 字节点地址信息的大小为1KB,这样一次只能读取16条数据进内存，假设B+树为3层,只能支撑4096条数据</p>
<p>而采用B+树,非叶子节点只存储key和子节点地址信息,假设每个key + 字节点信息为10个字节,这样一次就能读取1600左右的key进入内存,这样可以得出3层B+树就可以支撑百万级到千万级得数据量</p>
<p>好处：</p>
<h3 id="MySql存储引擎"><a href="#MySql存储引擎" class="headerlink" title="MySql存储引擎"></a>MySql存储引擎</h3><p>InnoDB存储引擎：数据和索引是存放在一个文件的<br>MyISAM存储引擎：数据和索引是分开存放的<br>两者索引存储的数据结构都是采用的B+树<br>这种分开和放在一起存放方式就决定了最终我们在查找数据节点的查找方式是不一样的<br>InnoDB的叶子节点所存储就是我们实际上的一整行数据;<br>MyISAM的叶子节点所存储只是我们实际一整行数据所对应的地址,然后根据地址去myd文件里找到实际的数据</p>
<p>InnoDB是通过B+树结构对主键创建索引的,然后叶子节点中存储记录,如果没有主键,那么会选择唯一键,如果没有唯一键,那么它会生成一个6位的row_id作为主键</p>
<h3 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h3><h3 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h3><h3 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h3><h3 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h3><h3 id="组合索引"><a href="#组合索引" class="headerlink" title="组合索引"></a>组合索引</h3><h3 id="回表"><a href="#回表" class="headerlink" title="回表"></a>回表</h3><p>比如说使用name列创建索引,当我们使用name去查询数据的时候,会先查询使用name构建的B+树索引结构,获取到那么所对应的叶子节点,然后获取到叶子节点对应数据的主键,再根据主键去查询主键对应的B+树索引结构,在获取到叶子节点中整行的数据;此时就称之为回表</p>
<h3 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h3><ol>
<li>创建一个索引,该索引包含查询中用到的所有字段,称为”覆盖索引”</li>
<li>还有一种特殊情况,当创建了非主键索引,但是我们只查询主键的时候,同样可以称之为”覆盖索引”,因为非主键索引去查询数据时,是会先去查询自己的B+树索引结构,获取到叶子节点的主键,由于这里只需要查询主键,所以不需要回表,所以这种情况也是覆盖索引;</li>
</ol>
<h3 id="最左匹配原则"><a href="#最左匹配原则" class="headerlink" title="最左匹配原则"></a>最左匹配原则</h3><p>当我们项目有大量的查询同时用到name和age来进行查询,此时可以创建name和age的组合索引,<br>select * from emp where name = ? AND age = ?  //走的上索引 — 这里查询优化器会自动优化查询顺序,name和age更换位置也可以<br>select * from emp where age = ?  // 走不上索引<br>select * from emp where name = ?  // 走的上索引<br>必须先有最左边,索引才能走的上,所以这里我们在建立索引的时候需要根据字段查询优先级来决定创建索引时的顺序</p>
<p>这里创建索引有两种方案：<br>1.name_age和age;<br>2.age_name和name;<br>在大多数情况下第一种是更好的,因为我们的索引也需要占存储空间,如果使用age所占的存储空间相对来说要更小点的;<br>在高版本MySql中是优化器是支持索引合并的;</p>
<h3 id="索引下推"><a href="#索引下推" class="headerlink" title="索引下推"></a>索引下推</h3><p>在MySql5.6之前,我们建立联合索引,是无法使用到索引下推的,比如说我们建立name和age的组合索引,当我们的查询语句是where name = ‘’ AND age = ‘’;Mysql首先是会通过索引找到所有name的匹配的叶子节点对应的主键id,然后通过主键id回表查询到叶子节点对应的整行数据，然后交给mysql的server层处理，server层会将age匹配行筛选出来;<br>在MySql5.6之后,我们通过索引找到name匹配的数据中直接对组合索引里匹配的列进行筛选得到对应的主键id,减少了回表次数,也就是减少了IO操作;</p>
]]></content>
      <tags>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title>代理模式模式</title>
    <url>/2022/08/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="代理模式模式"><a href="#代理模式模式" class="headerlink" title="代理模式模式"></a>代理模式模式</h3><ol>
<li>动态代理：代理类可以在被代理类调用方法执行前后穿插其他操作;</li>
<li>Jdk的Proxy实现动态代理：代理类实现InvocationHandler,使用Proxy.newProxyInstance(ClassLoader loader,<br>Class&lt;?&gt;[] interfaces, InvocationHandler h)创建代理对象,使用代理对象调用代理方法;</li>
<li>Cglib实现动态代理：创建Enhancer.create()创建代理对象调用代理方法对象,为Enhancer设置代理类,设置MethodInterceptor,这里的MethodInterceptor相当于proxy的InvocationHandler,Enhancer.create()创建代理对象调用代理方法;</li>
</ol>
<h3 id="JDK动态代理的原理"><a href="#JDK动态代理的原理" class="headerlink" title="JDK动态代理的原理"></a>JDK动态代理的原理</h3><p>理解：在我们实现JDK动态代理时的核心代码是调用Proxy类newProxyInstance方法,传入被代理类的ClassLoader,它实现的接口及InvocationHandler,这里我们可以通过Proxy这个核心类了解动态代理的实现原理,它内部首先会为生成代理类的class文件做好准备工作,例如包名为com.sun.proxy,类名为$Proxy加上从零开始的数字,然后会根据传入的代理类的接口中方法再加上hashCode,equals,toString及以InvocationHandler为参数的构造器生成代理类的字节码数组,然后判断是否需要保存文件,保存文件的话创建文件夹,将字节码写入文件,然后返回代理类的class对象,然后根据代理类的class对象获取构造器,然后以传入的InvocationHandler为参数调用构造器的newInstance方法,返回代理对象实例;当使用代理对象执行被代理对象的方法时,通过生成的代理对象的class文件可以发现,它内部其实是调用的是我们传入的InvocationHandler的invoke方法,而我们传入的InvovationHandler的invoke方法的实现逻辑可以由我们自己编写,由此我们就实现了创建代理对象,增强<br>被代理对象方法的目的;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader,</span></span></span><br><span class="line"><span class="function"><span class="params">                                          Class&lt;?&gt;[] interfaces,</span></span></span><br><span class="line"><span class="function"><span class="params">                                          InvocationHandler h)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">    Objects.requireNonNull(h);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Class&lt;?&gt;[] intfs = interfaces.clone();</span><br><span class="line">    <span class="keyword">final</span> SecurityManager sm = System.getSecurityManager();</span><br><span class="line">    <span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</span><br><span class="line">        checkProxyAccess(Reflection.getCallerClass(), loader, intfs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Look up or generate the designated proxy class.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Class&lt;?&gt; cl = getProxyClass0(loader, intfs);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Invoke its constructor with the designated invocation handler.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</span><br><span class="line">            checkNewProxyPermission(Reflection.getCallerClass(), cl);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);</span><br><span class="line">        <span class="keyword">final</span> InvocationHandler ih = h;</span><br><span class="line">        <span class="keyword">if</span> (!Modifier.isPublic(cl.getModifiers())) &#123;</span><br><span class="line">            AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> Void <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    cons.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cons.newInstance(<span class="keyword">new</span> Object[]&#123;h&#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException|InstantiationException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e.toString(), e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">        Throwable t = e.getCause();</span><br><span class="line">        <span class="keyword">if</span> (t <span class="keyword">instanceof</span> RuntimeException) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (RuntimeException) t;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(t.toString(), t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e.toString(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Class&lt;?&gt; getProxyClass0(ClassLoader loader,</span><br><span class="line">                                           Class&lt;?&gt;... interfaces) &#123;</span><br><span class="line">    <span class="keyword">if</span> (interfaces.length &gt; <span class="number">65535</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;interface limit exceeded&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the proxy class defined by the given loader implementing</span></span><br><span class="line">    <span class="comment">// the given interfaces exists, this will simply return the cached copy;</span></span><br><span class="line">    <span class="comment">// otherwise, it will create the proxy class via the ProxyClassFactory</span></span><br><span class="line">    <span class="keyword">return</span> proxyClassCache.get(loader, interfaces);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key, P parameter)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(parameter);</span><br><span class="line"></span><br><span class="line">    expungeStaleEntries();</span><br><span class="line"></span><br><span class="line">    Object cacheKey = CacheKey.valueOf(key, refQueue);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// lazily install the 2nd level valuesMap for the particular cacheKey</span></span><br><span class="line">    ConcurrentMap&lt;Object, Supplier&lt;V&gt;&gt; valuesMap = map.get(cacheKey);</span><br><span class="line">    <span class="keyword">if</span> (valuesMap == <span class="keyword">null</span>) &#123;</span><br><span class="line">        ConcurrentMap&lt;Object, Supplier&lt;V&gt;&gt; oldValuesMap</span><br><span class="line">            = map.putIfAbsent(cacheKey,</span><br><span class="line">                              valuesMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;());</span><br><span class="line">        <span class="keyword">if</span> (oldValuesMap != <span class="keyword">null</span>) &#123;</span><br><span class="line">            valuesMap = oldValuesMap;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create subKey and retrieve the possible Supplier&lt;V&gt; stored by that</span></span><br><span class="line">    <span class="comment">// subKey from valuesMap</span></span><br><span class="line">    Object subKey = Objects.requireNonNull(subKeyFactory.apply(key, parameter));</span><br><span class="line">    Supplier&lt;V&gt; supplier = valuesMap.get(subKey);</span><br><span class="line">    Factory factory = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (supplier != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// supplier might be a Factory or a CacheValue&lt;V&gt; instance</span></span><br><span class="line">            V value = supplier.get();</span><br><span class="line">            <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// else no supplier in cache</span></span><br><span class="line">        <span class="comment">// or a supplier that returned null (could be a cleared CacheValue</span></span><br><span class="line">        <span class="comment">// or a Factory that wasn&#x27;t successful in installing the CacheValue)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// lazily construct a Factory</span></span><br><span class="line">        <span class="keyword">if</span> (factory == <span class="keyword">null</span>) &#123;</span><br><span class="line">            factory = <span class="keyword">new</span> Factory(key, parameter, subKey, valuesMap);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (supplier == <span class="keyword">null</span>) &#123;</span><br><span class="line">            supplier = valuesMap.putIfAbsent(subKey, factory);</span><br><span class="line">            <span class="keyword">if</span> (supplier == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// successfully installed Factory</span></span><br><span class="line">                supplier = factory;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// else retry with winning supplier</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (valuesMap.replace(subKey, supplier, factory)) &#123;</span><br><span class="line">                <span class="comment">// successfully replaced</span></span><br><span class="line">                <span class="comment">// cleared CacheEntry / unsuccessful Factory</span></span><br><span class="line">                <span class="comment">// with our Factory</span></span><br><span class="line">                supplier = factory;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// retry with current supplier</span></span><br><span class="line">                supplier = valuesMap.get(subKey);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Class&lt;?&gt; apply(ClassLoader loader, Class&lt;?&gt;[] interfaces) &#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;Class&lt;?&gt;, Boolean&gt; interfaceSet = <span class="keyword">new</span> IdentityHashMap&lt;&gt;(interfaces.length);</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; intf : interfaces) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * Verify that the class loader resolves the name of this</span></span><br><span class="line"><span class="comment">             * interface to the same Class object.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            Class&lt;?&gt; interfaceClass = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                interfaceClass = Class.forName(intf.getName(), <span class="keyword">false</span>, loader);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (interfaceClass != intf) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    intf + <span class="string">&quot; is not visible from class loader&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * Verify that the Class object actually represents an</span></span><br><span class="line"><span class="comment">             * interface.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (!interfaceClass.isInterface()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    interfaceClass.getName() + <span class="string">&quot; is not an interface&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * Verify that this interface is not a duplicate.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (interfaceSet.put(interfaceClass, Boolean.TRUE) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    <span class="string">&quot;repeated interface: &quot;</span> + interfaceClass.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String proxyPkg = <span class="keyword">null</span>;     <span class="comment">// package to define proxy class in</span></span><br><span class="line">        <span class="keyword">int</span> accessFlags = Modifier.PUBLIC | Modifier.FINAL;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Record the package of a non-public proxy interface so that the</span></span><br><span class="line"><span class="comment">         * proxy class will be defined in the same package.  Verify that</span></span><br><span class="line"><span class="comment">         * all non-public proxy interfaces are in the same package.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; intf : interfaces) &#123;</span><br><span class="line">            <span class="keyword">int</span> flags = intf.getModifiers();</span><br><span class="line">            <span class="keyword">if</span> (!Modifier.isPublic(flags)) &#123;</span><br><span class="line">                accessFlags = Modifier.FINAL;</span><br><span class="line">                String name = intf.getName();</span><br><span class="line">                <span class="keyword">int</span> n = name.lastIndexOf(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">                String pkg = ((n == -<span class="number">1</span>) ? <span class="string">&quot;&quot;</span> : name.substring(<span class="number">0</span>, n + <span class="number">1</span>));</span><br><span class="line">                <span class="keyword">if</span> (proxyPkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    proxyPkg = pkg;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!pkg.equals(proxyPkg)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                        <span class="string">&quot;non-public interfaces from different packages&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (proxyPkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// if no non-public proxy interfaces, use com.sun.proxy package</span></span><br><span class="line">            proxyPkg = ReflectUtil.PROXY_PACKAGE + <span class="string">&quot;.&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Choose a name for the proxy class to generate.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">long</span> num = nextUniqueNumber.getAndIncrement();</span><br><span class="line">        String proxyName = proxyPkg + proxyClassNamePrefix + num;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Generate the specified proxy class.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">byte</span>[] proxyClassFile = ProxyGenerator.generateProxyClass(</span><br><span class="line">            proxyName, interfaces, accessFlags);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> defineClass0(loader, proxyName,</span><br><span class="line">                                proxyClassFile, <span class="number">0</span>, proxyClassFile.length);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassFormatError e) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * A ClassFormatError here means that (barring bugs in the</span></span><br><span class="line"><span class="comment">             * proxy class generation code) there was some other</span></span><br><span class="line"><span class="comment">             * invalid aspect of the arguments supplied to the proxy</span></span><br><span class="line"><span class="comment">             * class creation (such as virtual machine limitations</span></span><br><span class="line"><span class="comment">             * exceeded).</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(e.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] generateProxyClass(<span class="keyword">final</span> String var0, Class&lt;?&gt;[] var1, <span class="keyword">int</span> var2) &#123;</span><br><span class="line">    ProxyGenerator var3 = <span class="keyword">new</span> ProxyGenerator(var0, var1, var2);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">byte</span>[] var4 = var3.generateClassFile();</span><br><span class="line">    <span class="keyword">if</span> (saveGeneratedFiles) &#123;</span><br><span class="line">        AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Void <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">int</span> var1 = var0.lastIndexOf(<span class="number">46</span>);</span><br><span class="line">                    Path var2;</span><br><span class="line">                    <span class="keyword">if</span> (var1 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        Path var3 = Paths.get(var0.substring(<span class="number">0</span>, var1).replace(<span class="string">&#x27;.&#x27;</span>, File.separatorChar));</span><br><span class="line">                        Files.createDirectories(var3);</span><br><span class="line">                        var2 = var3.resolve(var0.substring(var1 + <span class="number">1</span>, var0.length()) + <span class="string">&quot;.class&quot;</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        var2 = Paths.get(var0 + <span class="string">&quot;.class&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    Files.write(var2, var4, <span class="keyword">new</span> OpenOption[<span class="number">0</span>]);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var4x) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(<span class="string">&quot;I/O exception saving generated file: &quot;</span> + var4x);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> var4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> Class&lt;?&gt; defineClass0(ClassLoader loader, String name, </span><br><span class="line">                                            <span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len);</span><br></pre></td></tr></table></figure>

<h3 id="Jdk的Proxy实现动态代理"><a href="#Jdk的Proxy实现动态代理" class="headerlink" title="Jdk的Proxy实现动态代理"></a>Jdk的Proxy实现动态代理</h3><p>理解：由Proxy的内部实现决定了jdk反射生成代理必须面向接口，通过ASM动态创建代理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tank</span> <span class="keyword">implements</span> <span class="title">Movable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Tank moving claclacla...&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">10000</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.getProperties().put(<span class="string">&quot;sun.misc.ProxyGenerator.saveGeneratedFiles&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        Tank tank = <span class="keyword">new</span> Tank();</span><br><span class="line"></span><br><span class="line">        System.getProperties().put(<span class="string">&quot;jdk.proxy.ProxyGenerator.saveGeneratedFiles&quot;</span>,<span class="string">&quot;true&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 参数1：代理类的类加载器</span></span><br><span class="line">        <span class="comment">// 参数2：代理类的接口数组</span></span><br><span class="line">        <span class="comment">// 参数3：InvocationHandler</span></span><br><span class="line">        Movable m = (Movable)Proxy.newProxyInstance(Tank.class.getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> Class[]&#123;Movable.class&#125;, <span class="comment">//tank.class.getInterfaces()</span></span><br><span class="line">                <span class="keyword">new</span> TimeProxy(tank)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        m.move();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimeProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    Movable m;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TimeProxy</span><span class="params">(Movable m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.m = m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;method start..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;method stop..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">//Arrays.stream(proxy.getClass().getMethods()).map(Method::getName)</span></span><br><span class="line">        <span class="comment">//					      .forEach(System.out::println);</span></span><br><span class="line">        before();</span><br><span class="line">        Object o = method.invoke(m, args);</span><br><span class="line">        after();</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Movable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Cglib动态代理的原理"><a href="#Cglib动态代理的原理" class="headerlink" title="Cglib动态代理的原理"></a>Cglib动态代理的原理</h3><p>理解:Cglib动态代理在我们创建Enhancer对象的时候就会准备好一个缓存,它包含一个类加载器和ClassLoaderData对象,ClassLoaderData里面包含两个Function函数的处理逻辑,一个是为了获取类生成器的key值,一个是为了获取字节码文件,当我们使用Enhancer创建代理对象时,会根据设置进Enhancer的被代理类的Class对象及实现了MethodInterceptor的Callback函数及解析被代理的所有方法,JDk的版本,以及构造方法等信息来构建代理类的字节码,然后根据字节码生成代理对象的实例.</p>
<p>理解:我们在使用Cglib创建代理对象时,首先需要创建一个Enhancer对象,在创建时需要创建一个KEY_FACTORY的内部对象,这个KEY_FACTORY<br>比较特殊,它是Enhancer的内部接口EnhanerKey类型,没有具体的实现类,需要通过动态代理的方式来创建它的代理实现类,创建Enhancer时还会准备好一个缓存,它包含一个类加载器和ClassLoaderData对象,ClassLoaderData里面包含两个Function函数的处理逻辑,一个是为了获取类生成器的key值,一个是为了获取字节码文件,当我们使用Enhancer创建代理对象时,会通过EnhancerKey接口的代理对象将被代理类的class对象,回调函数等值设置进去,然后再根据被代理类的Class对象及实现了MethodInterceptor的Callback函数及解析被代理的所有方法,JDk的版本,以及构造方法等信息来构建代理类的字节码,然后根据字节码生成代理对象的实例.</p>
<h3 id="Cglib实现动态代理"><a href="#Cglib实现动态代理" class="headerlink" title="Cglib实现动态代理"></a>Cglib实现动态代理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CGLIB实现动态代理代理类不需要实现接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        enhancer.setSuperclass(Tank.class);</span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> TimeMethodInterceptor());</span><br><span class="line">        Tank tank = (Tank)enhancer.create();</span><br><span class="line">        tank.move();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimeMethodInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, </span></span></span><br><span class="line"><span class="function"><span class="params">    						MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(o.getClass().getSuperclass().getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;before&quot;</span>);</span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line">        result = methodProxy.invokeSuper(o, objects);</span><br><span class="line">        System.out.println(<span class="string">&quot;after&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tank</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Tank moving claclacla...&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">10000</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/2022/08/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><ol>
<li><p>饿汉式：构造器私有化,直接初始化对象,调用getInstance方法获取单例对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySingleton1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MySingleton1 INSTANCE = <span class="keyword">new</span> MySingleton1();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MySingleton1</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MySingleton1 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>懒汉式:相较于饿汉式带来的好处是使用对象时才会去初始化对象，但是同时也带来了线程安全问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySingleton2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MySingleton2 INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MySingleton2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MySingleton2 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            INSTANCE = <span class="keyword">new</span> MySingleton2();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>双重检查单例:在一定程度上解决了懒汉式的线程安全问题，但是依然存在指令重排序带来的对象半初始化问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySingleton3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> MySingleton3 INSTANCE; <span class="comment">//JIT</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MySingleton3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MySingleton3 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//双重检查</span></span><br><span class="line">            <span class="keyword">synchronized</span> (MySingleton3.class) &#123;</span><br><span class="line">                <span class="keyword">if</span>(INSTANCE == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    INSTANCE = <span class="keyword">new</span> MySingleton3();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>静态内部类单例：加载外部类时不会加载静态内部类，这样可以实现懒加载，且JVM保证了静态内部类只会加载一次</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySingleton4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MySingleton4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Mgr07Holder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> MySingleton4 INSTANCE = <span class="keyword">new</span> MySingleton4();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MySingleton4 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Mgr07Holder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>枚举单例：枚举类经过反编译之后，其实它的枚举项都是static属性，在java的类加载机制中，在单例对象类被正真使用到的时候，会在对象创建过程中的linking阶段的Preparation阶段为静态变量赋默认值，在initialization阶段为对象赋初始值，而java类加载机制保证单例对象类只会被加载一次且类加载过程是线程安全的，枚举是没有构造方法的，所以不会在反序列化过程中通过反射重新new对象而导致单例被破坏</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">MySingleton5</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                System.out.println(MySingleton5.INSTANCE.hashCode());</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>总结：单例模式在实际生产中很少手动去实现，通常情况下我们会通过Spring来保证我们对象的单例，通过Spring的Bean工厂来获取单例对象</p>
]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>责任链模式</title>
    <url>/2022/08/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h3><p>理解:<br>    1. 责任链类：内部持有链上处理类的集合,有特殊需求时还需要维护执行到链上第几个处理器的索引；<br>    2. 处理接口：内部定义了处理类的规范，各个方法可以加上责任链类参数来保证是否需要完整的链式调用；<br>    2. 链上处理类：实现处理接口，编写具体的处理方法，并根据实际的需求判断是否继续执行剩下的链上处理类；</p>
<p>具体应用场景：</p>
<ol>
<li>Servlet的Filter：<br> 1.责任链类：FilterChain拦截器链,内部维护具体的拦截器集合;<br> 2.处理接口：Filter<br> 3.链上处理类：HttpFilter, CorsFilter等</li>
<li>Spring MVC的拦截器：<br> 1.责任链类：Spring MVC的DispatcherServlet中doDispatch中使用到HandlerExecutionChain这个类，它内部持有一个HandlerInterceptor集合和遍历handler并执行handler的一些方法，Spring MVC这段代码preHandle和postHandle的在责任链上的执行顺序分别是：preHanlde的执行是顺序遍历interceptor集合并执行，postHandle方法的执行是逆序遍历interceptor集合并执行;<br> 2.处理接口：HandlerInterceptor<br> 3.链上处理类：WebContentInterceptor，CorsInterceptor及自定义拦截器<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 责任链类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerExecutionChain</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(HandlerExecutionChain.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object handler;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">private</span> HandlerInterceptor[] interceptors;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="comment">// 处理器拦截器集合</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;HandlerInterceptor&gt; interceptorList;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> interceptorIndex;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HandlerExecutionChain</span><span class="params">(Object handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(handler, (HandlerInterceptor[])<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HandlerExecutionChain</span><span class="params">(Object handler, <span class="meta">@Nullable</span> HandlerInterceptor... interceptors)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.interceptorIndex = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (handler <span class="keyword">instanceof</span> HandlerExecutionChain) &#123;</span><br><span class="line">            HandlerExecutionChain originalChain = (HandlerExecutionChain)handler;</span><br><span class="line">            <span class="keyword">this</span>.handler = originalChain.getHandler();</span><br><span class="line">            <span class="keyword">this</span>.interceptorList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">            CollectionUtils.mergeArrayIntoCollection(originalChain.getInterceptors(), <span class="keyword">this</span>.interceptorList);</span><br><span class="line">            CollectionUtils.mergeArrayIntoCollection(interceptors, <span class="keyword">this</span>.interceptorList);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.handler = handler;</span><br><span class="line">            <span class="keyword">this</span>.interceptors = interceptors;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">applyPreHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HandlerInterceptor[] interceptors = <span class="keyword">this</span>.getInterceptors();</span><br><span class="line">        <span class="keyword">if</span> (!ObjectUtils.isEmpty(interceptors)) &#123;</span><br><span class="line">        	<span class="comment">// 顺序遍历执行interceptor的prehandle方法</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; interceptors.length; <span class="keyword">this</span>.interceptorIndex = i++) &#123;</span><br><span class="line">                HandlerInterceptor interceptor = interceptors[i];</span><br><span class="line">                <span class="keyword">if</span> (!interceptor.preHandle(request, response, <span class="keyword">this</span>.handler)) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.triggerAfterCompletion(request, response, (Exception)<span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">applyPostHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@Nullable</span> ModelAndView mv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HandlerInterceptor[] interceptors = <span class="keyword">this</span>.getInterceptors();</span><br><span class="line">        <span class="keyword">if</span> (!ObjectUtils.isEmpty(interceptors)) &#123;</span><br><span class="line">        	<span class="comment">// 逆序遍历执行interceptor的posthandle方法</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = interceptors.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">                HandlerInterceptor interceptor = interceptors[i];</span><br><span class="line">                interceptor.postHandle(request, response, <span class="keyword">this</span>.handler, mv);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 处理接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, <span class="meta">@Nullable</span> ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, <span class="meta">@Nullable</span> Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 链上处理类</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> <span class="keyword">implements</span> <span class="title">CorsConfigurationSource</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CorsConfiguration config;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CorsInterceptor</span><span class="params">(<span class="meta">@Nullable</span> CorsConfiguration config)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.config = config;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line">        <span class="keyword">return</span> asyncManager.hasConcurrentResult() ? <span class="keyword">true</span> : AbstractHandlerMapping.<span class="keyword">this</span>.corsProcessor.processRequest(<span class="keyword">this</span>.config, request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsConfiguration <span class="title">getCorsConfiguration</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.config;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="责任链模式使用"><a href="#责任链模式使用" class="headerlink" title="责任链模式使用"></a>责任链模式使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Request request = <span class="keyword">new</span> Request();</span><br><span class="line">        request.str = <span class="string">&quot;request, &lt;script&gt;,我是一名java工程师，我的梦想是做一名架构师&quot;</span>;</span><br><span class="line">        Response response = <span class="keyword">new</span> Response();</span><br><span class="line">        response.str = <span class="string">&quot;response&quot;</span>;</span><br><span class="line"></span><br><span class="line">        FilterChain chain = <span class="keyword">new</span> FilterChain();</span><br><span class="line">        chain.add(<span class="keyword">new</span> HTMLFilter()).add(<span class="keyword">new</span> SensitiveFilter());</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">        System.out.println(request.str);</span><br><span class="line">        System.out.println(response.str);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Request</span> </span>&#123;</span><br><span class="line">    String str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Response</span> </span>&#123;</span><br><span class="line">    String str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(Request request, Response response, FilterChain chain)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HTMLFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(Request request, Response response, FilterChain chain)</span> </span>&#123;</span><br><span class="line">        request.str = request.str.replaceAll(<span class="string">&quot;&lt;&quot;</span>, <span class="string">&quot;[&quot;</span>).replaceAll(<span class="string">&quot;&gt;&quot;</span>, <span class="string">&quot;]&quot;</span>) + <span class="string">&quot;HTMLFilter()&quot;</span>;</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">        response.str += <span class="string">&quot;--HTMLFilter()&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SensitiveFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(Request request, Response response, FilterChain chain)</span> </span>&#123;</span><br><span class="line">        request.str = request.str.replaceAll(<span class="string">&quot;java&quot;</span>, <span class="string">&quot;后端&quot;</span>) + <span class="string">&quot; SensitiveFilter()&quot;</span>;</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">        response.str += <span class="string">&quot;--SensitiveFilter()&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FilterChain</span> </span>&#123;</span><br><span class="line">    List&lt;Filter&gt; filters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterChain <span class="title">add</span><span class="params">(Filter f)</span> </span>&#123;</span><br><span class="line">        filters.add(f);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(Request request, Response response)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index == filters.size()) <span class="keyword">return</span>;</span><br><span class="line">        Filter f = filters.get(index);</span><br><span class="line">        index ++;</span><br><span class="line"></span><br><span class="line">        f.doFilter(request, response, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>观察者模式</title>
    <url>/2022/08/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>理解：<br>    1.被观察者类：内部持有观察者集合，当被观察者触发某个事件，根据具体事件调用所有的被观察者;<br>    2.观察者类：根据被观察者触发的事件做出具体的动作;<br>    3.事件类：根据被观察者定义具体的事件信息；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> cry = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        observers.add(<span class="keyword">new</span> Dad());</span><br><span class="line">        observers.add(<span class="keyword">new</span> Mum());</span><br><span class="line">        observers.add(<span class="keyword">new</span> Dog());</span><br><span class="line">        observers.add((e)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;ppp&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//hook callback function</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cry;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wakeUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cry = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        wakeUpEvent event = <span class="keyword">new</span> wakeUpEvent(System.currentTimeMillis(), <span class="string">&quot;bed&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Observer o : observers) &#123;</span><br><span class="line">            o.actionOnWakeUp(event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Event</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> T <span class="title">getSource</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">wakeUpEvent</span> <span class="keyword">extends</span> <span class="title">Event</span>&lt;<span class="title">Child</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">long</span> timestamp;</span><br><span class="line">    String loc;</span><br><span class="line">    Child source;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">wakeUpEvent</span><span class="params">(<span class="keyword">long</span> timestamp, String loc, Child source)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.timestamp = timestamp;</span><br><span class="line">        <span class="keyword">this</span>.loc = loc;</span><br><span class="line">        <span class="keyword">this</span>.source = source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">Child <span class="title">getSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> source;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">actionOnWakeUp</span><span class="params">(wakeUpEvent event)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dad</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">feed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dad feeding...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionOnWakeUp</span><span class="params">(wakeUpEvent event)</span> </span>&#123;</span><br><span class="line">        feed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mum</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hug</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;mum hugging...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionOnWakeUp</span><span class="params">(wakeUpEvent event)</span> </span>&#123;</span><br><span class="line">        hug();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wang</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dog wang...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionOnWakeUp</span><span class="params">(wakeUpEvent event)</span> </span>&#123;</span><br><span class="line">        wang();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Child c = <span class="keyword">new</span> Child();</span><br><span class="line">        <span class="comment">//do sth</span></span><br><span class="line">        c.wakeUp();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总结：观察者模式其实大量被应用，例如：回调函数（callback）,钩子函数（hook）,监听器等</p>
]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>策略模式</title>
    <url>/2022/08/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><p>理解：<br>    1. 策略接口定义策略实现类的规范(一般策略接口内部方法定义泛型参数提高代码的灵活性);<br>    2. 多个策略实现类实现策略接口，编写各自的具体的策略方法实现；<br>    3. 策略调用类,一般会通过两种方式来调用不同的策略实现，第一种方式是策略调用类内聚策略接口属性，在具体的方法中赋值为具体的策略实现；第二种就是通过调用方法传参，调用方法加上策略接口参数,具体使用哪种策略实现通过传参实现；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 策略接口</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(T o1, T o2)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;m&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 具体的策略接口实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CatWeightComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Cat</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Cat o1, Cat o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(o1.weight &lt; o2.weight) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (o1.weight &gt; o2.weight) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CatHeightComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Cat</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Cat o1, Cat o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(o1.height &gt; o2.height) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (o1.height &lt; o2.height) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Dog</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Dog o1, Dog o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(o1.food &lt; o2.food) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (o1.food &gt; o2.food) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 策略调用类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sorter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内聚策略接口属性</span></span><br><span class="line">    <span class="keyword">private</span> Comparator myComparator;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过内聚策略接口形式实现策略调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort1</span><span class="params">(T[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[<span class="number">0</span>] <span class="keyword">instanceof</span> Cat) &#123;</span><br><span class="line">            myComparator = <span class="keyword">new</span> CatWeightComparator();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            myComparator = <span class="keyword">new</span> DogComparator();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> minPos = i;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;arr.length; j++) &#123;</span><br><span class="line">                minPos = myComparator.compare(arr[j],arr[minPos])==-<span class="number">1</span> ? j : minPos;</span><br><span class="line">            &#125;</span><br><span class="line">            swap(arr, i, minPos);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过传参形式实现策略调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] arr, Comparator&lt;T&gt; comparator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> minPos = i;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;arr.length; j++) &#123;</span><br><span class="line">                minPos = comparator.compare(arr[j],arr[minPos])==-<span class="number">1</span> ? j : minPos;</span><br><span class="line">            &#125;</span><br><span class="line">            swap(arr, i, minPos);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(T[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        T temp = arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring源码</title>
    <url>/2022/09/04/Spring%E6%BA%90%E7%A0%81/Spring%E6%BA%90%E7%A0%81(%E4%B8%80)/</url>
    <content><![CDATA[<h3 id="prepareRefresh-容器刷新前的准备工作"><a href="#prepareRefresh-容器刷新前的准备工作" class="headerlink" title="prepareRefresh(容器刷新前的准备工作)"></a>prepareRefresh(容器刷新前的准备工作)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">prepareRefresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 设置容器启动时间</span></span><br><span class="line">	<span class="keyword">this</span>.startupDate = System.currentTimeMillis();</span><br><span class="line">	<span class="comment">// 设置关闭标志位为false和活跃标志位为true</span></span><br><span class="line">	<span class="keyword">this</span>.closed.set(<span class="keyword">false</span>);</span><br><span class="line">	<span class="keyword">this</span>.active.set(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">		<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">			logger.trace(<span class="string">&quot;Refreshing &quot;</span> + <span class="keyword">this</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			logger.debug(<span class="string">&quot;Refreshing &quot;</span> + getDisplayName());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Initialize any placeholder property sources in the context environment.</span></span><br><span class="line">	initPropertySources();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 1.获取Environment对象,并加载当前系统属性值到Environment对象中</span></span><br><span class="line">	getEnvironment().validateRequiredProperties();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 准备监听器和事件的集合对象,默认为空集合</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.earlyApplicationListeners == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">this</span>.earlyApplicationListeners = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(<span class="keyword">this</span>.applicationListeners);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">// Reset local application listeners to pre-refresh state.</span></span><br><span class="line">		<span class="keyword">this</span>.applicationListeners.clear();</span><br><span class="line">		<span class="keyword">this</span>.applicationListeners.addAll(<span class="keyword">this</span>.earlyApplicationListeners);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Allow for the collection of early ApplicationEvents,</span></span><br><span class="line">	<span class="comment">// to be published once the multicaster is available...</span></span><br><span class="line">	<span class="keyword">this</span>.earlyApplicationEvents = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-获取Environment对象-并加载当前系统属性值到Environment对象中"><a href="#1-获取Environment对象-并加载当前系统属性值到Environment对象中" class="headerlink" title="1.获取Environment对象,并加载当前系统属性值到Environment对象中"></a>1.获取Environment对象,并加载当前系统属性值到Environment对象中</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableEnvironment <span class="title">getEnvironment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.environment == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="comment">// 1.创建Environment</span></span><br><span class="line">		<span class="keyword">this</span>.environment = createEnvironment();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.environment;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ConfigurableEnvironment <span class="title">createEnvironment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> StandardEnvironment();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">构造StandardEnvironment对象首先会创建父类对象AbstractEnvironment</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AbstractEnvironment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 1.自定义属性源</span></span><br><span class="line">	customizePropertySources(<span class="keyword">this</span>.propertySources);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 空方法,由字类具体实现</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">customizePropertySources</span><span class="params">(MutablePropertySources propertySources)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">子类StandardEnvironment中具体实现customizePropertySources方法</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME = <span class="string">&quot;systemEnvironment&quot;</span>;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME = <span class="string">&quot;systemProperties&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">customizePropertySources</span><span class="params">(MutablePropertySources propertySources)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 添加systemProperties属性源</span></span><br><span class="line">	propertySources.addLast(</span><br><span class="line">			<span class="keyword">new</span> PropertiesPropertySource(SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME, getSystemProperties()));</span><br><span class="line">	<span class="comment">// 添加systemEnvironment属性源</span></span><br><span class="line">	propertySources.addLast(</span><br><span class="line">			<span class="keyword">new</span> SystemEnvironmentPropertySource(SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME, getSystemEnvironment()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="obtainFreshBeanFactory"><a href="#obtainFreshBeanFactory" class="headerlink" title="obtainFreshBeanFactory"></a>obtainFreshBeanFactory</h3><ol>
<li>创建容器对象：DefaultListableBeanFactory</li>
<li>加载xml配置文件属性到当前工厂中，<br> 主要属性有：<br> beanDefinitionNames缓存：所有被加载到BeanFactory中的bean的beanName集合;<br> beanDefinitionMap缓存：所有被加载到BeanFactory中的bean的beanName和BeanDefinition映射;<br> aliasMap缓存：所有被加载到BeanFactory中的bean的beanName和别名映射;</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ConfigurableListableBeanFactory <span class="title">obtainFreshBeanFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 1.刷新BeanFactory，由AbstractRefreshableApplicationContext实现</span></span><br><span class="line">	refreshBeanFactory();</span><br><span class="line">	<span class="comment">// 2.拿到刷新后的BeanFactory</span></span><br><span class="line">	<span class="keyword">return</span> getBeanFactory();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">refreshBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">	<span class="comment">// 1.判断是否已经存在BeanFactory，如果存在则先销毁、关闭该BeanFactory</span></span><br><span class="line">	<span class="keyword">if</span> (hasBeanFactory()) &#123;</span><br><span class="line">		destroyBeans();</span><br><span class="line">		closeBeanFactory();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="comment">// 2.创建一个新的BeanFactory</span></span><br><span class="line">		DefaultListableBeanFactory beanFactory = createBeanFactory();</span><br><span class="line">		beanFactory.setSerializationId(getId());</span><br><span class="line">		customizeBeanFactory(beanFactory);</span><br><span class="line">		<span class="comment">// 3.加载bean定义,并将相关bean信息添加到beanDefinitionNames,beanDefinitionMap,aliasMap中</span></span><br><span class="line">		loadBeanDefinitions(beanFactory);</span><br><span class="line">		<span class="keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(<span class="string">&quot;I/O error parsing bean definition source for &quot;</span> + getDisplayName(), ex);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="prepareBeanFactory"><a href="#prepareBeanFactory" class="headerlink" title="prepareBeanFactory"></a>prepareBeanFactory</h3><ol>
<li>为BeanFactory设置一些属性,增强BeanFactory<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">prepareBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// Tell the internal bean factory to use the context&#x27;s class loader etc.</span></span><br><span class="line">	beanFactory.setBeanClassLoader(getClassLoader());</span><br><span class="line">	beanFactory.setBeanExpressionResolver(<span class="keyword">new</span> StandardBeanExpressionResolver(beanFactory.getBeanClassLoader()));</span><br><span class="line">	beanFactory.addPropertyEditorRegistrar(<span class="keyword">new</span> ResourceEditorRegistrar(<span class="keyword">this</span>, getEnvironment()));</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Configure the bean factory with context callbacks.</span></span><br><span class="line">	beanFactory.addBeanPostProcessor(<span class="keyword">new</span> ApplicationContextAwareProcessor(<span class="keyword">this</span>));</span><br><span class="line">	beanFactory.ignoreDependencyInterface(EnvironmentAware.class);</span><br><span class="line">	beanFactory.ignoreDependencyInterface(EmbeddedValueResolverAware.class);</span><br><span class="line">	beanFactory.ignoreDependencyInterface(ResourceLoaderAware.class);</span><br><span class="line">	beanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class);</span><br><span class="line">	beanFactory.ignoreDependencyInterface(MessageSourceAware.class);</span><br><span class="line">	beanFactory.ignoreDependencyInterface(ApplicationContextAware.class);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// BeanFactory interface not registered as resolvable type in a plain factory.</span></span><br><span class="line">	<span class="comment">// MessageSource registered (and found for autowiring) as a bean.</span></span><br><span class="line">	beanFactory.registerResolvableDependency(BeanFactory.class, beanFactory);</span><br><span class="line">	beanFactory.registerResolvableDependency(ResourceLoader.class, <span class="keyword">this</span>);</span><br><span class="line">	beanFactory.registerResolvableDependency(ApplicationEventPublisher.class, <span class="keyword">this</span>);</span><br><span class="line">	beanFactory.registerResolvableDependency(ApplicationContext.class, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Register early post-processor for detecting inner beans as ApplicationListeners.</span></span><br><span class="line">	beanFactory.addBeanPostProcessor(<span class="keyword">new</span> ApplicationListenerDetector(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Detect a LoadTimeWeaver and prepare for weaving, if found.</span></span><br><span class="line">	<span class="keyword">if</span> (beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123;</span><br><span class="line">		beanFactory.addBeanPostProcessor(<span class="keyword">new</span> LoadTimeWeaverAwareProcessor(beanFactory));</span><br><span class="line">		<span class="comment">// Set a temporary ClassLoader for type matching.</span></span><br><span class="line">		beanFactory.setTempClassLoader(<span class="keyword">new</span> ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Register default environment beans.</span></span><br><span class="line">	<span class="keyword">if</span> (!beanFactory.containsLocalBean(ENVIRONMENT_BEAN_NAME)) &#123;</span><br><span class="line">		beanFactory.registerSingleton(ENVIRONMENT_BEAN_NAME, getEnvironment());</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (!beanFactory.containsLocalBean(SYSTEM_PROPERTIES_BEAN_NAME)) &#123;</span><br><span class="line">		beanFactory.registerSingleton(SYSTEM_PROPERTIES_BEAN_NAME, getEnvironment().getSystemProperties());</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (!beanFactory.containsLocalBean(SYSTEM_ENVIRONMENT_BEAN_NAME)) &#123;</span><br><span class="line">		beanFactory.registerSingleton(SYSTEM_ENVIRONMENT_BEAN_NAME, getEnvironment().getSystemEnvironment());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="postProcessBeanFactory"><a href="#postProcessBeanFactory" class="headerlink" title="postProcessBeanFactory"></a>postProcessBeanFactory</h3><ol>
<li>Spring提供的模板方法，常用的spring扩展点之一,常被称之为后置处理器<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="invokeBeanFactoryPostProcessors"><a href="#invokeBeanFactoryPostProcessors" class="headerlink" title="invokeBeanFactoryPostProcessors"></a>invokeBeanFactoryPostProcessors</h3><ol>
<li>实例化所有的BeanFactoryPostProcessors对象并注册到容器中;</li>
</ol>
]]></content>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring常见的扩展点</title>
    <url>/2022/09/04/Spring%E6%BA%90%E7%A0%81/Spring%E5%B8%B8%E8%A7%81%E7%9A%84%E6%89%A9%E5%B1%95%E7%82%B9/</url>
    <content><![CDATA[<h3 id="扩展initPropertySources方法"><a href="#扩展initPropertySources方法" class="headerlink" title="扩展initPropertySources方法"></a>扩展initPropertySources方法</h3><p>理解:在refresh方法中的prepareRefresh方法，执行刷新前的准备工作中提供了initPropertySources模板方法,一般用于一些环境变量的设置</p>
<p>源码出处：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">prepareRefresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 设置容器启动时间</span></span><br><span class="line">	<span class="keyword">this</span>.startupDate = System.currentTimeMillis();</span><br><span class="line">	<span class="comment">// 设置关闭标志位为false和活跃标志位为true</span></span><br><span class="line">	<span class="keyword">this</span>.closed.set(<span class="keyword">false</span>);</span><br><span class="line">	<span class="keyword">this</span>.active.set(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">		<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">			logger.trace(<span class="string">&quot;Refreshing &quot;</span> + <span class="keyword">this</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			logger.debug(<span class="string">&quot;Refreshing &quot;</span> + getDisplayName());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Initialize any placeholder property sources in the context environment.</span></span><br><span class="line">	<span class="comment">// AbstractApplicationContext提供的模板方法,可以继承它或者其子类进行具体实现</span></span><br><span class="line">	initPropertySources();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 1.获取Environment对象,并加载当前系统属性值到Environment对象中</span></span><br><span class="line">	getEnvironment().validateRequiredProperties();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 准备监听器和事件的集合对象,默认为空集合</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.earlyApplicationListeners == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">this</span>.earlyApplicationListeners = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(<span class="keyword">this</span>.applicationListeners);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">// Reset local application listeners to pre-refresh state.</span></span><br><span class="line">		<span class="keyword">this</span>.applicationListeners.clear();</span><br><span class="line">		<span class="keyword">this</span>.applicationListeners.addAll(<span class="keyword">this</span>.earlyApplicationListeners);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Allow for the collection of early ApplicationEvents,</span></span><br><span class="line">	<span class="comment">// to be published once the multicaster is available...</span></span><br><span class="line">	<span class="keyword">this</span>.earlyApplicationEvents = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>继承具体的类并扩展实现,ClassPathXmlApplicationContext为AbstractApplicationContext的字类,可以进行一些环境变量的设置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClassPathXmlApplicationContext</span> <span class="keyword">extends</span> <span class="title">ClassPathXmlApplicationContext</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyClassPathXmlApplicationContext</span><span class="params">(String... configLocations)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(configLocations);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initPropertySources</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        getEnvironment().setRequiredProperties(<span class="string">&quot;OS&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> MyClassPathXmlApplicationContext(<span class="string">&quot;test2.xml&quot;</span>);</span><br><span class="line">        User user=(User)context.getBean(<span class="string">&quot;testbean&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;username:&quot;</span>+user.getUserName()+<span class="string">&quot;  &quot;</span>+<span class="string">&quot;email:&quot;</span>+user.getEmail());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>该扩展点在Spring MVC中的具体应用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StandardServletEnvironment</span> <span class="keyword">extends</span> <span class="title">StandardEnvironment</span> <span class="keyword">implements</span> <span class="title">ConfigurableWebEnvironment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** Servlet context init parameters property source name: &#123;<span class="doctag">@value</span>&#125;. */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVLET_CONTEXT_PROPERTY_SOURCE_NAME = <span class="string">&quot;servletContextInitParams&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** Servlet config init parameters property source name: &#123;<span class="doctag">@value</span>&#125;. */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVLET_CONFIG_PROPERTY_SOURCE_NAME = <span class="string">&quot;servletConfigInitParams&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** JNDI property source name: &#123;<span class="doctag">@value</span>&#125;. */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String JNDI_PROPERTY_SOURCE_NAME = <span class="string">&quot;jndiProperties&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">customizePropertySources</span><span class="params">(MutablePropertySources propertySources)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 1.添加servletConfigInitParams属性源(作为占位符, 之后会被替换)</span></span><br><span class="line">		propertySources.addLast(<span class="keyword">new</span> StubPropertySource(SERVLET_CONFIG_PROPERTY_SOURCE_NAME));</span><br><span class="line">		<span class="comment">// 2.添加servletContextInitParams属性源(作为占位符, 之后会被替换)</span></span><br><span class="line">		propertySources.addLast(<span class="keyword">new</span> StubPropertySource(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME));</span><br><span class="line">		<span class="keyword">if</span> (JndiLocatorDelegate.isDefaultJndiEnvironmentAvailable()) &#123;</span><br><span class="line">			<span class="comment">// 3.添加jndiProperties属性源</span></span><br><span class="line">			propertySources.addLast(<span class="keyword">new</span> JndiPropertySource(JNDI_PROPERTY_SOURCE_NAME));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 4.调用父类中的customizePropertySources方法</span></span><br><span class="line">		<span class="keyword">super</span>.customizePropertySources(propertySources);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initPropertySources</span><span class="params">(<span class="meta">@Nullable</span> ServletContext servletContext, <span class="meta">@Nullable</span> ServletConfig servletConfig)</span> </span>&#123;</span><br><span class="line">		WebApplicationContextUtils.initServletPropertySources(getPropertySources(), servletContext, servletConfig);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">WebApplicationContextUtils</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initServletPropertySources</span><span class="params">(MutablePropertySources propertySources, ServletContext servletContext)</span> </span>&#123;</span><br><span class="line">		initServletPropertySources(propertySources, servletContext, <span class="keyword">null</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initServletPropertySources</span><span class="params">(MutablePropertySources sources,</span></span></span><br><span class="line"><span class="function"><span class="params">			<span class="meta">@Nullable</span> ServletContext servletContext, <span class="meta">@Nullable</span> ServletConfig servletConfig)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		Assert.notNull(sources, <span class="string">&quot;&#x27;propertySources&#x27; must not be null&quot;</span>);</span><br><span class="line">		String name = StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME;</span><br><span class="line">		<span class="keyword">if</span> (servletContext != <span class="keyword">null</span> &amp;&amp; sources.get(name) <span class="keyword">instanceof</span> StubPropertySource) &#123;</span><br><span class="line">			<span class="comment">// 1.如果servletContext不为null &amp;&amp; propertySources中包含servletContextInitParams数据源 &amp;&amp; 该数据源的类型为StubPropertySource,</span></span><br><span class="line">			<span class="comment">// 则将servletContextInitParams的数据源替换成servletContext</span></span><br><span class="line">			sources.replace(name, <span class="keyword">new</span> ServletContextPropertySource(name, servletContext));</span><br><span class="line">		&#125;</span><br><span class="line">		name = StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME;</span><br><span class="line">		<span class="keyword">if</span> (servletConfig != <span class="keyword">null</span> &amp;&amp; sources.get(name) <span class="keyword">instanceof</span> StubPropertySource) &#123;</span><br><span class="line">			<span class="comment">// 2.如果servletConfig不为null &amp;&amp; propertySources中包含servletConfigInitParams数据源 &amp;&amp; 该数据源的类型为StubPropertySource,</span></span><br><span class="line">			<span class="comment">// 则将servletConfigInitParams的数据源替换成servletConfig</span></span><br><span class="line">			sources.replace(name, <span class="keyword">new</span> ServletConfigPropertySource(name, servletConfig));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="扩展实现customizeBeanFactory方法"><a href="#扩展实现customizeBeanFactory方法" class="headerlink" title="扩展实现customizeBeanFactory方法"></a>扩展实现customizeBeanFactory方法</h3><ol>
<li><p>在创建BeanFactory后, 可以重写该方法, 为BeanFactory设置属性,源码出处:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractApplicationContext</span> <span class="keyword">extends</span> <span class="title">DefaultResourceLoader</span></span></span><br><span class="line"><span class="class">		<span class="keyword">implements</span> <span class="title">ConfigurableApplicationContext</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">		......</span><br><span class="line">		<span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line">		ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line">		......</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractApplicationContext</span> <span class="keyword">extends</span> <span class="title">DefaultResourceLoader</span></span></span><br><span class="line"><span class="class">		<span class="keyword">implements</span> <span class="title">ConfigurableApplicationContext</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">protected</span> ConfigurableListableBeanFactory <span class="title">obtainFreshBeanFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 1.刷新 BeanFactory，由AbstractRefreshableApplicationContext实现</span></span><br><span class="line">		refreshBeanFactory();</span><br><span class="line">		<span class="comment">// 2.拿到刷新后的 BeanFactory</span></span><br><span class="line">		<span class="keyword">return</span> getBeanFactory();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractRefreshableApplicationContext</span> <span class="keyword">extends</span> <span class="title">AbstractApplicationContext</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">refreshBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">		<span class="comment">// 1.判断是否已经存在 BeanFactory，如果存在则先销毁、关闭该 BeanFactory</span></span><br><span class="line">		<span class="keyword">if</span> (hasBeanFactory()) &#123;</span><br><span class="line">			destroyBeans();</span><br><span class="line">			closeBeanFactory();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// 2.创建一个新的BeanFactory</span></span><br><span class="line">			DefaultListableBeanFactory beanFactory = createBeanFactory();</span><br><span class="line">			beanFactory.setSerializationId(getId());</span><br><span class="line">			<span class="comment">// 可以继承该类或者其字类，重写该方法</span></span><br><span class="line">			customizeBeanFactory(beanFactory);</span><br><span class="line">			<span class="comment">// 3.加载 bean 定义。</span></span><br><span class="line">			loadBeanDefinitions(beanFactory);</span><br><span class="line">			<span class="keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(<span class="string">&quot;I/O error parsing bean definition source for &quot;</span> + getDisplayName(), ex);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractRefreshableApplicationContext</span> <span class="keyword">extends</span> <span class="title">AbstractApplicationContext</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">customizeBeanFactory</span><span class="params">(DefaultListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.allowBeanDefinitionOverriding != <span class="keyword">null</span>) &#123;</span><br><span class="line">			beanFactory.setAllowBeanDefinitionOverriding(<span class="keyword">this</span>.allowBeanDefinitionOverriding);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.allowCircularReferences != <span class="keyword">null</span>) &#123;</span><br><span class="line">			beanFactory.setAllowCircularReferences(<span class="keyword">this</span>.allowCircularReferences);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>此方法是用来实现BeanFactory的属性设置，主要是设置两个属性：<br>​    allowBeanDefinitionOverriding：是否允许覆盖同名称的不同定义的对象<br>​    allowCircularReferences：是否允许bean之间的循环依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClassPathXmlApplicationContext</span> <span class="keyword">extends</span> <span class="title">ClassPathXmlApplicationContext</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    MyClassPathXmlApplicationContext(String... locations)&#123;</span><br><span class="line">        <span class="keyword">super</span>(locations);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">customizeBeanFactory</span><span class="params">(DefaultListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setAllowBeanDefinitionOverriding(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">super</span>.setAllowCircularReferences(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">super</span>.customizeBeanFactory(beanFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="preProcessXml-root-postProcessXml-root"><a href="#preProcessXml-root-postProcessXml-root" class="headerlink" title="preProcessXml(root),postProcessXml(root)"></a>preProcessXml(root),postProcessXml(root)</h3><h3 id="Spring如何扩展实现自定义属性编辑器"><a href="#Spring如何扩展实现自定义属性编辑器" class="headerlink" title="Spring如何扩展实现自定义属性编辑器"></a>Spring如何扩展实现自定义属性编辑器</h3><p>在日常的工作中，我们经常遇到一些特殊的案例需要自定义属性的解析器来完成对应的属性解析工作，大家需要理解它的本质来进行随意的扩展工作,但是此处的扩展没有大家想象的那么简单，详细的流程讲课的时候我大概讲一下，但是要复杂很多。主要有两种方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String district;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDistrict</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> district;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDistrict</span><span class="params">(String district)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.district = district;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCity</span><span class="params">(String city)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.city = city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProvince</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> province;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProvince</span><span class="params">(String province)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.province = province;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.province + <span class="string">&quot;省&quot;</span> + <span class="keyword">this</span>.city + <span class="string">&quot;市&quot;</span> + <span class="keyword">this</span>.district + <span class="string">&quot;区&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Address <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(Address address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.beans.PropertyEditorSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddressPropertyEditor</span> <span class="keyword">extends</span> <span class="title">PropertyEditorSupport</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAsText</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String[] adds = text.split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">            Address address = <span class="keyword">new</span> Address();</span><br><span class="line">            address.setProvince(adds[<span class="number">0</span>]);</span><br><span class="line">            address.setCity(adds[<span class="number">1</span>]);</span><br><span class="line">            address.setDistrict(adds[<span class="number">2</span>]);</span><br><span class="line">            <span class="keyword">this</span>.setValue(address);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.PropertyEditorRegistrar;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.PropertyEditorRegistry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPropertyEditorRegistrar</span> <span class="keyword">implements</span> <span class="title">PropertyEditorRegistrar</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerCustomEditors</span><span class="params">(PropertyEditorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.registerCustomEditor(Address.class,<span class="keyword">new</span> AddressPropertyEditor());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;customer&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.lixiang.propertyEditor.Customer&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;Jack&quot;</span> /&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;address&quot;</span> value=<span class="string">&quot;浙江-杭州-西湖&quot;</span> /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;!--第一种方式--&gt;</span><br><span class="line">    &lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;org.springframework.beans.factory.config.CustomEditorConfigurer&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;propertyEditorRegistrars&quot;</span>&gt;</span><br><span class="line">            &lt;list&gt;</span><br><span class="line">                &lt;bean class=&quot;com.lixiang.propertyEditor.MyPropertyEditorRegistrar&quot;&gt;&lt;/bean&gt;</span><br><span class="line">            &lt;/list&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;!--第二种方式--&gt;</span><br><span class="line">    &lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;org.springframework.beans.factory.config.CustomEditorConfigurer&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;customEditors&quot;</span>&gt;</span><br><span class="line">            &lt;map&gt;</span><br><span class="line">                &lt;entry key=<span class="string">&quot;com.lixiang.propertyEditor.Address&quot;</span>&gt;</span><br><span class="line">                    &lt;value&gt;com.lixiang.propertyEditor.AddressPropertyEditor&lt;/value&gt;</span><br><span class="line">                &lt;/entry&gt;</span><br><span class="line">            &lt;/map&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;propertyEditor.xml&quot;</span>);</span><br><span class="line">        Customer c = ac.getBean(<span class="string">&quot;customer&quot;</span>, Customer.class);</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        System.out.println(c.getAddress());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="postProcessBeanFactory进行继承重写该方法，可以对beanFactory进行扩展操作；"><a href="#postProcessBeanFactory进行继承重写该方法，可以对beanFactory进行扩展操作；" class="headerlink" title="postProcessBeanFactory进行继承重写该方法，可以对beanFactory进行扩展操作；"></a>postProcessBeanFactory进行继承重写该方法，可以对beanFactory进行扩展操作；</h3><h3 id="BeanDefinitionRegistryPostProcessor和BeanFactoryPostProcessor"><a href="#BeanDefinitionRegistryPostProcessor和BeanFactoryPostProcessor" class="headerlink" title="BeanDefinitionRegistryPostProcessor和BeanFactoryPostProcessor"></a>BeanDefinitionRegistryPostProcessor和BeanFactoryPostProcessor</h3><h3 id="可以产生循环依赖的点：Autowirte-Import"><a href="#可以产生循环依赖的点：Autowirte-Import" class="headerlink" title="可以产生循环依赖的点：Autowirte, Import"></a>可以产生循环依赖的点：Autowirte, Import</h3>]]></content>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring源码-FactoryBean</title>
    <url>/2022/09/13/Spring%E6%BA%90%E7%A0%81/Spring%E6%BA%90%E7%A0%81-FactoryBean/</url>
    <content><![CDATA[<h3 id="BeanFactory与FactoryBean"><a href="#BeanFactory与FactoryBean" class="headerlink" title="BeanFactory与FactoryBean"></a>BeanFactory与FactoryBean</h3><p>理解: 如果使用BeanFactory接口,那么必须遵守springbean的生命周期,从实例化,到初始化,到invokeAwareMethod.invokeInitMethod,postProcessBeforeInitialization, postProcessAfterInitialization, 此流程非常复杂且麻烦，如果需要一种更加便捷简单的方式创建，就可以使用FactoryBean接口,不需要遵循此创建顺序;</p>
<h3 id="FactoryBean接口"><a href="#FactoryBean接口" class="headerlink" title="FactoryBean接口"></a>FactoryBean接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FactoryBean</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">	String OBJECT_TYPE_ATTRIBUTE = <span class="string">&quot;factoryBeanObjectType&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 获取实例对象</span></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="function">T <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 返回对象类型</span></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	Class&lt;?&gt; getObjectType();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 返回对象是否为单例</span></span><br><span class="line">	<span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="FactoryBean的执行流程"><a href="#FactoryBean的执行流程" class="headerlink" title="FactoryBean的执行流程"></a>FactoryBean的执行流程</h3><p>1.在对象实例化之前，需要检查bean是否为FactoryBean;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFactoryBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException </span>&#123;</span><br><span class="line">	<span class="comment">// 1.拿到真正的beanName（去掉&amp;前缀、解析别名）</span></span><br><span class="line">	String beanName = transformedBeanName(name);</span><br><span class="line">	<span class="comment">// 2.尝试从缓存获取Bean实例对象</span></span><br><span class="line">	Object beanInstance = getSingleton(beanName, <span class="keyword">false</span>);</span><br><span class="line">	<span class="keyword">if</span> (beanInstance != <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="comment">// 3.beanInstance存在，则直接判断类型是否为FactoryBean</span></span><br><span class="line">		<span class="keyword">return</span> (beanInstance <span class="keyword">instanceof</span> FactoryBean);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// No singleton instance found -&gt; check bean definition.</span></span><br><span class="line">	<span class="keyword">if</span> (!containsBeanDefinition(beanName) &amp;&amp; getParentBeanFactory() <span class="keyword">instanceof</span> ConfigurableBeanFactory) &#123;</span><br><span class="line">		<span class="comment">// No bean definition found in this factory -&gt; delegate to parent.</span></span><br><span class="line">		<span class="comment">// 5.如果缓存中不存在此beanName &amp;&amp; 父beanFactory是ConfigurableBeanFactory，则调用父BeanFactory判断是否为FactoryBean</span></span><br><span class="line">		<span class="keyword">return</span> ((ConfigurableBeanFactory) getParentBeanFactory()).isFactoryBean(name);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 6.通过MergedBeanDefinition来检查beanName对应的Bean是否为FactoryBean</span></span><br><span class="line">	<span class="keyword">return</span> isFactoryBean(beanName, getMergedLocalBeanDefinition(beanName));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.获取实现了FacotryBean接口的bean对象,正常执行Bean的创建过程创建该对象并放入缓存, 对象的key为&amp; + bean的名称, value为实现了FactoryBean的实例对象;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (isFactoryBean(beanName)) &#123;</span><br><span class="line">	<span class="comment">// 5.1 通过beanName获取FactoryBean实例</span></span><br><span class="line">	<span class="comment">// 通过getBean(&amp;beanName)拿到的是FactoryBean本身；通过getBean(beanName)拿到的是FactoryBean创建的Bean实例</span></span><br><span class="line">	Object bean = getBean(FACTORY_BEAN_PREFIX + beanName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.从容器获取实现了FactoryBean接口的实例对象的getObject方法返回的对象,直接使用通过Bean的名称即可获取到该对象;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;test.xml&quot;</span>);</span><br><span class="line">Car car=(Car)context.getBean(<span class="string">&quot;car&quot;</span>);</span><br><span class="line">System.out.println(car);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">	<span class="comment">// 获取name对应的bean实例，如果不存在，则创建一个</span></span><br><span class="line">	<span class="keyword">return</span> doGetBean(name, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.这里从缓存中获取到的是实现了FactoryBean接口的实例对象而不是getObject返回的实例对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="function">T <span class="title">doGetBean</span><span class="params">(String name, <span class="meta">@Nullable</span> Class&lt;T&gt; requiredType, <span class="meta">@Nullable</span> Object[] args, <span class="keyword">boolean</span>  typeCheckOnly)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">	<span class="comment">// 1.解析beanName，主要是解析别名、去掉FactoryBean的前缀“&amp;”</span></span><br><span class="line">	String beanName = transformedBeanName(name);</span><br><span class="line">	Object bean;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Eagerly check singleton cache for manually registered singletons.</span></span><br><span class="line">	<span class="comment">// 2.尝试从缓存中获取beanName对应的实例</span></span><br><span class="line">	Object sharedInstance = getSingleton(beanName);</span><br><span class="line">	<span class="comment">// 3.如果beanName的实例存在于缓存中</span></span><br><span class="line">	<span class="keyword">if</span> (sharedInstance != <span class="keyword">null</span> &amp;&amp; args == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">			<span class="keyword">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">				logger.trace(<span class="string">&quot;Returning eagerly cached instance of singleton bean &#x27;&quot;</span> + beanName +</span><br><span class="line">						<span class="string">&quot;&#x27; that is not fully initialized yet - a consequence of a circular reference&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				logger.trace(<span class="string">&quot;Returning cached instance of singleton bean &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 3.1 返回beanName对应的实例对象（主要用于FactoryBean的特殊处理，普通Bean会直接返回sharedInstance本身）</span></span><br><span class="line">		bean = getObjectForBeanInstance(sharedInstance, name, beanName, <span class="keyword">null</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5.检查对象是否为FactoryBean并强转为FactoryBean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">getObjectForBeanInstance</span><span class="params">(Object beanInstance, String name, String beanName, <span class="meta">@Nullable</span> RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// Don&#x27;t let calling code try to dereference the factory if the bean isn&#x27;t a factory.</span></span><br><span class="line">	<span class="comment">// 1.如果name以“&amp;”为前缀，但是beanInstance不是FactoryBean，则抛异常</span></span><br><span class="line">	<span class="keyword">if</span> (BeanFactoryUtils.isFactoryDereference(name)) &#123;</span><br><span class="line">		<span class="comment">// 2.1 如果beanInstance不是FactoryBean（也就是普通bean），则直接返回beanInstance</span></span><br><span class="line">		<span class="comment">// 2.2 如果beanInstance是FactoryBean，并且name以“&amp;”为前缀，则直接返回beanInstance（以“&amp;”为前缀代表想获取的是FactoryBean本身）</span></span><br><span class="line">		<span class="keyword">if</span> (beanInstance <span class="keyword">instanceof</span> NullBean) &#123;</span><br><span class="line">			<span class="keyword">return</span> beanInstance;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (!(beanInstance <span class="keyword">instanceof</span> FactoryBean)) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> BeanIsNotAFactoryException(beanName, beanInstance.getClass());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (mbd != <span class="keyword">null</span>) &#123;</span><br><span class="line">			mbd.isFactoryBean = <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> beanInstance;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Now we have the bean instance, which may be a normal bean or a FactoryBean.</span></span><br><span class="line">	<span class="comment">// If it&#x27;s a FactoryBean, we use it to create a bean instance, unless the</span></span><br><span class="line">	<span class="comment">// caller actually wants a reference to the factory.</span></span><br><span class="line">	<span class="keyword">if</span> (!(beanInstance <span class="keyword">instanceof</span> FactoryBean)) &#123;</span><br><span class="line">		<span class="keyword">return</span> beanInstance;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 3.走到这边，代表beanInstance是FactoryBean，但name不带有“&amp;”前缀，表示想要获取的是FactoryBean创建的对象实例</span></span><br><span class="line">	Object object = <span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">if</span> (mbd != <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="comment">// 4.如果mbd为空，则尝试从factoryBeanObjectCache缓存中获取该FactoryBean创建的对象实例</span></span><br><span class="line">		mbd.isFactoryBean = <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		object = getCachedObjectForFactoryBean(beanName);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="comment">// Return bean instance from factory.</span></span><br><span class="line">		<span class="comment">// 5.只有beanInstance是FactoryBean才能走到这边，因此直接强转</span></span><br><span class="line">		FactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) beanInstance;</span><br><span class="line">		<span class="comment">// Caches object obtained from FactoryBean if it is a singleton.</span></span><br><span class="line">		<span class="keyword">if</span> (mbd == <span class="keyword">null</span> &amp;&amp; containsBeanDefinition(beanName)) &#123;</span><br><span class="line">			<span class="comment">// 6.mbd为空，但是该bean的BeanDefinition在缓存中存在，则获取该bean的MergedBeanDefinition</span></span><br><span class="line">			mbd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 7.mbd是否是合成的（这个字段比较复杂，mbd正常情况都不是合成的，也就是false，有兴趣的可以自己查阅资料看看）</span></span><br><span class="line">		<span class="keyword">boolean</span> synthetic = (mbd != <span class="keyword">null</span> &amp;&amp; mbd.isSynthetic());</span><br><span class="line">		<span class="comment">// 8.从FactoryBean获取对象实例</span></span><br><span class="line">		object = getObjectFromFactoryBean(factory, beanName, !synthetic);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 9.返回对象实例</span></span><br><span class="line">	<span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>6.尝试从factoryBeanObjectCache缓存中获取, 获取不到调用getObject方法返回对象并放入缓存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">getObjectFromFactoryBean</span><span class="params">(FactoryBean&lt;?&gt; factory, String beanName, <span class="keyword">boolean</span> shouldPostProcess)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 1.如果是单例，并且已经存在于单例对象缓存中</span></span><br><span class="line">	<span class="keyword">if</span> (factory.isSingleton() &amp;&amp; containsSingleton(beanName)) &#123;</span><br><span class="line">		<span class="keyword">synchronized</span> (getSingletonMutex()) &#123;</span><br><span class="line">			<span class="comment">// 2.从FactoryBean创建的单例对象的缓存中获取该bean实例</span></span><br><span class="line">			Object object = <span class="keyword">this</span>.factoryBeanObjectCache.get(beanName);</span><br><span class="line">			<span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="comment">// 3.调用FactoryBean的getObject方法获取对象实例</span></span><br><span class="line">				object = doGetObjectFromFactoryBean(factory, beanName);</span><br><span class="line">				<span class="comment">// Only post-process and store if not put there already during getObject() call above</span></span><br><span class="line">				<span class="comment">// (e.g. because of circular reference processing triggered by custom getBean calls)</span></span><br><span class="line">				Object alreadyThere = <span class="keyword">this</span>.factoryBeanObjectCache.get(beanName);</span><br><span class="line">				<span class="comment">// 4.如果该beanName已经在缓存中存在，则将object替换成缓存中的</span></span><br><span class="line">				<span class="keyword">if</span> (alreadyThere != <span class="keyword">null</span>) &#123;</span><br><span class="line">					object = alreadyThere;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="keyword">if</span> (shouldPostProcess) &#123;</span><br><span class="line">						<span class="keyword">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">							<span class="comment">// Temporarily return non-post-processed object, not storing it yet..</span></span><br><span class="line">							<span class="keyword">return</span> object;</span><br><span class="line">						&#125;</span><br><span class="line">						beforeSingletonCreation(beanName);</span><br><span class="line">						<span class="keyword">try</span> &#123;</span><br><span class="line">							<span class="comment">// 5.对bean实例进行后置处理，执行所有已注册的BeanPostProcessor的postProcessAfterInitialization方法</span></span><br><span class="line">							object = postProcessObjectFromFactoryBean(object, beanName);</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">							<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(beanName,</span><br><span class="line">									<span class="string">&quot;Post-processing of FactoryBean&#x27;s singleton object failed&quot;</span>, ex);</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">finally</span> &#123;</span><br><span class="line">							afterSingletonCreation(beanName);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="comment">// 6.将beanName和object放到factoryBeanObjectCache缓存中</span></span><br><span class="line">					<span class="keyword">if</span> (containsSingleton(beanName)) &#123;</span><br><span class="line">						<span class="keyword">this</span>.factoryBeanObjectCache.put(beanName, object);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 7.返回object对象实例</span></span><br><span class="line">			<span class="keyword">return</span> object;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">// 8.调用FactoryBean的getObject方法获取对象实例</span></span><br><span class="line">		Object object = doGetObjectFromFactoryBean(factory, beanName);</span><br><span class="line">		<span class="keyword">if</span> (shouldPostProcess) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="comment">// 9.对bean实例进行后置处理，执行所有已注册的BeanPostProcessor的postProcessAfterInitialization方法</span></span><br><span class="line">				object = postProcessObjectFromFactoryBean(object, beanName);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(beanName, <span class="string">&quot;Post-processing of FactoryBean&#x27;s object failed&quot;</span>, ex);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 10.返回object对象实例</span></span><br><span class="line">		<span class="keyword">return</span> object;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>7.调用FactoryBean的getObject方法获取实例对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">doGetObjectFromFactoryBean</span><span class="params">(FactoryBean&lt;?&gt; factory, String beanName)</span> <span class="keyword">throws</span> BeanCreationException </span>&#123;</span><br><span class="line">	Object object;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="comment">// 1.调用FactoryBean的getObject方法获取bean对象实例</span></span><br><span class="line">		<span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">			AccessControlContext acc = getAccessControlContext();</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="comment">// 1.1 带有权限验证的</span></span><br><span class="line">				object = AccessController.doPrivileged((PrivilegedExceptionAction&lt;Object&gt;) factory::getObject, acc);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> (PrivilegedActionException pae) &#123;</span><br><span class="line">				<span class="keyword">throw</span> pae.getException();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// 1.2 不带权限</span></span><br><span class="line">			object = factory.getObject();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (FactoryBeanNotInitializedException ex) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(beanName, ex.toString());</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(beanName, <span class="string">&quot;FactoryBean threw exception on object creation&quot;</span>, ex);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Do not accept a null value for a FactoryBean that&#x27;s not fully</span></span><br><span class="line">	<span class="comment">// initialized yet: Many FactoryBeans just return null then.</span></span><br><span class="line">	<span class="comment">// 2.getObject返回的是空值，并且该FactoryBean正在初始化中，则直接抛异常，不接受一个尚未完全初始化的FactoryBean的getObject返回的空值</span></span><br><span class="line">	<span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(</span><br><span class="line">					beanName, <span class="string">&quot;FactoryBean which is currently in creation returned null from getObject&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		object = <span class="keyword">new</span> NullBean();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 3.返回创建好的bean对象实例</span></span><br><span class="line">	<span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码案例"><a href="#代码案例" class="headerlink" title="代码案例"></a>代码案例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> Integer speed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.FactoryBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarFactoryBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">Car</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String carInfo;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCarInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> carInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCarInfo</span><span class="params">(String carInfo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.carInfo = carInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        Car car = <span class="keyword">new</span> Car();</span><br><span class="line">        String[] split = carInfo.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        car.setName(split[<span class="number">0</span>]);</span><br><span class="line">        car.setBrand(split[<span class="number">1</span>]);</span><br><span class="line">        car.setSpeed(Integer.valueOf(split[<span class="number">2</span>]));</span><br><span class="line">        <span class="keyword">return</span>  car;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> Car.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;car&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.lixiang.test.CarFactoryBean&quot;</span> &gt;</span><br><span class="line">    &lt;property name=&quot;carInfo&quot; value=&quot;大黄蜂,玛莎拉蒂,250&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;test.xml&quot;</span>);</span><br><span class="line">        Car car=(Car)context.getBean(<span class="string">&quot;car&quot;</span>);</span><br><span class="line">        System.out.println(car);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring源码-InstantiationAwareBeanPostProcessor</title>
    <url>/2022/09/13/Spring%E6%BA%90%E7%A0%81/Spring%E6%BA%90%E7%A0%81-InstantiationAwareBeanPostProcessor/</url>
    <content><![CDATA[<h3 id="InstantiationAwareBeanPostProcessor"><a href="#InstantiationAwareBeanPostProcessor" class="headerlink" title="InstantiationAwareBeanPostProcessor"></a>InstantiationAwareBeanPostProcessor</h3><p>理解：InstantiationAwareBeanPostProcessor继承自BeanPostProcessor,常用于Bean实例化前生成代理对象，直接返回代理对象;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InstantiationAwareBeanPostProcessor</span> <span class="keyword">extends</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Bean实例化前,可以在此方法中生成代理对象</span></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="function"><span class="keyword">default</span> Object <span class="title">postProcessBeforeInstantiation</span><span class="params">(Class&lt;?&gt; beanClass, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Bean实例化后</span></span><br><span class="line">	<span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">postProcessAfterInstantiation</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 设置Bean的属性</span></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="function"><span class="keyword">default</span> PropertyValues <span class="title">postProcessProperties</span><span class="params">(PropertyValues pvs, Object bean, String beanName)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Deprecated</span></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="function"><span class="keyword">default</span> PropertyValues <span class="title">postProcessPropertyValues</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">			PropertyValues pvs, PropertyDescriptor[] pds, Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> pvs;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line">	<span class="comment">// bean初始化之前</span></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="function"><span class="keyword">default</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> bean;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// bean初始化之前</span></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="function"><span class="keyword">default</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> bean;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="调用流程"><a href="#调用流程" class="headerlink" title="调用流程"></a>调用流程</h3><p>1.在实例化bean之前,给BeanPostProcessors一个机会返回代理对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">createBean</span><span class="params">(String beanName, RootBeanDefinition mbd, <span class="meta">@Nullable</span> Object[] args)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> BeanCreationException </span>&#123;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="comment">// Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.</span></span><br><span class="line">		<span class="comment">// 在实例化bean之前,给BeanPostProcessors一个机会返回代理对象</span></span><br><span class="line">		Object bean = resolveBeforeInstantiation(beanName, mbdToUse);</span><br><span class="line">		<span class="keyword">if</span> (bean != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> bean;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbdToUse.getResourceDescription(), beanName,</span><br><span class="line">				<span class="string">&quot;BeanPostProcessor before instantiation of bean failed&quot;</span>, ex);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		Object beanInstance = doCreateBean(beanName, mbdToUse, args);</span><br><span class="line">		<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">			logger.trace(<span class="string">&quot;Finished creating instance of bean &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> beanInstance;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (BeanCreationException | ImplicitlyAppearedSingletonException ex) &#123;</span><br><span class="line">		<span class="comment">// A previously detected exception with proper bean creation context already,</span></span><br><span class="line">		<span class="comment">// or illegal singleton state to be communicated up to DefaultSingletonBeanRegistry.</span></span><br><span class="line">		<span class="keyword">throw</span> ex;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">				mbdToUse.getResourceDescription(), beanName, <span class="string">&quot;Unexpected exception during bean creation&quot;</span>, ex);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.执行InstantiationAwareBeanPostProcessors的Before方法返回Bean对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">resolveBeforeInstantiation</span><span class="params">(String beanName, RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class="line">	Object bean = <span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">if</span> (!Boolean.FALSE.equals(mbd.beforeInstantiationResolved)) &#123;</span><br><span class="line">		<span class="comment">// Make sure bean class is actually resolved at this point.</span></span><br><span class="line">		<span class="keyword">if</span> (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) &#123;</span><br><span class="line">			Class&lt;?&gt; targetType = determineTargetType(beanName, mbd);</span><br><span class="line">			<span class="keyword">if</span> (targetType != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="comment">// 执行InstantiationAwareBeanPostProcessors的Before方法</span></span><br><span class="line">				bean = applyBeanPostProcessorsBeforeInstantiation(targetType, beanName);</span><br><span class="line">				<span class="keyword">if</span> (bean != <span class="keyword">null</span>) &#123;</span><br><span class="line">					<span class="comment">// 执行InstantiationAwareBeanPostProcessors的After方法</span></span><br><span class="line">					bean = applyBeanPostProcessorsAfterInitialization(bean, beanName);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		mbd.beforeInstantiationResolved = (bean != <span class="keyword">null</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码案例"><a href="#代码案例" class="headerlink" title="代码案例"></a>代码案例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeforeInstantiation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomeThing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行do some thing ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.MethodProxy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMethodInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;目标方法前：&quot;</span>+method);</span><br><span class="line">        Object o1 = methodProxy.invokeSuper(o, objects);</span><br><span class="line">        System.out.println(<span class="string">&quot;目标方法后：&quot;</span>+method);</span><br><span class="line">        <span class="keyword">return</span> o1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.PropertyValues;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.Enhancer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInstantiationAwareBeanPostProcessor</span>  <span class="keyword">implements</span> <span class="title">InstantiationAwareBeanPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;beanName:&quot;</span>+beanName+<span class="string">&quot;执行..postProcessBeforeInitialization\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;beanName:&quot;</span>+beanName+<span class="string">&quot;执行..postProcessAfterInitialization\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">postProcessAfterInstantiation</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;beanName:&quot;</span>+beanName+<span class="string">&quot;执行..postProcessAfterInstantiation\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInstantiation</span><span class="params">(Class&lt;?&gt; beanClass, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;beanName:&quot;</span>+beanName+<span class="string">&quot;执行..postProcessBeforeInstantiation\n&quot;</span>);</span><br><span class="line">        <span class="comment">//利用 其 生成动态代理</span></span><br><span class="line">        <span class="keyword">if</span>(beanClass==BeforeInstantiation.class)&#123;</span><br><span class="line">            Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">            enhancer.setSuperclass(beanClass);</span><br><span class="line">            enhancer.setCallback(<span class="keyword">new</span> MyMethodInterceptor());</span><br><span class="line">            BeforeInstantiation beforeInstantiation = (BeforeInstantiation)enhancer.create();</span><br><span class="line">            System.out.print(<span class="string">&quot;返回动态代理\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> beforeInstantiation;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PropertyValues <span class="title">postProcessProperties</span><span class="params">(PropertyValues pvs, Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;beanName:&quot;</span>+beanName+<span class="string">&quot;执行..postProcessProperties\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> pvs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;beforeInstantiation&quot; class=&quot;com.lixiang.resolveBeforeInstantiation.BeforeInstantiation&quot;&gt;&lt;/bean&gt;</span><br><span class="line">    &lt;bean id=&quot;myInstantiationAwareBeanPostProcessor&quot; class=&quot;com.lixiang.resolveBeforeInstantiation.MyInstantiationAwareBeanPostProcessor&quot;&gt;&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;resolveBeforeInstantiation.xml&quot;</span>);</span><br><span class="line">        BeforeInstantiation bean = ac.getBean(BeforeInstantiation.class);</span><br><span class="line">        bean.doSomeThing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring源码-通过Supplier创建对象</title>
    <url>/2022/09/13/Spring%E6%BA%90%E7%A0%81/Spring%E6%BA%90%E7%A0%81-%E9%80%9A%E8%BF%87Supplier%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h3 id="通过Supplier创建对象"><a href="#通过Supplier创建对象" class="headerlink" title="通过Supplier创建对象"></a>通过Supplier创建对象</h3><p>理解:在spring实例化之前,可以通过RootBeanDefinition.getInstanceSupplier()获取Supplier&lt;?&gt;进行对象创建,Supplier<br>只是BeanDefinition的一个属性值</p>
<p>1.获取Supplier实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> BeanWrapper <span class="title">createBeanInstance</span><span class="params">(String beanName, RootBeanDefinition mbd, </span></span></span><br><span class="line"><span class="function"><span class="params">	<span class="meta">@Nullable</span> Object[] args)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// Make sure bean class is actually resolved at this point.</span></span><br><span class="line">	Class&lt;?&gt; beanClass = resolveBeanClass(mbd, beanName);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (beanClass != <span class="keyword">null</span> &amp;&amp; !Modifier.isPublic(beanClass.getModifiers()) &amp;&amp; </span><br><span class="line">	!mbd.isNonPublicAccessAllowed()) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">				<span class="string">&quot;Bean class isn&#x27;t public, and non-public access not allowed: &quot;</span> </span><br><span class="line">				+ beanClass.getName());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 获取Supplier实例</span></span><br><span class="line">	Supplier&lt;?&gt; instanceSupplier = mbd.getInstanceSupplier();</span><br><span class="line">	<span class="keyword">if</span> (instanceSupplier != <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> obtainFromSupplier(instanceSupplier, beanName);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.调用instanceSupplier的get()方法获取实例,这里get()方法调用的是函数式接口Supplier的内部方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> BeanWrapper <span class="title">obtainFromSupplier</span><span class="params">(Supplier&lt;?&gt; instanceSupplier, String beanName)</span> </span>&#123;</span><br><span class="line">	Object instance;</span><br><span class="line"></span><br><span class="line">	String outerBean = <span class="keyword">this</span>.currentlyCreatedBean.get();</span><br><span class="line">	<span class="keyword">this</span>.currentlyCreatedBean.set(beanName);</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		instance = instanceSupplier.get();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">finally</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (outerBean != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">this</span>.currentlyCreatedBean.set(outerBean);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">this</span>.currentlyCreatedBean.remove();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">		instance = <span class="keyword">new</span> NullBean();</span><br><span class="line">	&#125;</span><br><span class="line">	BeanWrapper bw = <span class="keyword">new</span> BeanWrapperImpl(instance);</span><br><span class="line">	initBeanWrapper(bw);</span><br><span class="line">	<span class="keyword">return</span> bw;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Supplier</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码案例"><a href="#代码案例" class="headerlink" title="代码案例"></a>代码案例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateSupplier</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> User <span class="title">createUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanDefinition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanFactoryPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.ConfigurableListableBeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.GenericBeanDefinition;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserBeanFactoryPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanFactoryPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        BeanDefinition user = beanFactory.getBeanDefinition(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        GenericBeanDefinition beanDefinition = (GenericBeanDefinition) user;</span><br><span class="line">        beanDefinition.setInstanceSupplier(CreateSupplier::createUser);</span><br><span class="line">        beanDefinition.setBeanClass(User.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;bean id=&quot;user&quot; class=&quot;com.lixiang.supplier.User&quot;&gt;&lt;/bean&gt;</span><br><span class="line">&lt;bean class=&quot;com.lixiang.supplier.UserBeanFactoryPostProcessor&quot;&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MyClassPathXmlApplicationContext ac = <span class="keyword">new</span> MyClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">User bean = ac.getBean(User.class);</span><br><span class="line">System.out.println(bean.getUsername());</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>BeanFactory是抽象出一个接口规范, 创建的对象必须通过getObject方法获取,而Supplier只是BeanDefinition的一个属性值,<br>可以随便定义创建对象的方法;</p>
]]></content>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring自定义标签并完成解析操作</title>
    <url>/2022/09/04/Spring%E6%BA%90%E7%A0%81/Spring%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%87%E7%AD%BE%E5%B9%B6%E5%AE%8C%E6%88%90%E8%A7%A3%E6%9E%90%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h3 id="Spring自定义标签并完成解析操作"><a href="#Spring自定义标签并完成解析操作" class="headerlink" title="Spring自定义标签并完成解析操作"></a>Spring自定义标签并完成解析操作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.BeanDefinitionBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Element;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserBeanDefinitionParser</span> <span class="keyword">extends</span> <span class="title">AbstractSingleBeanDefinitionParser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;rawtypes&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Class <span class="title">getBeanClass</span><span class="params">(Element element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> User.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doParse</span><span class="params">(Element element, BeanDefinitionBuilder bean)</span> </span>&#123;</span><br><span class="line">        String userName = element.getAttribute(<span class="string">&quot;userName&quot;</span>);</span><br><span class="line">        String email = element.getAttribute(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(userName)) &#123;</span><br><span class="line">            bean.addPropertyValue(<span class="string">&quot;userName&quot;</span>, userName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(email))&#123;</span><br><span class="line">            bean.addPropertyValue(<span class="string">&quot;email&quot;</span>, email);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.xml.NamespaceHandlerSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyNamespaceHandler</span> <span class="keyword">extends</span> <span class="title">NamespaceHandlerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        registerBeanDefinitionParser(<span class="string">&quot;msb&quot;</span>, <span class="keyword">new</span> UserBeanDefinitionParser());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.在resource目录下创建META-INF目录下，并创建三个文件</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">Spring.handlers</span><br><span class="line">	http\:<span class="comment">//www.lixiang.com/schema/user=com.lixiang.selftag.MyNamespaceHandler</span></span><br><span class="line">Spring.schemas</span><br><span class="line">	http\:<span class="comment">//www.lixiang.com/schema/user.xsd=META-INF/user.xsd</span></span><br><span class="line">user.xsd</span><br><span class="line">	&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">	&lt;schema xmlns=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span></span><br><span class="line">	        targetNamespace=<span class="string">&quot;http://www.lixiang.com/schema/user&quot;</span></span><br><span class="line">	        xmlns:tns=<span class="string">&quot;http://www.lixiang.com/schema/user&quot;</span></span><br><span class="line">	        elementFormDefault=<span class="string">&quot;qualified&quot;</span>&gt;</span><br><span class="line">	    &lt;element name=<span class="string">&quot;lixiang&quot;</span>&gt;</span><br><span class="line">	        &lt;complexType&gt;</span><br><span class="line">	            &lt;attribute name =<span class="string">&quot;id&quot;</span> type = <span class="string">&quot;string&quot;</span>/&gt;</span><br><span class="line">	            &lt;attribute name =<span class="string">&quot;userName&quot;</span> type = <span class="string">&quot;string&quot;</span>/&gt;</span><br><span class="line">	            &lt;attribute name =<span class="string">&quot;email&quot;</span> type = <span class="string">&quot;string&quot;</span>/&gt;</span><br><span class="line">	        &lt;/complexType&gt;</span><br><span class="line">	    &lt;/element&gt;</span><br><span class="line">	&lt;/schema&gt;</span><br></pre></td></tr></table></figure>

<p>3.创建配置文件</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xmlns:aaa=<span class="string">&quot;http://www.lixiang.com/schema/user&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">    http://www.lixiang.com/schema/user http://www.lixiang.com/schema/user.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;aaa:lixiang id = <span class="string">&quot;testbean&quot;</span> userName = <span class="string">&quot;lee&quot;</span> email = <span class="string">&quot;bbb&quot;</span>/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>

<p>4.编写测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> MyClassPathXmlApplicationContext(<span class="string">&quot;test2.xml&quot;</span>);</span><br><span class="line">        User user=(User)context.getBean(<span class="string">&quot;testbean&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;username:&quot;</span>+user.getUserName()+<span class="string">&quot;  &quot;</span>+<span class="string">&quot;email:&quot;</span>+user.getEmail());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring源码-通过FactoryMethod创建对象</title>
    <url>/2022/09/13/Spring%E6%BA%90%E7%A0%81/Spring%E6%BA%90%E7%A0%81-%E9%80%9A%E8%BF%87FactoryMethod%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h3 id="通过FactoryMethod创建对象"><a href="#通过FactoryMethod创建对象" class="headerlink" title="通过FactoryMethod创建对象"></a>通过FactoryMethod创建对象</h3><p>理解: spring提供了通过静态工厂和实例工厂两种方式来创建对象;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> BeanWrapper <span class="title">createBeanInstance</span><span class="params">(String beanName, RootBeanDefinition mbd, <span class="meta">@Nullable</span> Object[] args)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// Make sure bean class is actually resolved at this point.</span></span><br><span class="line">	Class&lt;?&gt; beanClass = resolveBeanClass(mbd, beanName);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (beanClass != <span class="keyword">null</span> &amp;&amp; !Modifier.isPublic(beanClass.getModifiers()) &amp;&amp; !mbd.isNonPublicAccessAllowed()) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">				<span class="string">&quot;Bean class isn&#x27;t public, and non-public access not allowed: &quot;</span> + beanClass.getName());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 获取Supplier实例</span></span><br><span class="line">	Supplier&lt;?&gt; instanceSupplier = mbd.getInstanceSupplier();</span><br><span class="line">	<span class="keyword">if</span> (instanceSupplier != <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> obtainFromSupplier(instanceSupplier, beanName);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 获取FactoryMethod名称</span></span><br><span class="line">	<span class="keyword">if</span> (mbd.getFactoryMethodName() != <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> instantiateUsingFactoryMethod(beanName, mbd, args);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> BeanWrapper <span class="title">instantiateUsingFactoryMethod</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">		String beanName, RootBeanDefinition mbd, <span class="meta">@Nullable</span> Object[] explicitArgs)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> ConstructorResolver(<span class="keyword">this</span>).instantiateUsingFactoryMethod(beanName, mbd, explicitArgs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> BeanWrapper <span class="title">instantiateUsingFactoryMethod</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">		String beanName, RootBeanDefinition mbd, <span class="meta">@Nullable</span> Object[] explicitArgs)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	BeanWrapperImpl bw = <span class="keyword">new</span> BeanWrapperImpl();</span><br><span class="line">	<span class="keyword">this</span>.beanFactory.initBeanWrapper(bw);</span><br><span class="line"></span><br><span class="line">	Object factoryBean;</span><br><span class="line">	Class&lt;?&gt; factoryClass;</span><br><span class="line">	<span class="keyword">boolean</span> isStatic;</span><br><span class="line"></span><br><span class="line">	String factoryBeanName = mbd.getFactoryBeanName();</span><br><span class="line">	<span class="keyword">if</span> (factoryBeanName != <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (factoryBeanName.equals(beanName)) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,</span><br><span class="line">					<span class="string">&quot;factory-bean reference points back to the same bean definition&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		factoryBean = <span class="keyword">this</span>.beanFactory.getBean(factoryBeanName);</span><br><span class="line">		<span class="keyword">if</span> (mbd.isSingleton() &amp;&amp; <span class="keyword">this</span>.beanFactory.containsSingleton(beanName)) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ImplicitlyAppearedSingletonException();</span><br><span class="line">		&#125;</span><br><span class="line">		factoryClass = factoryBean.getClass();</span><br><span class="line">		isStatic = <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">// It&#x27;s a static factory method on the bean class.</span></span><br><span class="line">		<span class="keyword">if</span> (!mbd.hasBeanClass()) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,</span><br><span class="line">					<span class="string">&quot;bean definition declares neither a bean class nor a factory-bean reference&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		factoryBean = <span class="keyword">null</span>;</span><br><span class="line">		factoryClass = mbd.getBeanClass();</span><br><span class="line">		isStatic = <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Method factoryMethodToUse = <span class="keyword">null</span>;</span><br><span class="line">	ArgumentsHolder argsHolderToUse = <span class="keyword">null</span>;</span><br><span class="line">	Object[] argsToUse = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (explicitArgs != <span class="keyword">null</span>) &#123;</span><br><span class="line">		argsToUse = explicitArgs;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		Object[] argsToResolve = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">synchronized</span> (mbd.constructorArgumentLock) &#123;</span><br><span class="line">			factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod;</span><br><span class="line">			<span class="keyword">if</span> (factoryMethodToUse != <span class="keyword">null</span> &amp;&amp; mbd.constructorArgumentsResolved) &#123;</span><br><span class="line">				<span class="comment">// Found a cached factory method...</span></span><br><span class="line">				argsToUse = mbd.resolvedConstructorArguments;</span><br><span class="line">				<span class="keyword">if</span> (argsToUse == <span class="keyword">null</span>) &#123;</span><br><span class="line">					argsToResolve = mbd.preparedConstructorArguments;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (argsToResolve != <span class="keyword">null</span>) &#123;</span><br><span class="line">			argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve, <span class="keyword">true</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (factoryMethodToUse == <span class="keyword">null</span> || argsToUse == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="comment">// Need to determine the factory method...</span></span><br><span class="line">		<span class="comment">// Try all methods with this name to see if they match the given arguments.</span></span><br><span class="line">		factoryClass = ClassUtils.getUserClass(factoryClass);</span><br><span class="line"></span><br><span class="line">		List&lt;Method&gt; candidates = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">if</span> (mbd.isFactoryMethodUnique) &#123;</span><br><span class="line">			<span class="keyword">if</span> (factoryMethodToUse == <span class="keyword">null</span>) &#123;</span><br><span class="line">				factoryMethodToUse = mbd.getResolvedFactoryMethod();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (factoryMethodToUse != <span class="keyword">null</span>) &#123;</span><br><span class="line">				candidates = Collections.singletonList(factoryMethodToUse);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (candidates == <span class="keyword">null</span>) &#123;</span><br><span class="line">			candidates = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">			Method[] rawCandidates = getCandidateMethods(factoryClass, mbd);</span><br><span class="line">			<span class="keyword">for</span> (Method candidate : rawCandidates) &#123;</span><br><span class="line">				<span class="keyword">if</span> (Modifier.isStatic(candidate.getModifiers()) == isStatic &amp;&amp; mbd.isFactoryMethod(candidate)) &#123;</span><br><span class="line">					candidates.add(candidate);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (candidates.size() == <span class="number">1</span> &amp;&amp; explicitArgs == <span class="keyword">null</span> &amp;&amp; !mbd.hasConstructorArgumentValues()) &#123;</span><br><span class="line">			Method uniqueCandidate = candidates.get(<span class="number">0</span>);</span><br><span class="line">			<span class="keyword">if</span> (uniqueCandidate.getParameterCount() == <span class="number">0</span>) &#123;</span><br><span class="line">				mbd.factoryMethodToIntrospect = uniqueCandidate;</span><br><span class="line">				<span class="keyword">synchronized</span> (mbd.constructorArgumentLock) &#123;</span><br><span class="line">					mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate;</span><br><span class="line">					mbd.constructorArgumentsResolved = <span class="keyword">true</span>;</span><br><span class="line">					mbd.resolvedConstructorArguments = EMPTY_ARGS;</span><br><span class="line">				&#125;</span><br><span class="line">				bw.setBeanInstance(instantiate(beanName, mbd, factoryBean, uniqueCandidate, EMPTY_ARGS));</span><br><span class="line">				<span class="keyword">return</span> bw;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (candidates.size() &gt; <span class="number">1</span>) &#123;  <span class="comment">// explicitly skip immutable singletonList</span></span><br><span class="line">			candidates.sort(AutowireUtils.EXECUTABLE_COMPARATOR);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		ConstructorArgumentValues resolvedValues = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">boolean</span> autowiring = (mbd.getResolvedAutowireMode() == AutowireCapableBeanFactory.AUTOWIRE_CONSTRUCTOR);</span><br><span class="line">		<span class="keyword">int</span> minTypeDiffWeight = Integer.MAX_VALUE;</span><br><span class="line">		Set&lt;Method&gt; ambiguousFactoryMethods = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> minNrOfArgs;</span><br><span class="line">		<span class="keyword">if</span> (explicitArgs != <span class="keyword">null</span>) &#123;</span><br><span class="line">			minNrOfArgs = explicitArgs.length;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// We don&#x27;t have arguments passed in programmatically, so we need to resolve the</span></span><br><span class="line">			<span class="comment">// arguments specified in the constructor arguments held in the bean definition.</span></span><br><span class="line">			<span class="keyword">if</span> (mbd.hasConstructorArgumentValues()) &#123;</span><br><span class="line">				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues();</span><br><span class="line">				resolvedValues = <span class="keyword">new</span> ConstructorArgumentValues();</span><br><span class="line">				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				minNrOfArgs = <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		LinkedList&lt;UnsatisfiedDependencyException&gt; causes = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (Method candidate : candidates) &#123;</span><br><span class="line">			<span class="keyword">int</span> parameterCount = candidate.getParameterCount();</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (parameterCount &gt;= minNrOfArgs) &#123;</span><br><span class="line">				ArgumentsHolder argsHolder;</span><br><span class="line"></span><br><span class="line">				Class&lt;?&gt;[] paramTypes = candidate.getParameterTypes();</span><br><span class="line">				<span class="keyword">if</span> (explicitArgs != <span class="keyword">null</span>) &#123;</span><br><span class="line">					<span class="comment">// Explicit arguments given -&gt; arguments length must match exactly.</span></span><br><span class="line">					<span class="keyword">if</span> (paramTypes.length != explicitArgs.length) &#123;</span><br><span class="line">						<span class="keyword">continue</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					argsHolder = <span class="keyword">new</span> ArgumentsHolder(explicitArgs);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="comment">// Resolved constructor arguments: type conversion and/or autowiring necessary.</span></span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						String[] paramNames = <span class="keyword">null</span>;</span><br><span class="line">						ParameterNameDiscoverer pnd = <span class="keyword">this</span>.beanFactory.getParameterNameDiscoverer();</span><br><span class="line">						<span class="keyword">if</span> (pnd != <span class="keyword">null</span>) &#123;</span><br><span class="line">							paramNames = pnd.getParameterNames(candidate);</span><br><span class="line">						&#125;</span><br><span class="line">						argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw,</span><br><span class="line">								paramTypes, paramNames, candidate, autowiring, candidates.size() == <span class="number">1</span>);</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">catch</span> (UnsatisfiedDependencyException ex) &#123;</span><br><span class="line">						<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">							logger.trace(<span class="string">&quot;Ignoring factory method [&quot;</span> + candidate + <span class="string">&quot;] of bean &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27;: &quot;</span> + ex);</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="comment">// Swallow and try next overloaded factory method.</span></span><br><span class="line">						<span class="keyword">if</span> (causes == <span class="keyword">null</span>) &#123;</span><br><span class="line">							causes = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">						&#125;</span><br><span class="line">						causes.add(ex);</span><br><span class="line">						<span class="keyword">continue</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">int</span> typeDiffWeight = (mbd.isLenientConstructorResolution() ?</span><br><span class="line">						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes));</span><br><span class="line">				<span class="comment">// Choose this factory method if it represents the closest match.</span></span><br><span class="line">				<span class="keyword">if</span> (typeDiffWeight &lt; minTypeDiffWeight) &#123;</span><br><span class="line">					factoryMethodToUse = candidate;</span><br><span class="line">					argsHolderToUse = argsHolder;</span><br><span class="line">					argsToUse = argsHolder.arguments;</span><br><span class="line">					minTypeDiffWeight = typeDiffWeight;</span><br><span class="line">					ambiguousFactoryMethods = <span class="keyword">null</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">// Find out about ambiguity: In case of the same type difference weight</span></span><br><span class="line">				<span class="comment">// for methods with the same number of parameters, collect such candidates</span></span><br><span class="line">				<span class="comment">// and eventually raise an ambiguity exception.</span></span><br><span class="line">				<span class="comment">// However, only perform that check in non-lenient constructor resolution mode,</span></span><br><span class="line">				<span class="comment">// and explicitly ignore overridden methods (with the same parameter signature).</span></span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (factoryMethodToUse != <span class="keyword">null</span> &amp;&amp; typeDiffWeight == minTypeDiffWeight &amp;&amp;</span><br><span class="line">						!mbd.isLenientConstructorResolution() &amp;&amp;</span><br><span class="line">						paramTypes.length == factoryMethodToUse.getParameterCount() &amp;&amp;</span><br><span class="line">						!Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) &#123;</span><br><span class="line">					<span class="keyword">if</span> (ambiguousFactoryMethods == <span class="keyword">null</span>) &#123;</span><br><span class="line">						ambiguousFactoryMethods = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">						ambiguousFactoryMethods.add(factoryMethodToUse);</span><br><span class="line">					&#125;</span><br><span class="line">					ambiguousFactoryMethods.add(candidate);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (factoryMethodToUse == <span class="keyword">null</span> || argsToUse == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (causes != <span class="keyword">null</span>) &#123;</span><br><span class="line">				UnsatisfiedDependencyException ex = causes.removeLast();</span><br><span class="line">				<span class="keyword">for</span> (Exception cause : causes) &#123;</span><br><span class="line">					<span class="keyword">this</span>.beanFactory.onSuppressedException(cause);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">throw</span> ex;</span><br><span class="line">			&#125;</span><br><span class="line">			List&lt;String&gt; argTypes = <span class="keyword">new</span> ArrayList&lt;&gt;(minNrOfArgs);</span><br><span class="line">			<span class="keyword">if</span> (explicitArgs != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">for</span> (Object arg : explicitArgs) &#123;</span><br><span class="line">					argTypes.add(arg != <span class="keyword">null</span> ? arg.getClass().getSimpleName() : <span class="string">&quot;null&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (resolvedValues != <span class="keyword">null</span>) &#123;</span><br><span class="line">				Set&lt;ValueHolder&gt; valueHolders = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(resolvedValues.getArgumentCount());</span><br><span class="line">				valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values());</span><br><span class="line">				valueHolders.addAll(resolvedValues.getGenericArgumentValues());</span><br><span class="line">				<span class="keyword">for</span> (ValueHolder value : valueHolders) &#123;</span><br><span class="line">					String argType = (value.getType() != <span class="keyword">null</span> ? ClassUtils.getShortName(value.getType()) :</span><br><span class="line">							(value.getValue() != <span class="keyword">null</span> ? value.getValue().getClass().getSimpleName() : <span class="string">&quot;null&quot;</span>));</span><br><span class="line">					argTypes.add(argType);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			String argDesc = StringUtils.collectionToCommaDelimitedString(argTypes);</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">					<span class="string">&quot;No matching factory method found: &quot;</span> +</span><br><span class="line">					(mbd.getFactoryBeanName() != <span class="keyword">null</span> ?</span><br><span class="line">						<span class="string">&quot;factory bean &#x27;&quot;</span> + mbd.getFactoryBeanName() + <span class="string">&quot;&#x27;; &quot;</span> : <span class="string">&quot;&quot;</span>) +</span><br><span class="line">					<span class="string">&quot;factory method &#x27;&quot;</span> + mbd.getFactoryMethodName() + <span class="string">&quot;(&quot;</span> + argDesc + <span class="string">&quot;)&#x27;. &quot;</span> +</span><br><span class="line">					<span class="string">&quot;Check that a method with the specified name &quot;</span> +</span><br><span class="line">					(minNrOfArgs &gt; <span class="number">0</span> ? <span class="string">&quot;and arguments &quot;</span> : <span class="string">&quot;&quot;</span>) +</span><br><span class="line">					<span class="string">&quot;exists and that it is &quot;</span> +</span><br><span class="line">					(isStatic ? <span class="string">&quot;static&quot;</span> : <span class="string">&quot;non-static&quot;</span>) + <span class="string">&quot;.&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">void</span>.class == factoryMethodToUse.getReturnType()) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">					<span class="string">&quot;Invalid factory method &#x27;&quot;</span> + mbd.getFactoryMethodName() +</span><br><span class="line">					<span class="string">&quot;&#x27;: needs to have a non-void return type!&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (ambiguousFactoryMethods != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">					<span class="string">&quot;Ambiguous factory method matches found in bean &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27; &quot;</span> +</span><br><span class="line">					<span class="string">&quot;(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): &quot;</span> +</span><br><span class="line">					ambiguousFactoryMethods);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (explicitArgs == <span class="keyword">null</span> &amp;&amp; argsHolderToUse != <span class="keyword">null</span>) &#123;</span><br><span class="line">			mbd.factoryMethodToIntrospect = factoryMethodToUse;</span><br><span class="line">			argsHolderToUse.storeCache(mbd, factoryMethodToUse);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	bw.setBeanInstance(instantiate(beanName, mbd, factoryBean, factoryMethodToUse, argsToUse));</span><br><span class="line">	<span class="keyword">return</span> bw;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码案例"><a href="#代码案例" class="headerlink" title="代码案例"></a>代码案例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonInstanceFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">getPerson</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.setId(<span class="number">1</span>);</span><br><span class="line">        person.setName(name);</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonStaticFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Person <span class="title">getPerson</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.setId(<span class="number">1</span>);</span><br><span class="line">        person.setName(name);</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;person5&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.lixiang.factoryMethod.PersonStaticFactory&quot;</span> factory-method=<span class="string">&quot;getPerson&quot;</span>&gt;</span><br><span class="line">        &lt;!--constructor-arg：可以为方法指定参数--&gt;</span><br><span class="line">        &lt;constructor-arg value=&quot;lisi&quot;&gt;&lt;/constructor-arg&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;bean id=&quot;personInstanceFactory&quot; class=&quot;com.lixiang.factoryMethod.PersonInstanceFactory&quot;&gt;&lt;/bean&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">    factory-bean:指定使用哪个工厂实例</span><br><span class="line">    factory-method:指定使用哪个工厂实例的方法</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;person6&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.lixiang.factoryMethod.Person&quot;</span> factory-bean=<span class="string">&quot;personInstanceFactory&quot;</span> factory-method=<span class="string">&quot;getPerson&quot;</span>&gt;</span><br><span class="line">        &lt;constructor-arg value=&quot;wangwu&quot;&gt;&lt;/constructor-arg&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyClassPathXmlApplicationContext ac = <span class="keyword">new</span> MyClassPathXmlApplicationContext(<span class="string">&quot;factoryMethod.xml&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring是如何解决循环依赖的</title>
    <url>/2022/09/15/Spring%E6%BA%90%E7%A0%81/Spring%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E7%9A%84/</url>
    <content><![CDATA[<h3 id="何为循环依赖"><a href="#何为循环依赖" class="headerlink" title="何为循环依赖"></a>何为循环依赖</h3><p>理解：当对象A初始化进行赋值操作时,值的类型为引用类型B,需要从spring容器中获取具体的B对象,容器需要先创建B对象为A对象赋值,但是B对象进行赋值时,它内部存在属性类型为引用类型A变量,而A对象并没有初始化完毕,形成了循环依赖;</p>
<h3 id="Spring在Bean哪个阶段可能出现循环依赖"><a href="#Spring在Bean哪个阶段可能出现循环依赖" class="headerlink" title="Spring在Bean哪个阶段可能出现循环依赖"></a>Spring在Bean哪个阶段可能出现循环依赖</h3><p>理解：为Bean对象赋值阶段,值的类型为引用类型;</p>
<h3 id="Spring如何解决循环依赖"><a href="#Spring如何解决循环依赖" class="headerlink" title="Spring如何解决循环依赖"></a>Spring如何解决循环依赖</h3><p>需要明确几个要点：</p>
<ol>
<li>spring创建bean的实例化与初始化阶段是分开的;</li>
<li>实例化和初始化两个阶段的对象的属性值会改变但是对象引用地址不变的;</li>
</ol>
<p>针对以上两点可以发现解决循环以来的方法：把完成了实例化但未完成初始化的对象提前暴露出去,让其他对象能够引用,这样就解决了循环依赖问题,spring中解决循环依赖方法是使用三级缓存;<br>首先介绍一下三级缓存:<br>一级缓存Map(singletonObjects)存放的是key为beanName值为已经完成初始化的Bean对象,<br>二级缓存Map(earlySingletonObjects)存放的是key为beanName值为完成了实例化但未完成初始化的Bean对象,<br>三级缓存Map(singletonFactories)key为beanName值为函数式接口对应的lambda表达式;</p>
<p>spring解决循环依赖的流程：</p>
<ol>
<li>当A对象实例化后,会将A对象的beanName作为key,然后将获取已经完成实例化但未完成初始化A对象的Lambda函数作为值放入三级缓存;</li>
<li>A对象进行初始化,为A对象的引用类型B属性赋值,在容器查找是否已经有B对象(这个查找其实就是在三级缓存中查找);</li>
<li>容器没有找到B对象,此时会去创建B对象;</li>
<li>B对象完成实例化后,需要为B对象的引用类型A属性赋值,在容器中查找是否已经存在A对象,然后在三级缓存中找到A对象,调用三级缓存中lambda函数获取到了实例化但未初始化的A对象,赋值给自己的A属性,并将A对象放入二级缓存,移除三级缓存中A;</li>
<li>此时B对象实例化和初始化都执行完毕,完成B对象创建,将B对象放入一级缓存并移除B对象的二三级缓存,程序继续执行A对象初始化赋值,将B对象赋值给A对象的B属性,执行后续流程,A对象创建完毕;将A对象放入一级缓存并移除A对象的二三级缓存,</li>
</ol>
<p>针对上述流程可以发现我们把源码改成把完成了实例化但未完成初始化的对象直接放入二级缓存,不需要三级缓存就能解决循环依赖;</p>
<h3 id="二级缓存就能解决循环依赖-为什么需要三级缓存"><a href="#二级缓存就能解决循环依赖-为什么需要三级缓存" class="headerlink" title="二级缓存就能解决循环依赖,为什么需要三级缓存"></a>二级缓存就能解决循环依赖,为什么需要三级缓存</h3><ol>
<li>上述所讲的情况是不存在代理对象的情况,当我们使用AOP需要创建代理对象二级缓存就无法解决该问题了;</li>
</ol>
<p>首先需要明确与刚刚存在差异的点:</p>
<ol>
<li>我们使用了AOP,需要创建代理对象,我们都知道,开启了AOP后,会在bean的赋值且InitMethod执行完成后,会执行BeanPostProcessor的postProcessAfterInitialization创建代理对象;</li>
</ol>
<p>有了这一点我们只使用二级缓存的想法就会出现问题：</p>
<ol>
<li>A实例化后,为引用类型B属性赋值,这个时候创建B对象,并将二级缓存中A对象赋值给B对象;</li>
<li>B赋值完成后,继续执行初始化流程,由于开启了AOP,最终需要执行BeanPostProcessor的postProcessAfterInitialization创建代理对象,这个时候就存在两个B对象,一个是前面实例化的B对象包含A属性,一个是后面创建的代理对象B不包含A属性;</li>
<li>最终会将代理对象B赋值给A的引用类型B属性,而代理对象B的引用类型A属性并未赋值,此时就存在了问题;</li>
</ol>
<p>针对于上述问题Spring中是如何例用第三级缓存解决的:</p>
<ol>
<li>当B给引用类型A赋值时,会去容器中查找A对象,发现第三级缓存中有A对象,调用三级缓存中lambda函数,由于开启了AOP,这里会创建A的代理对象覆盖原来的A对象,然后赋值给B对象的属性值A,当B对象执行BeanPostProcessor的postProcessAfterInitialization时会创建代理对象覆盖原来的B,此时B对象创建完成,添加到一级缓存,然后继续执行A的赋值流程,将B的代理对象赋值给A的属性B,完成A的对象创建;</li>
</ol>
]]></content>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring源码-AOP的具体实现</title>
    <url>/2022/09/20/Spring%E6%BA%90%E7%A0%81/Spring%E6%BA%90%E7%A0%81-AOP%E7%9A%84%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h3 id="容器启动-切面类-切入点-advice-通知-扫描创建代理类阶段-准备AOP相关对象的BeanDefinition"><a href="#容器启动-切面类-切入点-advice-通知-扫描创建代理类阶段-准备AOP相关对象的BeanDefinition" class="headerlink" title="容器启动,切面类,切入点,advice(通知)扫描创建代理类阶段(准备AOP相关对象的BeanDefinition)"></a>容器启动,切面类,切入点,advice(通知)扫描创建代理类阶段(准备AOP相关对象的BeanDefinition)</h3><p>理解:整体就是完成AspectJExpressionPointcut,advisor,AspectJAwareAdvisorAutoProxyCreator的BeanDefinition的注入</p>
<ol>
<li>xml形式开启AOP,将AOP标签相关信息解析成pointcut,advisor,aspect封装成BeanDefinition添加到容器;<br>各个对象内部包含关系AspectJPointcutAdvisor –&gt; Advice(AspectJAroundAdvice, AspectJAfterThrowingAdvice, AspectJAfterReturningAdvice, AspectJAfterAdvice, AspectJMethodBeforeAdvice) –&gt;<br>(MethodLocatingFactoryBean),表达式,SimpleBeanFactoryAwareAspectInstanceFactory)<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">parseBeanDefinitions</span><span class="params">(Element root, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 1.默认命名空间的处理</span></span><br><span class="line">	<span class="keyword">if</span> (delegate.isDefaultNamespace(root)) &#123;</span><br><span class="line">		NodeList nl = root.getChildNodes();</span><br><span class="line">		<span class="comment">// 遍历root的子节点列表</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">			Node node = nl.item(i);</span><br><span class="line">			<span class="keyword">if</span> (node <span class="keyword">instanceof</span> Element) &#123;</span><br><span class="line">				Element ele = (Element) node;</span><br><span class="line">				<span class="comment">// 1.1 默认命名空间节点的处理，例如：&lt;bean id=&quot;test&quot; class=&quot;&quot; /&gt;</span></span><br><span class="line">				<span class="keyword">if</span> (delegate.isDefaultNamespace(ele)) &#123;</span><br><span class="line">					parseDefaultElement(ele, delegate);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="comment">// 1.2 自定义命名空间节点的处理，例如：&lt;context:component-scan/&gt;、&lt;aop:aspectj-autoproxy/&gt;</span></span><br><span class="line">					delegate.parseCustomElement(ele);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">// 2.自定义命名空间的处理</span></span><br><span class="line">		delegate.parseCustomElement(root);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>解析xml下AOP相关的标签</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ConfigBeanDefinitionParser.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BeanDefinition <span class="title">parse</span><span class="params">(Element element, ParserContext parserContext)</span> </span>&#123;</span><br><span class="line">	CompositeComponentDefinition compositeDef =</span><br><span class="line">			<span class="keyword">new</span> CompositeComponentDefinition(element.getTagName(), parserContext.extractSource(element));</span><br><span class="line">	parserContext.pushContainingComponent(compositeDef);</span><br><span class="line">	<span class="comment">// 注入自动代理的创建器</span></span><br><span class="line">	configureAutoProxyCreator(parserContext, element);</span><br><span class="line"></span><br><span class="line">	List&lt;Element&gt; childElts = DomUtils.getChildElements(element);</span><br><span class="line">	<span class="keyword">for</span> (Element elt: childElts) &#123;</span><br><span class="line">		String localName = parserContext.getDelegate().getLocalName(elt);</span><br><span class="line">		<span class="keyword">if</span> (POINTCUT.equals(localName)) &#123;</span><br><span class="line">			parsePointcut(elt, parserContext);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (ADVISOR.equals(localName)) &#123;</span><br><span class="line">			parseAdvisor(elt, parserContext);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (ASPECT.equals(localName)) &#123;</span><br><span class="line">			parseAspect(elt, parserContext);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	parserContext.popAndRegisterContainingComponent();</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>开启AOP后,Spring会加载一些内部对象到容器;<br>向容器中注入AspectJAwareAdvisorAutoProxyCreator这个自动代理创建器<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">configureAutoProxyCreator</span><span class="params">(ParserContext parserContext, Element element)</span> </span>&#123;</span><br><span class="line">	AopNamespaceUtils.registerAspectJAutoProxyCreatorIfNecessary(parserContext, element);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerAspectJAutoProxyCreatorIfNecessary</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">		ParserContext parserContext, Element sourceElement)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	BeanDefinition beanDefinition = AopConfigUtils.registerAspectJAutoProxyCreatorIfNecessary(</span><br><span class="line">			parserContext.getRegistry(), parserContext.extractSource(sourceElement));</span><br><span class="line">	useClassProxyingIfNecessary(parserContext.getRegistry(), sourceElement);</span><br><span class="line">	registerComponentIfNecessary(beanDefinition, parserContext);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BeanDefinition <span class="title">registerAspectJAutoProxyCreatorIfNecessary</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">		BeanDefinitionRegistry registry, <span class="meta">@Nullable</span> Object source)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> registerOrEscalateApcAsRequired(AspectJAwareAdvisorAutoProxyCreator.class, registry, source);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> BeanDefinition <span class="title">registerOrEscalateApcAsRequired</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">		Class&lt;?&gt; cls, BeanDefinitionRegistry registry, <span class="meta">@Nullable</span> Object source)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	Assert.notNull(registry, <span class="string">&quot;BeanDefinitionRegistry must not be null&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (registry.containsBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME)) &#123;</span><br><span class="line">		BeanDefinition apcDefinition = registry.getBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME);</span><br><span class="line">		<span class="keyword">if</span> (!cls.getName().equals(apcDefinition.getBeanClassName())) &#123;</span><br><span class="line">			<span class="keyword">int</span> currentPriority = findPriorityForClass(apcDefinition.getBeanClassName());</span><br><span class="line">			<span class="keyword">int</span> requiredPriority = findPriorityForClass(cls);</span><br><span class="line">			<span class="keyword">if</span> (currentPriority &lt; requiredPriority) &#123;</span><br><span class="line">				apcDefinition.setBeanClassName(cls.getName());</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	RootBeanDefinition beanDefinition = <span class="keyword">new</span> RootBeanDefinition(cls);</span><br><span class="line">	beanDefinition.setSource(source);</span><br><span class="line">	beanDefinition.getPropertyValues().add(<span class="string">&quot;order&quot;</span>, Ordered.HIGHEST_PRECEDENCE);</span><br><span class="line">	beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line">	<span class="comment">// AUTO_PROXY_CREATOR_BEAN_NAME = &quot;org.springframework.aop.config.internalAutoProxyCreator&quot;;</span></span><br><span class="line">	registry.registerBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME, beanDefinition);</span><br><span class="line">	<span class="keyword">return</span> beanDefinition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><img src="/images/spring/AspectJAwareAdvisorAutoProxyCreator%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%E5%9B%BE.jpg"><br>从上图可以看出AspectJAwareAdvisorAutoProxyCreator属于AbstractAdvisorAutoProxyCreator,AbstractAutoProxyCreator的子类,并且实现了SmartInstantiationAwareBeanPostProcessor接口,该接口继承自BeanPostProcessor,该接口内部有一个对于动态代理非常重要的方法getEarlyBeanReference,该方法常与三级缓存配合用于创建代理对象;</p>
<h3 id="切面类-Advisor-Pointcut实例化阶段"><a href="#切面类-Advisor-Pointcut实例化阶段" class="headerlink" title="切面类,Advisor,Pointcut实例化阶段"></a>切面类,Advisor,Pointcut实例化阶段</h3><ol>
<li>在resolveBeforeInstantiation中会遍历所有的InstantiationAwareBeanPostProcessors,在扫描的AOP相关类的时候会引入spring的内部对象AspectJAwareAdvisorAutoProxyCreator,它属于AbstractAutoProxyCreator子类,所有这里会被匹配到并执行postProcessBeforeInstantiation,在该方法中会创建所有的Advisor对象;<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">createBean</span><span class="params">(String beanName, RootBeanDefinition mbd, <span class="meta">@Nullable</span> Object[] args)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> BeanCreationException </span>&#123;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="comment">// Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.</span></span><br><span class="line">		<span class="comment">// 在实例化bean之前,给BeanPostProcessors一个机会返回代理对象</span></span><br><span class="line">		Object bean = resolveBeforeInstantiation(beanName, mbdToUse);</span><br><span class="line">		<span class="keyword">if</span> (bean != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> bean;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbdToUse.getResourceDescription(), beanName,</span><br><span class="line">				<span class="string">&quot;BeanPostProcessor before instantiation of bean failed&quot;</span>, ex);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		Object beanInstance = doCreateBean(beanName, mbdToUse, args);</span><br><span class="line">		<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">			logger.trace(<span class="string">&quot;Finished creating instance of bean &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> beanInstance;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (BeanCreationException | ImplicitlyAppearedSingletonException ex) &#123;</span><br><span class="line">		<span class="comment">// A previously detected exception with proper bean creation context already,</span></span><br><span class="line">		<span class="comment">// or illegal singleton state to be communicated up to DefaultSingletonBeanRegistry.</span></span><br><span class="line">		<span class="keyword">throw</span> ex;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">				mbdToUse.getResourceDescription(), beanName, <span class="string">&quot;Unexpected exception during bean creation&quot;</span>, ex);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">resolveBeforeInstantiation</span><span class="params">(String beanName, RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class="line">	Object bean = <span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">if</span> (!Boolean.FALSE.equals(mbd.beforeInstantiationResolved)) &#123;</span><br><span class="line">		<span class="comment">// Make sure bean class is actually resolved at this point.</span></span><br><span class="line">		<span class="keyword">if</span> (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) &#123;</span><br><span class="line">			Class&lt;?&gt; targetType = determineTargetType(beanName, mbd);</span><br><span class="line">			<span class="keyword">if</span> (targetType != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="comment">// 执行InstantiationAwareBeanPostProcessors的Before方法</span></span><br><span class="line">				bean = applyBeanPostProcessorsBeforeInstantiation(targetType, beanName);</span><br><span class="line">				<span class="keyword">if</span> (bean != <span class="keyword">null</span>) &#123;</span><br><span class="line">					<span class="comment">// 执行InstantiationAwareBeanPostProcessors的After方法</span></span><br><span class="line">					bean = applyBeanPostProcessorsAfterInitialization(bean, beanName);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		mbd.beforeInstantiationResolved = (bean != <span class="keyword">null</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">applyBeanPostProcessorsBeforeInstantiation</span><span class="params">(Class&lt;?&gt; beanClass, String beanName)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line">		<span class="keyword">if</span> (bp <span class="keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">			InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;</span><br><span class="line">			Object result = ibp.postProcessBeforeInstantiation(beanClass, beanName);</span><br><span class="line">			<span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">return</span> result;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInstantiation</span><span class="params">(Class&lt;?&gt; beanClass, String beanName)</span> </span>&#123;</span><br><span class="line">	Object cacheKey = getCacheKey(beanClass, beanName);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!StringUtils.hasLength(beanName) || !<span class="keyword">this</span>.targetSourcedBeans.contains(beanName)) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.advisedBeans.containsKey(cacheKey)) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (isInfrastructureClass(beanClass) || shouldSkip(beanClass, beanName)) &#123;</span><br><span class="line">			<span class="keyword">this</span>.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Create proxy here if we have a custom TargetSource.</span></span><br><span class="line">	<span class="comment">// Suppresses unnecessary default instantiation of the target bean:</span></span><br><span class="line">	<span class="comment">// The TargetSource will handle target instances in a custom fashion.</span></span><br><span class="line">	TargetSource targetSource = getCustomTargetSource(beanClass, beanName);</span><br><span class="line">	<span class="keyword">if</span> (targetSource != <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (StringUtils.hasLength(beanName)) &#123;</span><br><span class="line">			<span class="keyword">this</span>.targetSourcedBeans.add(beanName);</span><br><span class="line">		&#125;</span><br><span class="line">		Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(beanClass, beanName, targetSource);</span><br><span class="line">		Object proxy = createProxy(beanClass, beanName, specificInterceptors, targetSource);</span><br><span class="line">		<span class="keyword">this</span>.proxyTypes.put(cacheKey, proxy.getClass());</span><br><span class="line">		<span class="keyword">return</span> proxy;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AspectJAwareAdvisorAutoProxyCreator.java</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">shouldSkip</span><span class="params">(Class&lt;?&gt; beanClass, String beanName)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// <span class="doctag">TODO:</span> Consider optimization by caching the list of the aspect names</span></span><br><span class="line">	List&lt;Advisor&gt; candidateAdvisors = findCandidateAdvisors();</span><br><span class="line">	<span class="keyword">for</span> (Advisor advisor : candidateAdvisors) &#123;</span><br><span class="line">		<span class="keyword">if</span> (advisor <span class="keyword">instanceof</span> AspectJPointcutAdvisor &amp;&amp;</span><br><span class="line">				((AspectJPointcutAdvisor) advisor).getAspectName().equals(beanName)) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">super</span>.shouldSkip(beanClass, beanName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;Advisor&gt; <span class="title">findCandidateAdvisors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Assert.state(<span class="keyword">this</span>.advisorRetrievalHelper != <span class="keyword">null</span>, <span class="string">&quot;No BeanFactoryAdvisorRetrievalHelper available&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.advisorRetrievalHelper.findAdvisorBeans();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Advisor&gt; <span class="title">findAdvisorBeans</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// Determine list of advisor bean names, if not cached already.</span></span><br><span class="line">	String[] advisorNames = <span class="keyword">this</span>.cachedAdvisorBeanNames;</span><br><span class="line">	<span class="keyword">if</span> (advisorNames == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="comment">// Do not initialize FactoryBeans here: We need to leave all regular beans</span></span><br><span class="line">		<span class="comment">// uninitialized to let the auto-proxy creator apply to them!</span></span><br><span class="line">		advisorNames = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(</span><br><span class="line">				<span class="keyword">this</span>.beanFactory, Advisor.class, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">		<span class="keyword">this</span>.cachedAdvisorBeanNames = advisorNames;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (advisorNames.length == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	List&lt;Advisor&gt; advisors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">	<span class="keyword">for</span> (String name : advisorNames) &#123;</span><br><span class="line">		<span class="keyword">if</span> (isEligibleBean(name)) &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.beanFactory.isCurrentlyInCreation(name)) &#123;</span><br><span class="line">				<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">					logger.trace(<span class="string">&quot;Skipping currently created advisor &#x27;&quot;</span> + name + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					advisors.add(<span class="keyword">this</span>.beanFactory.getBean(name, Advisor.class));</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">catch</span> (BeanCreationException ex) &#123;</span><br><span class="line">					Throwable rootCause = ex.getMostSpecificCause();</span><br><span class="line">					<span class="keyword">if</span> (rootCause <span class="keyword">instanceof</span> BeanCurrentlyInCreationException) &#123;</span><br><span class="line">						BeanCreationException bce = (BeanCreationException) rootCause;</span><br><span class="line">						String bceBeanName = bce.getBeanName();</span><br><span class="line">						<span class="keyword">if</span> (bceBeanName != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.beanFactory.isCurrentlyInCreation(bceBeanName)) &#123;</span><br><span class="line">							<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">								logger.trace(<span class="string">&quot;Skipping advisor &#x27;&quot;</span> + name +</span><br><span class="line">										<span class="string">&quot;&#x27; with dependency on currently created bean: &quot;</span> + ex.getMessage());</span><br><span class="line">							&#125;</span><br><span class="line">							<span class="comment">// Ignore: indicates a reference back to the bean we&#x27;re trying to advise.</span></span><br><span class="line">							<span class="comment">// We want to find advisors other than the currently created bean itself.</span></span><br><span class="line">							<span class="keyword">continue</span>;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">throw</span> ex;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> advisors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在Bean初始化阶段会调用BeanPostProcessor的postProcessAfterInitialization方法会获取到所有的Advisor,并向Advisor集合中添加ExposeInvocationInterceptor,该拦截器是AOP拦截器链的核心,添加完成后会对整个集合的拦截器进行拓扑排序,并(对有向无环图的排序,<br>排序结果不唯一),完成后会创建代理对象覆盖原来的实例化对象,这里创建代理对象有两种方式,一种是JDK的动态代理(当代理类实现了接口),<br>另一种是Cglib的动态代理;<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">initializeBean</span><span class="params">(String beanName, Object bean, <span class="meta">@Nullable</span> RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">		AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class="line">			invokeAwareMethods(beanName, bean);</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;, getAccessControlContext());</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		invokeAwareMethods(beanName, bean);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Object wrappedBean = bean;</span><br><span class="line">	<span class="keyword">if</span> (mbd == <span class="keyword">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">		wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		invokeInitMethods(beanName, wrappedBean, mbd);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">				(mbd != <span class="keyword">null</span> ? mbd.getResourceDescription() : <span class="keyword">null</span>),</span><br><span class="line">				beanName, <span class="string">&quot;Invocation of init method failed&quot;</span>, ex);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (mbd == <span class="keyword">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">		wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> wrappedBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">applyBeanPostProcessorsAfterInitialization</span><span class="params">(Object existingBean, String beanName)</span></span></span><br><span class="line"><span class="function">		<span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line">	Object result = existingBean;</span><br><span class="line">	<span class="comment">// 1.遍历所有注册的BeanPostProcessor实现类，调用postProcessAfterInitialization方法</span></span><br><span class="line">	<span class="keyword">for</span> (BeanPostProcessor processor : getBeanPostProcessors()) &#123;</span><br><span class="line">		<span class="comment">// 2.在bean初始化后，调用postProcessAfterInitialization方法</span></span><br><span class="line">		Object current = processor.postProcessAfterInitialization(result, beanName);</span><br><span class="line">		<span class="keyword">if</span> (current == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="comment">// 3.如果返回null，则不会调用后续的BeanPostProcessors</span></span><br><span class="line">			<span class="keyword">return</span> result;</span><br><span class="line">		&#125;</span><br><span class="line">		result = current;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(<span class="meta">@Nullable</span> Object bean, String beanName)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (bean != <span class="keyword">null</span>) &#123;</span><br><span class="line">		Object cacheKey = getCacheKey(bean.getClass(), beanName);</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.earlyProxyReferences.remove(cacheKey) != bean) &#123;</span><br><span class="line">			<span class="keyword">return</span> wrapIfNecessary(bean, beanName, cacheKey);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">wrapIfNecessary</span><span class="params">(Object bean, String beanName, Object cacheKey)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (StringUtils.hasLength(beanName) &amp;&amp; <span class="keyword">this</span>.targetSourcedBeans.contains(beanName)) &#123;</span><br><span class="line">		<span class="keyword">return</span> bean;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (Boolean.FALSE.equals(<span class="keyword">this</span>.advisedBeans.get(cacheKey))) &#123;</span><br><span class="line">		<span class="keyword">return</span> bean;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) &#123;</span><br><span class="line">		<span class="keyword">this</span>.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line">		<span class="keyword">return</span> bean;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Create proxy if we have advice.</span></span><br><span class="line">	Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, <span class="keyword">null</span>);</span><br><span class="line">	<span class="keyword">if</span> (specificInterceptors != DO_NOT_PROXY) &#123;</span><br><span class="line">		<span class="keyword">this</span>.advisedBeans.put(cacheKey, Boolean.TRUE);</span><br><span class="line">		Object proxy = createProxy(</span><br><span class="line">				bean.getClass(), beanName, specificInterceptors, <span class="keyword">new</span> SingletonTargetSource(bean));</span><br><span class="line">		<span class="keyword">this</span>.proxyTypes.put(cacheKey, proxy.getClass());</span><br><span class="line">		<span class="keyword">return</span> proxy;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">this</span>.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line">	<span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">createProxy</span><span class="params">(Class&lt;?&gt; beanClass, <span class="meta">@Nullable</span> String beanName,</span></span></span><br><span class="line"><span class="function"><span class="params">		<span class="meta">@Nullable</span> Object[] specificInterceptors, TargetSource targetSource)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.beanFactory <span class="keyword">instanceof</span> ConfigurableListableBeanFactory) &#123;</span><br><span class="line">		AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory) <span class="keyword">this</span>.beanFactory, beanName, beanClass);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ProxyFactory proxyFactory = <span class="keyword">new</span> ProxyFactory();</span><br><span class="line">	proxyFactory.copyFrom(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!proxyFactory.isProxyTargetClass()) &#123;</span><br><span class="line">		<span class="keyword">if</span> (shouldProxyTargetClass(beanClass, beanName)) &#123;</span><br><span class="line">			proxyFactory.setProxyTargetClass(<span class="keyword">true</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			evaluateProxyInterfaces(beanClass, proxyFactory);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Advisor[] advisors = buildAdvisors(beanName, specificInterceptors);</span><br><span class="line">	proxyFactory.addAdvisors(advisors);</span><br><span class="line">	proxyFactory.setTargetSource(targetSource);</span><br><span class="line">	customizeProxyFactory(proxyFactory);</span><br><span class="line"></span><br><span class="line">	proxyFactory.setFrozen(<span class="keyword">this</span>.freezeProxy);</span><br><span class="line">	<span class="keyword">if</span> (advisorsPreFiltered()) &#123;</span><br><span class="line">		proxyFactory.setPreFiltered(<span class="keyword">true</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> proxyFactory.getProxy(getProxyClassLoader());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">(<span class="meta">@Nullable</span> ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> createAopProxy().getProxy(classLoader);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> AopProxy <span class="title">createAopProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!<span class="keyword">this</span>.active) &#123;</span><br><span class="line">		activate();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> getAopProxyFactory().createAopProxy(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AopProxyFactory</span> </span>&#123;</span><br><span class="line">	<span class="function">AopProxy <span class="title">createAopProxy</span><span class="params">(AdvisedSupport config)</span> <span class="keyword">throws</span> AopConfigException</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> AopProxy <span class="title">createAopProxy</span><span class="params">(AdvisedSupport config)</span> <span class="keyword">throws</span> AopConfigException </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config)) &#123;</span><br><span class="line">		Class&lt;?&gt; targetClass = config.getTargetClass();</span><br><span class="line">		<span class="keyword">if</span> (targetClass == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> AopConfigException(<span class="string">&quot;TargetSource cannot determine target class: &quot;</span> +</span><br><span class="line">					<span class="string">&quot;Either an interface or a target is required for proxy creation.&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (targetClass.isInterface() || Proxy.isProxyClass(targetClass)) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> JdkDynamicAopProxy(config);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ObjenesisCglibAopProxy(config);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> JdkDynamicAopProxy(config);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代理类调用具体业务方法阶段"><a href="#代理类调用具体业务方法阶段" class="headerlink" title="代理类调用具体业务方法阶段"></a>代理类调用具体业务方法阶段</h3>]]></content>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring源码-BeanFactoryPostProcessor</title>
    <url>/2022/09/15/Spring%E6%BA%90%E7%A0%81/Spring%E6%BA%90%E7%A0%81-BeanFactoryPostProcessor/</url>
    <content><![CDATA[<h3 id="BeanFactoryPostProcessor"><a href="#BeanFactoryPostProcessor" class="headerlink" title="BeanFactoryPostProcessor"></a>BeanFactoryPostProcessor</h3><p>理解：BeanFactoryPostProcessor的执行与容器已经创建完毕,xml中的bean定义信息已经解析完毕,但bean还没有实例化阶段,该接口的作用主要在于添加或者修改容器中的bean定义信息,我们日常开发中使用@Configuration,@Bean,@Component,@ComponentScan,@Import,@ImportSource这些注解向容器中添加bean,其实Spring是借助与一个非常重要的类ConfigurationClassPostProcessor,该类实现了BeanDefinitionRegistryPostProcessor,在postProcessBeanDefinitionRegistry中通过解析该bean是否标注了这些注解,进而添加使用注解引入的bean的定义信息到beanFactory</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanFactoryPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Modify the application context&#x27;s internal bean factory after its standard</span></span><br><span class="line"><span class="comment">	 * initialization. All bean definitions will have been loaded, but no beans</span></span><br><span class="line"><span class="comment">	 * will have been instantiated yet. This allows for overriding or adding</span></span><br><span class="line"><span class="comment">	 * properties even to eager-initializing beans.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> beanFactory the bean factory used by the application context</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> org.springframework.beans.BeansException in case of errors</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="BeanDefinitionRegistryPostProcessor"><a href="#BeanDefinitionRegistryPostProcessor" class="headerlink" title="BeanDefinitionRegistryPostProcessor"></a>BeanDefinitionRegistryPostProcessor</h3><p>理解：主要用于对容器中的Beandefinition信息进行添加和修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanDefinitionRegistryPostProcessor</span> <span class="keyword">extends</span> <span class="title">BeanFactoryPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Modify the application context&#x27;s internal bean definition registry after its</span></span><br><span class="line"><span class="comment">	 * standard initialization. All regular bean definitions will have been loaded,</span></span><br><span class="line"><span class="comment">	 * but no beans will have been instantiated yet. This allows for adding further</span></span><br><span class="line"><span class="comment">	 * bean definitions before the next post-processing phase kicks in.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> registry the bean definition registry used by the application context</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> org.springframework.beans.BeansException in case of errors</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="spring如何实现注入注解标记的bean"><a href="#spring如何实现注入注解标记的bean" class="headerlink" title="spring如何实现注入注解标记的bean"></a>spring如何实现注入注解标记的bean</h3><p>当spring需要开启注解扫描时,需要在xml文件配置&lt;context:component-scan base-package=”” annotation-config=”true” /&gt;加上context标签并配置要扫描的包,这个标签中其实有一个默认属性annotation-config,默认值为true,所以我们一般不会去主动设置它,当容器启动,去解析xml文件的时候,当解析到context标签, 会将标注了@Component注解的BeanDefinition信息注册到容器,并根据annotatiion-config的值是否为true判断是否将ConfigurationClassPostProcessor, AutowiredAnnotationBeanPostProcessor, CommonAnnotationBeanPostProcessor等后置处理器的BeanDefinition信息到容器,主要用于后续将标注了@Configuration,@Bean,@Component,@ComponentScan,@Import,@ImportSource等注解bean的BeanDefinition信息添加到容器</p>
<h4 id="第一阶段-扫描包阶段"><a href="#第一阶段-扫描包阶段" class="headerlink" title="第一阶段,扫描包阶段"></a>第一阶段,扫描包阶段</h4><ol>
<li><p>注册bean的定义信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doRegisterBeanDefinitions</span><span class="params">(Element root)</span> </span>&#123;</span><br><span class="line">	BeanDefinitionParserDelegate parent = <span class="keyword">this</span>.delegate;</span><br><span class="line">	<span class="comment">// 构建BeanDefinitionParserDelegate</span></span><br><span class="line">	<span class="keyword">this</span>.delegate = createDelegate(getReaderContext(), root, parent);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 1.校验root节点的命名空间是否为默认的命名空间（默认命名空间http://www.springframework.org/schema/beans）</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.delegate.isDefaultNamespace(root)) &#123;</span><br><span class="line">		<span class="comment">// 2.处理profile属性</span></span><br><span class="line">		String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE);</span><br><span class="line">		<span class="keyword">if</span> (StringUtils.hasText(profileSpec)) &#123;</span><br><span class="line">			String[] specifiedProfiles = StringUtils.tokenizeToStringArray(</span><br><span class="line">					profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS);</span><br><span class="line">			<span class="comment">// We cannot use Profiles.of(...) since profile expressions are not supported</span></span><br><span class="line">			<span class="comment">// in XML config. See SPR-12458 for details.</span></span><br><span class="line">			<span class="comment">// 校验当前节点的 profile 是否符合当前环境定义的, 如果不是则直接跳过, 不解析该节点下的内容</span></span><br><span class="line">			<span class="keyword">if</span> (!getReaderContext().getEnvironment().acceptsProfiles(specifiedProfiles)) &#123;</span><br><span class="line">					<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">					logger.debug(<span class="string">&quot;Skipped XML bean definition file due to specified profiles [&quot;</span> + profileSpec +</span><br><span class="line">							<span class="string">&quot;] not matching: &quot;</span> + getReaderContext().getResource());</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 3.解析前处理, 留给子类实现</span></span><br><span class="line">	preProcessXml(root);</span><br><span class="line">	<span class="comment">// 4.解析并注册bean定义</span></span><br><span class="line">	parseBeanDefinitions(root, <span class="keyword">this</span>.delegate);</span><br><span class="line">	<span class="comment">// 5.解析后处理, 留给子类实现</span></span><br><span class="line">	postProcessXml(root);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">this</span>.delegate = parent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>解析xml文件,context属于自定义命名空间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">parseBeanDefinitions</span><span class="params">(Element root, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 1.默认命名空间的处理</span></span><br><span class="line">	<span class="keyword">if</span> (delegate.isDefaultNamespace(root)) &#123;</span><br><span class="line">		NodeList nl = root.getChildNodes();</span><br><span class="line">		<span class="comment">// 遍历root的子节点列表</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">			Node node = nl.item(i);</span><br><span class="line">			<span class="keyword">if</span> (node <span class="keyword">instanceof</span> Element) &#123;</span><br><span class="line">				Element ele = (Element) node;</span><br><span class="line">				<span class="comment">// 1.1 默认命名空间节点的处理，例如：&lt;bean id=&quot;test&quot; class=&quot;&quot; /&gt;</span></span><br><span class="line">				<span class="keyword">if</span> (delegate.isDefaultNamespace(ele)) &#123;</span><br><span class="line">					parseDefaultElement(ele, delegate);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="comment">// 1.2 自定义命名空间节点的处理，例如：&lt;context:component-scan/&gt;、&lt;aop:aspectj-autoproxy/&gt;</span></span><br><span class="line">					delegate.parseCustomElement(ele);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">// 2.自定义命名空间的处理</span></span><br><span class="line">		delegate.parseCustomElement(root);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>拿到命名空间对应的的handler</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> BeanDefinition <span class="title">parseCustomElement</span><span class="params">(Element ele)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> parseCustomElement(ele, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> BeanDefinition <span class="title">parseCustomElement</span><span class="params">(Element ele, <span class="meta">@Nullable</span> BeanDefinition containingBd)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 1.拿到节点ele的命名空间，例如常见的:</span></span><br><span class="line">	<span class="comment">// &lt;context&gt; 节点对应命名空间: http://www.springframework.org/schema/context</span></span><br><span class="line">	<span class="comment">// &lt;aop&gt; 节点对应命名空间: http://www.springframework.org/schema/aop</span></span><br><span class="line">	String namespaceUri = getNamespaceURI(ele);</span><br><span class="line">	<span class="keyword">if</span> (namespaceUri == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 2.拿到命名空间对应的的handler, 例如：http://www.springframework.org/schema/context 对应 ContextNameSpaceHandler</span></span><br><span class="line">	<span class="comment">// 2.1 getNamespaceHandlerResolver: 拿到namespaceHandlerResolver</span></span><br><span class="line">	<span class="comment">// 2.2 resolve: 使用namespaceHandlerResolver解析namespaceUri, 拿到namespaceUri对应的NamespaceHandler</span></span><br><span class="line">	NamespaceHandler handler = <span class="keyword">this</span>.readerContext.getNamespaceHandlerResolver().resolve(namespaceUri);</span><br><span class="line">	<span class="keyword">if</span> (handler == <span class="keyword">null</span>) &#123;</span><br><span class="line">		error(<span class="string">&quot;Unable to locate Spring NamespaceHandler for XML schema namespace [&quot;</span> + namespaceUri + <span class="string">&quot;]&quot;</span>, ele);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 3.使用拿到的handler解析节点（ParserContext用于存放解析需要的一些上下文信息）</span></span><br><span class="line">	<span class="keyword">return</span> handler.parse(ele, <span class="keyword">new</span> ParserContext(<span class="keyword">this</span>.readerContext, <span class="keyword">this</span>, containingBd));</span><br><span class="line">&#125;	</span><br></pre></td></tr></table></figure>
</li>
<li><p>拿到对应的BeanDefinition解析器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> BeanDefinition <span class="title">parse</span><span class="params">(Element element, ParserContext parserContext)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 1.findParserForElement: 给element寻找对应的BeanDefinition解析器</span></span><br><span class="line">	<span class="comment">// 2.使用BeanDefinition解析器解析element节点</span></span><br><span class="line">	BeanDefinitionParser parser = findParserForElement(element, parserContext);</span><br><span class="line">	<span class="keyword">return</span> (parser != <span class="keyword">null</span> ? parser.parse(element, parserContext) : <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用解析器解析出包下所有符合要求的bean, 并注册bean定义信息到容器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> BeanDefinition <span class="title">parse</span><span class="params">(Element element, ParserContext parserContext)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 1.拿到&lt;context:component-scan&gt;节点的base-package属性值</span></span><br><span class="line">	String basePackage = element.getAttribute(BASE_PACKAGE_ATTRIBUTE);</span><br><span class="line">	<span class="comment">// 2.解析占位符, 例如 $&#123;basePackage&#125;</span></span><br><span class="line">	basePackage = parserContext.getReaderContext().getEnvironment().resolvePlaceholders(basePackage);</span><br><span class="line">	<span class="comment">// 3.解析base-package（允许通过 &quot;,; \t\n&quot; 中的任一符号填写多个），例如: com.joonwhee.open.one;com.joonwhee.open.two</span></span><br><span class="line">	String[] basePackages = StringUtils.tokenizeToStringArray(basePackage,</span><br><span class="line">			ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Actually scan for bean definitions and register them.</span></span><br><span class="line">	<span class="comment">// 4.构建和配置ClassPathBeanDefinitionScanner</span></span><br><span class="line">	ClassPathBeanDefinitionScanner scanner = configureScanner(parserContext, element);</span><br><span class="line">	<span class="comment">// 5.使用scanner在指定的basePackages包中执行扫描，返回已注册的bean定义</span></span><br><span class="line">	Set&lt;BeanDefinitionHolder&gt; beanDefinitions = scanner.doScan(basePackages);</span><br><span class="line">	<span class="comment">// 6.组件注册（包括注册一些内部的注解后置处理器、触发注册事件）</span></span><br><span class="line">	registerComponents(parserContext.getReaderContext(), beanDefinitions, element);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>扫描包下所有的bean,这里主要处理了标注了@Component的bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Set&lt;BeanDefinitionHolder&gt; <span class="title">doScan</span><span class="params">(String... basePackages)</span> </span>&#123;</span><br><span class="line">	Assert.notEmpty(basePackages, <span class="string">&quot;At least one base package must be specified&quot;</span>);</span><br><span class="line">	Set&lt;BeanDefinitionHolder&gt; beanDefinitions = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">	<span class="comment">// 1.遍历basePackages</span></span><br><span class="line">	<span class="keyword">for</span> (String basePackage : basePackages) &#123;</span><br><span class="line">		<span class="comment">// 2.扫描basePackage，将符合要求的bean定义全部找出来（这边符合要求最常见的就是使用Component注解）</span></span><br><span class="line">		Set&lt;BeanDefinition&gt; candidates = findCandidateComponents(basePackage);</span><br><span class="line">		<span class="comment">// 3.遍历所有候选的bean定义</span></span><br><span class="line">		<span class="keyword">for</span> (BeanDefinition candidate : candidates) &#123;</span><br><span class="line">			<span class="comment">// 4.解析@Scope注解, 包括scopeName(默认为singleton，常见的还有prototype), 和proxyMode(默认不使用代理, 可选接口代理/类代理)</span></span><br><span class="line">			ScopeMetadata scopeMetadata = <span class="keyword">this</span>.scopeMetadataResolver.resolveScopeMetadata(candidate);</span><br><span class="line">			candidate.setScope(scopeMetadata.getScopeName());</span><br><span class="line">			<span class="comment">// 5.使用beanName生成器来生成beanName</span></span><br><span class="line">			String beanName = <span class="keyword">this</span>.beanNameGenerator.generateBeanName(candidate, <span class="keyword">this</span>.registry);</span><br><span class="line">			<span class="keyword">if</span> (candidate <span class="keyword">instanceof</span> AbstractBeanDefinition) &#123;</span><br><span class="line">				<span class="comment">// 6.进一步处理BeanDefinition对象，比如: 此bean是否可以自动装配到其他bean中</span></span><br><span class="line">				postProcessBeanDefinition((AbstractBeanDefinition) candidate, beanName);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (candidate <span class="keyword">instanceof</span> AnnotatedBeanDefinition) &#123;</span><br><span class="line">				<span class="comment">// 7.处理定义在目标类上的通用注解，包括@Lazy, @Primary, @DependsOn, @Role, @Description</span></span><br><span class="line">				AnnotationConfigUtils.processCommonDefinitionAnnotations((AnnotatedBeanDefinition) candidate);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 8.检查beanName是否已经注册过，如果注册过，检查是否兼容</span></span><br><span class="line">			<span class="keyword">if</span> (checkCandidate(beanName, candidate)) &#123;</span><br><span class="line">				<span class="comment">// 9.将当前遍历bean的 bean定义和beanName封装成BeanDefinitionHolder</span></span><br><span class="line">				BeanDefinitionHolder definitionHolder = <span class="keyword">new</span> BeanDefinitionHolder(candidate, beanName);</span><br><span class="line">				<span class="comment">// 10.根据proxyMode的值(步骤4中解析), 选择是否创建作用域代理</span></span><br><span class="line">				definitionHolder =</span><br><span class="line">						AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, <span class="keyword">this</span>.registry);</span><br><span class="line">				beanDefinitions.add(definitionHolder);</span><br><span class="line">				<span class="comment">// 11.注册BeanDefinition（注册到beanDefinitionMap、beanDefinitionNames、aliasMap缓存）</span></span><br><span class="line">				registerBeanDefinition(definitionHolder, <span class="keyword">this</span>.registry);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> beanDefinitions;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>根据component-scan标签的annotation-config属性值(默认为true), 判断是否注册处理注解的后置处理器的BeanDefinition</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerComponents</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">		XmlReaderContext readerContext, Set&lt;BeanDefinitionHolder&gt; beanDefinitions, Element element)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	Object source = readerContext.extractSource(element);</span><br><span class="line">	<span class="comment">// 1.使用注解的tagName（例如: context:component-scan）和source 构建CompositeComponentDefinition</span></span><br><span class="line">	CompositeComponentDefinition compositeDef = <span class="keyword">new</span> CompositeComponentDefinition(element.getTagName(), source);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 2.将扫描到的所有BeanDefinition添加到compositeDef的nestedComponents属性中</span></span><br><span class="line">	<span class="keyword">for</span> (BeanDefinitionHolder beanDefHolder : beanDefinitions) &#123;</span><br><span class="line">		compositeDef.addNestedComponent(<span class="keyword">new</span> BeanComponentDefinition(beanDefHolder));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Register annotation config processors, if necessary.</span></span><br><span class="line">	<span class="keyword">boolean</span> annotationConfig = <span class="keyword">true</span>;</span><br><span class="line">	<span class="keyword">if</span> (element.hasAttribute(ANNOTATION_CONFIG_ATTRIBUTE)) &#123;</span><br><span class="line">		<span class="comment">// 3.获取component-scan标签的annotation-config属性值（默认为true）</span></span><br><span class="line">		annotationConfig = Boolean.parseBoolean(element.getAttribute(ANNOTATION_CONFIG_ATTRIBUTE));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (annotationConfig) &#123;</span><br><span class="line">		<span class="comment">// 4.如果annotation-config属性值为true，在给定的注册表中注册所有用于注解的Bean后置处理器</span></span><br><span class="line">		Set&lt;BeanDefinitionHolder&gt; processorDefinitions =</span><br><span class="line">				AnnotationConfigUtils.registerAnnotationConfigProcessors(readerContext.getRegistry(), source);</span><br><span class="line">		<span class="keyword">for</span> (BeanDefinitionHolder processorDefinition : processorDefinitions) &#123;</span><br><span class="line">			<span class="comment">// 5.将注册的注解后置处理器的BeanDefinition添加到compositeDef的nestedComponents属性中</span></span><br><span class="line">			compositeDef.addNestedComponent(<span class="keyword">new</span> BeanComponentDefinition(processorDefinition));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 6.触发组件注册事件，默认实现为EmptyReaderEventListener（空实现，没有具体操作）</span></span><br><span class="line">	readerContext.fireComponentRegistered(compositeDef);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注册ConfigurationClassPostProcessor, AutowiredAnnotationBeanPostProcessor, CommonAnnotationBeanPostProcessor<br>等后置处理器的BeanDefinition信息到容器,这三个是Spring内部对象,他们的beanName定义信息在</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;BeanDefinitionHolder&gt; <span class="title">registerAnnotationConfigProcessors</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">		BeanDefinitionRegistry registry, <span class="meta">@Nullable</span> Object source)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	DefaultListableBeanFactory beanFactory = unwrapDefaultListableBeanFactory(registry);</span><br><span class="line">	<span class="keyword">if</span> (beanFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!(beanFactory.getDependencyComparator() <span class="keyword">instanceof</span> AnnotationAwareOrderComparator)) &#123;</span><br><span class="line">			<span class="comment">// 1.设置dependencyComparator属性</span></span><br><span class="line">			beanFactory.setDependencyComparator(AnnotationAwareOrderComparator.INSTANCE);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (!(beanFactory.getAutowireCandidateResolver() <span class="keyword">instanceof</span> ContextAnnotationAutowireCandidateResolver)) &#123;</span><br><span class="line">			<span class="comment">// 2.设置autowireCandidateResolver属性（设置自动注入候选对象的解析器，用于判断BeanDefinition是否为候选对象）</span></span><br><span class="line">			beanFactory.setAutowireCandidateResolver(<span class="keyword">new</span> ContextAnnotationAutowireCandidateResolver());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Set&lt;BeanDefinitionHolder&gt; beanDefs = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 3.注册内部管理的用于处理@Configuration注解的后置处理器的bean</span></span><br><span class="line">	<span class="keyword">if</span> (!registry.containsBeanDefinition(CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">		RootBeanDefinition def = <span class="keyword">new</span> RootBeanDefinition(ConfigurationClassPostProcessor.class);</span><br><span class="line">		def.setSource(source);</span><br><span class="line">		<span class="comment">// 3.1 registerPostProcessor: 注册BeanDefinition到注册表中</span></span><br><span class="line">		beanDefs.add(registerPostProcessor(registry, def, CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 4.注册内部管理的用于处理@Autowired、@Value、@Inject以及@Lookup注解的后置处理器的bean</span></span><br><span class="line">	<span class="keyword">if</span> (!registry.containsBeanDefinition(AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">		RootBeanDefinition def = <span class="keyword">new</span> RootBeanDefinition(AutowiredAnnotationBeanPostProcessor.class);</span><br><span class="line">		def.setSource(source);</span><br><span class="line">		beanDefs.add(registerPostProcessor(registry, def, AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 6.注册内部管理的用于处理JSR-250注解（例如@Resource, @PostConstruct, @PreDestroy）的后置处理器的bean</span></span><br><span class="line">	<span class="comment">// Check for JSR-250 support, and if present add the CommonAnnotationBeanPostProcessor.</span></span><br><span class="line">	<span class="keyword">if</span> (jsr250Present &amp;&amp; !registry.containsBeanDefinition(COMMON_ANNOTATION_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">		RootBeanDefinition def = <span class="keyword">new</span> RootBeanDefinition(CommonAnnotationBeanPostProcessor.class);</span><br><span class="line">		def.setSource(source);</span><br><span class="line">		beanDefs.add(registerPostProcessor(registry, def, COMMON_ANNOTATION_PROCESSOR_BEAN_NAME));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 7.注册内部管理的用于处理JPA注解的后置处理器的bean</span></span><br><span class="line">	<span class="comment">// Check for JPA support, and if present add the PersistenceAnnotationBeanPostProcessor.</span></span><br><span class="line">	<span class="keyword">if</span> (jpaPresent &amp;&amp; !registry.containsBeanDefinition(PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">		RootBeanDefinition def = <span class="keyword">new</span> RootBeanDefinition();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			def.setBeanClass(ClassUtils.forName(PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME,</span><br><span class="line">					AnnotationConfigUtils.class.getClassLoader()));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">					<span class="string">&quot;Cannot load optional framework class: &quot;</span> + PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME, ex);</span><br><span class="line">		&#125;</span><br><span class="line">		def.setSource(source);</span><br><span class="line">		beanDefs.add(registerPostProcessor(registry, def, PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 8.注册内部管理的用于处理@EventListener注解的后置处理器的bean</span></span><br><span class="line">	<span class="keyword">if</span> (!registry.containsBeanDefinition(EVENT_LISTENER_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">		RootBeanDefinition def = <span class="keyword">new</span> RootBeanDefinition(EventListenerMethodProcessor.class);</span><br><span class="line">		def.setSource(source);</span><br><span class="line">		beanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_PROCESSOR_BEAN_NAME));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 9.注册内部管理用于生产ApplicationListener对象的EventListenerFactory对象</span></span><br><span class="line">	<span class="keyword">if</span> (!registry.containsBeanDefinition(EVENT_LISTENER_FACTORY_BEAN_NAME)) &#123;</span><br><span class="line">		RootBeanDefinition def = <span class="keyword">new</span> RootBeanDefinition(DefaultEventListenerFactory.class);</span><br><span class="line">		def.setSource(source);</span><br><span class="line">		beanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_FACTORY_BEAN_NAME));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> beanDefs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>ConfigurationClassPostProcessor, AutowiredAnnotationBeanPostProcessor, CommonAnnotationBeanPostProcessor,<br>这三个是Spring内部对象,他们的beanName定义信息在AnnotationConfigUtils中,当开启了注解,这三个类对象将会被加载到容器;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationConfigUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME =</span><br><span class="line">			<span class="string">&quot;org.springframework.context.annotation.internalConfigurationAnnotationProcessor&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONFIGURATION_BEAN_NAME_GENERATOR =</span><br><span class="line">			<span class="string">&quot;org.springframework.context.annotation.internalConfigurationBeanNameGenerator&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME =</span><br><span class="line">			<span class="string">&quot;org.springframework.context.annotation.internalAutowiredAnnotationProcessor&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Deprecated</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME =</span><br><span class="line">			<span class="string">&quot;org.springframework.context.annotation.internalRequiredAnnotationProcessor&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COMMON_ANNOTATION_PROCESSOR_BEAN_NAME =</span><br><span class="line">			<span class="string">&quot;org.springframework.context.annotation.internalCommonAnnotationProcessor&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME =</span><br><span class="line">			<span class="string">&quot;org.springframework.context.annotation.internalPersistenceAnnotationProcessor&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME =</span><br><span class="line">			<span class="string">&quot;org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EVENT_LISTENER_PROCESSOR_BEAN_NAME =</span><br><span class="line">			<span class="string">&quot;org.springframework.context.event.internalEventListenerProcessor&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EVENT_LISTENER_FACTORY_BEAN_NAME =</span><br><span class="line">			<span class="string">&quot;org.springframework.context.event.internalEventListenerFactory&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><img src="/images/spring/BeanDefinition%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%E5%9B%BE.jpg"></p>
<h4 id="第二阶段-调用处理注解的后置处理器阶段"><a href="#第二阶段-调用处理注解的后置处理器阶段" class="headerlink" title="第二阶段,调用处理注解的后置处理器阶段"></a>第二阶段,调用处理注解的后置处理器阶段</h4><ol>
<li><p>容器创建完成，调用所有的BeanFactoryPostProcessor</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">invokeBeanFactoryPostProcessors</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">	PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors());</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Detect a LoadTimeWeaver and prepare for weaving, if found in the meantime</span></span><br><span class="line">	<span class="comment">// (e.g. through an @Bean method registered by ConfigurationClassPostProcessor)</span></span><br><span class="line">	<span class="keyword">if</span> (beanFactory.getTempClassLoader() == <span class="keyword">null</span> &amp;&amp; beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123;</span><br><span class="line">		beanFactory.addBeanPostProcessor(<span class="keyword">new</span> LoadTimeWeaverAwareProcessor(beanFactory));</span><br><span class="line">		beanFactory.setTempClassLoader(<span class="keyword">new</span> ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用ConfigurationClassPostProcessor的postProcessBeanDefinitionRegistry方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> registryId = System.identityHashCode(registry);</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.registriesPostProcessed.contains(registryId)) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">				<span class="string">&quot;postProcessBeanDefinitionRegistry already called on this post-processor against &quot;</span> + registry);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.factoriesPostProcessed.contains(registryId)) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">				<span class="string">&quot;postProcessBeanFactory already called on this post-processor against &quot;</span> + registry);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">this</span>.registriesPostProcessed.add(registryId);</span><br><span class="line"></span><br><span class="line">	processConfigBeanDefinitions(registry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将标注相应注解的BeanDefinition信息注册进容器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processConfigBeanDefinitions</span><span class="params">(BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">	List&lt;BeanDefinitionHolder&gt; configCandidates = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">	String[] candidateNames = registry.getBeanDefinitionNames();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (String beanName : candidateNames) &#123;</span><br><span class="line">		BeanDefinition beanDef = registry.getBeanDefinition(beanName);</span><br><span class="line">		<span class="keyword">if</span> (beanDef.getAttribute(ConfigurationClassUtils.CONFIGURATION_CLASS_ATTRIBUTE) != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">				logger.debug(<span class="string">&quot;Bean definition has already been processed as a configuration class: &quot;</span> + beanDef);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, <span class="keyword">this</span>.metadataReaderFactory)) &#123;</span><br><span class="line">			configCandidates.add(<span class="keyword">new</span> BeanDefinitionHolder(beanDef, beanName));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Return immediately if no @Configuration classes were found</span></span><br><span class="line">	<span class="keyword">if</span> (configCandidates.isEmpty()) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Sort by previously determined @Order value, if applicable</span></span><br><span class="line">	configCandidates.sort((bd1, bd2) -&gt; &#123;</span><br><span class="line">		<span class="keyword">int</span> i1 = ConfigurationClassUtils.getOrder(bd1.getBeanDefinition());</span><br><span class="line">		<span class="keyword">int</span> i2 = ConfigurationClassUtils.getOrder(bd2.getBeanDefinition());</span><br><span class="line">		<span class="keyword">return</span> Integer.compare(i1, i2);</span><br><span class="line">	&#125;);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Detect any custom bean name generation strategy supplied through the enclosing application context</span></span><br><span class="line">	SingletonBeanRegistry sbr = <span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">if</span> (registry <span class="keyword">instanceof</span> SingletonBeanRegistry) &#123;</span><br><span class="line">		sbr = (SingletonBeanRegistry) registry;</span><br><span class="line">		<span class="keyword">if</span> (!<span class="keyword">this</span>.localBeanNameGeneratorSet) &#123;</span><br><span class="line">			BeanNameGenerator generator = (BeanNameGenerator) sbr.getSingleton(</span><br><span class="line">					AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR);</span><br><span class="line">			<span class="keyword">if</span> (generator != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">this</span>.componentScanBeanNameGenerator = generator;</span><br><span class="line">				<span class="keyword">this</span>.importBeanNameGenerator = generator;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.environment == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">this</span>.environment = <span class="keyword">new</span> StandardEnvironment();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Parse each @Configuration class</span></span><br><span class="line">	ConfigurationClassParser parser = <span class="keyword">new</span> ConfigurationClassParser(</span><br><span class="line">			<span class="keyword">this</span>.metadataReaderFactory, <span class="keyword">this</span>.problemReporter, <span class="keyword">this</span>.environment,</span><br><span class="line">			<span class="keyword">this</span>.resourceLoader, <span class="keyword">this</span>.componentScanBeanNameGenerator, registry);</span><br><span class="line"></span><br><span class="line">	Set&lt;BeanDefinitionHolder&gt; candidates = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(configCandidates);</span><br><span class="line">	Set&lt;ConfigurationClass&gt; alreadyParsed = <span class="keyword">new</span> HashSet&lt;&gt;(configCandidates.size());</span><br><span class="line">	<span class="keyword">do</span> &#123;</span><br><span class="line">		parser.parse(candidates);</span><br><span class="line">		parser.validate();</span><br><span class="line"></span><br><span class="line">		Set&lt;ConfigurationClass&gt; configClasses = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(parser.getConfigurationClasses());</span><br><span class="line">		configClasses.removeAll(alreadyParsed);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Read the model and create bean definitions based on its content</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.reader == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">this</span>.reader = <span class="keyword">new</span> ConfigurationClassBeanDefinitionReader(</span><br><span class="line">					registry, <span class="keyword">this</span>.sourceExtractor, <span class="keyword">this</span>.resourceLoader, <span class="keyword">this</span>.environment,</span><br><span class="line">					<span class="keyword">this</span>.importBeanNameGenerator, parser.getImportRegistry());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">this</span>.reader.loadBeanDefinitions(configClasses);</span><br><span class="line">		alreadyParsed.addAll(configClasses);</span><br><span class="line"></span><br><span class="line">		candidates.clear();</span><br><span class="line">		<span class="keyword">if</span> (registry.getBeanDefinitionCount() &gt; candidateNames.length) &#123;</span><br><span class="line">			String[] newCandidateNames = registry.getBeanDefinitionNames();</span><br><span class="line">			Set&lt;String&gt; oldCandidateNames = <span class="keyword">new</span> HashSet&lt;&gt;(Arrays.asList(candidateNames));</span><br><span class="line">			Set&lt;String&gt; alreadyParsedClasses = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">			<span class="keyword">for</span> (ConfigurationClass configurationClass : alreadyParsed) &#123;</span><br><span class="line">				alreadyParsedClasses.add(configurationClass.getMetadata().getClassName());</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span> (String candidateName : newCandidateNames) &#123;</span><br><span class="line">				<span class="keyword">if</span> (!oldCandidateNames.contains(candidateName)) &#123;</span><br><span class="line">					BeanDefinition bd = registry.getBeanDefinition(candidateName);</span><br><span class="line">					<span class="keyword">if</span> (ConfigurationClassUtils.checkConfigurationClassCandidate(bd, <span class="keyword">this</span>.metadataReaderFactory) &amp;&amp;</span><br><span class="line">							!alreadyParsedClasses.contains(bd.getBeanClassName())) &#123;</span><br><span class="line">						candidates.add(<span class="keyword">new</span> BeanDefinitionHolder(bd, candidateName));</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			candidateNames = newCandidateNames;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (!candidates.isEmpty());</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Register the ImportRegistry as a bean in order to support ImportAware @Configuration classes</span></span><br><span class="line">	<span class="keyword">if</span> (sbr != <span class="keyword">null</span> &amp;&amp; !sbr.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) &#123;</span><br><span class="line">		sbr.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.metadataReaderFactory <span class="keyword">instanceof</span> CachingMetadataReaderFactory) &#123;</span><br><span class="line">		<span class="comment">// Clear cache in externally provided MetadataReaderFactory; this is a no-op</span></span><br><span class="line">		<span class="comment">// for a shared cache since it&#x27;ll be cleared by the ApplicationContext.</span></span><br><span class="line">		((CachingMetadataReaderFactory) <span class="keyword">this</span>.metadataReaderFactory).clearCache();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>检查是否被@Configuration,@Component,@ComponentScan,@Import,@ImportResource,@Bean标注</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkConfigurationClassCandidate</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">		BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	String className = beanDef.getBeanClassName();</span><br><span class="line">	<span class="keyword">if</span> (className == <span class="keyword">null</span> || beanDef.getFactoryMethodName() != <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	AnnotationMetadata metadata;</span><br><span class="line">	<span class="keyword">if</span> (beanDef <span class="keyword">instanceof</span> AnnotatedBeanDefinition &amp;&amp;</span><br><span class="line">			className.equals(((AnnotatedBeanDefinition) beanDef).getMetadata().getClassName())) &#123;</span><br><span class="line">		<span class="comment">// Can reuse the pre-parsed metadata from the given BeanDefinition...</span></span><br><span class="line">		metadata = ((AnnotatedBeanDefinition) beanDef).getMetadata();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (beanDef <span class="keyword">instanceof</span> AbstractBeanDefinition &amp;&amp; ((AbstractBeanDefinition) beanDef).hasBeanClass()) &#123;</span><br><span class="line">		<span class="comment">// Check already loaded Class if present...</span></span><br><span class="line">		<span class="comment">// since we possibly can&#x27;t even load the class file for this Class.</span></span><br><span class="line">		Class&lt;?&gt; beanClass = ((AbstractBeanDefinition) beanDef).getBeanClass();</span><br><span class="line">		<span class="keyword">if</span> (BeanFactoryPostProcessor.class.isAssignableFrom(beanClass) ||</span><br><span class="line">				BeanPostProcessor.class.isAssignableFrom(beanClass) ||</span><br><span class="line">				AopInfrastructureBean.class.isAssignableFrom(beanClass) ||</span><br><span class="line">				EventListenerFactory.class.isAssignableFrom(beanClass)) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		metadata = AnnotationMetadata.introspect(beanClass);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(className);</span><br><span class="line">			metadata = metadataReader.getAnnotationMetadata();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">			<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">				logger.debug(<span class="string">&quot;Could not find class file for introspecting configuration annotations: &quot;</span> +</span><br><span class="line">						className, ex);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Map&lt;String, Object&gt; config = metadata.getAnnotationAttributes(Configuration.class.getName());</span><br><span class="line">	<span class="comment">// 判断是否被@Configuration标注</span></span><br><span class="line">	<span class="keyword">if</span> (config != <span class="keyword">null</span> &amp;&amp; !Boolean.FALSE.equals(config.get(<span class="string">&quot;proxyBeanMethods&quot;</span>))) &#123;</span><br><span class="line">		beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_FULL);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 判断是否被@Component,@ComponentScan,@Import,@ImportResource,@Bean标注</span></span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (config != <span class="keyword">null</span> || isConfigurationCandidate(metadata)) &#123;</span><br><span class="line">		beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_LITE);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// It&#x27;s a full or lite configuration candidate... Let&#x27;s determine the order value, if any.</span></span><br><span class="line">	Integer order = getOrder(metadata);</span><br><span class="line">	<span class="keyword">if</span> (order != <span class="keyword">null</span>) &#123;</span><br><span class="line">		beanDef.setAttribute(ORDER_ATTRIBUTE, order);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isConfigurationCandidate</span><span class="params">(AnnotationMetadata metadata)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// Do not consider an interface or an annotation...</span></span><br><span class="line">	<span class="keyword">if</span> (metadata.isInterface()) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Any of the typical annotations found?</span></span><br><span class="line">	<span class="keyword">for</span> (String indicator : candidateIndicators) &#123;</span><br><span class="line">		<span class="keyword">if</span> (metadata.isAnnotated(indicator)) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Finally, let&#x27;s look for @Bean methods...</span></span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> metadata.hasAnnotatedMethods(Bean.class.getName());</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">		<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">			logger.debug(<span class="string">&quot;Failed to introspect @Bean methods on class [&quot;</span> + metadata.getClassName() + <span class="string">&quot;]: &quot;</span> + ex);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Set&lt;String&gt; candidateIndicators = <span class="keyword">new</span> HashSet&lt;&gt;(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">	candidateIndicators.add(Component.class.getName());</span><br><span class="line">	candidateIndicators.add(ComponentScan.class.getName());</span><br><span class="line">	candidateIndicators.add(Import.class.getName());</span><br><span class="line">	candidateIndicators.add(ImportResource.class.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="自定义BeanFactoryPostProcessor扩展代码案例"><a href="#自定义BeanFactoryPostProcessor扩展代码案例" class="headerlink" title="自定义BeanFactoryPostProcessor扩展代码案例"></a>自定义BeanFactoryPostProcessor扩展代码案例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.ConfigurableListableBeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.DefaultListableBeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClassPathXmlApplicationContext</span> <span class="keyword">extends</span> <span class="title">ClassPathXmlApplicationContext</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyClassPathXmlApplicationContext</span><span class="params">(String... configLocations)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(configLocations);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initPropertySources</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;扩展initPropertySource&quot;</span>);</span><br><span class="line">        getEnvironment().setRequiredProperties(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">customizeBeanFactory</span><span class="params">(DefaultListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setAllowBeanDefinitionOverriding(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">super</span>.setAllowCircularReferences(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">super</span>.addBeanFactoryPostProcessor(<span class="keyword">new</span> MyBeanFactoryPostProcessor());</span><br><span class="line">        <span class="keyword">super</span>.customizeBeanFactory(beanFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义BeanDefinitionRegistryPostProcessor扩展代码案例"><a href="#自定义BeanDefinitionRegistryPostProcessor扩展代码案例" class="headerlink" title="自定义BeanDefinitionRegistryPostProcessor扩展代码案例"></a>自定义BeanDefinitionRegistryPostProcessor扩展代码案例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.MutablePropertyValues;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanDefinition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.ConfigurableListableBeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.ConstructorArgumentValues;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.BeanDefinitionRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.PriorityOrdered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.ResolvableType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanDefinition</span> <span class="keyword">implements</span> <span class="title">BeanDefinitionRegistryPostProcessor</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;MyBeanDefinition&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postProcessBeanDefinitionRegistry----------------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postProcessBeanFactory========================&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.ConfigurableListableBeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.BeanDefinitionBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.BeanDefinitionRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.PriorityOrdered;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanDefinitionRegistryPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanDefinitionRegistryPostProcessor</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        BeanDefinitionBuilder builder = BeanDefinitionBuilder.rootBeanDefinition(MyBeanDefinition.class);</span><br><span class="line">        builder.addPropertyValue(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        registry.registerBeanDefinition(<span class="string">&quot;aa&quot;</span>,builder.getBeanDefinition());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyBeanDefinitionRegistryPostProcessor-------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;bean class=&quot;com.mashibing.MyBeanDefinitionRegistryPostProcessor&quot;&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring源码-BeanPostProcessor</title>
    <url>/2022/09/15/Spring%E6%BA%90%E7%A0%81/Spring%E6%BA%90%E7%A0%81-BeanPostProcessor/</url>
    <content><![CDATA[<h3 id="BeanPostProcessor"><a href="#BeanPostProcessor" class="headerlink" title="BeanPostProcessor"></a>BeanPostProcessor</h3><p>理解：该接口主要作用于bean执行初始化方法前后,该接口及其子类接口不管是对于用户还是spring自身的扩展性都起到非常重要的作用.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="function"><span class="keyword">default</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> bean;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="function"><span class="keyword">default</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> bean;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/spring/BeanPostProcessor%E6%8E%A5%E5%8F%A3%E5%85%B3%E7%B3%BB%E5%9B%BE.jpg"></p>
<h3 id="MergedBeanDefinitionPostProcessor"><a href="#MergedBeanDefinitionPostProcessor" class="headerlink" title="MergedBeanDefinitionPostProcessor"></a>MergedBeanDefinitionPostProcessor</h3><p>理解：主要用于bean实例化后添加BeanDefinition信息到容器中,这个接口对@Autowired和@Value及@PostConstruct和@PreDestory的支持起到了至关重要的作用。当某个bean在实例化后就会调到所有的实现了MergedBeanDefinitionPostProcessor接口的实例。其中就有一个非常关键的类：AutowiredAnnotationBeanPostProcessor,CommonAnnotationBeanPostProcessor.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MergedBeanDefinitionPostProcessor</span> <span class="keyword">extends</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">postProcessMergedBeanDefinition</span><span class="params">(RootBeanDefinition beanDefinition, Class&lt;?&gt; beanType, String beanName)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">resetBeanDefinition</span><span class="params">(String beanName)</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>源码MergedBeanDefinitionPostProcessor接口的作用点,此处调用了postProcessMergedBeanDefinition方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">doCreateBean</span><span class="params">(String beanName, RootBeanDefinition mbd, <span class="meta">@Nullable</span> Object[] args)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> BeanCreationException </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Instantiate the bean.</span></span><br><span class="line">	BeanWrapper instanceWrapper = <span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">		instanceWrapper = <span class="keyword">this</span>.factoryBeanInstanceCache.remove(beanName);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (instanceWrapper == <span class="keyword">null</span>) &#123;</span><br><span class="line">		instanceWrapper = createBeanInstance(beanName, mbd, args);</span><br><span class="line">	&#125;</span><br><span class="line">	Object bean = instanceWrapper.getWrappedInstance();</span><br><span class="line">	Class&lt;?&gt; beanType = instanceWrapper.getWrappedClass();</span><br><span class="line">	<span class="keyword">if</span> (beanType != NullBean.class) &#123;</span><br><span class="line">		mbd.resolvedTargetType = beanType;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Allow post-processors to modify the merged bean definition.</span></span><br><span class="line">	<span class="keyword">synchronized</span> (mbd.postProcessingLock) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!mbd.postProcessed) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">						<span class="string">&quot;Post-processing of merged bean definition failed&quot;</span>, ex);</span><br><span class="line">			&#125;</span><br><span class="line">			mbd.postProcessed = <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">applyMergedBeanDefinitionPostProcessors</span><span class="params">(RootBeanDefinition mbd, Class&lt;?&gt; beanType, String beanName)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line">		<span class="keyword">if</span> (bp <span class="keyword">instanceof</span> MergedBeanDefinitionPostProcessor) &#123;</span><br><span class="line">			MergedBeanDefinitionPostProcessor bdp = (MergedBeanDefinitionPostProcessor) bp;</span><br><span class="line">			bdp.postProcessMergedBeanDefinition(mbd, beanType, beanName);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在AutowiredAnnotationBeanPostProcessor类中用与解析扫描@Autowired和@Value注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutowiredAnnotationBeanPostProcessor</span> <span class="keyword">extends</span> <span class="title">InstantiationAwareBeanPostProcessorAdapter</span></span></span><br><span class="line"><span class="class">		<span class="keyword">implements</span> <span class="title">MergedBeanDefinitionPostProcessor</span>, <span class="title">PriorityOrdered</span>, <span class="title">BeanFactoryAware</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">AutowiredAnnotationBeanPostProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.autowiredAnnotationTypes.add(Autowired.class);</span><br><span class="line">		<span class="keyword">this</span>.autowiredAnnotationTypes.add(Value.class);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">this</span>.autowiredAnnotationTypes.add((Class&lt;? extends Annotation&gt;)</span><br><span class="line">					ClassUtils.forName(<span class="string">&quot;javax.inject.Inject&quot;</span>, AutowiredAnnotationBeanPostProcessor.class.getClassLoader()));</span><br><span class="line">			logger.trace(<span class="string">&quot;JSR-330 &#x27;javax.inject.Inject&#x27; annotation found and supported for autowiring&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">			<span class="comment">// JSR-330 API not available - simply skip.</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessMergedBeanDefinition</span><span class="params">(RootBeanDefinition beanDefinition, Class&lt;?&gt; beanType, String beanName)</span> </span>&#123;</span><br><span class="line">		InjectionMetadata metadata = findAutowiringMetadata(beanName, beanType, <span class="keyword">null</span>);</span><br><span class="line">		metadata.checkConfigMembers(beanDefinition);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在CommonAnnotationBeanPostProcessor类中用与解析扫描@PostConstruct,@PreDestory和@Resource注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessMergedBeanDefinition</span><span class="params">(RootBeanDefinition beanDefinition, Class&lt;?&gt; beanType, String beanName)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 这里处理@PostConstruct和@PreDestory注解</span></span><br><span class="line">	<span class="keyword">super</span>.postProcessMergedBeanDefinition(beanDefinition, beanType, beanName);</span><br><span class="line">	<span class="comment">// 处理Resource注解</span></span><br><span class="line">	InjectionMetadata metadata = findResourceMetadata(beanName, beanType, <span class="keyword">null</span>);</span><br><span class="line">	metadata.checkConfigMembers(beanDefinition);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessMergedBeanDefinition</span><span class="params">(RootBeanDefinition beanDefinition, Class&lt;?&gt; beanType, String beanName)</span> </span>&#123;</span><br><span class="line">	LifecycleMetadata metadata = findLifecycleMetadata(beanType);</span><br><span class="line">	metadata.checkConfigMembers(beanDefinition);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> LifecycleMetadata <span class="title">findLifecycleMetadata</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.lifecycleMetadataCache == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="comment">// Happens after deserialization, during destruction...</span></span><br><span class="line">		<span class="keyword">return</span> buildLifecycleMetadata(clazz);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// Quick check on the concurrent map first, with minimal locking.</span></span><br><span class="line">	LifecycleMetadata metadata = <span class="keyword">this</span>.lifecycleMetadataCache.get(clazz);</span><br><span class="line">	<span class="keyword">if</span> (metadata == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">synchronized</span> (<span class="keyword">this</span>.lifecycleMetadataCache) &#123;</span><br><span class="line">			metadata = <span class="keyword">this</span>.lifecycleMetadataCache.get(clazz);</span><br><span class="line">			<span class="keyword">if</span> (metadata == <span class="keyword">null</span>) &#123;</span><br><span class="line">				metadata = buildLifecycleMetadata(clazz);</span><br><span class="line">				<span class="keyword">this</span>.lifecycleMetadataCache.put(clazz, metadata);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> metadata;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> metadata;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> LifecycleMetadata <span class="title">buildLifecycleMetadata</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!AnnotationUtils.isCandidateClass(clazz, Arrays.asList(<span class="keyword">this</span>.initAnnotationType, <span class="keyword">this</span>.destroyAnnotationType))) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.emptyLifecycleMetadata;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	List&lt;LifecycleElement&gt; initMethods = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">	List&lt;LifecycleElement&gt; destroyMethods = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">	Class&lt;?&gt; targetClass = clazz;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">do</span> &#123;</span><br><span class="line">		<span class="keyword">final</span> List&lt;LifecycleElement&gt; currInitMethods = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		<span class="keyword">final</span> List&lt;LifecycleElement&gt; currDestroyMethods = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">		ReflectionUtils.doWithLocalMethods(targetClass, method -&gt; &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.initAnnotationType != <span class="keyword">null</span> &amp;&amp; method.isAnnotationPresent(<span class="keyword">this</span>.initAnnotationType)) &#123;</span><br><span class="line">				LifecycleElement element = <span class="keyword">new</span> LifecycleElement(method);</span><br><span class="line">				currInitMethods.add(element);</span><br><span class="line">				<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">					logger.trace(<span class="string">&quot;Found init method on class [&quot;</span> + clazz.getName() + <span class="string">&quot;]: &quot;</span> + method);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.destroyAnnotationType != <span class="keyword">null</span> &amp;&amp; method.isAnnotationPresent(<span class="keyword">this</span>.destroyAnnotationType)) &#123;</span><br><span class="line">				currDestroyMethods.add(<span class="keyword">new</span> LifecycleElement(method));</span><br><span class="line">				<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">					logger.trace(<span class="string">&quot;Found destroy method on class [&quot;</span> + clazz.getName() + <span class="string">&quot;]: &quot;</span> + method);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line"></span><br><span class="line">		initMethods.addAll(<span class="number">0</span>, currInitMethods);</span><br><span class="line">		destroyMethods.addAll(currDestroyMethods);</span><br><span class="line">		targetClass = targetClass.getSuperclass();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (targetClass != <span class="keyword">null</span> &amp;&amp; targetClass != Object.class);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> (initMethods.isEmpty() &amp;&amp; destroyMethods.isEmpty() ? <span class="keyword">this</span>.emptyLifecycleMetadata :</span><br><span class="line">			<span class="keyword">new</span> LifecycleMetadata(clazz, initMethods, destroyMethods));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="InstantiationAwareBeanPostProcessor"><a href="#InstantiationAwareBeanPostProcessor" class="headerlink" title="InstantiationAwareBeanPostProcessor"></a>InstantiationAwareBeanPostProcessor</h3><p>理解：SmartInstantiationAwareBeanPostProcessor的父类接口,主要用于bean实例化前后对Bean进行处理,可以用于创建一个无需走完完整Bean的生命周期的代理对象Bean;在AOP的实现流程中,AbstractAutoProxyCreator实现了postProcessBeforeInstantiation方法,在该方法中创建Advisor对象,该对象内部持有对应切面的所有Advice(通知);</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InstantiationAwareBeanPostProcessor</span> <span class="keyword">extends</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 实例化前对Bean的处理</span></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="function"><span class="keyword">default</span> Object <span class="title">postProcessBeforeInstantiation</span><span class="params">(Class&lt;?&gt; beanClass, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 实例化后对Bean的处理</span></span><br><span class="line">	<span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">postProcessAfterInstantiation</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 处理Bean的属性</span></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="function"><span class="keyword">default</span> PropertyValues <span class="title">postProcessProperties</span><span class="params">(PropertyValues pvs, Object bean, String beanName)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Deprecated</span></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="function"><span class="keyword">default</span> PropertyValues <span class="title">postProcessPropertyValues</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">			PropertyValues pvs, PropertyDescriptor[] pds, Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> pvs;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>在Bean实例化前,给BeanPostProcessors一个机会返回代理对象<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">createBean</span><span class="params">(String beanName, RootBeanDefinition mbd, <span class="meta">@Nullable</span> Object[] args)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> BeanCreationException </span>&#123;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="comment">// Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.</span></span><br><span class="line">		<span class="comment">// 在实例化bean之前,给BeanPostProcessors一个机会返回代理对象</span></span><br><span class="line">		Object bean = resolveBeforeInstantiation(beanName, mbdToUse);</span><br><span class="line">		<span class="keyword">if</span> (bean != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> bean;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbdToUse.getResourceDescription(), beanName,</span><br><span class="line">				<span class="string">&quot;BeanPostProcessor before instantiation of bean failed&quot;</span>, ex);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		Object beanInstance = doCreateBean(beanName, mbdToUse, args);</span><br><span class="line">		<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">			logger.trace(<span class="string">&quot;Finished creating instance of bean &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> beanInstance;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (BeanCreationException | ImplicitlyAppearedSingletonException ex) &#123;</span><br><span class="line">		<span class="comment">// A previously detected exception with proper bean creation context already,</span></span><br><span class="line">		<span class="comment">// or illegal singleton state to be communicated up to DefaultSingletonBeanRegistry.</span></span><br><span class="line">		<span class="keyword">throw</span> ex;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">				mbdToUse.getResourceDescription(), beanName, <span class="string">&quot;Unexpected exception during bean creation&quot;</span>, ex);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">resolveBeforeInstantiation</span><span class="params">(String beanName, RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class="line">	Object bean = <span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">if</span> (!Boolean.FALSE.equals(mbd.beforeInstantiationResolved)) &#123;</span><br><span class="line">		<span class="comment">// Make sure bean class is actually resolved at this point.</span></span><br><span class="line">		<span class="keyword">if</span> (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) &#123;</span><br><span class="line">			Class&lt;?&gt; targetType = determineTargetType(beanName, mbd);</span><br><span class="line">			<span class="keyword">if</span> (targetType != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="comment">// 执行InstantiationAwareBeanPostProcessors的Before方法</span></span><br><span class="line">				bean = applyBeanPostProcessorsBeforeInstantiation(targetType, beanName);</span><br><span class="line">				<span class="keyword">if</span> (bean != <span class="keyword">null</span>) &#123;</span><br><span class="line">					<span class="comment">// 执行InstantiationAwareBeanPostProcessors的After方法</span></span><br><span class="line">					bean = applyBeanPostProcessorsAfterInitialization(bean, beanName);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		mbd.beforeInstantiationResolved = (bean != <span class="keyword">null</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">applyBeanPostProcessorsBeforeInstantiation</span><span class="params">(Class&lt;?&gt; beanClass, String beanName)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line">		<span class="keyword">if</span> (bp <span class="keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">			InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;</span><br><span class="line">			Object result = ibp.postProcessBeforeInstantiation(beanClass, beanName);</span><br><span class="line">			<span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">return</span> result;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>AbstractAutoProxyCreator实现了postProcessBeforeInstantiation方法创建Advisor对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInstantiation</span><span class="params">(Class&lt;?&gt; beanClass, String beanName)</span> </span>&#123;</span><br><span class="line">	Object cacheKey = getCacheKey(beanClass, beanName);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!StringUtils.hasLength(beanName) || !<span class="keyword">this</span>.targetSourcedBeans.contains(beanName)) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.advisedBeans.containsKey(cacheKey)) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (isInfrastructureClass(beanClass) || shouldSkip(beanClass, beanName)) &#123;</span><br><span class="line">			<span class="keyword">this</span>.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Create proxy here if we have a custom TargetSource.</span></span><br><span class="line">	<span class="comment">// Suppresses unnecessary default instantiation of the target bean:</span></span><br><span class="line">	<span class="comment">// The TargetSource will handle target instances in a custom fashion.</span></span><br><span class="line">	TargetSource targetSource = getCustomTargetSource(beanClass, beanName);</span><br><span class="line">	<span class="keyword">if</span> (targetSource != <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (StringUtils.hasLength(beanName)) &#123;</span><br><span class="line">			<span class="keyword">this</span>.targetSourcedBeans.add(beanName);</span><br><span class="line">		&#125;</span><br><span class="line">		Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(beanClass, beanName, targetSource);</span><br><span class="line">		Object proxy = createProxy(beanClass, beanName, specificInterceptors, targetSource);</span><br><span class="line">		<span class="keyword">this</span>.proxyTypes.put(cacheKey, proxy.getClass());</span><br><span class="line">		<span class="keyword">return</span> proxy;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在shouldSkip方法中创建了Advisor</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AspectJAwareAdvisorAutoProxyCreator.java</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">shouldSkip</span><span class="params">(Class&lt;?&gt; beanClass, String beanName)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// <span class="doctag">TODO:</span> Consider optimization by caching the list of the aspect names</span></span><br><span class="line">	List&lt;Advisor&gt; candidateAdvisors = findCandidateAdvisors();</span><br><span class="line">	<span class="keyword">for</span> (Advisor advisor : candidateAdvisors) &#123;</span><br><span class="line">		<span class="keyword">if</span> (advisor <span class="keyword">instanceof</span> AspectJPointcutAdvisor &amp;&amp;</span><br><span class="line">				((AspectJPointcutAdvisor) advisor).getAspectName().equals(beanName)) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">super</span>.shouldSkip(beanClass, beanName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;Advisor&gt; <span class="title">findCandidateAdvisors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Assert.state(<span class="keyword">this</span>.advisorRetrievalHelper != <span class="keyword">null</span>, <span class="string">&quot;No BeanFactoryAdvisorRetrievalHelper available&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.advisorRetrievalHelper.findAdvisorBeans();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Advisor&gt; <span class="title">findAdvisorBeans</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// Determine list of advisor bean names, if not cached already.</span></span><br><span class="line">	String[] advisorNames = <span class="keyword">this</span>.cachedAdvisorBeanNames;</span><br><span class="line">	<span class="keyword">if</span> (advisorNames == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="comment">// Do not initialize FactoryBeans here: We need to leave all regular beans</span></span><br><span class="line">		<span class="comment">// uninitialized to let the auto-proxy creator apply to them!</span></span><br><span class="line">		advisorNames = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(</span><br><span class="line">				<span class="keyword">this</span>.beanFactory, Advisor.class, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">		<span class="keyword">this</span>.cachedAdvisorBeanNames = advisorNames;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (advisorNames.length == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	List&lt;Advisor&gt; advisors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">	<span class="keyword">for</span> (String name : advisorNames) &#123;</span><br><span class="line">		<span class="keyword">if</span> (isEligibleBean(name)) &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.beanFactory.isCurrentlyInCreation(name)) &#123;</span><br><span class="line">				<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">					logger.trace(<span class="string">&quot;Skipping currently created advisor &#x27;&quot;</span> + name + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					advisors.add(<span class="keyword">this</span>.beanFactory.getBean(name, Advisor.class));</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">catch</span> (BeanCreationException ex) &#123;</span><br><span class="line">					Throwable rootCause = ex.getMostSpecificCause();</span><br><span class="line">					<span class="keyword">if</span> (rootCause <span class="keyword">instanceof</span> BeanCurrentlyInCreationException) &#123;</span><br><span class="line">						BeanCreationException bce = (BeanCreationException) rootCause;</span><br><span class="line">						String bceBeanName = bce.getBeanName();</span><br><span class="line">						<span class="keyword">if</span> (bceBeanName != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.beanFactory.isCurrentlyInCreation(bceBeanName)) &#123;</span><br><span class="line">							<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">								logger.trace(<span class="string">&quot;Skipping advisor &#x27;&quot;</span> + name +</span><br><span class="line">										<span class="string">&quot;&#x27; with dependency on currently created bean: &quot;</span> + ex.getMessage());</span><br><span class="line">							&#125;</span><br><span class="line">							<span class="comment">// Ignore: indicates a reference back to the bean we&#x27;re trying to advise.</span></span><br><span class="line">							<span class="comment">// We want to find advisors other than the currently created bean itself.</span></span><br><span class="line">							<span class="keyword">continue</span>;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">throw</span> ex;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> advisors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="SmartInstantiationAwareBeanPostProcessor"><a href="#SmartInstantiationAwareBeanPostProcessor" class="headerlink" title="SmartInstantiationAwareBeanPostProcessor"></a>SmartInstantiationAwareBeanPostProcessor</h3><p>理解:InstantiationAwareBeanPostProcessor的字类接口,该接口与动态代理与解决循环依赖有关</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SmartInstantiationAwareBeanPostProcessor</span> <span class="keyword">extends</span> <span class="title">InstantiationAwareBeanPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 预测Bean的类型，返回第一个预测成功的Class类型，如果不能预测返回null</span></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="keyword">default</span> Class&lt;?&gt; predictBeanType(Class&lt;?&gt; beanClass, String beanName) <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 选择合适的构造器，比如目标对象有多个构造器，在这里可以进行一些定制化，选择合适的构造器</span></span><br><span class="line">	<span class="comment">// beanClass参数表示目标实例的类型，beanName是目标实例在Spring容器中的name</span></span><br><span class="line">	<span class="comment">// 返回值是个构造器数组，如果返回null，会执行下一个PostProcessor的determineCandidateConstructors方法；否则选取该PostProcessor选择的构造器</span></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="keyword">default</span> Constructor&lt;?&gt;[] determineCandidateConstructors(Class&lt;?&gt; beanClass, String beanName)</span><br><span class="line">			<span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 获得提前暴露的bean引用。主要用于解决循环引用的问题</span></span><br><span class="line">	<span class="comment">// 只有单例对象才会调用此方法</span></span><br><span class="line">	<span class="function"><span class="keyword">default</span> Object <span class="title">getEarlyBeanReference</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> bean;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="DestructionAwareBeanPostProcessor"><a href="#DestructionAwareBeanPostProcessor" class="headerlink" title="DestructionAwareBeanPostProcessor"></a>DestructionAwareBeanPostProcessor</h3><p>理解: 主要用于销毁对象时对Bean的处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DestructionAwareBeanPostProcessor</span> <span class="keyword">extends</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 处理销毁对象的逻辑</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">postProcessBeforeDestruction</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">	<span class="comment">// 判断是否需要处理这个对象的销毁</span></span><br><span class="line">	<span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">requiresDestruction</span><span class="params">(Object bean)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义InstantiationAwareBeanPostProcessor接口实现代码案例"><a href="#自定义InstantiationAwareBeanPostProcessor接口实现代码案例" class="headerlink" title="自定义InstantiationAwareBeanPostProcessor接口实现代码案例"></a>自定义InstantiationAwareBeanPostProcessor接口实现代码案例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeforeInstantiation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomeThing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行do some thing ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.MethodProxy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMethodInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;目标方法前：&quot;</span>+method);</span><br><span class="line">        Object o1 = methodProxy.invokeSuper(o, objects);</span><br><span class="line">        System.out.println(<span class="string">&quot;目标方法后：&quot;</span>+method);</span><br><span class="line">        <span class="keyword">return</span> o1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.PropertyValues;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.Enhancer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInstantiationAwareBeanPostProcessor</span>  <span class="keyword">implements</span> <span class="title">InstantiationAwareBeanPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;beanName:&quot;</span>+beanName+<span class="string">&quot;执行..postProcessBeforeInitialization\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;beanName:&quot;</span>+beanName+<span class="string">&quot;执行..postProcessAfterInitialization\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">postProcessAfterInstantiation</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;beanName:&quot;</span>+beanName+<span class="string">&quot;执行..postProcessAfterInstantiation\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInstantiation</span><span class="params">(Class&lt;?&gt; beanClass, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;beanName:&quot;</span>+beanName+<span class="string">&quot;执行..postProcessBeforeInstantiation\n&quot;</span>);</span><br><span class="line">        <span class="comment">//利用 其 生成动态代理</span></span><br><span class="line">        <span class="keyword">if</span>(beanClass==BeforeInstantiation.class)&#123;</span><br><span class="line">            Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">            enhancer.setSuperclass(beanClass);</span><br><span class="line">            enhancer.setCallback(<span class="keyword">new</span> MyMethodInterceptor());</span><br><span class="line">            BeforeInstantiation beforeInstantiation = (BeforeInstantiation)enhancer.create();</span><br><span class="line">            System.out.print(<span class="string">&quot;返回动态代理\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> beforeInstantiation;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PropertyValues <span class="title">postProcessProperties</span><span class="params">(PropertyValues pvs, Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;beanName:&quot;</span>+beanName+<span class="string">&quot;执行..postProcessProperties\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> pvs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;beforeInstantiation&quot; class=&quot;com.lixiang.resolveBeforeInstantiation.BeforeInstantiation&quot;&gt;&lt;/bean&gt;</span><br><span class="line">    &lt;bean id=&quot;myInstantiationAwareBeanPostProcessor&quot; class=&quot;com.lixiang.resolveBeforeInstantiation.MyInstantiationAwareBeanPostProcessor&quot;&gt;&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;resolveBeforeInstantiation.xml&quot;</span>);</span><br><span class="line">        BeforeInstantiation bean = ac.getBean(BeforeInstantiation.class);</span><br><span class="line">        bean.doSomeThing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL事务</title>
    <url>/2022/09/27/MySql/MySQL%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<h3 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h3><p>事务是指将一系列数据操作整体进行统一管理,这些数据操作要么同时成功,要么同时失败;<br>MySQL只有InnoDB存储引擎支持事务;</p>
<h3 id="事务特性（ACID）"><a href="#事务特性（ACID）" class="headerlink" title="事务特性（ACID）"></a>事务特性（ACID）</h3><p>1.原子性（atomicity）:事务必须被视为一个不可分割的最小单元，整个事务中的所有操作要么全部提交成功，要么全部失败<br>2.一致性（consistency）:一致性是指事务将数据库从一种一致性转换到另外一种一致性状态，在事务开始之前和事务结束之后数据库中数据的完整性没有被破坏;<br>3.隔离性（isolation）: 一个事务的执行不能被其他事务干扰,并发执行的各个事务之间互相隔离;<br>4.持久性（durability）:一旦事务提交，则其所做的修改就会永久保存到数据库中。此时即使系统崩溃，已经提交的修改数据也不会丢失;</p>
<h3 id="事务并发引发的问题"><a href="#事务并发引发的问题" class="headerlink" title="事务并发引发的问题"></a>事务并发引发的问题</h3><p>1.脏读:同一个事务读取到了另外一个事务修改但未提交的数据,被称为脏读;<br>2.不可重复读:同一个事务内相同的记录被检索两次，且两次得到的结果不一致;<br>3.幻读:在事务执行过程,另一个事务将新记录添加到正在读取的事务中时,导致同一个事务中第二次读取到了之前读取没有获取到的记录</p>
<h3 id="MySQL中的隔离级别"><a href="#MySQL中的隔离级别" class="headerlink" title="MySQL中的隔离级别"></a>MySQL中的隔离级别</h3><p>READ UNCOMMITTED：未提交读  — 有脏读,不可重复读,幻读<br>READ COMMITTED：已提交读    — 有不可重复读,幻读<br>REPEATABLE READ：可重复读   — 有幻读(MySQL并没有完全解决)<br>SERIALIZABLE：可串行化</p>
<h3 id="MySQL保存点"><a href="#MySQL保存点" class="headerlink" title="MySQL保存点"></a>MySQL保存点</h3><p>关闭掉MySQL自动提交,可以在MySQL执行语句的过程中设置保存点,然后回滚到保存点;</p>
<h3 id="MySQL隐式提交"><a href="#MySQL隐式提交" class="headerlink" title="MySQL隐式提交"></a>MySQL隐式提交</h3><p>即使MySQL关掉了自动提交,在事务执行过程中如果执行了DDL语句(如：创建表,添加字段,删除表),或者再次执行开启事务的语句(begain, start transaction会提交上一个事务)都会发生隐式提交;</p>
<h3 id="MVCC-Multi-Version-Concurrency-Control-多版本并发控制"><a href="#MVCC-Multi-Version-Concurrency-Control-多版本并发控制" class="headerlink" title="MVCC(Multi-Version Concurrency Control - 多版本并发控制)"></a>MVCC(Multi-Version Concurrency Control - 多版本并发控制)</h3><p>利用记录的版本链来控制并发事务访问相同记录的行为，这种机制就被称之为多版本并发控制(Mulit-Version Concurrency Control MVCC)。<br>版本链：<br>    首先需要明确几个概念：<br>    rowId:(没有主键或者唯一键时MySQL会创建的隐藏主键);<br>    trxid:事务ID;<br>    roll_pointer:版本链中指向旧版本undo_log记录的指针;<br>    每次对某行数据进行改动，都会记录一条undo日志，随着更新次数的增多，所有的版本都会被roll_pointer属性连接成一个链表，我们把这个链表称之为版本链，版本链的头节点就是当前记录最新的值。每个版本中还包含生成该版本时对应的事务id。</p>
<h3 id="ReadView-读视图"><a href="#ReadView-读视图" class="headerlink" title="ReadView(读视图)"></a>ReadView(读视图)</h3><p>主要包含4个重要的概念：<br>    m_ids：在生成ReadView时对应当前数据活跃的事务id列表(活跃的事务id列表中记录的未提交的事务id);<br>    min_trx_id:在生成ReadView时对应当前数据活跃的事务中最小的事务id,也就是m_ids中的最小值<br>    max_trx_id:生成ReadView时应该分配给下一个事务的id值;<br>    creator_trx_id：表示生成该ReadView的事务的事务id,执行INSERT、DELETE、UPDATE这些语句时才会为事务分配事务id,否则在一个只读事务中的事务id值都默认为0;</p>
<h3 id="不同事务隔离级别下MySQL是如何解决脏读-不可重复读的"><a href="#不同事务隔离级别下MySQL是如何解决脏读-不可重复读的" class="headerlink" title="不同事务隔离级别下MySQL是如何解决脏读,不可重复读的"></a>不同事务隔离级别下MySQL是如何解决脏读,不可重复读的</h3><p>不同事务隔离级别下Select语句获取到的ReadView的版本不同;</p>
<ol>
<li>READ UNCOMMITTED:由于可以读到未提交事务修改过的记录，所以直接读取记录的最新版本就好了(所以就会出现脏读、不可重复读、幻读);</li>
<li>SERIALIZABLE:InnoDB使用加锁的方式来访问记录（也就是所有的事务都是串行的，当然不会出现脏读、不可重复读、幻读）</li>
<li>READ COMMITTED:每次查询开始时都会生成一个独立的ReadView,生成该ReadView的版本位当前最小活跃事务id的前一个版本,也就历史正真提交了的版本;(当前活跃的事务id对应的版本都是未提交的)</li>
<li>REPEATABLE READ:同一个事务中,只会在第一次执行查询语句时生成一个ReadView,之后的查询就不会重复生成;(保证了前后两次查询数据一致,解决了不可重复读);</li>
</ol>
<p>REPEATABLE READ在大部分情况下是解决了幻读问题的,只有在一些特殊情况下才会出现幻读问题,例如:A事务查询id=1的数据,此时为空(此时连版本链都没有,ReadView是空的),但是此时事务B添加了一条id=1的数据并提交,事务A修改id=1等于的这条数据,然后事务A在读取id=1的数据,因为这时已经存在版本链,所以ReadView不为空,会产生幻读;</p>
<h3 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h3><p>确保事务的持久性<br>在事务执行之前将操作写入redo log，这样当发生掉电之类的情况时系统可以保证事务的持久性;</p>
<h3 id="undo-log"><a href="#undo-log" class="headerlink" title="undo log"></a>undo log</h3><p>确保事务的原子性<br>undo log称为撤销日志，当事务变更执行到一半无法完成时，可以根据撤销日志恢复到变更之间的状态来保证事务的原子性</p>
<h3 id="binlog"><a href="#binlog" class="headerlink" title="binlog"></a>binlog</h3><p>binlog以事件形式记录了所有的DDL和除了查询语句select外的DML语句的日志,还包含语句执行所消耗的时间;</p>
<h3 id="MySQL崩溃后的恢复"><a href="#MySQL崩溃后的恢复" class="headerlink" title="MySQL崩溃后的恢复"></a>MySQL崩溃后的恢复</h3><p>在服务器不挂的情况下，redo日志简直就是个大累赘，不仅没用，反而让性能变得更差。但是万一数据库挂了，就可以在重启时根据redo日志中的记录就可以将页面恢复到系统崩溃前的状态。</p>
<h3 id="崩溃后的恢复为什么不用binlog"><a href="#崩溃后的恢复为什么不用binlog" class="headerlink" title="崩溃后的恢复为什么不用binlog"></a>崩溃后的恢复为什么不用binlog</h3><ol>
<li>binlog会记录表所有更改操作，更改表结构等操作,但redo_log还记录MySQl崩溃前没有提交的事务操作;</li>
<li>redo log是InnoDB引擎特有的，binlog是MySQL的Server层实现的,所有引擎都可以使用;</li>
<li>redo log是物理日志,记录的是”发生在具体数据页上的修改”,直接锁定了数据位置,恢复的速度更快;binlog是逻辑日志,记录的是这个语句的原始逻辑,比如”给ID=2这的c字段加1”,恢复工程需要转化所以速度要慢一些;</li>
<li>redo log是”循环写”的日志文件,redo log只会记录未刷盘的日志,已经刷入磁盘的数据都会从redo log 这个有限大小的日志文件里删除.binlog是追加日志,保存的是全量的日志.如果想要未刷盘的部分数据到内存时,binlog 是无法恢复的,虽然binlog拥有全量的日志,但没有一个标志让innoD 判断哪些数据已经写入磁盘,哪些数据还没有;</li>
</ol>
<h3 id="MySQL主从复制原理"><a href="#MySQL主从复制原理" class="headerlink" title="MySQL主从复制原理"></a>MySQL主从复制原理</h3><p>首先需要明确一下要点:</p>
<ol>
<li>我们在搭建MySQL主从复制架构时,首先要保证的就slave节点的IO Thread和SQL Thread必须同时正常启动,不然主从复制的搭建就是有问题的,这两个线程在主从复制过程中起着重要的作用;</li>
<li>MySQL会以事件形式记录了所有的DDL和除了select查询语句外的DML语句的binlog日志;<br>然后就是主从复制的具体实现原理:</li>
<li>slave节点会在一定时间间隔内对master节点的binlog进行探测其是否发生改变,如果发生改变,IO Thread会请求master节点binlog中新添加的二进制事件;</li>
<li>同时master节点为每个IO Thread启动一个dump线程,向从节点发送二进制事件,并保存至从节点的中继日志中(Relay log)</li>
<li>从节点使用SQL Thread从中继日志中读取二进制事件,在本地进行重放,从而使得从节点与主节点的数据保持一致,<br>执行完毕后,IO Thread和SQL Thread进入睡眠状态,等待下一次被唤醒;</li>
</ol>
<h3 id="主从复制延迟问题的产生"><a href="#主从复制延迟问题的产生" class="headerlink" title="主从复制延迟问题的产生"></a>主从复制延迟问题的产生</h3><p>MySQL主库写binlog采用的是追加日志的方式,这里产生的是顺序IO,但是SQL Thread将relay_log中的数据读取出来同步到从机的数据文件中去,这里发生的是随机IO,需要先查找具体操作数据的内存地址,然后再进行修改,这个过程可能比较耗时;且整个过程是单线程执行的;<br>也就是主要问题点在于：1. 随机IO; 2. 单线程执行;<br>当然也会有其他一些架构上和外部原因：1. 从库所在的机器性能要比主库所在的机器性能差; 2. 从库读压力过大,查询消耗了大量CPU资源从而影响了同步数据的速度; 3. 网路带宽不是很好,导致同步数据延时;</p>
<p>如果担心binlog落盘的效率,可以将硬盘换成固态;</p>
<p>主库的写操作是顺序写binlog，从库单线程去主库顺序读binlog，从库取到binlog之后在本地执行。mysql的主从复制都是单线程的操作，但是由于主库是顺序写，所以效率很高，而从库也是顺序读取主库的日志，此时的效率受网络因素的影响，但是当数据拉取回来之后变成了随机的操作，而不是顺序的，所以此时成本会提高。</p>
<h3 id="解决主从复制延迟问题"><a href="#解决主从复制延迟问题" class="headerlink" title="解决主从复制延迟问题"></a>解决主从复制延迟问题</h3><ol>
<li>业务的持久化层的实现采用分库架构，让不同的业务请求分散到不同的数据库服务上，分散单台机器的压力;</li>
<li>在读多写少的情况下，对于热点数据，可以在业务层和mysql之间加入缓存层，来减少MySQL读的压力;</li>
<li>使用更好的硬件设备，比如使用更好的CPU或者将硬盘换成固态;</li>
</ol>
<h3 id="使用GTID来解决主从复制问题"><a href="#使用GTID来解决主从复制问题" class="headerlink" title="使用GTID来解决主从复制问题"></a>使用GTID来解决主从复制问题</h3><p>想要从根本上解决MySQL主从复制问题,就需要MySQL主从复制设计上存在的问题出发;<br>主要存在两个问题：SQL Thread从中继日志中读取二进制事件，然后在本地进行重放；这里主要存在两个问题：1. 随机IO; 2. 单线程执行;<br>在MySQL5.6版本之后,可以给MySQL加上GTID的配置：<br>gtid_mode=on<br>enforce-gtid-consistency=true<br>当开启gtid配置后，每一个操作语句执行前会添加一个gtid事件,记录当前全局事务id,MySQL会采用多线程分组提交的方式来提高SQL Thread重放的速度,组提交信息被保存在gtid事件中;</p>
<h3 id="MySQL中的锁"><a href="#MySQL中的锁" class="headerlink" title="MySQL中的锁"></a>MySQL中的锁</h3><p>MySQL中的锁主要用于解决并发事务问题;</p>
<p>独占锁：排斥其他独占锁和共享锁;<br>共享锁：排斥其他独占锁,兼容其他共享锁;<br>意向锁：分为意向独占锁，意向共享锁,只能加在表级别,它的作用是用于标记表中某行是否加了独占锁或者共享锁,而不需要一行一行去做检查;<br>    当事务准备在某条记录上加共享锁时，需要先在表级别加一个意向共享锁<br>    当事务准备在某条记录上加独占锁时，需要先在表级别加一个意向独占锁</p>
<p>MySQL中只有InnoDB存储引擎支持行锁,其他存储引擎都是表锁;</p>
<h3 id="行锁和表锁"><a href="#行锁和表锁" class="headerlink" title="行锁和表锁"></a>行锁和表锁</h3><p>行锁：也称为记录锁,顾名思义就是在记录上加的锁。但是要注意，这个记录指的是通过给索引上的索引项加锁。<br>表锁：对整张表记录进行加锁;</p>
<h3 id="间隙锁"><a href="#间隙锁" class="headerlink" title="间隙锁"></a>间隙锁</h3><p>间隙锁（Gap Lock）：<br>1）间隙锁锁定的是索引BTree+叶子节点的前后next指针,这就导致了加锁范围为当前叶子节点的所有索引项;<br>2）间隙锁可以在一定程度上解决可重复读事务隔离级别中的幻读问题。</p>
]]></content>
  </entry>
  <entry>
    <title>MySQL性能调优</title>
    <url>/2022/09/26/MySql/MySQL%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</url>
    <content><![CDATA[<h3 id="MySQL调优的理解"><a href="#MySQL调优的理解" class="headerlink" title="MySQL调优的理解"></a>MySQL调优的理解</h3><p>首先分析SQL的执行计划,主要关注执行计划的列有：<br>id列:它决定了SQL语句各部分的子句的执行顺序;<br>type列:表示MySQL执行查询时的访问类型,该值是一个重要指标,它的级别代表着SQL执行性能的好坏,常见的级别有const,eq_ref,ref,range,index,ALL;越靠后的级别代表SQL性能越差;<br>possible_key列:表示SQL语句可能用到的索引;<br>key列:代表SQL实际用到的索引;<br>key_len列:表示使用到的索引的最大长度;<br>rows列:当全表扫描时表示预计需要扫描的行数,如果使用索引查询时,rows代表预计扫描的索引记录行数;<br>Extra列:用来说明一些额外信息,可以通过额外信息来准确理解MySQL到底如何执行给定的查询语句;常见额外信息有:Using index：覆盖索引;Using filesort：使用了文件排序;Using temporary：使用了临时表;</p>
<p>通过这些列信息可以了解到SQL语句的实际执行状况,然后找出问题,做出优化;但是除了这些SQL还可能在其他情况下出现性能不佳的情况,SQL语句的响应时间 = 执行SQL语句的时间 + 排队时间;这里的排队时间可能也会过长,比如等锁,等IO时间过长<br>都是有可能的,所以也可以使用show profile来查看SQL的执行成本或者查看binlog日志也可以查看SQL执行时间和排队时间;</p>
<h3 id="范式和反范式的选择"><a href="#范式和反范式的选择" class="headerlink" title="范式和反范式的选择"></a>范式和反范式的选择</h3><p><img src="/images/spring/%E8%8C%83%E5%BC%8F%E5%92%8C%E5%8F%8D%E8%8C%83%E5%BC%8F%E7%9A%84%E4%BC%98%E7%95%A5.jpg"></p>
<h3 id="字段数据类型优化"><a href="#字段数据类型优化" class="headerlink" title="字段数据类型优化"></a>字段数据类型优化</h3><p>字段优化基本原则：<br>    1. 更小的通常更好：一般情况下,应该尽量使用可以正确存储数据的最小数据类型。更小的数据类型通常更快，因为它们占用更少的磁盘、内存和CPU的高速缓存，并且处理时需要的CPU周期也更少(cpu高速缓存能够放更多的数据)。<br>    2. 简单就好：整型比字符操作代价更低，因为字符集和校对规则(排序规则)使字符比较比整型比较更复杂。<br>    比如通常使用时间戳存储日期和时间而不使用字符串;<br>    3. 需要建立索引的列尽量避免NULL：对MySQL来说更难优化，因为可为NULL的列使得索引、索引统计和值比较都更复杂。当可为NULL的列被索引时，每个索引记录需要一个额外的字节。</p>
<p>具体类型优化:<br>    整数类型:<br>    tinyint(8位，1字节), smallint(16位, 2字节), mediumint(24位, 3字节), int(32位, 4字节), bigint(64位, 8字节),整数类型当勾选了无符号(unsinged)时只能为整数,且存储正数范围可以扩大一倍;<br>    比如业务中类型，状态这些都可以列举出来它有几种;这种时候就用Tinyint;<br>    tinyint(1)与tinyint(4)是存储的数据长度是一样的;只有字段指定zerofill是有用;<br>    如tinyint(4)如果实际值是2，如果列指定了zerofill，查询结果就是0002，左边用0来填充;</p>
<pre><code>实数类型:
float(4个字节),double(8个字节),decimal(65个数字,用于存储精确的小数);
CPU直接支持原生浮点数的计算，而不支持decimal的计算, decimal的计算由MySQL自己实现,所以浮点运算明显更快;
但是在实际业务中比如存储金额即想考虑精度，又想考虑效率的做法是,将小数扩大10万倍,然后使用bigint进行存储，然后在程序中进行精度处理,这样既保证了效率,也保证了精度;

字符串类型:
char(定长), varchar(不定长), blob, text
</code></pre>
<h3 id="索引是什么"><a href="#索引是什么" class="headerlink" title="索引是什么"></a>索引是什么</h3><p>官方定义：索引是帮助MySQL高效获取数据的数据结构;(索引是一种排好序的数据结构);<br>InnoDB存储引擎支持以下几种常见的索引：B+树索引、全文索引、哈希索引，其中比较关键的是B+树索引;</p>
<h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><p>二叉树<br>二叉平衡树<br>AVL树(多叉平衡树),左树右树高度差不超过1;<br>红黑树:最长路径不超过最短路径的2倍,它的添加，删除，查找节点的效率比较平均;</p>
<h3 id="为什么要尽量使用自增主键做索引"><a href="#为什么要尽量使用自增主键做索引" class="headerlink" title="为什么要尽量使用自增主键做索引"></a>为什么要尽量使用自增主键做索引</h3><p>如果主键不自增,当向数据库中插入已有数据的一个中间值(例如库中有48，51，没有50，插入50),如果在B+树中构建索引他们在同一个叶子节点,但是此时当前叶子节点的磁盘页已经存满16kb,这时就会产生页分裂;</p>
<p>如果没有创建主键，mysql也会创建一个rowid的列来构建聚簇索引;</p>
<h3 id="聚簇索引-聚集索引"><a href="#聚簇索引-聚集索引" class="headerlink" title="聚簇索引/聚集索引"></a>聚簇索引/聚集索引</h3><p>InnoDB所有的数据列都存放与叶子节点,数据与索引分开存放,每张表会有三个文件,表结构文件,表数据文件和索引文件<br>非聚簇索引非叶子节点也会存放数据,数据文和索引存放在一起,每张表有两个文件,表结构文件,表数据文件;</p>
<h3 id="二级索引-辅助索引-普通索引"><a href="#二级索引-辅助索引-普通索引" class="headerlink" title="二级索引/辅助索引/普通索引"></a>二级索引/辅助索引/普通索引</h3><p>普通的索引列，也会构建一棵B+树,但是叶子节点没有存储整行数据，而是除了存储索引列的数据外还存储了一个bookmark,内部存放的是主键id;</p>
<h3 id="联合索引-复合索引"><a href="#联合索引-复合索引" class="headerlink" title="联合索引/复合索引"></a>联合索引/复合索引</h3><p>将表上的多个列组合起来构建的索引;</p>
<h3 id="回表"><a href="#回表" class="headerlink" title="回表"></a>回表</h3><p>通过普通索引获取到了叶子节点的主键id,然后再通过主键索引(聚簇索引)找到完整的整行数据,这个过程称之为回表;</p>
<h3 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h3><p>并不是一种索引类型,而是利用索引的一种方式;<br>直接从联合索引中就能获取到需要查询的数据列，而不需要回表去查询聚簇索引获取整行数据;</p>
<h3 id="自适应Hash索引"><a href="#自适应Hash索引" class="headerlink" title="自适应Hash索引"></a>自适应Hash索引</h3><p>MySQL内部会监控那些索引是热点数据，如果是热点数据的话就会将其添加到Hash索引中,用于快速获取热点数据;<br>MySQL 5.7之后是默认开启的;</p>
<h3 id="索引下推"><a href="#索引下推" class="headerlink" title="索引下推"></a>索引下推</h3><p>在MySql5.6之前,我们建立联合索引,是无法使用到索引下推的,比如说我们建立name和age的组合索引,当我们的查询语句是where name = ‘’ AND age = ‘’;Mysql首先是会通过索引找到所有name的匹配的叶子节点对应的主键id,然后通过主键id回表查询到叶子节点对应的整行数据，然后交给mysql的server层处理，server层会将age匹配行筛选出来;<br>在MySql5.6之后,我们通过索引找到name匹配的数据中直接对组合索引里匹配的列进行筛选得到对应的主键id,减少了回表次数,也就是减少了IO操作;</p>
<h3 id="MySQL架构的调优"><a href="#MySQL架构的调优" class="headerlink" title="MySQL架构的调优"></a>MySQL架构的调优</h3><p>首先需要明确那些数据放在那种数据库,比如有些业务数据是否需要冗余一份到ES,那些数据需要放到缓存等操作;</p>
<h3 id="慢查询优化"><a href="#慢查询优化" class="headerlink" title="慢查询优化"></a>慢查询优化</h3><ol>
<li>优化数据访问<br> 不要总是取出全部的列:不容易实现索引覆盖,IO开销增大,如果表增加新列,查询的结果会增加新列,可能会带来未知的影响<br> 不要过多的查询相同的数据：可以将这种重复使用的数据放入缓存;</li>
<li>响应时间<br> 服务时间(MySQL处理SQL查询数据的时间) + 排队时间(等锁,等IO这些等待所花费的时间)</li>
</ol>
<h3 id="UNION和UNION-ALL的差别"><a href="#UNION和UNION-ALL的差别" class="headerlink" title="UNION和UNION ALL的差别"></a>UNION和UNION ALL的差别</h3><p>UNION会使用临时表进行去重而UNION ALL不会;</p>
<h3 id="MYISAM与INNODB的差别"><a href="#MYISAM与INNODB的差别" class="headerlink" title="MYISAM与INNODB的差别"></a>MYISAM与INNODB的差别</h3><ol>
<li>MyISAM使用的是非聚簇索引,InnoDB使用的是聚簇索引;</li>
<li>InnoDB支持事务,MyISAM不支持;</li>
<li>InnoDB支持行锁和表锁,MyISAM只支持表锁;</li>
<li>InnoDB记录redo_log日志,拥有更快的数据恢复能力,但记录redo_log同时也会带来一定的性能损失,MyISAM则没有;</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>MySQL索引优化</title>
    <url>/2022/09/27/MySql/MySQL%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h3 id="MySQL添加索引的语句"><a href="#MySQL添加索引的语句" class="headerlink" title="MySQL添加索引的语句"></a>MySQL添加索引的语句</h3><p>1.添加PRIMARY KEY（主键索引）<br>mysql&gt;ALTER TABLE table_name ADD PRIMARY KEY (column )</p>
<p>2.添加UNIQUE(唯一索引)<br>mysql&gt;ALTER TABLE table_name ADD UNIQUE (column)</p>
<p>3.添加INDEX(普通索引)<br>mysql&gt;ALTER TABLE table_name ADD INDEX index_name (column )</p>
<p>4.添加FULLTEXT(全文索引)<br>mysql&gt;ALTER TABLE table_name ADD FULLTEXT (column)</p>
<p>5.添加联合索引<br>mysql&gt;ALTER TABLE table_name ADD INDEX index_name (column1, column2, column3)</p>
<p>6.其他语法<br>CREATE INDEX index_name ON table_name (column1, column2, column3);</p>
<h3 id="高性能索引创建策略"><a href="#高性能索引创建策略" class="headerlink" title="高性能索引创建策略"></a>高性能索引创建策略</h3><ol>
<li><p>索引列的类型要尽量小<br>更小的数据类型，也就意味着节省更多的存储空间和更高效的I/0。</p>
</li>
<li><p>索引的选择性<br>创建索引应该选择选择性/离散性高的列。重复的数据越多,查询时需要扫描的列就越多;</p>
</li>
<li><p>前缀索引<br>创建前缀索引(主要针对text,很长的varchar类型)<br>mysql&gt;ALTER TABLE table_name ADD INDEX index_name (column(前缀长度))<br>缺点：无法适用与order by和group by,也无法做覆盖索引;</p>
</li>
<li><p>后缀索引<br>MySQL原生并不支持后缀索引。<br>可以通过在表中添加一个新列，用于保存要被建立后缀索引的字段倒排值，然后建立前缀索引。<br>查询邮箱后缀。</p>
</li>
<li><p>多列索引<br>将离散性高的列尽量放在前面;<br>将使用频率高的列尽量放在前面;</p>
</li>
</ol>
<h3 id="高性能索引使用策略"><a href="#高性能索引使用策略" class="headerlink" title="高性能索引使用策略"></a>高性能索引使用策略</h3><ol>
<li>不要在查询条件索引列上做任何操作：比如：计算,sql函数等；</li>
<li>覆盖索引尽量用上：尽量不要使用*</li>
<li>最佳左前缀法则：(由于联合索引在B+树中前面列的顺序对后面列的顺序是有影响的)<br> 当我们项目有大量的查询同时用到name和age来进行查询,此时可以创建name和age的组合索引,<br> select * from emp where name = ? AND age = ?  //走的上索引 — 这里查询优化器会自动优化查询顺序,name和age更换位置也可以<br> select * from emp where age = ?  // 走不上索引<br> select * from emp where name = ?  // 走的上索引</li>
<li>不等于要慎用：使用不等于(!= 或者&lt;&gt;)的时候无法使用索引会导致全表扫描</li>
<li>字符类型加引号：隐式类型转换导致索引失效;</li>
<li>like条件尽量右模糊：一般模糊查询的话都是字符串类型，右模糊的话还可以利用上索引的前缀,左模糊则用不上;</li>
<li>尽可能按主键顺序插入行：插入已存在数据的中间值,导致页内数据移动导致页分裂;</li>
<li>count(※)和count(列)效率几乎一样,但是统计结果会有差别,count(※)会统计含null值的列,count(列)不会统计当前列值为null的列,所以统计结果会有差别;</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Docker生态架构及部署</title>
    <url>/2023/08/20/%E4%BA%91%E5%8E%9F%E7%94%9F/Docker/Docker%E7%94%9F%E6%80%81%E6%9E%B6%E6%9E%84%E5%8F%8A%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="一、Docker生态架构"><a href="#一、Docker生态架构" class="headerlink" title="一、Docker生态架构"></a>一、Docker生态架构</h1><h2 id="1-1-Docker-Containers-Are-Everywhere"><a href="#1-1-Docker-Containers-Are-Everywhere" class="headerlink" title="1.1 Docker Containers Are Everywhere"></a>1.1 Docker Containers Are Everywhere</h2><p><img src="/images/Docker/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7Docker%E7%94%9F%E6%80%81%E6%9E%B6%E6%9E%84%E5%8F%8A%E9%83%A8%E7%BD%B2.assets/image-20220118165726624.png" alt="image-20220118165726624"></p>
<h2 id="1-2-生态架构"><a href="#1-2-生态架构" class="headerlink" title="1.2 生态架构"></a>1.2 生态架构</h2><p><img src="/images/Docker/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7Docker%E7%94%9F%E6%80%81%E6%9E%B6%E6%9E%84%E5%8F%8A%E9%83%A8%E7%BD%B2.assets/image-20220118170228476.png" alt="image-20220118170228476"></p>
<h3 id="1-2-1-Docker-Host"><a href="#1-2-1-Docker-Host" class="headerlink" title="1.2.1 Docker Host"></a>1.2.1 Docker Host</h3><p>用于安装Docker daemon的主机，即为Docker Host，并且该主机中可基于容器镜像运行容器。</p>
<h3 id="1-2-2-Docker-daemon"><a href="#1-2-2-Docker-daemon" class="headerlink" title="1.2.2 Docker daemon"></a>1.2.2 Docker daemon</h3><p>用于管理Docker Host中运行的容器、容器镜像、容器网络等，管理由Containerd.io提供的容器。</p>
<h3 id="1-2-3-Registry"><a href="#1-2-3-Registry" class="headerlink" title="1.2.3 Registry"></a>1.2.3 Registry</h3><p>容器镜像仓库，用于存储已生成容器运行模板的仓库，用户使用时，可直接从容器镜像仓库中下载容器镜像，即容器运行模板，就可以运行容器镜像中包含的应用了。例如：Docker Hub,也可以使用Harbor实现企业私有的容器镜像仓库。</p>
<h3 id="1-2-4-Docker-client"><a href="#1-2-4-Docker-client" class="headerlink" title="1.2.4 Docker client"></a>1.2.4 Docker client</h3><p>Docker Daemon客户端工具，用于同Docker Daemon进行通信，执行用户指令，可部署在Docker Host上，也可以部署在其它主机，能够连接到Docker Daemon即可操作。</p>
<h3 id="1-2-5-Image"><a href="#1-2-5-Image" class="headerlink" title="1.2.5 Image"></a>1.2.5 Image</h3><p>把应用运行环境及计算资源打包方式生成可再用于启动容器的不可变的基础设施的模板文件，主要用于基于其启动一个容器。</p>
<h3 id="1-2-6-Container"><a href="#1-2-6-Container" class="headerlink" title="1.2.6 Container"></a>1.2.6 Container</h3><p>由容器镜像生成，用于应用程序运行的环境，包含容器镜像中所有文件及用户后添加的文件，属于基于容器镜像生成的可读写层，这也是应用程序活跃的空间。</p>
<h3 id="1-2-7-Docker-Dashboard"><a href="#1-2-7-Docker-Dashboard" class="headerlink" title="1.2.7 Docker Dashboard"></a>1.2.7 Docker Dashboard</h3><blockquote>
<p>仅限于MAC与Windows操作系统上安装使用。</p>
</blockquote>
<p>Docker Dashboard 提供了一个简单的界面，使您能够直接从您的机器管理您的容器、应用程序和映像，而无需使用 CLI 来执行核心操作。</p>
<p><img src="/images/Docker/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7Docker%E7%94%9F%E6%80%81%E6%9E%B6%E6%9E%84%E5%8F%8A%E9%83%A8%E7%BD%B2.assets/image-20220118185507047.png" alt="image-20220118185507047"></p>
<h2 id="1-3-Docker版本"><a href="#1-3-Docker版本" class="headerlink" title="1.3 Docker版本"></a>1.3 Docker版本</h2><ul>
<li>Docker-ce Docker社区版，主要用于个人开发者测试使用，免费版本</li>
<li>Docker-ee Docker企业版，主要用于为企业开发及应用部署使用，收费版本，免费试用一个月，2020年因国际政治原因曾一度限制中国企业使用。</li>
</ul>
<h1 id="二、Docker部署"><a href="#二、Docker部署" class="headerlink" title="二、Docker部署"></a>二、Docker部署</h1><blockquote>
<p>安装Docker-ce版本。</p>
</blockquote>
<h2 id="2-1-使用YUM源部署"><a href="#2-1-使用YUM源部署" class="headerlink" title="2.1 使用YUM源部署"></a>2.1 使用YUM源部署</h2><blockquote>
<p>YUM源可以使用官方YUM源、清华大学开源镜像站配置YUM源，也可以使用阿里云开源镜像站提供的YUM源，建议选择使用阿里云开源镜像站提供的YUM源，原因速度快。</p>
</blockquote>
<h3 id="2-1-1-获取阿里云开源镜像站YUM源文件"><a href="#2-1-1-获取阿里云开源镜像站YUM源文件" class="headerlink" title="2.1.1 获取阿里云开源镜像站YUM源文件"></a>2.1.1 获取阿里云开源镜像站YUM源文件</h3><p><img src="/images/Docker/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7Docker%E7%94%9F%E6%80%81%E6%9E%B6%E6%9E%84%E5%8F%8A%E9%83%A8%E7%BD%B2.assets/image-20220118181640863.png" alt="image-20220118181640863"></p>
<p><img src="/images/Docker/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7Docker%E7%94%9F%E6%80%81%E6%9E%B6%E6%9E%84%E5%8F%8A%E9%83%A8%E7%BD%B2.assets/image-20220118181837065.png" alt="image-20220118181837065"></p>
<p><img src="/images/Docker/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7Docker%E7%94%9F%E6%80%81%E6%9E%B6%E6%9E%84%E5%8F%8A%E9%83%A8%E7%BD%B2.assets/image-20220118182432607.png" alt="image-20220118182432607"></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">在docker host上使用 <span class="built_in">wget</span>下载到/etc/yum.repos.d目录中即可。</span><br><span class="line"><span class="comment"># wget -O /etc/yum.repos.d/docker-ce.repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure>



<p><img src="/images/Docker/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7Docker%E7%94%9F%E6%80%81%E6%9E%B6%E6%9E%84%E5%8F%8A%E9%83%A8%E7%BD%B2.assets/image-20220118182749037.png" alt="image-20220118182749037"></p>
<h3 id="2-1-2-安装Docker-ce"><a href="#2-1-2-安装Docker-ce" class="headerlink" title="2.1.2 安装Docker-ce"></a>2.1.2 安装Docker-ce</h3><blockquote>
<p>在docker host上安装即可，本次使用YUM源中稳定版本，由于版本在不断更新，不同的时间安装版本也不相同，使用方法基本一致。</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">直接安装docker<span class="literal">-ce</span>，此为docker daemon，所有依赖将被yum自动安装，含docker client等。</span><br><span class="line"><span class="comment"># yum -y install docker-ce</span></span><br></pre></td></tr></table></figure>



<p><img src="/images/Docker/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7Docker%E7%94%9F%E6%80%81%E6%9E%B6%E6%9E%84%E5%8F%8A%E9%83%A8%E7%BD%B2.assets/image-20220118183627705.png" alt="image-20220118183627705"></p>
<h3 id="2-1-3-配置Docker-Daemon启动文件"><a href="#2-1-3-配置Docker-Daemon启动文件" class="headerlink" title="2.1.3 配置Docker Daemon启动文件"></a>2.1.3 配置Docker Daemon启动文件</h3><blockquote>
<p>由于Docker使用过程中会对Centos操作系统中的Iptables防火墙中的FORWARD链默认规划产生影响及需要让Docker Daemon接受用户自定义的daemon.json文件，需要要按使用者要求的方式修改。</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /usr/lib/systemd/system/docker.service</span></span><br></pre></td></tr></table></figure>





<p><img src="/images/Docker/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7Docker%E7%94%9F%E6%80%81%E6%9E%B6%E6%9E%84%E5%8F%8A%E9%83%A8%E7%BD%B2.assets/image-20220118184308554.png" alt="image-20220118184308554"></p>
<p><img src="/images/Docker/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7Docker%E7%94%9F%E6%80%81%E6%9E%B6%E6%9E%84%E5%8F%8A%E9%83%A8%E7%BD%B2.assets/image-20220118184420795.png" alt="image-20220118184420795"></p>
<h3 id="2-1-4-启动Docker服务并查看已安装版本"><a href="#2-1-4-启动Docker服务并查看已安装版本" class="headerlink" title="2.1.4 启动Docker服务并查看已安装版本"></a>2.1.4 启动Docker服务并查看已安装版本</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">重启加载daemon文件</span><br><span class="line"><span class="comment"># systemctl daemon-reload</span></span><br><span class="line"></span><br><span class="line">启动docker daemon</span><br><span class="line"><span class="comment"># systemctl start docker</span></span><br><span class="line"></span><br><span class="line">设置开机自启动</span><br><span class="line"><span class="comment"># systemctl enable docker</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">使用docker version客户端命令查看已安装docker软件版本</span><br><span class="line"><span class="comment"># docker version</span></span><br><span class="line">Client: Docker Engine - Community 客户端</span><br><span class="line"> Version:           <span class="number">20.10</span>.<span class="number">12</span></span><br><span class="line"> API version:       <span class="number">1.41</span></span><br><span class="line"> Go version:        go1.<span class="number">16.12</span></span><br><span class="line"> Git commit:        e91ed57</span><br><span class="line"> Built:             Mon Dec <span class="number">13</span> <span class="number">11</span>:<span class="number">45</span>:<span class="number">41</span> <span class="number">2021</span></span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Context:           default</span><br><span class="line"> Experimental:      true</span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community Docker管理引擎</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          <span class="number">20.10</span>.<span class="number">12</span></span><br><span class="line">  API version:      <span class="number">1.41</span> (minimum version <span class="number">1.12</span>)</span><br><span class="line">  Go version:       go1.<span class="number">16.12</span></span><br><span class="line">  Git commit:       <span class="number">459</span>d0df</span><br><span class="line">  Built:            Mon Dec <span class="number">13</span> <span class="number">11</span>:<span class="number">44</span>:<span class="number">05</span> <span class="number">2021</span></span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     false</span><br><span class="line"> containerd:</span><br><span class="line">  Version:          <span class="number">1.4</span>.<span class="number">12</span></span><br><span class="line">  GitCommit:        <span class="number">7</span>b11cfaabd73bb80907dd23182b9347b4245eb5d</span><br><span class="line"> runc:</span><br><span class="line">  Version:          <span class="number">1.0</span>.<span class="number">2</span></span><br><span class="line">  GitCommit:        v1.<span class="number">0.2</span><span class="literal">-0</span><span class="literal">-g52b36a2</span></span><br><span class="line"> docker<span class="literal">-init</span>:</span><br><span class="line">  Version:          <span class="number">0.19</span>.<span class="number">0</span></span><br><span class="line">  GitCommit:        de40ad0</span><br></pre></td></tr></table></figure>





<h2 id="2-2-使用二进制文件部署"><a href="#2-2-使用二进制文件部署" class="headerlink" title="2.2 使用二进制文件部署"></a>2.2 使用二进制文件部署</h2><blockquote>
<p>官方不建议此种部署方式，主因为不能自动更新，在条件有限制的情况下使用。</p>
</blockquote>
<p>二进制安装参考网址：<a href="https://docs.docker.com/engine/install/binaries/">https://docs.docker.com/engine/install/binaries/</a></p>
<p><img src="/images/Docker/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7Docker%E7%94%9F%E6%80%81%E6%9E%B6%E6%9E%84%E5%8F%8A%E9%83%A8%E7%BD%B2.assets/image-20220118185625614.png" alt="image-20220118185625614"></p>
<p><img src="/images/Docker/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7Docker%E7%94%9F%E6%80%81%E6%9E%B6%E6%9E%84%E5%8F%8A%E9%83%A8%E7%BD%B2.assets/image-20220118185711358.png" alt="image-20220118185711358"></p>
<p><img src="/images/Docker/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7Docker%E7%94%9F%E6%80%81%E6%9E%B6%E6%9E%84%E5%8F%8A%E9%83%A8%E7%BD%B2.assets/image-20220118185814368.png" alt="image-20220118185814368"></p>
<p><img src="/images/Docker/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7Docker%E7%94%9F%E6%80%81%E6%9E%B6%E6%9E%84%E5%8F%8A%E9%83%A8%E7%BD%B2.assets/image-20220118185911155.png" alt="image-20220118185911155"></p>
<p><img src="/images/Docker/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7Docker%E7%94%9F%E6%80%81%E6%9E%B6%E6%9E%84%E5%8F%8A%E9%83%A8%E7%BD%B2.assets/image-20220118190235182.png" alt="image-20220118190235182"></p>
<p><img src="/images/Docker/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7Docker%E7%94%9F%E6%80%81%E6%9E%B6%E6%9E%84%E5%8F%8A%E9%83%A8%E7%BD%B2.assets/image-20220118190327846.png" alt="image-20220118190327846"></p>
<p><img src="/images/Docker/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7Docker%E7%94%9F%E6%80%81%E6%9E%B6%E6%9E%84%E5%8F%8A%E9%83%A8%E7%BD%B2.assets/image-20220118190507974.png" alt="image-20220118190507974"></p>
<p><img src="/images/Docker/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7Docker%E7%94%9F%E6%80%81%E6%9E%B6%E6%9E%84%E5%8F%8A%E9%83%A8%E7%BD%B2.assets/image-20220118190622614.png" alt="image-20220118190622614"></p>
<p><img src="/images/Docker/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7Docker%E7%94%9F%E6%80%81%E6%9E%B6%E6%9E%84%E5%8F%8A%E9%83%A8%E7%BD%B2.assets/image-20220118190654730.png" alt="image-20220118190654730"></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">获取二进制文件，此文件中包含dockerd与docker <span class="number">2</span>个文件。</span><br><span class="line"><span class="comment"># wget https://download.docker.com/linux/static/stable/x86_64/docker-20.10.9.tgz</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">解压下载的文件</span><br><span class="line"><span class="comment"># tar xf docker-20.10.9.tgz</span></span><br><span class="line">查看解压出的目录</span><br><span class="line"><span class="comment"># ls docker</span></span><br><span class="line">containerd       containerd<span class="literal">-shim</span><span class="literal">-runc</span><span class="literal">-v2</span>  docker   docker<span class="literal">-init</span>   runc</span><br><span class="line">containerd<span class="literal">-shim</span>  ctr                      dockerd  docker<span class="literal">-proxy</span></span><br></pre></td></tr></table></figure>





<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">安装解压后的所有二进制文件</span><br><span class="line"><span class="comment"># cp docker/* /usr/bin/</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">运行Daemon</span><br><span class="line"><span class="comment"># dockerd &amp;</span></span><br><span class="line"></span><br><span class="line">会有大量的信息输出，停止后，直接回车即可使用。</span><br></pre></td></tr></table></figure>



<blockquote>
<p>如果您需要使用其他选项启动守护程序，请相应地修改上述命令或创建并编辑文件<code>/etc/docker/daemon.json</code> 以添加自定义配置选项。</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">确认是否可以使用docker客户端命令</span><br><span class="line"><span class="comment"># which docker</span></span><br><span class="line">/usr/bin/docker</span><br><span class="line"></span><br><span class="line">使用二进制安装的docker客户端</span><br><span class="line"><span class="comment"># docker version</span></span><br><span class="line">Client:</span><br><span class="line"> Version:           <span class="number">20.10</span>.<span class="number">9</span></span><br><span class="line"> API version:       <span class="number">1.41</span></span><br><span class="line"> Go version:        go1.<span class="number">16.8</span></span><br><span class="line"> Git commit:        c2ea9bc</span><br><span class="line"> Built:             Mon Oct  <span class="number">4</span> <span class="number">16</span>:<span class="number">03</span>:<span class="number">22</span> <span class="number">2021</span></span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Context:           default</span><br><span class="line"> Experimental:      true</span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          <span class="number">20.10</span>.<span class="number">9</span></span><br><span class="line">  API version:      <span class="number">1.41</span> (minimum version <span class="number">1.12</span>)</span><br><span class="line">  Go version:       go1.<span class="number">16.8</span></span><br><span class="line">  Git commit:       <span class="number">79</span>ea9d3</span><br><span class="line">  Built:            Mon Oct  <span class="number">4</span> <span class="number">16</span>:<span class="number">07</span>:<span class="number">30</span> <span class="number">2021</span></span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     false</span><br><span class="line"> containerd:</span><br><span class="line">  Version:          v1.<span class="number">4.11</span></span><br><span class="line">  GitCommit:        <span class="number">5</span>b46e404f6b9f661a205e28d59c982d3634148f8</span><br><span class="line"> runc:</span><br><span class="line">  Version:          <span class="number">1.0</span>.<span class="number">2</span></span><br><span class="line">  GitCommit:        v1.<span class="number">0.2</span><span class="literal">-0</span><span class="literal">-g52b36a2d</span></span><br><span class="line"> docker<span class="literal">-init</span>:</span><br><span class="line">  Version:          <span class="number">0.19</span>.<span class="number">0</span></span><br><span class="line">  GitCommit:        de40ad0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>应用部署的演变之路</title>
    <url>/2023/07/26/%E4%BA%91%E5%8E%9F%E7%94%9F/Docker/%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E7%9A%84%E6%BC%94%E5%8F%98%E4%B9%8B%E8%B7%AF/</url>
    <content><![CDATA[<h1 id="一、应用程序部署痛点"><a href="#一、应用程序部署痛点" class="headerlink" title="一、应用程序部署痛点"></a>一、应用程序部署痛点</h1><h2 id="1-1-应用程序部署流程"><a href="#1-1-应用程序部署流程" class="headerlink" title="1.1 应用程序部署流程"></a>1.1 应用程序部署流程</h2><p><strong>举例：部署一个JAVA编程语言开发的Web应用，以War包放入Tomcat方式部署。</strong></p>
<ul>
<li>部署过程如下：<ul>
<li>服务器配置运行环境:JAVA代码运行环境，例如JDK或JRE</li>
<li>服务器上安装Tomcat web中间件，用于运行War包</li>
<li>把JAVA Web对应的War包放置于Tomcat对应目录</li>
<li>在服务器上启动Tomcat应用</li>
<li>可选：涉及数据库（MySQL）或缓存系统(Redis)等都需要逐一部署。</li>
</ul>
</li>
</ul>
<h2 id="1-2-应用程序扩缩容"><a href="#1-2-应用程序扩缩容" class="headerlink" title="1.2 应用程序扩缩容"></a>1.2 应用程序扩缩容</h2><ul>
<li>涉及多台服务器部署相同的上述环境</li>
<li>痛点：上述环境部署要重新实施一遍，较浪费人力与物力成本</li>
</ul>
<h2 id="1-3-应用程序多环境部署"><a href="#1-3-应用程序多环境部署" class="headerlink" title="1.3 应用程序多环境部署"></a>1.3 应用程序多环境部署</h2><ul>
<li>环境：本地测试环境、预发布环境、生产环境</li>
<li>在本地测试环境运行没有问题，但在预发布环境中出现了问题，甚至上面2种环境都没有问题，到了生产环境就有问题了。</li>
<li>需求：一次成功，可到处运行。</li>
</ul>
<h1 id="二、-计算资源应用演进过程"><a href="#二、-计算资源应用演进过程" class="headerlink" title="二、 计算资源应用演进过程"></a>二、 计算资源应用演进过程</h1><h2 id="2-1-使用物理服务器痛点"><a href="#2-1-使用物理服务器痛点" class="headerlink" title="2.1 使用物理服务器痛点"></a>2.1 使用物理服务器痛点</h2><p><img src="/images/Docker/%E5%BA%94%E7%94%A8%EF%BC%88APP%EF%BC%89%E9%83%A8%E7%BD%B2%E5%AE%B9%E5%99%A8%E5%8C%96%E6%BC%94%E8%BF%9B%E4%B9%8B%E8%B7%AF.assets/image-20220118161531257.png" alt="image-20220118161531257"></p>
<ul>
<li><p>从物理服务器自身管理角度</p>
<ul>
<li>物理服务器环境部署人力成本大，特别是在自动化手段不足的情况下，依靠人肉运维的方式解决。</li>
<li>当物理服务器出现宕机后，服务器重启时间过长，短则1-2分钟，长则3-5分钟，有背于服务器在线时长达到99.999999999%标准的要求</li>
<li>物理服务器在应用程序运行期间硬件出现故障，解决较麻烦</li>
<li>物理服务器计算资源不能有效调度使用，无法发挥其充足资源的优势</li>
</ul>
</li>
<li><p>从物理服务器部署应用程序角度</p>
<ul>
<li>物理服务器环境部署浪费时间，没有自动化运维手段，时间是成倍增加的</li>
<li>在物理服务器上进行应用程序配置变更，需要重新实施前述步骤</li>
</ul>
</li>
</ul>
<h2 id="2-2-使用虚拟机优点与缺点"><a href="#2-2-使用虚拟机优点与缺点" class="headerlink" title="2.2 使用虚拟机优点与缺点"></a>2.2 使用虚拟机优点与缺点</h2><p><img src="/images/Docker/%E5%BA%94%E7%94%A8%EF%BC%88APP%EF%BC%89%E9%83%A8%E7%BD%B2%E5%AE%B9%E5%99%A8%E5%8C%96%E6%BC%94%E8%BF%9B%E4%B9%8B%E8%B7%AF.assets/image-20220118161210084.png" alt="image-20220118161210084"></p>
<h3 id="2-2-1-使用虚拟机优秀点"><a href="#2-2-1-使用虚拟机优秀点" class="headerlink" title="2.2.1 使用虚拟机优秀点"></a>2.2.1 使用虚拟机优秀点</h3><ul>
<li><p>从虚拟机本身管理角度</p>
<ul>
<li>虚拟机较物理服务器轻量，可借助虚拟机模板实现虚拟机快捷生成及应用</li>
<li>虚拟机中部署应用与物理服务器一样可控性强，且当虚拟机出现故障时，可直接使用新的虚拟机代替</li>
<li>在物理服务器中使用虚拟机可高效使用物理服务器的资源</li>
<li>虚拟机与物理服务器一样可达到良好的应用程序运行环境的隔离</li>
</ul>
</li>
<li><p>从在虚拟机中部署应用程序角度</p>
<ul>
<li>在虚拟机中部署应用，容易扩容及缩容实现</li>
<li>与物理服务器相比较，当部署应用程序的虚拟机出现宕机时，可以快速启动，时间通常可达秒级，10秒或20秒即可启动，应用程序可以继续提供服务</li>
<li>应用程序迁移方便</li>
</ul>
</li>
</ul>
<h3 id="2-2-2-使用虚拟机缺点"><a href="#2-2-2-使用虚拟机缺点" class="headerlink" title="2.2.2 使用虚拟机缺点"></a>2.2.2 使用虚拟机缺点</h3><ul>
<li>虚拟机管理软件本身占用物理服务器计算资源较多，例如:VMware Workstation Pro就会占用物理服务器大量资源，所以一般在企业应用中使用KVM虚拟机较多。</li>
<li>虚拟机底层硬件消耗物理服务器资源较大，例如：虚拟机操作系统硬盘，会直接占用大量物理服务器硬盘空间</li>
<li>相较于容器技术，虚拟机启动时间过长，容器启动可按毫秒级计算</li>
<li>虚拟机对物理服务器硬件资源调用添加了调链条，存在浪费时间的现象，所以虚拟机性能弱于物理服务器</li>
<li>由于应用程序是直接部署在虚拟机硬盘上，应用程序迁移时，需要连同虚拟机硬盘中的操作系统一同迁移，会导致迁移文件过大，浪费更多的存储空间及时间消耗过长</li>
</ul>
<h2 id="2-3-使用容器的优点与缺点"><a href="#2-3-使用容器的优点与缺点" class="headerlink" title="2.3 使用容器的优点与缺点"></a>2.3 使用容器的优点与缺点</h2><p><img src="/images/Docker/%E5%BA%94%E7%94%A8%EF%BC%88APP%EF%BC%89%E9%83%A8%E7%BD%B2%E5%AE%B9%E5%99%A8%E5%8C%96%E6%BC%94%E8%BF%9B%E4%B9%8B%E8%B7%AF.assets/image-20220118161301903.png" alt="image-20220118161301903"></p>
<h3 id="2-3-1-使用容器的优点"><a href="#2-3-1-使用容器的优点" class="headerlink" title="2.3.1 使用容器的优点"></a>2.3.1 使用容器的优点</h3><ul>
<li>不需要为容器安装操作系统，可以节约大量时间</li>
<li>不需要通过手动的方式在容器中部署应用程序的运行环境，直接部署应用就可以了</li>
<li>不需要管理容器网络，以自动调用的方式访问容器中应用提供的服务</li>
<li>方便分享与构建应用容器，一次构建，到处运行</li>
<li>毫秒级启动</li>
<li>容器可直接使用物理服务器硬件资源，物理服务器硬件资源利用率高，性能较好。</li>
</ul>
<h3 id="2-3-2-使用容器的缺点"><a href="#2-3-2-使用容器的缺点" class="headerlink" title="2.3.2 使用容器的缺点"></a>2.3.2 使用容器的缺点</h3><p>对于对使用物理服务器、虚拟机已成为习惯的小伙伴来说，容器化可控性不强，最直观的就是对容器管理访问，总想按物理服务器或虚拟机的方式去管理它，其实容器与物理服务器、虚拟机管理方式上有着本质的区别的，最好不要管理。</p>
<h1 id="三、-What-is-a-Container"><a href="#三、-What-is-a-Container" class="headerlink" title="三、 What is a Container?"></a>三、 What is a Container?</h1><h2 id="3-1-容器定义"><a href="#3-1-容器定义" class="headerlink" title="3.1 容器定义"></a>3.1 容器定义</h2><p><img src="/images/Docker/%E5%BA%94%E7%94%A8%EF%BC%88APP%EF%BC%89%E9%83%A8%E7%BD%B2%E5%AE%B9%E5%99%A8%E5%8C%96%E6%BC%94%E8%BF%9B%E4%B9%8B%E8%B7%AF.assets/image-20220118161407959.png" alt="image-20220118161407959"></p>
<ul>
<li>虚拟机<ul>
<li>采用虚拟化技术手段实现物理服务器计算资源打包的方式，为应用程序提供类物理服务器运行环境</li>
<li>能够实现应用程序与应用程序之间的隔离</li>
<li>使用自动化技术部署应用程序及应用程序迁移较方便</li>
<li>可横向扩展</li>
</ul>
</li>
<li>容器<ul>
<li>容器是轻量级物理服务器计算资源的打包方式，即轻量级虚拟机，为应用程序提供类虚拟机运行环境。</li>
<li>可在物理服务器中实现高密度部署</li>
</ul>
</li>
</ul>
<ul>
<li>容器与虚拟机对比</li>
</ul>
<table>
<thead>
<tr>
<th>对比属性</th>
<th>容器（Container）</th>
<th>虚拟机（VM）</th>
</tr>
</thead>
<tbody><tr>
<td>隔离性</td>
<td>基于进程隔离</td>
<td>提供资源的完全隔离</td>
</tr>
<tr>
<td>启动时间</td>
<td>毫秒级或秒级</td>
<td>秒级或分钟级</td>
</tr>
<tr>
<td>内核</td>
<td>共用宿主机内核</td>
<td>使用独立内核</td>
</tr>
<tr>
<td>占用资源</td>
<td>MB级</td>
<td>GB级</td>
</tr>
<tr>
<td>系统支持容量（同级别）</td>
<td>支持上千个容器</td>
<td>几十台虚拟机</td>
</tr>
</tbody></table>
<h2 id="3-2-容器功能"><a href="#3-2-容器功能" class="headerlink" title="3.2 容器功能"></a>3.2 容器功能</h2><ul>
<li><p>安装容器管理工具，例如Docker,Containerd等，把应用以容器化的方式运行</p>
</li>
<li><p>应用在自己的容器中运行，实现应用程序间隔离</p>
</li>
<li><p>应用程序运行的容器可以生成应用程序模板文件，即容器镜像（Image），其不可变，即为云原生代表技术基础设施不可变,且可以在其它的物理服务器中运行。</p>
</li>
</ul>
<h2 id="3-3-容器解决了什么问题"><a href="#3-3-容器解决了什么问题" class="headerlink" title="3.3 容器解决了什么问题"></a>3.3 容器解决了什么问题</h2><ul>
<li>快速交付和部署应用 (镜像与容器)</li>
<li>资源的高效利用和隔离 (在物理机上实现高密度部署)</li>
<li>便捷迁移和扩缩容(一次构建，多处运行)</li>
</ul>
<h1 id="四、使用容器步骤"><a href="#四、使用容器步骤" class="headerlink" title="四、使用容器步骤"></a>四、使用容器步骤</h1><ul>
<li><p>安装容器管理工具 </p>
<ul>
<li>Docker   (Docker公司)</li>
<li>Containerd  (2017年docker捐给CNCF云原生计算基金会)</li>
<li>Pouch  (阿里云)</li>
</ul>
</li>
<li><p>搜索/下载容器镜像(Image)</p>
</li>
<li><p>使用容器镜像生成容器(容器镜像中的应用程序启动)</p>
</li>
<li><p>终端用户(互联网用户或其它应用程序)访问</p>
</li>
<li><p>迁移部署(可直接把正在运行的容器打包成新的容器镜像，在其它主机上运行即可。)</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>容器技术所涉及Linux内核关键技术</title>
    <url>/2023/07/28/%E4%BA%91%E5%8E%9F%E7%94%9F/Docker/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF%E6%89%80%E6%B6%89%E5%8F%8ALinux%E5%86%85%E6%A0%B8%E5%85%B3%E9%94%AE%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<h1 id="一、容器技术前世今生"><a href="#一、容器技术前世今生" class="headerlink" title="一、容器技术前世今生"></a>一、容器技术前世今生</h1><h2 id="1-1-1979年-—-chroot"><a href="#1-1-1979年-—-chroot" class="headerlink" title="1.1 1979年 — chroot"></a>1.1 1979年 — chroot</h2><ul>
<li>容器技术的概念可以追溯到1979年的UNIX chroot。</li>
<li>它是一套“UNIX操作系统”系统，旨在将其root目录及其它子目录变更至文件系统内的新位置，且只接受特定进程的访问。</li>
<li>这项功能的设计目的在于为每个进程提供一套隔离化磁盘空间。</li>
<li>1982年其被添加至BSD当中。</li>
</ul>
<h2 id="1-2-2000年-—-FreeBSD-Jails"><a href="#1-2-2000年-—-FreeBSD-Jails" class="headerlink" title="1.2 2000年 — FreeBSD Jails"></a>1.2 2000年 — FreeBSD Jails</h2><ul>
<li>FreeBSD Jails是由Derrick T. Woolworth于2000年在FreeBSD研发协会中构建而成的早期容器技术之一。</li>
<li>这是一套“操作系统”系统，与chroot的定位类似，不过其中包含有其它进程沙箱机制以对文件系统、用户及网络等资源进行隔离。</li>
<li>通过这种方式，它能够为每个Jail、定制化软件安装包乃至配置方案等提供一个对应的IP地址。</li>
</ul>
<h2 id="1-3-2001年-—-Linux-VServer"><a href="#1-3-2001年-—-Linux-VServer" class="headerlink" title="1.3 2001年 — Linux VServer"></a>1.3 2001年 — Linux VServer</h2><ul>
<li>Linux VServer属于另一种jail机制，其能够被用于保护计算机系统之上各分区资源的安全(包括文件系统、CPU时间、网络地址以及内存等)。</li>
<li>每个分区被称为一套安全背景(security context)，而其中的虚拟化系统则被称为一套虚拟私有服务器。</li>
</ul>
<h2 id="1-4-2004年-—-Solaris容器"><a href="#1-4-2004年-—-Solaris容器" class="headerlink" title="1.4 2004年 — Solaris容器"></a>1.4 2004年 — Solaris容器</h2><ul>
<li>Solaris容器诞生之时面向x86与SPARC系统架构，其最初亮相于2004年2月的Solaris 10 Build 51 beta当中，随后于2005年正式登陆Solaris 10的完整版本。</li>
<li>Solaris容器相当于将系统资源控制与由分区提供的边界加以结合。各分区立足于单一操作系统实例之内以完全隔离的虚拟服务器形式运行。</li>
</ul>
<h2 id="1-5-2005年-—-OpenVZ"><a href="#1-5-2005年-—-OpenVZ" class="headerlink" title="1.5 2005年 — OpenVZ"></a>1.5 2005年 — OpenVZ</h2><ul>
<li>OpenVZ与Solaris容器非常相似，且使用安装有补丁的Linux内核以实现虚拟化、隔离能力、资源管理以及检查点交付。</li>
<li>每套OpenVZ容器拥有一套隔离化文件系统、用户与用户群组、一套进程树、网络、设备以及IPC对象。</li>
</ul>
<h2 id="1-6-2006年-—-Process容器"><a href="#1-6-2006年-—-Process容器" class="headerlink" title="1.6 2006年 — Process容器"></a>1.6 2006年 — Process容器</h2><ul>
<li>Process容器于2006年由谷歌公司推出，旨在对一整套进程集合中的资源使用量(包括CPU、内存、磁盘I/O以及网络等等)加以限制、分配与隔离。</li>
<li>此后其被更名为Control Groups(即控制组)，从而避免其中的“容器”字眼与Linux内核2.6.24中的另一术语出现冲突。这表明了谷歌公司率先重视容器技术的敏锐眼光以及为其做出的突出贡献。</li>
</ul>
<h2 id="1-7-2007年-—-Control-Groups"><a href="#1-7-2007年-—-Control-Groups" class="headerlink" title="1.7 2007年 — Control Groups"></a>1.7 2007年 — Control Groups</h2><p>Control Groups也就是谷歌实现的cgroups，其于2007年被添加至Linux内核当中。</p>
<h2 id="1-8-2008年-—-LXC"><a href="#1-8-2008年-—-LXC" class="headerlink" title="1.8 2008年 — LXC"></a>1.8 2008年 — LXC</h2><ul>
<li>LXC指代的是Linux Containers</li>
<li>是第一套完整的Linux容器管理实现方案。</li>
<li>其功能通过cgroups以及Linux namespaces实现。</li>
<li>LXC通过liblxc库进行交付，并提供可与Python3、Python2、Lua、Go、Ruby以及Haskell等语言相对接的API。</li>
<li>相较于其它容器技术，LXC能够在无需任何额外补丁的前提下运行在原版Linux内核之上。</li>
</ul>
<h2 id="1-9-2011年-—-Warden"><a href="#1-9-2011年-—-Warden" class="headerlink" title="1.9 2011年 — Warden"></a>1.9 2011年 — Warden</h2><ul>
<li>Warden由CloudFoundry公司于2011年所建立，其利用LXC作为初始阶段，随后又将其替换为自家实现方案。</li>
<li>与LXC不同，Warden并不会与Linux紧密耦合。相反，其能够运行在任意能够提供多种隔离环境方式的操作系统之上。Warden以后台进程方式运行并提供API以实现容器管理。</li>
</ul>
<h2 id="1-10-2013年-—-LMCTFY"><a href="#1-10-2013年-—-LMCTFY" class="headerlink" title="1.10 2013年 — LMCTFY"></a>1.10 2013年 — LMCTFY</h2><ul>
<li>Lmctfy代表的是“Let Me Contain That For You(帮你实现容器化)”。它其实属于谷歌容器技术堆栈的开源版本，负责提供Linux应用程序容器。谷歌公司在该项目的起步阶段宣称其能够提供值得信赖的性能表现、高资源利用率、共享资源机制、充裕的发展空间以及趋近于零的额外资源消耗。</li>
<li>2013年10月lmctfy的首个版本正式推出，谷歌公司在2015年决定将lmctfy的核心概念与抽象机制转化为libcontainer。在失去了主干之后，如今lmctfy已经失去一切积极的发展势头。</li>
</ul>
<p>　　Libcontainer项目最初由Docker公司建立，如今已经被归入开放容器基金会的管辖范畴。</p>
<h2 id="1-11-2013年-Docker"><a href="#1-11-2013年-Docker" class="headerlink" title="1.11 2013年-Docker"></a>1.11 2013年-Docker</h2><ul>
<li>在2013年Docker刚发布的时候，它是一款基于LXC的开源容器管理引擎。</li>
<li>把LXC复杂的容器创建与使用方式简化为Docker自己的一套命令体系。</li>
<li>随着Docker的不断发展，它开始有了更为远大的目标，那就是反向定义容器的实现标准，将底层实现都抽象化到Libcontainer的接口。这就意味着，底层容器的实现方式变成了一种可变的方案，无论是使用namespace、cgroups技术抑或是使用systemd等其他方案，只要实现了Libcontainer定义的一组接口，Docker都可以运行。这也为Docker实现全面的跨平台带来了可能。</li>
</ul>
<h1 id="二、NameSpace"><a href="#二、NameSpace" class="headerlink" title="二、NameSpace"></a>二、NameSpace</h1><h2 id="2-1-NameSpace介绍"><a href="#2-1-NameSpace介绍" class="headerlink" title="2.1 NameSpace介绍"></a>2.1 NameSpace介绍</h2><ul>
<li>很多编程语言都包含了命名空间的概念，我们可以认为命名空间是一种封装，封装本身实际上实现了代码的隔离</li>
</ul>
<ul>
<li>在操作系统中命名空间命名空间提供的是系统资源的隔离，其中系统资源包括了：进程、网络、文件系统……</li>
</ul>
<ul>
<li>实际上linux系统实现命名空间主要目的之一就是为了实现轻量级虚拟化服务，也就是我们说的容器，在同一个命名空间下的进程可以感知彼此的变化，而对其他命名空间的进程一无所知，这样就可以让容器中的进程产生一个错觉，仿佛它自己置身于一个独立的系统环境当中，以此达到独立和隔离的目的。</li>
</ul>
<h2 id="2-2-Linux系统中NameSpace分类"><a href="#2-2-Linux系统中NameSpace分类" class="headerlink" title="2.2 Linux系统中NameSpace分类"></a>2.2 Linux系统中NameSpace分类</h2><table>
<thead>
<tr>
<th align="center">命名空间</th>
<th align="center">描述</th>
<th align="center">作用</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">进程命名空间</td>
<td align="center">隔离进程ID</td>
<td align="center">Linux通过命名空间管理进程号，同一个进程，在不同的命名空间进程号不同</td>
<td align="center">进程命名空间是一个父子结构，子空间对于父空间可见</td>
</tr>
<tr>
<td align="center">网络命名空间</td>
<td align="center">隔离网络设备、协议栈、端口等</td>
<td align="center">通过网络命名空间，实现网络隔离</td>
<td align="center">docker采用虚拟网络设备，将不同命名空间的网络设备连接到一起</td>
</tr>
<tr>
<td align="center">IPC命名空间</td>
<td align="center">隔离进程间通信</td>
<td align="center">进程间交互方法</td>
<td align="center">PID命名空间和IPC命名空间可以组合起来用，同一个IPC名字空间内的进程可以彼此看见，允许进行交互，不同空间进程无法交互</td>
</tr>
<tr>
<td align="center">挂载命名空间</td>
<td align="center">隔离挂载点</td>
<td align="center">隔离文件目录</td>
<td align="center">进程运行时可以将挂载点与系统分离，使用这个功能时，我们可以达到 chroot 的功能，而在安全性方面比 chroot 更高</td>
</tr>
<tr>
<td align="center">UTS命名空间</td>
<td align="center">隔离Hostname和NIS域名</td>
<td align="center">让容器拥有独立的主机名和域名，从而让容器看起来像个独立的主机</td>
<td align="center">目的是独立出主机名和网络信息服务（NIS）</td>
</tr>
<tr>
<td align="center">用户命名空间</td>
<td align="center">隔离用户和group ID</td>
<td align="center">每个容器内上的用户跟宿主主机上不在一个命名空间</td>
<td align="center">同进程 ID 一样，用户 ID 和组 ID 在命名空间内外是不一样的，并且在不同命名空间内可以存在相同的 ID</td>
</tr>
</tbody></table>
<h2 id="2-3-NameSpace应用案例"><a href="#2-3-NameSpace应用案例" class="headerlink" title="2.3 NameSpace应用案例"></a>2.3 NameSpace应用案例</h2><blockquote>
<p>以net namespace为例</p>
</blockquote>
<ul>
<li>在 Linux 中，网络命名空间可以被认为是隔离的拥有单独网络栈（网卡、路由转发表、iptables）的环境。网络命名空间经常用来隔离网络设备和服务，只有拥有同样网络命名空间的设备，才能看到彼此。</li>
<li>从逻辑上说，网络命名空间是网络栈的副本，拥有自己的网络设备、路由选择表、邻接表、Netfilter表、网络套接字、网络procfs条目、网络sysfs条目和其他网络资源。</li>
<li>从系统的角度来看，当通过clone()系统调用创建新进程时，传递标志CLONE_NEWNET将在新进程中创建一个全新的网络命名空间。</li>
<li>从用户的角度来看，我们只需使用工具ip（package is iproute2）来创建一个新的持久网络命名空间。</li>
</ul>
<p><img src="/images/Docker/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF%E6%89%80%E6%B6%89%E5%8F%8ALinux%E5%86%85%E6%A0%B8%E5%85%B3%E9%94%AE%E6%8A%80%E6%9C%AF.assets/image-20220111132707215.png" alt="image-20220111132707215"></p>
<h3 id="2-3-1-创建net命名空间"><a href="#2-3-1-创建net命名空间" class="headerlink" title="2.3.1 创建net命名空间"></a>2.3.1 创建net命名空间</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">创建名称为lixiang的网络命名空间</span><br><span class="line"><span class="comment"># ip netns add lixiang</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">查看已创建的网络命名空间</span><br><span class="line"><span class="comment"># ip netns ls</span></span><br><span class="line">lixiang</span><br></pre></td></tr></table></figure>





<h3 id="2-3-2-删除net命名空间"><a href="#2-3-2-删除net命名空间" class="headerlink" title="2.3.2 删除net命名空间"></a>2.3.2 删除net命名空间</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">删除已创建的网络命名空间</span><br><span class="line"><span class="comment"># ip netns delete lixiang</span></span><br></pre></td></tr></table></figure>



<h3 id="2-3-3-在net命名空间中执行命令"><a href="#2-3-3-在net命名空间中执行命令" class="headerlink" title="2.3.3 在net命名空间中执行命令"></a>2.3.3 在net命名空间中执行命令</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">在网络命名空间中执行bash命令，如果想退出，需要使用<span class="keyword">exit</span></span><br><span class="line"><span class="comment"># ip netns exec lixiang bash</span></span><br></pre></td></tr></table></figure>



<h3 id="2-3-4-在net命令空间中执行查看网络连接-网卡-命令"><a href="#2-3-4-在net命令空间中执行查看网络连接-网卡-命令" class="headerlink" title="2.3.4 在net命令空间中执行查看网络连接(网卡)命令"></a>2.3.4 在net命令空间中执行查看网络连接(网卡)命令</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">在网络命名空间中查看网络命名空间中的网卡信息</span><br><span class="line"><span class="comment"># ip link</span></span><br><span class="line"><span class="number">1</span>: lo: &lt;LOOPBACK&gt; mtu <span class="number">65536</span> qdisc noop state DOWN mode DEFAULT <span class="built_in">group</span> default qlen <span class="number">1000</span></span><br><span class="line">    link/loopback <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> brd <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br></pre></td></tr></table></figure>





<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">在Linux主机系统中查看</span><br><span class="line"><span class="comment"># ip netns exec lixiang ip link list</span></span><br><span class="line"><span class="number">1</span>: lo: &lt;LOOPBACK&gt; mtu <span class="number">65536</span> qdisc noop state DOWN mode DEFAULT <span class="built_in">group</span> default qlen <span class="number">1000</span></span><br><span class="line">    link/loopback <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> brd <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br></pre></td></tr></table></figure>





<h3 id="2-3-5-退出当前的net命名空间"><a href="#2-3-5-退出当前的net命名空间" class="headerlink" title="2.3.5 退出当前的net命名空间"></a>2.3.5 退出当前的net命名空间</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">退出已进入的网络命名空间</span><br><span class="line"><span class="comment"># exit</span></span><br><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure>



<h3 id="2-3-6-在net命名空间中执行多条命令"><a href="#2-3-6-在net命名空间中执行多条命令" class="headerlink" title="2.3.6 在net命名空间中执行多条命令"></a>2.3.6 在net命名空间中执行多条命令</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">在网络命名空间中查看路由表</span><br><span class="line"><span class="comment"># route -n</span></span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">在网络命名空间中查看防火墙规则</span><br><span class="line"><span class="comment"># iptables -t nat -nL</span></span><br><span class="line">Chain PREROUTING (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line"></span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line"></span><br><span class="line">Chain POSTROUTING (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination</span><br></pre></td></tr></table></figure>



<h3 id="2-3-7-创建虚拟网卡"><a href="#2-3-7-创建虚拟网卡" class="headerlink" title="2.3.7 创建虚拟网卡"></a>2.3.7 创建虚拟网卡</h3><blockquote>
<p>同时创建一对虚拟网卡</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">创建虚拟网卡对</span><br><span class="line"><span class="comment"># ip link add veth0 type veth peer name veth1</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">在物理机上查看</span><br><span class="line"><span class="comment"># ip a s</span></span><br><span class="line">......</span><br><span class="line"><span class="number">10</span>: veth1@veth0: &lt;BROADCAST,MULTICAST,M<span class="literal">-DOWN</span>&gt; mtu <span class="number">1500</span> qdisc noop state DOWN <span class="built_in">group</span> default qlen <span class="number">1000</span></span><br><span class="line">    link/ether de:<span class="number">44</span>:f8:b7:<span class="number">12</span>:<span class="number">65</span> brd ff:ff:ff:ff:ff:ff</span><br><span class="line"><span class="number">11</span>: veth0@veth1: &lt;BROADCAST,MULTICAST,M<span class="literal">-DOWN</span>&gt; mtu <span class="number">1500</span> qdisc noop state DOWN <span class="built_in">group</span> default qlen <span class="number">1000</span></span><br><span class="line">    link/ether <span class="number">46</span>:<span class="number">5</span>e:<span class="number">89</span>:<span class="number">8</span>c:cb:b3 brd ff:ff:ff:ff:ff:ff</span><br></pre></td></tr></table></figure>



<h3 id="2-3-8-迁移虚拟网卡到命名空间中"><a href="#2-3-8-迁移虚拟网卡到命名空间中" class="headerlink" title="2.3.8 迁移虚拟网卡到命名空间中"></a>2.3.8 迁移虚拟网卡到命名空间中</h3><blockquote>
<p>这两个网卡还都属于“default”或“global”命名空间，和物理网卡一样。把其中一个网卡转移到命名空间lixiang中。</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">把创建的veth1网卡添加到lixiang网络命名空间中</span><br><span class="line"><span class="comment"># ip link set veth1 netns lixiang</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">在Linux系统命令行查看网络命名空间中的网络</span><br><span class="line"><span class="comment"># ip netns exec lixiang ip link</span></span><br><span class="line"><span class="number">1</span>: lo: &lt;LOOPBACK&gt; mtu <span class="number">65536</span> qdisc noop state DOWN mode DEFAULT <span class="built_in">group</span> default qlen <span class="number">1000</span></span><br><span class="line">    link/loopback <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> brd <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">10</span>: veth1@if11: &lt;BROADCAST,MULTICAST&gt; mtu <span class="number">1500</span> qdisc noop state DOWN mode DEFAULT <span class="built_in">group</span> default qlen <span class="number">1000</span></span><br><span class="line">    link/ether de:<span class="number">44</span>:f8:b7:<span class="number">12</span>:<span class="number">65</span> brd ff:ff:ff:ff:ff:ff link<span class="literal">-netnsid</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>



<h3 id="2-3-9-命名空间中迁出虚拟网卡"><a href="#2-3-9-命名空间中迁出虚拟网卡" class="headerlink" title="2.3.9 命名空间中迁出虚拟网卡"></a>2.3.9 命名空间中迁出虚拟网卡</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">在Linux系统命令行把虚拟网卡veth1从网络命名空间删除</span><br><span class="line"><span class="comment"># ip netns exec lixiang ip link delete veth1</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">在Linux系统命令行查看结果</span><br><span class="line"><span class="comment"># ip netns exec lixiang ip link</span></span><br><span class="line"><span class="number">1</span>: lo: &lt;LOOPBACK&gt; mtu <span class="number">65536</span> qdisc noop state DOWN mode DEFAULT <span class="built_in">group</span> default qlen <span class="number">1000</span></span><br><span class="line">    link/loopback <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> brd <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br></pre></td></tr></table></figure>



<h3 id="2-3-10-配置虚拟网卡IP地址"><a href="#2-3-10-配置虚拟网卡IP地址" class="headerlink" title="2.3.10 配置虚拟网卡IP地址"></a>2.3.10 配置虚拟网卡IP地址</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">再次创建虚拟网卡，添加到lixiang网络命名空间，并设置IP地址</span><br><span class="line"><span class="comment"># ip link add veth0 type veth peer name veth1</span></span><br><span class="line"><span class="comment"># ip link set veth1 netns lixiang</span></span><br><span class="line"><span class="comment"># ip netns exec lixiang ip addr add 192.168.50.2/24 dev veth1</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">在Linux系统命令行查看网络状态</span><br><span class="line"><span class="comment"># ip netns exec lixiang ip addr</span></span><br><span class="line"><span class="number">1</span>: lo: &lt;LOOPBACK&gt; mtu <span class="number">65536</span> qdisc noop state DOWN <span class="built_in">group</span> default qlen <span class="number">1000</span></span><br><span class="line">    link/loopback <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> brd <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">12</span>: veth1@if13: &lt;BROADCAST,MULTICAST&gt; mtu <span class="number">1500</span> qdisc noop state DOWN <span class="built_in">group</span> default qlen <span class="number">1000</span></span><br><span class="line">    link/ether fe:<span class="number">20</span>:<span class="built_in">ac</span>:a8:<span class="number">13</span>:<span class="number">4</span>c brd ff:ff:ff:ff:ff:ff link<span class="literal">-netnsid</span> <span class="number">0</span></span><br><span class="line">    inet <span class="number">192.168</span>.<span class="number">50.2</span>/<span class="number">24</span> scope global veth1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">启动虚拟网卡,veth1与lo全部要启动</span><br><span class="line"><span class="comment"># ip netns exec lixiang ip link set veth1 up</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ip netns exec lixiang ip link set lo up</span></span><br></pre></td></tr></table></figure>







<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">为物理机veth0添加IP地址</span><br><span class="line"></span><br><span class="line"><span class="comment"># ip a s</span></span><br><span class="line">......</span><br><span class="line"><span class="number">15</span>: veth0@if14: &lt;BROADCAST,MULTICAST&gt; mtu <span class="number">1500</span> qdisc noop state DOWN <span class="built_in">group</span> defau</span><br><span class="line">lt qlen <span class="number">1000</span></span><br><span class="line">    link/ether <span class="number">2</span>e:b4:<span class="number">40</span>:c8:<span class="number">73</span>:dc brd ff:ff:ff:ff:ff:ff link<span class="literal">-netnsid</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ip addr add 192.168.50.3/24 dev veth0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ip a s veth0</span></span><br><span class="line"><span class="number">15</span>: veth0@if14: &lt;BROADCAST,MULTICAST&gt; mtu <span class="number">1500</span> qdisc noop state DOWN <span class="built_in">group</span> default qlen <span class="number">1000</span></span><br><span class="line">    link/ether <span class="number">2</span>e:b4:<span class="number">40</span>:c8:<span class="number">73</span>:dc brd ff:ff:ff:ff:ff:ff link<span class="literal">-netnsid</span> <span class="number">0</span></span><br><span class="line">    inet <span class="number">192.168</span>.<span class="number">50.3</span>/<span class="number">24</span> scope global veth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ip link set veth0 up</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">在宿主机上ping lixiang中的veth1</span><br><span class="line"><span class="comment"># ping 192.168.50.2</span></span><br><span class="line">PING <span class="number">192.168</span>.<span class="number">50.2</span> (<span class="number">192.168</span>.<span class="number">50.2</span>) <span class="number">56</span>(<span class="number">84</span>) bytes of <span class="keyword">data</span>.</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">192.168</span>.<span class="number">50.2</span>: icmp_seq=<span class="number">1</span> ttl=<span class="number">64</span> time=<span class="number">0.102</span> ms</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">192.168</span>.<span class="number">50.2</span>: icmp_seq=<span class="number">2</span> ttl=<span class="number">64</span> time=<span class="number">0.068</span> ms</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">192.168</span>.<span class="number">50.2</span>: icmp_seq=<span class="number">3</span> ttl=<span class="number">64</span> time=<span class="number">0.068</span> ms</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">在lixiang中的veth1 ping 宿主机上veth0</span><br><span class="line"><span class="comment"># ip netns exec lixiang ping 192.168.50.3</span></span><br><span class="line">PING <span class="number">192.168</span>.<span class="number">50.3</span> (<span class="number">192.168</span>.<span class="number">50.3</span>) <span class="number">56</span>(<span class="number">84</span>) bytes of <span class="keyword">data</span>.</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">192.168</span>.<span class="number">50.3</span>: icmp_seq=<span class="number">1</span> ttl=<span class="number">64</span> time=<span class="number">0.053</span> ms</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">192.168</span>.<span class="number">50.3</span>: icmp_seq=<span class="number">2</span> ttl=<span class="number">64</span> time=<span class="number">0.031</span> ms</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">192.168</span>.<span class="number">50.3</span>: icmp_seq=<span class="number">3</span> ttl=<span class="number">64</span> time=<span class="number">0.029</span> ms</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">如果需要访问本机的其它网段，可手动添加如下默认路由条目。</span><br><span class="line"><span class="comment"># ip netns exec lixiang ip route add default via 192.168.50.3</span></span><br></pre></td></tr></table></figure>





<blockquote>
<p>关于如何ping通外网主机，可设置路由转发完成。</p>
</blockquote>
<h1 id="三、CGroups"><a href="#三、CGroups" class="headerlink" title="三、CGroups"></a>三、CGroups</h1><h2 id="3-1-CGroups介绍"><a href="#3-1-CGroups介绍" class="headerlink" title="3.1 CGroups介绍"></a>3.1 CGroups介绍</h2><ul>
<li>Control groups(cgroups) 控制组</li>
</ul>
<ul>
<li>linux内核提供的可以限制、记录、隔离进程组所使用的物理资源的机制。为容器而生，没有cgroups就没有今天的容器技术。</li>
</ul>
<p><img src="/images/Docker/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF%E6%89%80%E6%B6%89%E5%8F%8ALinux%E5%86%85%E6%A0%B8%E5%85%B3%E9%94%AE%E6%8A%80%E6%9C%AF.assets/image-20220112182824405.png" alt="image-20220112182824405"></p>
<h2 id="3-2-CGroups功能"><a href="#3-2-CGroups功能" class="headerlink" title="3.2 CGroups功能"></a>3.2 CGroups功能</h2><ul>
<li>资源限制（Resource Limitation）：cgroups 可以对进程组使用的资源总额进行限制。如设定应用运行时使用内存的上限，一旦超过这个配额就发出 OOM（Out of Memory）。</li>
<li>优先级分配（Prioritization）：通过分配的 CPU 时间片数量及硬盘 IO 带宽大小，实际上就相当于控制了进程运行的优先级。</li>
<li>资源统计（Accounting）： cgroups 可以统计系统的资源使用量，如 CPU 使用时长、内存用量等等，这个功能非常适用于计费。</li>
<li>进程控制（Control）：cgroups 可以对进程组执行挂起、恢复等操作。</li>
</ul>
<h2 id="3-3-CGroups应用案例"><a href="#3-3-CGroups应用案例" class="headerlink" title="3.3 CGroups应用案例"></a>3.3 CGroups应用案例</h2><h3 id="3-3-1-安装及开启服务"><a href="#3-3-1-安装及开启服务" class="headerlink" title="3.3.1 安装及开启服务"></a>3.3.1 安装及开启服务</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# yum -y install libcgroup</span><br><span class="line">[root@localhost ~]# systemctl start cgconfig.service 	</span><br><span class="line">[root@localhost ~]# systemctl enable cgconfig.service</span><br></pre></td></tr></table></figure>



<h3 id="3-3-2-限制进程使用CPU"><a href="#3-3-2-限制进程使用CPU" class="headerlink" title="3.3.2 限制进程使用CPU"></a>3.3.2 限制进程使用CPU</h3><h4 id="3-3-2-1-查看cpu-shares"><a href="#3-3-2-1-查看cpu-shares" class="headerlink" title="3.3.2.1 查看cpu shares"></a>3.3.2.1 查看cpu shares</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">查看资源限制子系统</span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># lssubsys</span></span><br><span class="line">cpuset</span><br><span class="line">cpu,cpuacct</span><br><span class="line">memory</span><br><span class="line">devices</span><br><span class="line">freezer</span><br><span class="line">net_cls,net_prio</span><br><span class="line">blkio</span><br><span class="line">perf_event</span><br><span class="line">hugetlb</span><br><span class="line">pids</span><br><span class="line"></span><br><span class="line">查看子系统配置文件所在位置</span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># ls /sys/fs/cgroup/</span></span><br><span class="line">blkio  cpuacct      cpuset   freezer  memory   net_cls,net_prio  perf_event  systemd</span><br><span class="line">cpu    cpu,cpuacct  devices  hugetlb  net_cls  net_prio          pids</span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># ls /sys/fs/cgroup/cpu</span></span><br><span class="line">cgroup.clone_children  cpuacct.stat          cpu.cfs_quota_us   cpu.stat</span><br><span class="line">cgroup.event_control   cpuacct.usage         cpu.rt_period_us   notify_on_release</span><br><span class="line">cgroup.procs           cpuacct.usage_percpu  cpu.rt_runtime_us  release_agent</span><br><span class="line">cgroup.sane_behavior   cpu.cfs_period_us     cpu.shares         tasks</span><br><span class="line"></span><br><span class="line">查看CPU时间分片，用于保证分组所得到的CPU分片总量。</span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># cat /sys/fs/cgroup/cpu/cpu.shares</span></span><br><span class="line"><span class="number">1024</span></span><br></pre></td></tr></table></figure>





<h4 id="3-3-2-2-使用CPU子系统创建2个group分组"><a href="#3-3-2-2-使用CPU子系统创建2个group分组" class="headerlink" title="3.3.2.2 使用CPU子系统创建2个group分组"></a>3.3.2.2 使用CPU子系统创建2个group分组</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# vim /etc/cgconfig.conf</span><br><span class="line">group lesscpu &#123;</span><br><span class="line">	cpu&#123;</span><br><span class="line">		cpu.shares=200;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br><span class="line">group morecpu &#123;</span><br><span class="line">	cpu&#123;</span><br><span class="line">		cpu.shares=800;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# systemctl restart cgconfig</span><br></pre></td></tr></table></figure>

<p>准备一个脚本</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> true</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">        a=<span class="variable">$</span>[<span class="variable">$a</span>+<span class="number">1</span>]</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>将将要运行的应用程序分配到指定分组(<strong>请使用单CPU机器,三个终端验证</strong>)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">终端1# cgexec -g cpu:lesscpu sh /tmp/1.sh</span><br><span class="line"></span><br><span class="line">终端2# cgexec -g cpu:morecpu sh /tmp/1.sh</span><br><span class="line"></span><br><span class="line">终端3# top</span><br></pre></td></tr></table></figure>



<p><strong>PS: 如果主机有多CPU，为了验证效果，可以进行如下操作</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> lscpu</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> 0 &gt; /sys/devices/system/cpu/cpu0/online</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> 1 &gt; /sys/devices/system/cpu/cpu1/online</span></span><br></pre></td></tr></table></figure>





]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Docker容器DevOps应用方案</title>
    <url>/2023/08/25/%E4%BA%91%E5%8E%9F%E7%94%9F/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h1 id="一、业务代码发布方式"><a href="#一、业务代码发布方式" class="headerlink" title="一、业务代码发布方式"></a>一、业务代码发布方式</h1><h2 id="1-1-传统方式"><a href="#1-1-传统方式" class="headerlink" title="1.1 传统方式"></a>1.1 传统方式</h2><ul>
<li>以物理机或虚拟机为颗粒度部署</li>
<li>部署环境比较复杂，需要有先进的自动化运维手段</li>
<li>出现问题后重新部署成本大，一般采用集群方式部署</li>
<li>部署后以静态方式展现</li>
</ul>
<h2 id="1-2-容器化方式"><a href="#1-2-容器化方式" class="headerlink" title="1.2 容器化方式"></a>1.2 容器化方式</h2><ul>
<li>以容器为颗粒度部署</li>
<li>部署方式简单，启动速度快</li>
<li>一次构建可到处运行</li>
<li>出现故障后，可随时恢复</li>
<li>可同时部署多套环境（测试、预发布、生产环境等）</li>
</ul>
<h1 id="二、业务代码发布逻辑图"><a href="#二、业务代码发布逻辑图" class="headerlink" title="二、业务代码发布逻辑图"></a>二、业务代码发布逻辑图</h1><img src="/images/Docker/基于Docker容器DevOps应用方案企业业务代码发布系统.assets/image-20220223152003734.png" alt="image-20220223152003734" style="zoom:200%;">





<h1 id="三、业务代码发布工具及流程图"><a href="#三、业务代码发布工具及流程图" class="headerlink" title="三、业务代码发布工具及流程图"></a>三、业务代码发布工具及流程图</h1><h2 id="3-1-工具"><a href="#3-1-工具" class="headerlink" title="3.1 工具"></a>3.1 工具</h2><table>
<thead>
<tr>
<th>序号</th>
<th>工具</th>
<th>工具用途</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>git</td>
<td>用于提交业务代码或克隆业务代码仓库</td>
</tr>
<tr>
<td>2</td>
<td>gitlab</td>
<td>用于存储业务代码</td>
</tr>
<tr>
<td>3</td>
<td>jenkins</td>
<td>用于利用插件完成业务代码编译、构建、推送至Harbor容器镜像仓库及项目部署</td>
</tr>
<tr>
<td>4</td>
<td>tomcat</td>
<td>用于运行JAVA业务代码</td>
</tr>
<tr>
<td>5</td>
<td>maven</td>
<td>用于编译业务代码</td>
</tr>
<tr>
<td>6</td>
<td>harbor</td>
<td>用于存储业务代码构建的容器镜像存储</td>
</tr>
<tr>
<td>7</td>
<td>docker</td>
<td>用于构建容器镜像，部署项目</td>
</tr>
</tbody></table>
<h2 id="3-2-流程图"><a href="#3-2-流程图" class="headerlink" title="3.2 流程图"></a>3.2 流程图</h2><blockquote>
<p>本次部署Java代码包。</p>
</blockquote>
<img src="/images/Docker/基于Docker容器DevOps应用方案企业业务代码发布系统.assets/image-20220223163453076.png" alt="image-20220223163453076" style="zoom:200%;">





<h1 id="四、业务代码发布系统环境部署"><a href="#四、业务代码发布系统环境部署" class="headerlink" title="四、业务代码发布系统环境部署"></a>四、业务代码发布系统环境部署</h1><h2 id="4-1-主机规划"><a href="#4-1-主机规划" class="headerlink" title="4.1 主机规划"></a>4.1 主机规划</h2><table>
<thead>
<tr>
<th>序号</th>
<th>主机名</th>
<th>主机IP</th>
<th>主机功能</th>
<th>软件</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>dev</td>
<td>192.168.10.20</td>
<td>开发者 项目代码 solo</td>
<td>git</td>
</tr>
<tr>
<td>2</td>
<td>gitlab-server</td>
<td>192.168.10.21</td>
<td>代码仓库</td>
<td>gitlab-ce</td>
</tr>
<tr>
<td>3</td>
<td>jenkins-server</td>
<td>192.168.10.22</td>
<td>编译代码、打包镜像、项目发布</td>
<td>jenkins、docker、git</td>
</tr>
<tr>
<td>4</td>
<td>harbor-server</td>
<td>192.168.10.23</td>
<td>存储容器镜像</td>
<td>harbor、docker</td>
</tr>
<tr>
<td>5</td>
<td>web-server</td>
<td>192.168.10.24</td>
<td>运行容器，项目上线</td>
<td>docker</td>
</tr>
</tbody></table>
<h2 id="4-2-主机准备"><a href="#4-2-主机准备" class="headerlink" title="4.2 主机准备"></a>4.2 主机准备</h2><h3 id="4-2-1-主机名配置"><a href="#4-2-1-主机名配置" class="headerlink" title="4.2.1 主机名配置"></a>4.2.1 主机名配置</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hostnamectl set-hostname xxx</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>根据主机规划实施配置</p>
</blockquote>
<h3 id="4-2-2-主机IP地址配置"><a href="#4-2-2-主机IP地址配置" class="headerlink" title="4.2.2 主机IP地址配置"></a>4.2.2 主机IP地址配置</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/sysconfig/network-scripts/ifcfg-ens33</span></span><br><span class="line"><span class="comment"># cat /etc/sysconfig/network-scripts/ifcfg-ens33</span></span><br><span class="line"><span class="built_in">TYPE</span>=<span class="string">&quot;Ethernet&quot;</span></span><br><span class="line">PROXY_METHOD=<span class="string">&quot;none&quot;</span></span><br><span class="line">BROWSER_ONLY=<span class="string">&quot;no&quot;</span></span><br><span class="line">BOOTPROTO=<span class="string">&quot;none&quot;</span> 配置为静态IP</span><br><span class="line">DEFROUTE=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV4_FAILURE_FATAL=<span class="string">&quot;no&quot;</span></span><br><span class="line">IPV6INIT=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV6_AUTOCONF=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV6_DEFROUTE=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV6_FAILURE_FATAL=<span class="string">&quot;no&quot;</span></span><br><span class="line">IPV6_ADDR_GEN_MODE=<span class="string">&quot;stable-privacy&quot;</span></span><br><span class="line">NAME=<span class="string">&quot;ens33&quot;</span></span><br><span class="line">UUID=<span class="string">&quot;ec87533a-8151-4aa0-9d0f-1e970affcdc6&quot;</span></span><br><span class="line">DEVICE=<span class="string">&quot;ens33&quot;</span></span><br><span class="line">ONBOOT=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPADDR=<span class="string">&quot;192.168.10.2x&quot;</span>  把<span class="number">2</span>x替换为对应的IP地址</span><br><span class="line">PREFIX=<span class="string">&quot;24&quot;</span></span><br><span class="line">GATEWAY=<span class="string">&quot;192.168.10.2&quot;</span></span><br><span class="line">DNS1=<span class="string">&quot;119.29.29.29&quot;</span></span><br></pre></td></tr></table></figure>







<h3 id="4-2-3-主机名与IP地址解析配置"><a href="#4-2-3-主机名与IP地址解析配置" class="headerlink" title="4.2.3 主机名与IP地址解析配置"></a>4.2.3 主机名与IP地址解析配置</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/hosts</span></span><br><span class="line"><span class="comment"># cat /etc/hosts</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::<span class="number">1</span>         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line"><span class="number">192.168</span>.<span class="number">10.20</span> dev</span><br><span class="line"><span class="number">192.168</span>.<span class="number">10.21</span> gitlab<span class="literal">-server</span></span><br><span class="line"><span class="number">192.168</span>.<span class="number">10.22</span> jenkins<span class="literal">-server</span></span><br><span class="line"><span class="number">192.168</span>.<span class="number">10.23</span> harobr<span class="literal">-server</span></span><br><span class="line"><span class="number">192.168</span>.<span class="number">10.24</span> web<span class="literal">-server</span></span><br></pre></td></tr></table></figure>





<h3 id="4-2-4-主机安全设置"><a href="#4-2-4-主机安全设置" class="headerlink" title="4.2.4 主机安全设置"></a>4.2.4 主机安全设置</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl stop firewalld;systemctl disable firewalld</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># firewall-cmd --state</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sestatus</span></span><br></pre></td></tr></table></figure>





<h3 id="4-2-5-主机时间同步"><a href="#4-2-5-主机时间同步" class="headerlink" title="4.2.5 主机时间同步"></a>4.2.5 主机时间同步</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># crontab -e</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># crotab -l</span></span><br><span class="line"><span class="number">0</span> */<span class="number">1</span> * * * ntpdate time1.aliyun.com</span><br></pre></td></tr></table></figure>





<h2 id="4-3-主机中工具安装"><a href="#4-3-主机中工具安装" class="headerlink" title="4.3 主机中工具安装"></a>4.3 主机中工具安装</h2><h3 id="4-3-1-dev主机"><a href="#4-3-1-dev主机" class="headerlink" title="4.3.1 dev主机"></a>4.3.1 dev主机</h3><blockquote>
<p>下载项目及上传代码至代码仓库</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum -y install git</span></span><br></pre></td></tr></table></figure>



<h3 id="4-3-2-gitlab-server主机"><a href="#4-3-2-gitlab-server主机" class="headerlink" title="4.3.2 gitlab-server主机"></a>4.3.2 gitlab-server主机</h3><h4 id="4-3-2-1-获取YUM源"><a href="#4-3-2-1-获取YUM源" class="headerlink" title="4.3.2.1 获取YUM源"></a>4.3.2.1 获取YUM源</h4><p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224134917428.png" alt="image-20220224134917428"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224134941802.png" alt="image-20220224134941802"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224135000130.png" alt="image-20220224135000130"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224135021076.png" alt="image-20220224135021076"></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /etc/yum.repos.d/gitlab.repo</span></span><br><span class="line">[<span class="type">gitlab</span>]</span><br><span class="line">name=gitlab<span class="literal">-ce</span></span><br><span class="line">baseurl=https://mirrors.tuna.tsinghua.edu.cn/gitlab<span class="literal">-ce</span>/yum/el7</span><br><span class="line">enabled=<span class="number">1</span></span><br><span class="line">gpgcheck=<span class="number">0</span></span><br></pre></td></tr></table></figure>



<h4 id="4-3-2-2-gitlab-ce安装"><a href="#4-3-2-2-gitlab-ce安装" class="headerlink" title="4.3.2.2 gitlab-ce安装"></a>4.3.2.2 gitlab-ce安装</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum -y install gitlab-ce</span></span><br></pre></td></tr></table></figure>



<h4 id="4-3-2-3-gitlab-ce配置"><a href="#4-3-2-3-gitlab-ce配置" class="headerlink" title="4.3.2.3 gitlab-ce配置"></a>4.3.2.3 gitlab-ce配置</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/gitlab/gitlab.rb</span></span><br><span class="line"><span class="number">32</span> external_url <span class="string">&#x27;http://192.168.10.21&#x27;</span></span><br></pre></td></tr></table></figure>



<h4 id="4-3-2-4-启动gitlab-ce"><a href="#4-3-2-4-启动gitlab-ce" class="headerlink" title="4.3.2.4 启动gitlab-ce"></a>4.3.2.4 启动gitlab-ce</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># gitlab-ctl reconfigure</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># gitlab-ctl status</span></span><br></pre></td></tr></table></figure>





<h4 id="4-3-2-5-访问gitlab-ce"><a href="#4-3-2-5-访问gitlab-ce" class="headerlink" title="4.3.2.5 访问gitlab-ce"></a>4.3.2.5 访问gitlab-ce</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /etc/gitlab/initial_root_password</span></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">Password: znS4Bqlp0cfYUKg2dHzFiNCAN0GnhtnD4ENjEtEXMVE=</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224140418176.png" alt="image-20220224140418176"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224140436172.png" alt="image-20220224140436172"></p>
<h3 id="4-3-3-jenkins-server主机"><a href="#4-3-3-jenkins-server主机" class="headerlink" title="4.3.3 jenkins-server主机"></a>4.3.3 jenkins-server主机</h3><h4 id="4-3-3-1-jdk安装"><a href="#4-3-3-1-jdk安装" class="headerlink" title="4.3.3.1 jdk安装"></a>4.3.3.1 jdk安装</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ls</span></span><br><span class="line"> jdk<span class="literal">-8u191</span><span class="literal">-linux</span><span class="literal">-x64</span>.tar.gz</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mv jdk1.8.0_191 /usr/local/jdk</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/profile</span></span><br><span class="line"><span class="comment"># cat /etc/profile</span></span><br><span class="line">......</span><br><span class="line">export JAVA_HOME=/usr/local/jdk</span><br><span class="line">export PATH=<span class="variable">$</span>&#123;JAVA_HOME&#125;/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># source /etc/profile</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># java -version</span></span><br><span class="line">java version <span class="string">&quot;1.8.0_191&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build <span class="number">1.8</span>.<span class="number">0</span>_191<span class="literal">-b12</span>)</span><br><span class="line">Java HotSpot(TM) <span class="number">64</span><span class="literal">-Bit</span> Server VM (build <span class="number">25.191</span><span class="literal">-b12</span>, mixed mode)</span><br></pre></td></tr></table></figure>





<h4 id="4-3-3-2-jenkins安装"><a href="#4-3-3-2-jenkins安装" class="headerlink" title="4.3.3.2 jenkins安装"></a>4.3.3.2 jenkins安装</h4><h5 id="4-3-3-2-1-安装"><a href="#4-3-3-2-1-安装" class="headerlink" title="4.3.3.2.1 安装"></a>4.3.3.2.1 安装</h5><p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224141530225.png" alt="image-20220224141530225"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224141610569.png" alt="image-20220224141610569"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224141720927.png" alt="image-20220224141720927"></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</span></span><br></pre></td></tr></table></figure>



<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224142031988.png" alt="image-20220224142031988"></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum -y install jenkins</span></span><br></pre></td></tr></table></figure>



<h5 id="4-3-3-2-2-jenkins配置"><a href="#4-3-3-2-2-jenkins配置" class="headerlink" title="4.3.3.2.2 jenkins配置"></a>4.3.3.2.2 jenkins配置</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/init.d/jenkins</span></span><br><span class="line">在<span class="number">81</span>行下面添加如下内容：</span><br><span class="line"> <span class="number">82</span> /usr/local/jdk/bin/java</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/sysconfig/jenkins</span></span><br><span class="line">在<span class="number">19</span>行双引号中添加jdk中java命令路径</span><br><span class="line"> <span class="number">19</span> JENKINS_JAVA_CMD=<span class="string">&quot;/usr/local/jdk/bin/java&quot;</span></span><br></pre></td></tr></table></figure>





<h5 id="4-3-3-2-3-jenkins启动"><a href="#4-3-3-2-3-jenkins启动" class="headerlink" title="4.3.3.2.3 jenkins启动"></a>4.3.3.2.3 jenkins启动</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># chkconfig --list</span></span><br><span class="line"></span><br><span class="line">注：该输出结果只显示 SysV 服务，并不包含</span><br><span class="line">原生 systemd 服务。SysV 配置数据</span><br><span class="line">可能被原生 systemd 配置覆盖。</span><br><span class="line"></span><br><span class="line">      要列出 systemd 服务，请执行 <span class="string">&#x27;systemctl list-unit-files&#x27;</span>。</span><br><span class="line">      查看在具体 target 启用的服务请执行</span><br><span class="line">      <span class="string">&#x27;systemctl list-dependencies [target]&#x27;</span>。</span><br><span class="line"></span><br><span class="line">jenkins         <span class="number">0</span>:关    <span class="number">1</span>:关    <span class="number">2</span>:开    <span class="number">3</span>:开    <span class="number">4</span>:开    <span class="number">5</span>:开    <span class="number">6</span>:关</span><br><span class="line">netconsole      <span class="number">0</span>:关    <span class="number">1</span>:关    <span class="number">2</span>:关    <span class="number">3</span>:关    <span class="number">4</span>:关    <span class="number">5</span>:关    <span class="number">6</span>:关</span><br><span class="line">network         <span class="number">0</span>:关    <span class="number">1</span>:关    <span class="number">2</span>:开    <span class="number">3</span>:开    <span class="number">4</span>:开    <span class="number">5</span>:开    <span class="number">6</span>:关</span><br><span class="line"><span class="comment"># chkconfig jenkins on</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl start jenkins</span></span><br></pre></td></tr></table></figure>





<h5 id="4-3-3-2-4-jenkins访问"><a href="#4-3-3-2-4-jenkins访问" class="headerlink" title="4.3.3.2.4 jenkins访问"></a>4.3.3.2.4 jenkins访问</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /var/lib/jenkins/secrets/initialAdminPassword</span></span><br><span class="line"><span class="number">3363</span>d658a1a5481bbe51a1ece1eb08ab</span><br></pre></td></tr></table></figure>









<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224142955854.png" alt="image-20220224142955854"></p>
<h5 id="4-3-3-2-5-jenkins初始化配置"><a href="#4-3-3-2-5-jenkins初始化配置" class="headerlink" title="4.3.3.2.5 jenkins初始化配置"></a>4.3.3.2.5 jenkins初始化配置</h5><p><img src="/images/Docker/%E5%9F%BA%E4%BA%8ED/images/Docker/r%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224173833454.png" alt="image-20220224173833454"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224174018298.png" alt="image-20220224174018298"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224174041874.png" alt="image-20220224174041874"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224174442874.png" alt="image-20220224174442874"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224174507233.png" alt="image-20220224174507233"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224174541367.png" alt="image-20220224174541367"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224174601389.png" alt="image-20220224174601389"></p>
<h4 id="4-3-3-3-git安装"><a href="#4-3-3-3-git安装" class="headerlink" title="4.3.3.3 git安装"></a>4.3.3.3 git安装</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum -y install git</span></span><br></pre></td></tr></table></figure>





<h4 id="4-3-3-4-maven安装"><a href="#4-3-3-4-maven安装" class="headerlink" title="4.3.3.4 maven安装"></a>4.3.3.4 maven安装</h4><h5 id="4-3-3-4-1-获取maven安装包"><a href="#4-3-3-4-1-获取maven安装包" class="headerlink" title="4.3.3.4.1 获取maven安装包"></a>4.3.3.4.1 获取maven安装包</h5><p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224174735575.png" alt="image-20220224174735575"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224174855779.png" alt="image-20220224174855779"></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wget https://dlcdn.apache.org/maven/maven-3/3.8.4/binaries/apache-maven-3.8.4-bin.tar.gz</span></span><br></pre></td></tr></table></figure>



<h5 id="4-3-3-4-2-maven安装"><a href="#4-3-3-4-2-maven安装" class="headerlink" title="4.3.3.4.2 maven安装"></a>4.3.3.4.2 maven安装</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ls</span></span><br><span class="line">apache<span class="literal">-maven</span><span class="literal">-3</span>.<span class="number">8.4</span><span class="literal">-bin</span>.tar.gz</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tar xf apache-maven-3.8.4-bin.tar.gz</span></span><br><span class="line"><span class="comment"># ls</span></span><br><span class="line">apache<span class="literal">-maven</span><span class="literal">-3</span>.<span class="number">8.4</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mv apache-maven-3.8.4 /usr/local/mvn</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/profile</span></span><br><span class="line">......</span><br><span class="line">export JAVA_HOME=/usr/local/jdk</span><br><span class="line">export MAVEN_HOME=/usr/local/mvn</span><br><span class="line">export PATH=<span class="variable">$</span>&#123;JAVA_HOME&#125;/bin:<span class="variable">$</span>&#123;MAVEN_HOME&#125;/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># source /etc/profile</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mvn -v</span></span><br><span class="line">Apache Maven <span class="number">3.8</span>.<span class="number">4</span> (<span class="number">9</span>b656c72d54e5bacbed989b64718c159fe39b537)</span><br><span class="line">Maven home: /usr/local/mvn</span><br><span class="line">Java version: <span class="number">1.8</span>.<span class="number">0</span>_191, vendor: Oracle Corporation, runtime: /usr/local/jdk/jre</span><br><span class="line">Default locale: zh_CN, platform encoding: UTF<span class="literal">-8</span></span><br><span class="line">OS name: <span class="string">&quot;linux&quot;</span>, version: <span class="string">&quot;3.10.0-1160.49.1.el7.x86_64&quot;</span>, arch: <span class="string">&quot;amd64&quot;</span>, family: <span class="string">&quot;unix&quot;</span></span><br></pre></td></tr></table></figure>







<h4 id="4-3-3-5-docker安装"><a href="#4-3-3-5-docker安装" class="headerlink" title="4.3.3.5 docker安装"></a>4.3.3.5 docker安装</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wget -O /etc/yum.repos.d/docker-ce.repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum -y install docker-ce</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl enable docker</span></span><br><span class="line"><span class="comment"># systemctl start docker</span></span><br></pre></td></tr></table></figure>





<h3 id="4-3-4-harbor-server主机"><a href="#4-3-4-harbor-server主机" class="headerlink" title="4.3.4 harbor-server主机"></a>4.3.4 harbor-server主机</h3><h4 id="4-3-4-1-docker安装"><a href="#4-3-4-1-docker安装" class="headerlink" title="4.3.4.1 docker安装"></a>4.3.4.1 docker安装</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wget -O /etc/yum.repos.d/docker-ce.repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum -y install docker-ce</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl enable docker</span></span><br><span class="line"><span class="comment"># systemctl start docker</span></span><br></pre></td></tr></table></figure>



<h4 id="4-3-4-2-docker-compose安装"><a href="#4-3-4-2-docker-compose安装" class="headerlink" title="4.3.4.2 docker-compose安装"></a>4.3.4.2 docker-compose安装</h4><h5 id="4-3-4-2-1-获取docker-compose文件"><a href="#4-3-4-2-1-获取docker-compose文件" class="headerlink" title="4.3.4.2.1 获取docker-compose文件"></a>4.3.4.2.1 获取docker-compose文件</h5><p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224180711917.png" alt="image-20220224180711917"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224180732745.png" alt="image-20220224180732745"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224180754614.png" alt="image-20220224180754614"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224180842212.png" alt="image-20220224180842212"></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wget https://github.com/docker/compose/releases/download/v2.2.3/docker-compose-linux-x86_64</span></span><br></pre></td></tr></table></figure>



<h5 id="4-3-4-2-2-docker-compose安装及测试"><a href="#4-3-4-2-2-docker-compose安装及测试" class="headerlink" title="4.3.4.2.2 docker-compose安装及测试"></a>4.3.4.2.2 docker-compose安装及测试</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ls</span></span><br><span class="line">docker<span class="literal">-compose</span><span class="literal">-linux</span><span class="literal">-x86_64</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># chmod +x docker-compose-linux-x86_64</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mv docker-compose-linux-x86_64 /usr/bin/docker-compose</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker-compose version</span></span><br><span class="line">Docker Compose version v2.<span class="number">2.3</span></span><br></pre></td></tr></table></figure>





<h4 id="4-3-4-3-harbor部署"><a href="#4-3-4-3-harbor部署" class="headerlink" title="4.3.4.3 harbor部署"></a>4.3.4.3 harbor部署</h4><h5 id="4-3-4-3-1-harbor部署文件获取"><a href="#4-3-4-3-1-harbor部署文件获取" class="headerlink" title="4.3.4.3.1 harbor部署文件获取"></a>4.3.4.3.1 harbor部署文件获取</h5><p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224181602622.png" alt="image-20220224181602622"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224181626286.png" alt="image-20220224181626286"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224181656604.png" alt="image-20220224181656604"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224181746808.png" alt="image-20220224181746808"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224181829179.png" alt="image-20220224181829179"></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wget https://github.com/goharbor/harbor/releases/download/v2.4.1/harbor-offline-installer-v2.4.1.tgz</span></span><br></pre></td></tr></table></figure>





<h5 id="4-3-4-3-2-harbor部署"><a href="#4-3-4-3-2-harbor部署" class="headerlink" title="4.3.4.3.2 harbor部署"></a>4.3.4.3.2 harbor部署</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ls</span></span><br><span class="line">harbor<span class="literal">-offline</span><span class="literal">-installer</span><span class="literal">-v2</span>.<span class="number">4.1</span>.tgz</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tar xf harbor-offline-installer-v2.4.1.tgz -C /home</span></span><br></pre></td></tr></table></figure>





<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd /home</span></span><br><span class="line"><span class="comment"># ls</span></span><br><span class="line">harbor</span><br><span class="line">[<span class="type">root</span>@<span class="type">harbor</span>-<span class="type">server</span> <span class="type">home</span>]<span class="comment"># cd harbor/</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">harbor</span>-<span class="type">server</span> <span class="type">harbor</span>]<span class="comment"># ls</span></span><br><span class="line">common.sh  harbor.v2.<span class="number">4.1</span>.tar.gz  harbor.yml.tmpl  install.sh  LICENSE  prepare</span><br></pre></td></tr></table></figure>





<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mv harbor.yml.tmpl harbor.yml</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">harbor</span>-<span class="type">server</span> <span class="type">harbor</span>]<span class="comment"># vim harbor.yml</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">harbor</span>-<span class="type">server</span> <span class="type">harbor</span>]<span class="comment"># cat harbor.yml</span></span><br><span class="line"><span class="comment"># Configuration file of Harbor</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The IP address or hostname to access admin UI and registry service.</span></span><br><span class="line"><span class="comment"># DO NOT use localhost or 127.0.0.1, because Harbor needs to be accessed by external clients.</span></span><br><span class="line">hostname: <span class="number">192.168</span>.<span class="number">10.23</span> 修改</span><br><span class="line"></span><br><span class="line"><span class="comment"># http related config</span></span><br><span class="line">http:</span><br><span class="line">  <span class="comment"># port for http, default is 80. If https enabled, this port will redirect to https port</span></span><br><span class="line">  port: <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># https related config</span></span><br><span class="line"><span class="comment">#https: 注释</span></span><br><span class="line">  <span class="comment"># https port for harbor, default is 443</span></span><br><span class="line"><span class="comment">#  port: 443 注释</span></span><br><span class="line">  <span class="comment"># The path of cert and key files for nginx</span></span><br><span class="line"><span class="comment">#  certificate: /your/certificate/path 注释</span></span><br><span class="line"><span class="comment">#  private_key: /your/private/key/path 注释</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">harbor</span>-<span class="type">server</span> <span class="type">harbor</span>]<span class="comment"># ./prepare</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">harbor</span>-<span class="type">server</span> <span class="type">harbor</span>]<span class="comment"># ./install.sh</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">harbor</span>-<span class="type">server</span> <span class="type">harbor</span>]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                                COMMAND                  CREATED              STATUS                        PORTS                                   NAMES</span><br><span class="line"><span class="number">12605</span>eae32bb   goharbor/harbor<span class="literal">-jobservice</span>:v2.<span class="number">4.1</span>    <span class="string">&quot;/harbor/entrypoint.…&quot;</span>   About a minute ago   Up About a minute (healthy)                                           harbor<span class="literal">-jobservice</span></span><br><span class="line"><span class="number">85849</span>b46d56d   goharbor/nginx<span class="literal">-photon</span>:v2.<span class="number">4.1</span>         <span class="string">&quot;nginx -g &#x27;daemon of…&quot;</span>   About a minute ago   Up About a minute (healthy)   <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">80</span>-&gt;<span class="number">8080</span>/tcp, :::<span class="number">80</span>-&gt;<span class="number">8080</span>/tcp   nginx</span><br><span class="line"><span class="number">6</span>a18e370354f   goharbor/harbor<span class="literal">-core</span>:v2.<span class="number">4.1</span>          <span class="string">&quot;/harbor/entrypoint.…&quot;</span>   About a minute ago   Up About a minute (healthy)                                           harbor<span class="literal">-core</span></span><br><span class="line">d115229ef49d   goharbor/harbor<span class="literal">-portal</span>:v2.<span class="number">4.1</span>        <span class="string">&quot;nginx -g &#x27;daemon of…&quot;</span>   About a minute ago   Up About a minute (healthy)                                           harbor<span class="literal">-portal</span></span><br><span class="line">f5436556dd32   goharbor/harbor<span class="literal">-db</span>:v2.<span class="number">4.1</span>            <span class="string">&quot;/docker-entrypoint.…&quot;</span>   About a minute ago   Up About a minute (healthy)                                           harbor<span class="literal">-db</span></span><br><span class="line"><span class="number">7</span>fb8c4945abe   goharbor/harbor<span class="literal">-registryctl</span>:v2.<span class="number">4.1</span>   <span class="string">&quot;/home/harbor/start.…&quot;</span>   About a minute ago   Up About a minute (healthy)                                           registryctl</span><br><span class="line">d073e5da1399   goharbor/redis<span class="literal">-photon</span>:v2.<span class="number">4.1</span>         <span class="string">&quot;redis-server /etc/r…&quot;</span>   About a minute ago   Up About a minute (healthy)                                           redis</span><br><span class="line"><span class="number">7</span>c09362c986b   goharbor/registry<span class="literal">-photon</span>:v2.<span class="number">4.1</span>      <span class="string">&quot;/home/harbor/entryp…&quot;</span>   About a minute ago   Up About a minute (healthy)                                           registry</span><br><span class="line"><span class="number">55</span>d7f39909e3   goharbor/harbor<span class="literal">-log</span>:v2.<span class="number">4.1</span>           <span class="string">&quot;/bin/sh -c /usr/loc…&quot;</span>   About a minute ago   Up About a minute (healthy)   <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">1514</span>-&gt;<span class="number">10514</span>/tcp               harbor<span class="literal">-log</span></span><br></pre></td></tr></table></figure>







<h3 id="4-3-5-web-server"><a href="#4-3-5-web-server" class="headerlink" title="4.3.5 web-server"></a>4.3.5 web-server</h3><blockquote>
<p>docker安装</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wget -O /etc/yum.repos.d/docker-ce.repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum -y install docker-ce</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl enable docker</span></span><br><span class="line"><span class="comment"># systemctl start docker</span></span><br></pre></td></tr></table></figure>





<h2 id="4-4-工具集成配置"><a href="#4-4-工具集成配置" class="headerlink" title="4.4 工具集成配置"></a>4.4 工具集成配置</h2><h3 id="4-4-1-配置docker主机使用harbor"><a href="#4-4-1-配置docker主机使用harbor" class="headerlink" title="4.4.1 配置docker主机使用harbor"></a>4.4.1 配置docker主机使用harbor</h3><h4 id="4-4-1-1-jenkins-server"><a href="#4-4-1-1-jenkins-server" class="headerlink" title="4.4.1.1 jenkins-server"></a>4.4.1.1 jenkins-server</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">jenkins</span>-<span class="type">server</span> ~]<span class="comment"># vim /etc/docker/daemon.json</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">jenkins</span>-<span class="type">server</span> ~]<span class="comment"># cat /etc/docker/daemon.json</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;insecure-registries&quot;</span>: [<span class="string">&quot;http://192.168.10.23&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">jenkins</span>-<span class="type">server</span> ~]<span class="comment"># systemctl restart docker</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">jenkins</span>-<span class="type">server</span> ~]<span class="comment"># docker login 192.168.10.23</span></span><br><span class="line">Username: admin</span><br><span class="line">Password:</span><br><span class="line">WARNING! Your password will be stored unencrypted <span class="keyword">in</span> /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/<span class="comment">#credentials-store</span></span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure>





<h4 id="4-4-1-2-harbor-server"><a href="#4-4-1-2-harbor-server" class="headerlink" title="4.4.1.2 harbor-server"></a>4.4.1.2 harbor-server</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">harbor</span>-<span class="type">server</span> <span class="type">harbor</span>]<span class="comment"># vim /etc/docker/daemon.json</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">harbor</span>-<span class="type">server</span> <span class="type">harbor</span>]<span class="comment"># cat /etc/docker/daemon.json</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;insecure-registries&quot;</span>: [<span class="string">&quot;http://192.168.10.23&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">harbor</span>-<span class="type">server</span> <span class="type">harbor</span>]<span class="comment"># docker-compose down</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">harbor</span>-<span class="type">server</span> <span class="type">harbor</span>]<span class="comment"># systemctl restart docker</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">harbor</span>-<span class="type">server</span> <span class="type">harbor</span>]<span class="comment"># docker-compose up -d</span></span><br></pre></td></tr></table></figure>





<h4 id="4-4-1-3-web-server"><a href="#4-4-1-3-web-server" class="headerlink" title="4.4.1.3 web-server"></a>4.4.1.3 web-server</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">web</span>-<span class="type">server</span> ~]<span class="comment"># vim /etc/docker/daemon.json</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">web</span>-<span class="type">server</span> ~]<span class="comment"># cat /etc/docker/daemon.json</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;insecure-registries&quot;</span>: [<span class="string">&quot;http://192.168.10.23&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">web</span>-<span class="type">server</span> ~]<span class="comment"># systemctl restart docker</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">web</span>-<span class="type">server</span> ~]<span class="comment"># docker login 192.168.10.23</span></span><br><span class="line">Username: admin</span><br><span class="line">Password:</span><br><span class="line">WARNING! Your password will be stored unencrypted <span class="keyword">in</span> /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/<span class="comment">#credentials-store</span></span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure>



<h3 id="4-4-2-配置jenkins使用docker"><a href="#4-4-2-配置jenkins使用docker" class="headerlink" title="4.4.2 配置jenkins使用docker"></a>4.4.2 配置jenkins使用docker</h3><blockquote>
<p>在jenkins-server主机上配置</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">验证系统中是否有jenkins用户</span><br><span class="line">[<span class="type">root</span>@<span class="type">jenkins</span>-<span class="type">server</span> ~]<span class="comment"># grep jenkins /etc/passwd</span></span><br><span class="line">jenkins:x:<span class="number">997</span>:<span class="number">995</span>:Jenkins Automation Server:/var/lib/jenkins:/bin/false</span><br></pre></td></tr></table></figure>





<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">验证系统中是否有docker用户及用户组</span><br><span class="line">[<span class="type">root</span>@<span class="type">jenkins</span>-<span class="type">server</span> ~]<span class="comment"># grep docker /etc/group</span></span><br><span class="line">docker:x:<span class="number">993</span>:</span><br></pre></td></tr></table></figure>





<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">添加jenkins用户到docker用户组</span><br><span class="line">[<span class="type">root</span>@<span class="type">jenkins</span>-<span class="type">server</span> ~]<span class="comment"># usermod -G docker jenkins</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">jenkins</span>-<span class="type">server</span> ~]<span class="comment"># grep docker /etc/group</span></span><br><span class="line">docker:x:<span class="number">993</span>:jenkins</span><br></pre></td></tr></table></figure>





<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">重启jenkins服务</span><br><span class="line">[<span class="type">root</span>@<span class="type">jenkins</span>-<span class="type">server</span> ~]<span class="comment"># systemctl restart jenkins</span></span><br></pre></td></tr></table></figure>



<h3 id="4-4-3-密钥配置"><a href="#4-4-3-密钥配置" class="headerlink" title="4.4.3 密钥配置"></a>4.4.3 密钥配置</h3><h4 id="4-4-3-1-dev主机至gitlab-ce"><a href="#4-4-3-1-dev主机至gitlab-ce" class="headerlink" title="4.4.3.1 dev主机至gitlab-ce"></a>4.4.3.1 dev主机至gitlab-ce</h4><h5 id="4-4-3-1-1-dev主机生成密钥对"><a href="#4-4-3-1-1-dev主机生成密钥对" class="headerlink" title="4.4.3.1.1 dev主机生成密钥对"></a>4.4.3.1.1 dev主机生成密钥对</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">dev</span> ~]<span class="comment"># ssh-keygen</span></span><br></pre></td></tr></table></figure>



<h5 id="4-4-3-1-2-添加公钥至gitlab-ce"><a href="#4-4-3-1-2-添加公钥至gitlab-ce" class="headerlink" title="4.4.3.1.2 添加公钥至gitlab-ce"></a>4.4.3.1.2 添加公钥至gitlab-ce</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">dev</span> ~]<span class="comment"># cat /root/.ssh/id_rsa.pub</span></span><br><span class="line">ssh<span class="literal">-rsa</span> AAAAB3NzaC1yc2EAAAADAQABAAABAQCy2PdvT9qX55CLZzzaaEf06x8gl3yHGfdJSmAp9L1Fdtcbd3yz3U0lgdOwWpB8fQ/A3HoUUTWCb1iC5WJBOvqkoD8rJ2xC3HJ62zjOjmqcn2fEs09CzJj3bCfahuqPzaPkIOoH42/Y2QdImQ7xZOqqjS7aIc5T2FjDLG3bMhaYFyvx18b1qiPACuh67iniPQnL667MFZ/<span class="number">0</span>QGGVnQKwxop+SezhP9QqV1bvPk94eTdkERIBiY1CNcNmVryk6PzSKY8gfW++<span class="number">3</span>TGN9F+knhMXcswFOu6FzqxcA3G+hYg+Io2HJaDrsfHGZ6CP5T9QiOlIWlNxz05BOK3OFQ5BPeomA+jv root@dev</span><br></pre></td></tr></table></figure>



<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224210606310.png" alt="image-20220224210606310"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224210748207.png" alt="image-20220224210748207"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224210823231.png" alt="image-20220224210823231"></p>
<h4 id="4-4-3-2-jenkins-server主机至gitlab-ce"><a href="#4-4-3-2-jenkins-server主机至gitlab-ce" class="headerlink" title="4.4.3.2 jenkins-server主机至gitlab-ce"></a>4.4.3.2 jenkins-server主机至gitlab-ce</h4><h5 id="4-4-3-2-1-在jenkins-server生成密钥对"><a href="#4-4-3-2-1-在jenkins-server生成密钥对" class="headerlink" title="4.4.3.2.1 在jenkins-server生成密钥对"></a>4.4.3.2.1 在jenkins-server生成密钥对</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">jenkins</span>-<span class="type">server</span> ~]<span class="comment"># ssh-keygen</span></span><br></pre></td></tr></table></figure>



<h5 id="4-4-3-2-2-添加公钥至gitlab-ce"><a href="#4-4-3-2-2-添加公钥至gitlab-ce" class="headerlink" title="4.4.3.2.2 添加公钥至gitlab-ce"></a>4.4.3.2.2 添加公钥至gitlab-ce</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">jenkins</span>-<span class="type">server</span> ~]<span class="comment"># cat /root/.ssh/id_rsa.pub</span></span><br><span class="line">ssh<span class="literal">-rsa</span> AAAAB3NzaC1yc2EAAAADAQABAAABAQCyg3WaEm5yH9yva8Jm5wfTPwN3ROGMNPpAex8zYj+M1GesoMtE6gkiKHWydAJBiLuu/<span class="number">1</span>fBx6HlgzzxghVj9oK4DmTRZQh2IZY4+zZIGBRaDBuBO1f7+SdVE/jZoLd1a+yZ3FQmy37AlXUcIKxbrDBtefvJ31faziWyZKvT4BGFJCznRU6AOxOg1pe4bWbWI+dGnMIIq7IhtK+<span class="number">6</span>tY/w3OlF7xcWmrJP1oucpq33BYOrnRCL9EO5Zp2jcejDeG5UvXONG7CggT7FDhjwcCRZvX+AutDGAtgBckNXZjV9SDKWgDifCSDtDfV4Be4zb8b3hxtSMsbEY8YHxsThsmHrUkbz root@jenkins<span class="literal">-server</span></span><br></pre></td></tr></table></figure>



<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224211329307.png" alt="image-20220224211329307"></p>
<h4 id="4-4-3-3-配置jenkins-sever主机的私钥到凭据列表"><a href="#4-4-3-3-配置jenkins-sever主机的私钥到凭据列表" class="headerlink" title="4.4.3.3 配置jenkins-sever主机的私钥到凭据列表"></a>4.4.3.3 配置jenkins-sever主机的私钥到凭据列表</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">jenkins</span>-<span class="type">server</span> ~]<span class="comment"># cat /root/.ssh/id_rsa</span></span><br><span class="line">----<span class="literal">-BEGIN</span> RSA PRIVATE KEY-----</span><br><span class="line">MIIEogIBAAKCAQEAsoN1mhJuch/cr2vCZucH0z8Dd0ThjDT6QHsfM2I/jNRnrKDL</span><br><span class="line">ROoJIih1snQCQYi7rv9Xwceh5YM88YIVY/aCuA5k0WUIdiGWOPs2SBgUWgwbgTtX</span><br><span class="line">+/knVRP42aC3dWvsmdxUJst+wJV1HCCsW6wwbXn7yd9X2s4lsmSr0+ARhSQs50VO</span><br><span class="line">gDsToNaXuG1m1iPnRpzCCKuyIbSvurWP8NzpRe8XFpqyT9aLnKat9wWDq50Qi/<span class="built_in">RD</span></span><br><span class="line">uWado3How3huVL1zjRuwoIE+xQ4Y8HAkWb1/gLrQxgLYAXJDV2Y1fUgyloA4nwkg</span><br><span class="line"><span class="number">7</span>Q31eAXuM2/G94cbUjLGxGPGB8bE4bJh61JG8wIDAQABAoIBAEOwy6BPyuelo1Y1</span><br><span class="line">g3LnujTlWRgZ23kCAb7/sPYYFEb/qAxysIGCSVJVi0PO76gQBDM4iftmCsLv/+UI</span><br><span class="line">UbolGK5Ybuxj5lB9LeyPfaba0qTOoINhkFxwvvRo7V0Ar3BsKzywqoxHb9nxEoZG</span><br><span class="line"><span class="number">8</span>XSVl4t7zPlgonzK3MqHmAxwk9QrIB/rnjolHGN6HvfK2Cwq5WN1crspwQ+XDbRS</span><br><span class="line">J5qoAtv6PJzrU6QhJl/zSMCb0MytlIhZi+V+<span class="number">1</span>yY/QhAYrWJgWypEwGlAXlVC90r4</span><br><span class="line">twX1W/sl63xzFF396WjM1478yqpttvID06dKTC9T3y/k8lLmRNXwqmTCIm7C/jxP</span><br><span class="line"><span class="number">9</span>wjXJUECgYEA4r1N4AML7JpvE7hBRkreSdIIwoppRkBwl6gt/AJj8yt2ydQ8PY4P</span><br><span class="line">X3s5ZkCfPzHX2XsVUUcQpsBFcU2PyG29+qzt3XOmlGYgJG11xPQbwi95/u9VSd5u</span><br><span class="line">AuaNNa2YPw2teuM0hKVAl5knfy0+YHcOCdU14gHCCWsD4uOz5Zg9jVMCgYEAyYzv</span><br><span class="line">SBvCqbZ4d5agTn+ZiOkmgKVT4UVnmZPivFXnCWiIbX2fi3ok7jU1hZAs6lf6VlTU</span><br><span class="line">EPV8T1LwjO9yhFmicepzSl9lJCMbMXHt20OsqN0oUQFpoTQ07pbBE2K8c1IuQUEi</span><br><span class="line">B2SoLHqv7Ym9jHQqvT3DVhTiC+H2LwsgVRvvi+ECgYAxaID0xJUvnMOBr5ABykTA</span><br><span class="line">H1WrVs/z8AzY71v942N2VM1Q07/AxhkRfF+YqZJKCgl4KbsOeAbn31QCiZ1AVrGk</span><br><span class="line">U1SOAiqVgd+VMIkOPwdhfEkARZT3QNIGLcktnkNj0g4wjhwen4gAwO37Z5eFG8xi</span><br><span class="line">ViSkuC9ZMAmrwmSsLk2TYwKBgHQh0tYXuMiVLUCq99+DQnJS9S53FKfel900Cxc9</span><br><span class="line"><span class="number">4</span>AvZwZJlKgLx9EmVOyukcVzuKH6KDk9fQ6tpPNXYOoHsK9+<span class="number">7</span>mYanBN4XpFmPLeCD</span><br><span class="line">U/<span class="number">9</span>QvyQ9ziFmtYEsOD/<span class="number">1</span>SmSgW6qZ3wOnigdnAeu6zA8b+GxmJCF7kuwJ3RIqNQ0V</span><br><span class="line">NafBAoGAXyynoTT2zugFq8jYRubxkMk7NdnTRAnGh+mlyrGGMsNLmPvfAw+<span class="number">6</span>yKph</span><br><span class="line"><span class="number">1</span>fVHKXHtSrgtK0CVOIcmaH3<span class="built_in">r</span>+LfG4Mfrjlq+<span class="number">8</span>qiKcepBFvO9cZLNKn11vqQtzs7m</span><br><span class="line">y+ydl4xTcCPoAMDsVeamJ3fv+<span class="number">9</span>nyXe5KqYtw+BJMjpP+PnNN2YQ=</span><br><span class="line">----<span class="literal">-END</span> RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure>



<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224212308684.png" alt="image-20220224212308684"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224212411414.png" alt="image-20220224212411414"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224212543257.png" alt="image-20220224212543257"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224212622017.png" alt="image-20220224212622017"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224212928853.png" alt="image-20220224212928853"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224213022249.png" alt="image-20220224213022249"></p>
<h2 id="4-5-jenkins插件安装"><a href="#4-5-jenkins插件安装" class="headerlink" title="4.5 jenkins插件安装"></a>4.5 jenkins插件安装</h2><h3 id="4-5-1-maven-integration"><a href="#4-5-1-maven-integration" class="headerlink" title="4.5.1 maven integration"></a>4.5.1 maven integration</h3><blockquote>
<p>用于编译JAVA项目</p>
</blockquote>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224214012429.png" alt="image-20220224214012429"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224214041517.png" alt="image-20220224214041517"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224214133277.png" alt="image-20220224214133277"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224214217988.png" alt="image-20220224214217988"></p>
<h3 id="4-5-2-git-parameter"><a href="#4-5-2-git-parameter" class="headerlink" title="4.5.2 git parameter"></a>4.5.2 git parameter</h3><blockquote>
<p>用于基于git版本提交进行参数构建项目</p>
</blockquote>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224214317316.png" alt="image-20220224214317316"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224214329349.png" alt="image-20220224214329349"></p>
<h3 id="4-5-3-gitlab"><a href="#4-5-3-gitlab" class="headerlink" title="4.5.3 gitlab"></a>4.5.3 gitlab</h3><blockquote>
<p>用于jenkins-server拉取项目</p>
</blockquote>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224214412283.png" alt="image-20220224214412283"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224214442366.png" alt="image-20220224214442366"></p>
<h3 id="4-5-4-Generic-Webhook-Trigger"><a href="#4-5-4-Generic-Webhook-Trigger" class="headerlink" title="4.5.4 Generic Webhook Trigger"></a>4.5.4 Generic Webhook Trigger</h3><blockquote>
<p>用于项目自动化构建</p>
</blockquote>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224214812077.png" alt="image-20220224214812077"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224214922182.png" alt="image-20220224214922182"></p>
<h3 id="4-5-5-ssh"><a href="#4-5-5-ssh" class="headerlink" title="4.5.5 ssh"></a>4.5.5 ssh</h3><blockquote>
<p>用于jenkins-server对web-server实施项目部署</p>
</blockquote>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224215008239.png" alt="image-20220224215008239"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224215019932.png" alt="image-20220224215019932"></p>
<h2 id="4-6-jenkins全局工具配置"><a href="#4-6-jenkins全局工具配置" class="headerlink" title="4.6 jenkins全局工具配置"></a>4.6 jenkins全局工具配置</h2><p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224215857618.png" alt="image-20220224215857618"></p>
<h3 id="4-6-1-JDK配置"><a href="#4-6-1-JDK配置" class="headerlink" title="4.6.1 JDK配置"></a>4.6.1 JDK配置</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">jenkins</span>-<span class="type">server</span> ~]<span class="comment"># java -version</span></span><br><span class="line">java version <span class="string">&quot;1.8.0_191&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build <span class="number">1.8</span>.<span class="number">0</span>_191<span class="literal">-b12</span>)</span><br><span class="line">Java HotSpot(TM) <span class="number">64</span><span class="literal">-Bit</span> Server VM (build <span class="number">25.191</span><span class="literal">-b12</span>, mixed mode)</span><br><span class="line">[<span class="type">root</span>@<span class="type">jenkins</span>-<span class="type">server</span> ~]<span class="comment"># echo $JAVA_HOME</span></span><br><span class="line">/usr/local/jdk</span><br></pre></td></tr></table></figure>





<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224220023637.png" alt="image-20220224220023637"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224220323445.png" alt="image-20220224220323445"></p>
<h3 id="4-6-2-Git配置"><a href="#4-6-2-Git配置" class="headerlink" title="4.6.2 Git配置"></a>4.6.2 Git配置</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">jenkins</span>-<span class="type">server</span> ~]<span class="comment"># git version</span></span><br><span class="line">git version <span class="number">1.8</span>.<span class="number">3.1</span></span><br></pre></td></tr></table></figure>



<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224220502686.png" alt="image-20220224220502686"></p>
<h3 id="4-6-3-Maven配置"><a href="#4-6-3-Maven配置" class="headerlink" title="4.6.3 Maven配置"></a>4.6.3 Maven配置</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">jenkins</span>-<span class="type">server</span> ~]<span class="comment"># mvn --version</span></span><br><span class="line">Apache Maven <span class="number">3.8</span>.<span class="number">4</span> (<span class="number">9</span>b656c72d54e5bacbed989b64718c159fe39b537)</span><br><span class="line">Maven home: /usr/local/mvn</span><br><span class="line">Java version: <span class="number">1.8</span>.<span class="number">0</span>_191, vendor: Oracle Corporation, runtime: /usr/local/jdk/jre</span><br><span class="line">Default locale: zh_CN, platform encoding: UTF<span class="literal">-8</span></span><br><span class="line">OS name: <span class="string">&quot;linux&quot;</span>, version: <span class="string">&quot;3.10.0-1160.49.1.el7.x86_64&quot;</span>, arch: <span class="string">&quot;amd64&quot;</span>, family: <span class="string">&quot;unix&quot;</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">jenkins</span>-<span class="type">server</span> ~]<span class="comment"># echo $MAVEN_HOME</span></span><br><span class="line">/usr/local/mvn</span><br></pre></td></tr></table></figure>





<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224220529911.png" alt="image-20220224220529911"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224220733835.png" alt="image-20220224220733835"></p>
<h2 id="4-7-jenkins系统配置"><a href="#4-7-jenkins系统配置" class="headerlink" title="4.7 jenkins系统配置"></a>4.7 jenkins系统配置</h2><blockquote>
<p>主要配置jenkins-server通过ssh协议连接web-server</p>
</blockquote>
<h3 id="4-7-1-添加jenkins-server访问web-server凭据"><a href="#4-7-1-添加jenkins-server访问web-server凭据" class="headerlink" title="4.7.1 添加jenkins-server访问web-server凭据"></a>4.7.1 添加jenkins-server访问web-server凭据</h3><p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224221320500.png" alt="image-20220224221320500"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224221347030.png" alt="image-20220224221347030"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224221416358.png" alt="image-20220224221416358"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224221609980.png" alt="image-20220224221609980"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224221643648.png" alt="image-20220224221643648"></p>
<h3 id="4-7-2-配置ssh协议连接主机"><a href="#4-7-2-配置ssh协议连接主机" class="headerlink" title="4.7.2 配置ssh协议连接主机"></a>4.7.2 配置ssh协议连接主机</h3><p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224221754566.png" alt="image-20220224221754566"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224221832480.png" alt="image-20220224221832480"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224221901770.png" alt="image-20220224221901770"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224222146699.png" alt="image-20220224222146699"></p>
<h1 id="五、企业业务代码项目发布"><a href="#五、企业业务代码项目发布" class="headerlink" title="五、企业业务代码项目发布"></a>五、企业业务代码项目发布</h1><h2 id="5-1-数据库管理系统部署-mariadb及创建项目数据库"><a href="#5-1-数据库管理系统部署-mariadb及创建项目数据库" class="headerlink" title="5.1 数据库管理系统部署 mariadb及创建项目数据库"></a>5.1 数据库管理系统部署 mariadb及创建项目数据库</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">web</span>-<span class="type">server</span> ~]<span class="comment"># yum -y install mariadb mariadb-server</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">web</span>-<span class="type">server</span> ~]<span class="comment"># systemctl enable mariadb</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">web</span>-<span class="type">server</span> ~]<span class="comment"># systemctl start mariadb</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">web</span>-<span class="type">server</span> ~]<span class="comment"># mysqladmin -uroot password &#x27;abc123&#x27;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">web</span>-<span class="type">server</span> ~]<span class="comment"># mysql -uroot -pabc123</span></span><br><span class="line">Welcome to the MariaDB monitor.  Commands <span class="keyword">end</span> with ; or \g.</span><br><span class="line">Your MariaDB connection id is <span class="number">3</span></span><br><span class="line">Server version: <span class="number">5.5</span>.<span class="number">68</span><span class="literal">-MariaDB</span> MariaDB Server</span><br><span class="line"></span><br><span class="line">Copyright (c) <span class="number">2000</span>, <span class="number">2018</span>, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line"><span class="built_in">Type</span> <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> help. <span class="built_in">Type</span> <span class="string">&#x27;\c&#x27;</span> to <span class="built_in">clear</span> the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(<span class="type">none</span>)]&gt;</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">MariaDB [(<span class="type">none</span>)]&gt; create database <span class="keyword">if</span> not exists solo default charset utf8 collate utf8_general_ci;</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">MariaDB [(<span class="type">none</span>)]&gt; grant all on solo.* to <span class="string">&#x27;root&#x27;</span><span class="string">@&#x27;%&#x27; identified by &quot;123456&quot;;</span></span><br><span class="line"><span class="string">Query OK, 0 rows affected (0.00 sec)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">MariaDB [(none)]&gt; grant all on solo.* to &#x27;root&#x27;@&#x27;localhost&#x27; identified by &quot;123456&quot;;</span></span><br><span class="line"><span class="string">Query OK, 0 rows affected (0.00 sec)</span></span><br></pre></td></tr></table></figure>





<h2 id="5-2-项目代码获取"><a href="#5-2-项目代码获取" class="headerlink" title="5.2 项目代码获取"></a>5.2 项目代码获取</h2><p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224223418318.png" alt="image-20220224223418318"></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># git clone --recurse-submodules https://gitee.com/dl88250/solo.git</span></span><br></pre></td></tr></table></figure>





<h2 id="5-3-项目代码修改"><a href="#5-3-项目代码修改" class="headerlink" title="5.3 项目代码修改"></a>5.3 项目代码修改</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">dev</span> ~]<span class="comment"># ls</span></span><br><span class="line">solo</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">dev</span> ~]<span class="comment"># vim solo/src/main/resources/local.properties</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">dev</span> ~]<span class="comment"># cat solo/src/main/resources/local.properties</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Solo - A small and beautiful blogging system written in Java.</span></span><br><span class="line"><span class="comment"># Copyright (c) 2010-present, b3log.org</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Solo is licensed under Mulan PSL v2.</span></span><br><span class="line"><span class="comment"># You can use this software according to the terms and conditions of the Mulan PSL v2.</span></span><br><span class="line"><span class="comment"># You may obtain a copy of Mulan PSL v2 at:</span></span><br><span class="line"><span class="comment">#         http://license.coscl.org.cn/MulanPSL2</span></span><br><span class="line"><span class="comment"># THIS SOFTWARE IS PROVIDED ON AN &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.</span></span><br><span class="line"><span class="comment"># See the Mulan PSL v2 for more details.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Description: Solo local environment configurations.</span></span><br><span class="line"><span class="comment"># Version: 1.1.3.15, Mar 17, 2019</span></span><br><span class="line"><span class="comment"># Author: Liang Ding</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### MySQL runtime ####</span></span><br><span class="line">runtimeDatabase=MYSQL</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=<span class="number">123456</span></span><br><span class="line">jdbc.driver=com.mysql.cj.jdbc.Driver</span><br><span class="line">jdbc.URL=jdbc:mysql://<span class="number">192.168</span>.<span class="number">10.24</span>:<span class="number">3306</span>/solo?useUnicode=yes&amp;characterEncoding=UTF<span class="literal">-8</span>&amp;useSSL=false&amp;serverTimezone=UTC&amp;allowPublicKeyRetrieval=true</span><br><span class="line"></span><br><span class="line"><span class="comment">#### H2 runtime ####</span></span><br><span class="line"><span class="comment">#runtimeDatabase=H2</span></span><br><span class="line"><span class="comment">#jdbc.username=root</span></span><br><span class="line"><span class="comment">#jdbc.password=</span></span><br><span class="line"><span class="comment">#jdbc.driver=org.h2.Driver</span></span><br><span class="line"><span class="comment">#jdbc.URL=jdbc:h2:~/solo_h2/db;MODE=MYSQL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The minConnCnt MUST larger or equal to 3</span></span><br><span class="line">jdbc.minConnCnt=<span class="number">5</span></span><br><span class="line">jdbc.maxConnCnt=<span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The specific table name prefix</span></span><br><span class="line">jdbc.tablePrefix=b3_solo</span><br></pre></td></tr></table></figure>



<h2 id="5-4-项目代码上传到gitlab"><a href="#5-4-项目代码上传到gitlab" class="headerlink" title="5.4 项目代码上传到gitlab"></a>5.4 项目代码上传到gitlab</h2><p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224223855433.png" alt="image-20220224223855433"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224223917897.png" alt="image-20220224223917897"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224224014013.png" alt="image-20220224224014013"></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># git config --global user.name &quot;dev&quot;</span></span><br><span class="line"><span class="comment"># git config --global user.email &quot;dev@kubelixiang.com&quot;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">dev</span> <span class="type">solo</span>]<span class="comment"># git remote remove origin</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">dev</span> <span class="type">solo</span>]<span class="comment"># git remote add origin git@192.168.10.21:root/solo.git</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">dev</span> <span class="type">solo</span>]<span class="comment"># git add -A .</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">dev</span> <span class="type">solo</span>]<span class="comment"># git commit -m &quot;new&quot;</span></span><br><span class="line">[<span class="type">master</span> <span class="number">3</span><span class="type">e39b0a</span>] new</span><br><span class="line"> <span class="number">1</span> file changed, <span class="number">1</span> insertion(+), <span class="number">1</span> deletion(-)</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">dev</span> <span class="type">solo</span>]<span class="comment"># git tag 1.0.0</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">dev</span> <span class="type">solo</span>]<span class="comment"># git push origin 1.0.0</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">dev</span> <span class="type">solo</span>]<span class="comment"># git push -u origin --all</span></span><br></pre></td></tr></table></figure>



<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224225051498.png" alt="image-20220224225051498"></p>
<h2 id="5-5-构建项目运行基础应用容器镜像"><a href="#5-5-构建项目运行基础应用容器镜像" class="headerlink" title="5.5 构建项目运行基础应用容器镜像"></a>5.5 构建项目运行基础应用容器镜像</h2><blockquote>
<p>在harbor-server主机上操作</p>
</blockquote>
<h3 id="5-5-1-创建项目目录"><a href="#5-5-1-创建项目目录" class="headerlink" title="5.5.1 创建项目目录"></a>5.5.1 创建项目目录</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">harbor</span>-<span class="type">server</span> ~]<span class="comment"># mkdir tomcatdir</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">harbor</span>-<span class="type">server</span> ~]<span class="comment"># cd tomcatdir</span></span><br></pre></td></tr></table></figure>



<h3 id="5-5-2-生成Dockerfile文件"><a href="#5-5-2-生成Dockerfile文件" class="headerlink" title="5.5.2 生成Dockerfile文件"></a>5.5.2 生成Dockerfile文件</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">harbor</span>-<span class="type">server</span> <span class="type">tomcatdir</span>]<span class="comment"># echo &quot;tomcat is running&quot; &gt;&gt; index.html</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">harbor</span>-<span class="type">server</span> <span class="type">tomcatdir</span>]<span class="comment"># vim Dockerfile</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">harbor</span>-<span class="type">server</span> <span class="type">tomcatdir</span>]<span class="comment"># cat Dockerfile</span></span><br><span class="line">FROM centos:centos7</span><br><span class="line"></span><br><span class="line">MAINTAINER <span class="string">&quot;www.kubelixiang.com&quot;</span></span><br><span class="line"></span><br><span class="line">ENV VERSION=<span class="number">8.5</span>.<span class="number">75</span></span><br><span class="line">ENV JAVA_HOME=/usr/local/jdk</span><br><span class="line">ENV TOMCAT_HOME=/usr/local/tomcat</span><br><span class="line"></span><br><span class="line">RUN yum <span class="literal">-y</span> install <span class="built_in">wget</span></span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">wget</span> https://dlcdn.apache.org/tomcat/tomcat<span class="literal">-8</span>/v<span class="variable">$</span>&#123;VERSION&#125;/bin/apache<span class="literal">-tomcat</span>-<span class="variable">$</span>&#123;VERSION&#125;.tar.gz -<span class="literal">-no</span><span class="literal">-check</span><span class="literal">-certificate</span></span><br><span class="line"></span><br><span class="line">RUN tar xf apache<span class="literal">-tomcat</span>-<span class="variable">$</span>&#123;VERSION&#125;.tar.gz</span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">mv</span> apache<span class="literal">-tomcat</span>-<span class="variable">$</span>&#123;VERSION&#125; /usr/local/tomcat</span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">rm</span> <span class="literal">-rf</span> apache<span class="literal">-tomcat</span>-<span class="variable">$</span>&#123;VERSION&#125;.tar.gz /usr/local/tomcat/webapps/*</span><br><span class="line"></span><br><span class="line">RUN mkdir /usr/local/tomcat/webapps/ROOT</span><br><span class="line"></span><br><span class="line">ADD ./index.html /usr/local/tomcat/webapps/ROOT/</span><br><span class="line"></span><br><span class="line">ADD ./jdk /usr/local/jdk</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">&quot;export TOMCAT_HOME=/usr/local/tomcat&quot;</span> &gt;&gt; /etc/profile</span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">&quot;export JAVA_HOME=/usr/local/jdk&quot;</span> &gt;&gt; /etc/profile</span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">&quot;export PATH=<span class="variable">$</span>&#123;TOMCAT_HOME&#125;/bin:<span class="variable">$</span>&#123;JAVA_HOME&#125;/bin:<span class="variable">$PATH</span>&quot;</span> &gt;&gt; /etc/profile</span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">&quot;export CLASSPATH=.:<span class="variable">$</span>&#123;JAVA_HOME&#125;/lib/dt.jar:<span class="variable">$</span>&#123;JAVA_HOME&#125;/lib/tools.jar&quot;</span> &gt;&gt; /etc/profile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RUN source /etc/profile</span><br><span class="line"></span><br><span class="line">EXPOSE <span class="number">8080</span></span><br><span class="line"></span><br><span class="line">CMD [<span class="string">&quot;/usr/local/tomcat/bin/catalina.sh&quot;</span>,<span class="string">&quot;run&quot;</span>]</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">harbor</span>-<span class="type">server</span> <span class="type">tomcatdir</span>]<span class="comment"># ls</span></span><br><span class="line">Dockerfile  index.html  jdk</span><br></pre></td></tr></table></figure>





<h3 id="5-5-3-使用docker-build构建容器镜像"><a href="#5-5-3-使用docker-build构建容器镜像" class="headerlink" title="5.5.3 使用docker build构建容器镜像"></a>5.5.3 使用docker build构建容器镜像</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">harbor</span>-<span class="type">server</span> <span class="type">tomcatdir</span>]<span class="comment"># docker build -t 192.168.10.23/library/tomcat:8575 .</span></span><br></pre></td></tr></table></figure>



<h3 id="5-5-4-推送容器镜像至harbor容器镜像仓库"><a href="#5-5-4-推送容器镜像至harbor容器镜像仓库" class="headerlink" title="5.5.4 推送容器镜像至harbor容器镜像仓库"></a>5.5.4 推送容器镜像至harbor容器镜像仓库</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">harbor</span>-<span class="type">server</span> <span class="type">tomcatdir</span>]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY                      TAG       IMAGE ID       CREATED              SIZE</span><br><span class="line"><span class="number">192.168</span>.<span class="number">10.23</span>/library/tomcat    <span class="number">8575</span>      <span class="number">01</span>c433f8562d   About a minute ago   <span class="number">796</span>MB</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">harbor</span>-<span class="type">server</span> <span class="type">tomcatdir</span>]<span class="comment"># docker login 192.168.10.23</span></span><br><span class="line">Username: admin</span><br><span class="line">Password:</span><br><span class="line">WARNING! Your password will be stored unencrypted <span class="keyword">in</span> /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/<span class="comment">#credentials-store</span></span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">harbor</span>-<span class="type">server</span> <span class="type">tomcatdir</span>]<span class="comment"># docker push 192.168.10.23/library/tomcat:8575</span></span><br></pre></td></tr></table></figure>



<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224231004637.png" alt="image-20220224231004637"></p>
<h3 id="5-5-5-验证容器镜像可用性"><a href="#5-5-5-验证容器镜像可用性" class="headerlink" title="5.5.5 验证容器镜像可用性"></a>5.5.5 验证容器镜像可用性</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">harbor</span>-<span class="type">server</span> ~]<span class="comment"># docker run -d 192.168.10.23/library/tomcat:8575</span></span><br><span class="line">d5443961ca65311ca0d68d53d44be997f5d6fde2d78772173ac6927112f34579</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">harbor</span>-<span class="type">server</span> ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                                COMMAND                  CREATED         STATUS                 PORTS                                   NAMES</span><br><span class="line">d5443961ca65   <span class="number">192.168</span>.<span class="number">10.23</span>/library/tomcat:<span class="number">8575</span>    <span class="string">&quot;/usr/local/tomcat/b…&quot;</span>   <span class="number">3</span> seconds ago   Up <span class="number">2</span> seconds           <span class="number">8080</span>/tcp                                nifty_tesla</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">harbor</span>-<span class="type">server</span> ~]<span class="comment"># docker inspect d544</span></span><br><span class="line"></span><br><span class="line">获得：<span class="number">172.17</span>.<span class="number">0.2</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">harbor</span>-<span class="type">server</span> ~]<span class="comment"># curl http://172.17.0.2:8080</span></span><br><span class="line">tomcat is running</span><br></pre></td></tr></table></figure>



<h2 id="5-6-项目构建及发布"><a href="#5-6-项目构建及发布" class="headerlink" title="5.6 项目构建及发布"></a>5.6 项目构建及发布</h2><h3 id="5-6-1-项目构建及发布步骤"><a href="#5-6-1-项目构建及发布步骤" class="headerlink" title="5.6.1 项目构建及发布步骤"></a>5.6.1 项目构建及发布步骤</h3><p>第一步：jenkins获取项目代码</p>
<p>第二步：jenkins对项目代码编译，由maven完成</p>
<p>第三步：jenkins使用docker对编译完成的项目代码进行打包，打包成容器应用镜像</p>
<p>第四步：jenkins把打包的容器应用镜像上传到harbor</p>
<p>第五步：jenkins通过ssh插件完成对web-server进行运行容器应用镜像的操作</p>
<h3 id="5-6-2-创建项目任务"><a href="#5-6-2-创建项目任务" class="headerlink" title="5.6.2 创建项目任务"></a>5.6.2 创建项目任务</h3><p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224231659567.png" alt="image-20220224231659567"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224231808502.png" alt="image-20220224231808502"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224233231807.png" alt="image-20220224233231807"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220224233433469.png" alt="image-20220224233433469"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220225014415364.png" alt="image-20220225014415364"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220225014449916.png" alt="image-20220225014449916"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220225014608778.png" alt="image-20220225014608778"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220225014711014.png" alt="image-20220225014711014"></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">Dockerfile：</span><br><span class="line">REPOSITORY=<span class="number">192.168</span>.<span class="number">10.23</span>/library/solo:<span class="variable">$</span>&#123;Tag&#125;</span><br><span class="line"><span class="comment"># 构建镜像</span></span><br><span class="line"><span class="built_in">cat</span> &gt; Dockerfile &lt;&lt; EOF</span><br><span class="line">FROM <span class="number">192.168</span>.<span class="number">10.23</span>/library/tomcat:<span class="number">8575</span></span><br><span class="line">RUN <span class="built_in">rm</span> <span class="literal">-rf</span> /usr/local/tomcat/webapps/ROOT</span><br><span class="line"><span class="built_in">COPY</span> target/*.war /usr/local/tomcat/webapps/ROOT.war</span><br><span class="line">CMD [<span class="string">&quot;/usr/local/tomcat/bin/catalina.sh&quot;</span>, <span class="string">&quot;run&quot;</span>]</span><br><span class="line">EOF</span><br><span class="line">docker build <span class="literal">-t</span> <span class="variable">$REPOSITORY</span> .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传镜像</span></span><br><span class="line">docker login <span class="number">192.168</span>.<span class="number">10.23</span> <span class="literal">-u</span> admin <span class="literal">-p</span> Harbor12345</span><br><span class="line">docker push <span class="variable">$REPOSITORY</span></span><br><span class="line">docker logout <span class="number">192.168</span>.<span class="number">10.23</span></span><br></pre></td></tr></table></figure>





<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">shell script:</span><br><span class="line">REPOSITORY=<span class="number">192.168</span>.<span class="number">10.23</span>/library/solo:<span class="variable">$</span>&#123;Tag&#125;</span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">docker <span class="built_in">rm</span> <span class="operator">-f</span> blog<span class="literal">-solo</span> |true</span><br><span class="line">docker image <span class="built_in">rm</span> <span class="variable">$REPOSITORY</span> |true</span><br><span class="line">docker container run <span class="literal">-d</span> -<span class="literal">-name</span> blog<span class="literal">-solo</span> <span class="literal">-p</span> <span class="number">80</span>:<span class="number">8080</span> <span class="variable">$REPOSITORY</span></span><br></pre></td></tr></table></figure>









<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220225014217956.png" alt="image-20220225014217956"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220225014302077.png" alt="image-20220225014302077"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220225014131634.png" alt="image-20220225014131634"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220225014949917.png" alt="image-20220225014949917"></p>
<p><img src="/images/Docker/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8DevOps%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F.assets/image-20220225013841677.png" alt="image-20220225013841677"></p>
]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes集群Node管理</title>
    <url>/2024/04/06/%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes%E9%9B%86%E7%BE%A4Node%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="一、查看集群信息"><a href="#一、查看集群信息" class="headerlink" title="一、查看集群信息"></a>一、查看集群信息</h1><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl cluster-info</span></span><br><span class="line">Kubernetes control plane is running at https://<span class="number">192.168</span>.<span class="number">10.100</span>:<span class="number">6443</span></span><br><span class="line">CoreDNS is running at https://<span class="number">192.168</span>.<span class="number">10.100</span>:<span class="number">6443</span>/api/v1/namespaces/kube<span class="literal">-system</span>/services/kube<span class="literal">-dns</span>:dns/proxy</span><br><span class="line"></span><br><span class="line">To further debug and diagnose cluster problems, use <span class="string">&#x27;kubectl cluster-info dump&#x27;</span>.</span><br></pre></td></tr></table></figure>

<h1 id="二、查看节点信息"><a href="#二、查看节点信息" class="headerlink" title="二、查看节点信息"></a>二、查看节点信息</h1><h2 id="2-1-查看集群节点信息"><a href="#2-1-查看集群节点信息" class="headerlink" title="2.1 查看集群节点信息"></a>2.1 查看集群节点信息</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get nodes</span></span><br><span class="line">NAME          STATUS   ROLES    AGE     VERSION</span><br><span class="line">k8s<span class="literal">-master1</span>   Ready    &lt;none&gt;   <span class="number">2</span>d20<span class="built_in">h</span>   v1.<span class="number">21.10</span></span><br><span class="line">k8s<span class="literal">-master2</span>   Ready    &lt;none&gt;   <span class="number">2</span>d20<span class="built_in">h</span>   v1.<span class="number">21.10</span></span><br><span class="line">k8s<span class="literal">-master3</span>   Ready    &lt;none&gt;   <span class="number">2</span>d20<span class="built_in">h</span>   v1.<span class="number">21.10</span></span><br><span class="line">k8s<span class="literal">-worker1</span>   Ready    &lt;none&gt;   <span class="number">2</span>d20<span class="built_in">h</span>   v1.<span class="number">21.10</span></span><br></pre></td></tr></table></figure>



<h2 id="2-2-查看集群节点详细信息"><a href="#2-2-查看集群节点详细信息" class="headerlink" title="2.2 查看集群节点详细信息"></a>2.2 查看集群节点详细信息</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get nodes -o wide</span></span><br><span class="line">NAME          STATUS   ROLES    AGE     VERSION    INTERNAL<span class="literal">-IP</span>     EXTERNAL<span class="literal">-IP</span>   OS<span class="literal">-IMAGE</span>                KERNEL<span class="literal">-VERSION</span>               CONTAINER<span class="literal">-RUNTIME</span></span><br><span class="line">k8s<span class="literal">-master1</span>   Ready    &lt;none&gt;   <span class="number">2</span>d20<span class="built_in">h</span>   v1.<span class="number">21.10</span>   <span class="number">192.168</span>.<span class="number">10.12</span>   &lt;none&gt;        CentOS Linux <span class="number">7</span> (Core)   <span class="number">5.17</span>.<span class="number">0</span><span class="literal">-1</span>.el7.elrepo.x86_64   containerd://<span class="number">1.6</span>.<span class="number">1</span></span><br><span class="line">k8s<span class="literal">-master2</span>   Ready    &lt;none&gt;   <span class="number">2</span>d20<span class="built_in">h</span>   v1.<span class="number">21.10</span>   <span class="number">192.168</span>.<span class="number">10.13</span>   &lt;none&gt;        CentOS Linux <span class="number">7</span> (Core)   <span class="number">5.17</span>.<span class="number">0</span><span class="literal">-1</span>.el7.elrepo.x86_64   containerd://<span class="number">1.6</span>.<span class="number">1</span></span><br><span class="line">k8s<span class="literal">-master3</span>   Ready    &lt;none&gt;   <span class="number">2</span>d20<span class="built_in">h</span>   v1.<span class="number">21.10</span>   <span class="number">192.168</span>.<span class="number">10.14</span>   &lt;none&gt;        CentOS Linux <span class="number">7</span> (Core)   <span class="number">5.17</span>.<span class="number">0</span><span class="literal">-1</span>.el7.elrepo.x86_64   containerd://<span class="number">1.6</span>.<span class="number">1</span></span><br><span class="line">k8s<span class="literal">-worker1</span>   Ready    &lt;none&gt;   <span class="number">2</span>d20<span class="built_in">h</span>   v1.<span class="number">21.10</span>   <span class="number">192.168</span>.<span class="number">10.15</span>   &lt;none&gt;        CentOS Linux <span class="number">7</span> (Core)   <span class="number">5.17</span>.<span class="number">0</span><span class="literal">-1</span>.el7.elrepo.x86_64   containerd://<span class="number">1.6</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure>



<h2 id="2-3-查看节点描述详细信息"><a href="#2-3-查看节点描述详细信息" class="headerlink" title="2.3 查看节点描述详细信息"></a>2.3 查看节点描述详细信息</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl describe node k8s-master1</span></span><br><span class="line">Name:               k8s<span class="literal">-master1</span></span><br><span class="line">Roles:              &lt;none&gt;</span><br><span class="line">Labels:             beta.kubernetes.io/arch=amd64</span><br><span class="line">                    beta.kubernetes.io/os=linux</span><br><span class="line">                    kubernetes.io/arch=amd64</span><br><span class="line">                    kubernetes.io/hostname=k8s<span class="literal">-master1</span></span><br><span class="line">                    kubernetes.io/os=linux</span><br><span class="line">Annotations:        node.alpha.kubernetes.io/ttl: <span class="number">0</span></span><br><span class="line">                    projectcalico.org/IPv4Address: <span class="number">192.168</span>.<span class="number">10.12</span>/<span class="number">24</span></span><br><span class="line">                    projectcalico.org/IPv4IPIPTunnelAddr: <span class="number">10.244</span>.<span class="number">159.128</span></span><br><span class="line">                    volumes.kubernetes.io/controller<span class="literal">-managed</span><span class="literal">-attach</span><span class="literal">-detach</span>: true</span><br><span class="line">CreationTimestamp:  Tue, <span class="number">22</span> Mar <span class="number">2022</span> <span class="number">23</span>:<span class="number">47</span>:<span class="number">53</span> +<span class="number">0800</span></span><br><span class="line">Taints:             &lt;none&gt;</span><br><span class="line">Unschedulable:      false</span><br><span class="line">Lease:</span><br><span class="line">  HolderIdentity:  k8s<span class="literal">-master1</span></span><br><span class="line">  AcquireTime:     &lt;unset&gt;</span><br><span class="line">  RenewTime:       Fri, <span class="number">25</span> Mar <span class="number">2022</span> <span class="number">20</span>:<span class="number">38</span>:<span class="number">38</span> +<span class="number">0800</span></span><br><span class="line">Conditions:</span><br><span class="line">  <span class="built_in">Type</span>                 Status  LastHeartbeatTime                 LastTransitionTime                Reason                       Message</span><br><span class="line">  ----                 ------  -----------------                 ------------------                ------                       -------</span><br><span class="line">  NetworkUnavailable   False   Wed, <span class="number">23</span> Mar <span class="number">2022</span> <span class="number">00</span>:<span class="number">14</span>:<span class="number">05</span> +<span class="number">0800</span>   Wed, <span class="number">23</span> Mar <span class="number">2022</span> <span class="number">00</span>:<span class="number">14</span>:<span class="number">05</span> +<span class="number">0800</span>   CalicoIsUp                   Calico is running on this node</span><br><span class="line">  MemoryPressure       False   Fri, <span class="number">25</span> Mar <span class="number">2022</span> <span class="number">20</span>:<span class="number">36</span>:<span class="number">09</span> +<span class="number">0800</span>   Tue, <span class="number">22</span> Mar <span class="number">2022</span> <span class="number">23</span>:<span class="number">47</span>:<span class="number">53</span> +<span class="number">0800</span>   KubeletHasSufficientMemory   kubelet has sufficient memory available</span><br><span class="line">  DiskPressure         False   Fri, <span class="number">25</span> Mar <span class="number">2022</span> <span class="number">20</span>:<span class="number">36</span>:<span class="number">09</span> +<span class="number">0800</span>   Tue, <span class="number">22</span> Mar <span class="number">2022</span> <span class="number">23</span>:<span class="number">47</span>:<span class="number">53</span> +<span class="number">0800</span>   KubeletHasNoDiskPressure     kubelet has no disk pressure</span><br><span class="line">  PIDPressure          False   Fri, <span class="number">25</span> Mar <span class="number">2022</span> <span class="number">20</span>:<span class="number">36</span>:<span class="number">09</span> +<span class="number">0800</span>   Tue, <span class="number">22</span> Mar <span class="number">2022</span> <span class="number">23</span>:<span class="number">47</span>:<span class="number">53</span> +<span class="number">0800</span>   KubeletHasSufficientPID      kubelet has sufficient PID available</span><br><span class="line">  Ready                True    Fri, <span class="number">25</span> Mar <span class="number">2022</span> <span class="number">20</span>:<span class="number">36</span>:<span class="number">09</span> +<span class="number">0800</span>   Fri, <span class="number">25</span> Mar <span class="number">2022</span> <span class="number">00</span>:<span class="number">30</span>:<span class="number">10</span> +<span class="number">0800</span>   KubeletReady                 kubelet is posting ready status</span><br><span class="line">Addresses:</span><br><span class="line">  InternalIP:  <span class="number">192.168</span>.<span class="number">10.12</span></span><br><span class="line">  Hostname:    k8s<span class="literal">-master1</span></span><br><span class="line">Capacity:</span><br><span class="line">  cpu:                <span class="number">2</span></span><br><span class="line">  ephemeral<span class="literal">-storage</span>:  <span class="number">51175</span><span class="built_in">Mi</span></span><br><span class="line">  hugepages<span class="literal">-1Gi</span>:      <span class="number">0</span></span><br><span class="line">  hugepages<span class="literal">-2Mi</span>:      <span class="number">0</span></span><br><span class="line">  memory:             <span class="number">3994696</span>Ki</span><br><span class="line">  pods:               <span class="number">110</span></span><br><span class="line">Allocatable:</span><br><span class="line">  cpu:                <span class="number">2</span></span><br><span class="line">  ephemeral<span class="literal">-storage</span>:  <span class="number">48294789041</span></span><br><span class="line">  hugepages<span class="literal">-1Gi</span>:      <span class="number">0</span></span><br><span class="line">  hugepages<span class="literal">-2Mi</span>:      <span class="number">0</span></span><br><span class="line">  memory:             <span class="number">3892296</span>Ki</span><br><span class="line">  pods:               <span class="number">110</span></span><br><span class="line">System Info:</span><br><span class="line">  Machine ID:                 a2c5254d78184027930ef5ba59f52d61</span><br><span class="line">  System UUID:                e9dc4d56<span class="literal">-4819</span><span class="literal">-1544</span><span class="literal">-2b93</span><span class="literal">-21af423126d2</span></span><br><span class="line">  Boot ID:                    e45fcd72<span class="literal">-4fc2</span><span class="literal">-45b5</span><span class="literal">-be15</span><span class="literal">-7d944a6b8bcd</span></span><br><span class="line">  Kernel Version:             <span class="number">5.17</span>.<span class="number">0</span><span class="literal">-1</span>.el7.elrepo.x86_64</span><br><span class="line">  OS Image:                   CentOS Linux <span class="number">7</span> (Core)</span><br><span class="line">  Operating System:           linux</span><br><span class="line">  Architecture:               amd64</span><br><span class="line">  Container Runtime Version:  containerd://<span class="number">1.6</span>.<span class="number">1</span></span><br><span class="line">  Kubelet Version:            v1.<span class="number">21.10</span></span><br><span class="line">  Kube<span class="literal">-Proxy</span> Version:         v1.<span class="number">21.10</span></span><br><span class="line">PodCIDR:                      <span class="number">10.244</span>.<span class="number">2.0</span>/<span class="number">24</span></span><br><span class="line">PodCIDRs:                     <span class="number">10.244</span>.<span class="number">2.0</span>/<span class="number">24</span></span><br><span class="line">Non<span class="literal">-terminated</span> Pods:          (<span class="number">3</span> <span class="keyword">in</span> total)</span><br><span class="line">  Namespace                   Name                              CPU Requests  CPU Limits  Memory Requests  Memory Limits  Age</span><br><span class="line">  ---------                   ----                              ------------  ----------  ---------------  -------------  ---</span><br><span class="line">  default                     nginx<span class="literal">-web</span><span class="literal">-bbh48</span>                   <span class="number">0</span> (<span class="number">0</span>%)        <span class="number">0</span> (<span class="number">0</span>%)      <span class="number">0</span> (<span class="number">0</span>%)           <span class="number">0</span> (<span class="number">0</span>%)         <span class="number">2</span>d20<span class="built_in">h</span></span><br><span class="line">  kube<span class="literal">-system</span>                 calico<span class="literal">-node</span><span class="literal">-nkxrs</span>                 <span class="number">250</span>m (<span class="number">12</span>%)    <span class="number">0</span> (<span class="number">0</span>%)      <span class="number">0</span> (<span class="number">0</span>%)           <span class="number">0</span> (<span class="number">0</span>%)         <span class="number">2</span>d20<span class="built_in">h</span></span><br><span class="line">  kube<span class="literal">-system</span>                 metrics<span class="literal">-server</span><span class="literal">-8bb87844c</span><span class="literal">-ptkxm</span>    <span class="number">100</span>m (<span class="number">5</span>%)     <span class="number">0</span> (<span class="number">0</span>%)      <span class="number">200</span><span class="built_in">Mi</span> (<span class="number">5</span>%)       <span class="number">0</span> (<span class="number">0</span>%)         <span class="number">11</span><span class="built_in">h</span></span><br><span class="line">Allocated resources:</span><br><span class="line">  (Total limits may be over <span class="number">100</span> percent, i.e., overcommitted.)</span><br><span class="line">  Resource           Requests    Limits</span><br><span class="line">  --------           --------    ------</span><br><span class="line">  cpu                <span class="number">350</span>m (<span class="number">17</span>%)  <span class="number">0</span> (<span class="number">0</span>%)</span><br><span class="line">  memory             <span class="number">200</span><span class="built_in">Mi</span> (<span class="number">5</span>%)  <span class="number">0</span> (<span class="number">0</span>%)</span><br><span class="line">  ephemeral<span class="literal">-storage</span>  <span class="number">0</span> (<span class="number">0</span>%)      <span class="number">0</span> (<span class="number">0</span>%)</span><br><span class="line">  hugepages<span class="literal">-1Gi</span>      <span class="number">0</span> (<span class="number">0</span>%)      <span class="number">0</span> (<span class="number">0</span>%)</span><br><span class="line">  hugepages<span class="literal">-2Mi</span>      <span class="number">0</span> (<span class="number">0</span>%)      <span class="number">0</span> (<span class="number">0</span>%)</span><br><span class="line">Events:              &lt;none&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="三、worker-node节点管理集群"><a href="#三、worker-node节点管理集群" class="headerlink" title="三、worker node节点管理集群"></a>三、worker node节点管理集群</h1><ul>
<li><strong>如果是kubeasz安装，所有节点(包括master与node)都已经可以对集群进行管理</strong></li>
</ul>
<ul>
<li>如果是kubeadm安装，在node节点上管理时会报如下错误</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">worker1</span> ~]<span class="comment"># kubectl get nodes</span></span><br><span class="line">The connection to the server localhost:<span class="number">8080</span> was refused - did you specify the right host or port?</span><br></pre></td></tr></table></figure>

<p> 只要把master上的管理文件<code>/etc/kubernetes/admin.conf</code>拷贝到node节点的<code>$HOME/.kube/config</code>就可以让node节点也可以实现kubectl命令管理</p>
<p>1, 在node节点的用户家目录创建<code>.kube</code>目录</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">worker1</span> ~]<span class="comment"># mkdir /root/.kube</span></span><br></pre></td></tr></table></figure>

<p>2, 在master节点做如下操作</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">worker1</span> ~]<span class="comment"># scp /etc/kubernetes/admin.conf node1:/root/.kube/config</span></span><br></pre></td></tr></table></figure>

<p>3, 在worker node节点验证</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">worker1</span> ~]<span class="comment"># kubectl get nodes</span></span><br><span class="line">NAME          STATUS   ROLES    AGE     VERSION</span><br><span class="line">k8s<span class="literal">-master1</span>   Ready    &lt;none&gt;   <span class="number">2</span>d20<span class="built_in">h</span>   v1.<span class="number">21.10</span></span><br><span class="line">k8s<span class="literal">-master2</span>   Ready    &lt;none&gt;   <span class="number">2</span>d20<span class="built_in">h</span>   v1.<span class="number">21.10</span></span><br><span class="line">k8s<span class="literal">-master3</span>   Ready    &lt;none&gt;   <span class="number">2</span>d20<span class="built_in">h</span>   v1.<span class="number">21.10</span></span><br><span class="line">k8s<span class="literal">-worker1</span>   Ready    &lt;none&gt;   <span class="number">2</span>d20<span class="built_in">h</span>   v1.<span class="number">21.10</span></span><br></pre></td></tr></table></figure>



<h1 id="四、节点标签-label"><a href="#四、节点标签-label" class="headerlink" title="四、节点标签(label)"></a>四、节点标签(label)</h1><ul>
<li>k8s集群如果由大量节点组成，可将节点打上对应的标签，然后通过标签进行筛选及查看,更好的进行资源对象的相关选择与匹配</li>
</ul>
<h2 id="4-1-查看节点标签信息"><a href="#4-1-查看节点标签信息" class="headerlink" title="4.1 查看节点标签信息"></a>4.1 查看节点标签信息</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get node --show-labels</span></span><br><span class="line">NAME          STATUS   ROLES    AGE     VERSION    LABELS</span><br><span class="line">k8s<span class="literal">-master1</span>   Ready    &lt;none&gt;   <span class="number">2</span>d20<span class="built_in">h</span>   v1.<span class="number">21.10</span>   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8s<span class="literal">-master1</span>,kubernetes.io/os=linux</span><br><span class="line">k8s<span class="literal">-master2</span>   Ready    &lt;none&gt;   <span class="number">2</span>d20<span class="built_in">h</span>   v1.<span class="number">21.10</span>   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8s<span class="literal">-master2</span>,kubernetes.io/os=linux</span><br><span class="line">k8s<span class="literal">-master3</span>   Ready    &lt;none&gt;   <span class="number">2</span>d20<span class="built_in">h</span>   v1.<span class="number">21.10</span>   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8s<span class="literal">-master3</span>,kubernetes.io/os=linux</span><br><span class="line">k8s<span class="literal">-worker1</span>   Ready    &lt;none&gt;   <span class="number">2</span>d20<span class="built_in">h</span>   v1.<span class="number">21.10</span>   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8s<span class="literal">-worker1</span>,kubernetes.io/os=linux</span><br></pre></td></tr></table></figure>



<h2 id="4-2-设置节点标签信息"><a href="#4-2-设置节点标签信息" class="headerlink" title="4.2 设置节点标签信息"></a>4.2 设置节点标签信息</h2><h3 id="4-2-1-设置节点标签"><a href="#4-2-1-设置节点标签" class="headerlink" title="4.2.1 设置节点标签"></a>4.2.1 设置节点标签</h3><p>为节点<code>k8s-worker1</code>打一个<code>region=huanai</code> 的标签</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl label node k8s-worker1 region=huanai</span></span><br><span class="line">node/k8s<span class="literal">-worker1</span> labeled</span><br></pre></td></tr></table></figure>



<h3 id="4-2-2-查看所有节点标签"><a href="#4-2-2-查看所有节点标签" class="headerlink" title="4.2.2 查看所有节点标签"></a>4.2.2 查看所有节点标签</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get node --show-labels</span></span><br><span class="line">NAME          STATUS   ROLES    AGE     VERSION    LABELS</span><br><span class="line">k8s<span class="literal">-master1</span>   Ready    &lt;none&gt;   <span class="number">2</span>d21<span class="built_in">h</span>   v1.<span class="number">21.10</span>   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8s<span class="literal">-master1</span>,kubernetes.io/os=linux</span><br><span class="line">k8s<span class="literal">-master2</span>   Ready    &lt;none&gt;   <span class="number">2</span>d21<span class="built_in">h</span>   v1.<span class="number">21.10</span>   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8s<span class="literal">-master2</span>,kubernetes.io/os=linux</span><br><span class="line">k8s<span class="literal">-master3</span>   Ready    &lt;none&gt;   <span class="number">2</span>d21<span class="built_in">h</span>   v1.<span class="number">21.10</span>   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8s<span class="literal">-master3</span>,kubernetes.io/os=linux</span><br><span class="line">k8s<span class="literal">-worker1</span>   Ready    &lt;none&gt;   <span class="number">2</span>d21<span class="built_in">h</span>   v1.<span class="number">21.10</span>   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8s<span class="literal">-worker1</span>,kubernetes.io/os=linux,region=huanai</span><br></pre></td></tr></table></figure>



<h3 id="4-2-3-查看所有节点带region的标签"><a href="#4-2-3-查看所有节点带region的标签" class="headerlink" title="4.2.3 查看所有节点带region的标签"></a>4.2.3 查看所有节点带region的标签</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get nodes -L region</span></span><br><span class="line">NAME          STATUS   ROLES    AGE     VERSION    REGION</span><br><span class="line">k8s<span class="literal">-master1</span>   Ready    &lt;none&gt;   <span class="number">2</span>d21<span class="built_in">h</span>   v1.<span class="number">21.10</span></span><br><span class="line">k8s<span class="literal">-master2</span>   Ready    &lt;none&gt;   <span class="number">2</span>d21<span class="built_in">h</span>   v1.<span class="number">21.10</span></span><br><span class="line">k8s<span class="literal">-master3</span>   Ready    &lt;none&gt;   <span class="number">2</span>d21<span class="built_in">h</span>   v1.<span class="number">21.10</span></span><br><span class="line">k8s<span class="literal">-worker1</span>   Ready    &lt;none&gt;   <span class="number">2</span>d21<span class="built_in">h</span>   v1.<span class="number">21.10</span>   huanai</span><br></pre></td></tr></table></figure>



<h2 id="4-3-多维度标签"><a href="#4-3-多维度标签" class="headerlink" title="4.3 多维度标签"></a>4.3 多维度标签</h2><h3 id="4-3-1-设置多维度标签"><a href="#4-3-1-设置多维度标签" class="headerlink" title="4.3.1 设置多维度标签"></a>4.3.1 设置多维度标签</h3><p>也可以加其它的多维度标签,用于不同的需要区分的场景</p>
<p>如把<code>k8s-master3</code>标签为华南区,A机房,测试环境,游戏业务</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl label node k8s-master3 zone=A env=test bussiness=game</span></span><br><span class="line">node/k8s<span class="literal">-master3</span> labeled</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get nodes k8s-master3 --show-labels</span></span><br><span class="line">NAME          STATUS   ROLES    AGE     VERSION    LABELS</span><br><span class="line">k8s<span class="literal">-master3</span>   Ready    &lt;none&gt;   <span class="number">2</span>d21<span class="built_in">h</span>   v1.<span class="number">21.10</span>   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,bussiness=game,env=test,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8s<span class="literal">-master3</span>,kubernetes.io/os=linux,zone=A</span><br></pre></td></tr></table></figure>

<h3 id="4-3-2-显示节点的相应标签"><a href="#4-3-2-显示节点的相应标签" class="headerlink" title="4.3.2 显示节点的相应标签"></a>4.3.2 显示节点的相应标签</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get nodes -L region,zone</span></span><br><span class="line">NAME          STATUS   ROLES    AGE     VERSION    REGION   ZONE</span><br><span class="line">k8s<span class="literal">-master1</span>   Ready    &lt;none&gt;   <span class="number">2</span>d21<span class="built_in">h</span>   v1.<span class="number">21.10</span></span><br><span class="line">k8s<span class="literal">-master2</span>   Ready    &lt;none&gt;   <span class="number">2</span>d21<span class="built_in">h</span>   v1.<span class="number">21.10</span></span><br><span class="line">k8s<span class="literal">-master3</span>   Ready    &lt;none&gt;   <span class="number">2</span>d21<span class="built_in">h</span>   v1.<span class="number">21.10</span>            A</span><br><span class="line">k8s<span class="literal">-worker1</span>   Ready    &lt;none&gt;   <span class="number">2</span>d21<span class="built_in">h</span>   v1.<span class="number">21.10</span>   huanai</span><br></pre></td></tr></table></figure>

<h3 id="4-3-3-查找region-huanai的节点"><a href="#4-3-3-查找region-huanai的节点" class="headerlink" title="4.3.3 查找region=huanai的节点"></a>4.3.3 查找<code>region=huanai</code>的节点</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get nodes -l region=huanai</span></span><br><span class="line">NAME          STATUS   ROLES    AGE     VERSION</span><br><span class="line">k8s<span class="literal">-worker1</span>   Ready    &lt;none&gt;   <span class="number">2</span>d21<span class="built_in">h</span>   v1.<span class="number">21.10</span></span><br></pre></td></tr></table></figure>



<h3 id="4-3-4-标签的修改"><a href="#4-3-4-标签的修改" class="headerlink" title="4.3.4 标签的修改"></a>4.3.4 标签的修改</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl label node k8s-master3 bussiness=ad --overwrite=true</span></span><br><span class="line">node/k8s<span class="literal">-master3</span> labeled</span><br><span class="line">加上-<span class="literal">-overwrite</span>=true覆盖原标签的value进行修改操作</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get nodes -L bussiness</span></span><br><span class="line">NAME          STATUS   ROLES    AGE     VERSION    BUSSINESS</span><br><span class="line">k8s<span class="literal">-master1</span>   Ready    &lt;none&gt;   <span class="number">2</span>d21<span class="built_in">h</span>   v1.<span class="number">21.10</span></span><br><span class="line">k8s<span class="literal">-master2</span>   Ready    &lt;none&gt;   <span class="number">2</span>d21<span class="built_in">h</span>   v1.<span class="number">21.10</span></span><br><span class="line">k8s<span class="literal">-master3</span>   Ready    &lt;none&gt;   <span class="number">2</span>d21<span class="built_in">h</span>   v1.<span class="number">21.10</span>   ad</span><br><span class="line">k8s<span class="literal">-worker1</span>   Ready    &lt;none&gt;   <span class="number">2</span>d21<span class="built_in">h</span>   v1.<span class="number">21.10</span></span><br></pre></td></tr></table></figure>



<h3 id="4-3-5-标签的删除"><a href="#4-3-5-标签的删除" class="headerlink" title="4.3.5  标签的删除"></a>4.3.5  标签的删除</h3><p>使用key加一个减号的写法来取消标签</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl label node k8s-worker1 region-</span></span><br><span class="line">node/k8s<span class="literal">-worker1</span> labeled</span><br></pre></td></tr></table></figure>



<h3 id="4-3-6-标签选择器"><a href="#4-3-6-标签选择器" class="headerlink" title="4.3.6  标签选择器"></a>4.3.6  标签选择器</h3><p>标签选择器主要有2类:</p>
<ul>
<li>等值关系: =, !=</li>
<li>集合关系: KEY in {VALUE1, VALUE2……}</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl label node k8s-master2 env=test1</span></span><br><span class="line">node/k8s<span class="literal">-master2</span> labeled</span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl label node k8s-master3 env=test2</span></span><br><span class="line">node/k8s<span class="literal">-master3</span> labeled</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get node -l &quot;env in(test1,test2)&quot;</span></span><br><span class="line">NAME          STATUS   ROLES    AGE     VERSION</span><br><span class="line">k8s<span class="literal">-master2</span>   Ready    &lt;none&gt;   <span class="number">2</span>d21<span class="built_in">h</span>   v1.<span class="number">21.10</span></span><br><span class="line">k8s<span class="literal">-master3</span>   Ready    &lt;none&gt;   <span class="number">2</span>d21<span class="built_in">h</span>   v1.<span class="number">21.10</span></span><br></pre></td></tr></table></figure>







]]></content>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes集群声明式文件YAML</title>
    <url>/2024/03/05/%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes%E9%9B%86%E7%BE%A4%E5%A3%B0%E6%98%8E%E5%BC%8F%E6%96%87%E4%BB%B6YAML/</url>
    <content><![CDATA[<h1 id="一、YAML介绍"><a href="#一、YAML介绍" class="headerlink" title="一、YAML介绍"></a>一、YAML介绍</h1><p>  YAML 的意思是：仍是一种标记语言，但为了强调这种语言以数据做为中心，而不是以标记语言为重点。是一个可读性高，用来表达数据序列的格式。</p>
<h1 id="二、基本语法"><a href="#二、基本语法" class="headerlink" title="二、基本语法"></a>二、基本语法</h1><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>.低版本缩进时不允许使用Tab键，只允许使用空格</span><br><span class="line"><span class="number">2</span>.缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</span><br><span class="line"><span class="number">3</span>.<span class="comment"># 标识注释，从这个字符一直到行尾，都会被解释器忽略</span></span><br></pre></td></tr></table></figure>



<h1 id="三、YAML-支持的数据结构"><a href="#三、YAML-支持的数据结构" class="headerlink" title="三、YAML  支持的数据结构"></a>三、YAML  支持的数据结构</h1><ul>
<li>对象：键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary）</li>
<li>数组：一组按次序排列的值，又称为序列（sequence） / 列表 （list）</li>
<li>纯量（scalars）：单个的、不可再分的值  </li>
</ul>
<h5 id="对象类型：对象的一组键值对，使用冒号结构表示"><a href="#对象类型：对象的一组键值对，使用冒号结构表示" class="headerlink" title="对象类型：对象的一组键值对，使用冒号结构表示"></a>对象类型：对象的一组键值对，使用冒号结构表示</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">name: Steve</span><br><span class="line">age: <span class="number">18</span></span><br></pre></td></tr></table></figure>

<p>Yaml 也允许另一种写法，将所有键值对写成一个行内对象</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hash: &#123; name: Steve, age: <span class="number">18</span> &#125;</span><br></pre></td></tr></table></figure>

<h5 id="数组类型：一组连词线开头的行，构成一个数组"><a href="#数组类型：一组连词线开头的行，构成一个数组" class="headerlink" title="数组类型：一组连词线开头的行，构成一个数组"></a>数组类型：一组连词线开头的行，构成一个数组</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">animal</span><br><span class="line">- <span class="built_in">Cat</span></span><br><span class="line">- Dog</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>数组也可以采用行内表示法  </p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">animal: [<span class="type">Cat</span>, <span class="type">Dog</span>]</span><br></pre></td></tr></table></figure>

<h5 id="复合结构：对象和数组可以结合使用，形成复合结构"><a href="#复合结构：对象和数组可以结合使用，形成复合结构" class="headerlink" title="复合结构：对象和数组可以结合使用，形成复合结构"></a>复合结构：对象和数组可以结合使用，形成复合结构</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> languages:</span><br><span class="line"><span class="number">2</span> - Ruby </span><br><span class="line"><span class="number">3</span> - Perl </span><br><span class="line"><span class="number">4</span> - Python</span><br><span class="line"><span class="number">5</span> websites:</span><br><span class="line"><span class="number">6</span> YAML: yaml.org </span><br><span class="line"><span class="number">7</span> Ruby: ruby<span class="literal">-lang</span>.org </span><br><span class="line"><span class="number">8</span> Python: python.org </span><br><span class="line"><span class="number">9</span> Perl: use.perl.org  </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="纯量：纯量是最基本的、不可再分的值。以下数据类型都属于纯量"><a href="#纯量：纯量是最基本的、不可再分的值。以下数据类型都属于纯量" class="headerlink" title="纯量：纯量是最基本的、不可再分的值。以下数据类型都属于纯量"></a><strong>纯量：纯量是最基本的、不可再分的值。以下数据类型都属于纯量</strong></h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> 字符串  布尔值  整数 浮点数 Null </span><br><span class="line"><span class="number">2</span> 时间  日期</span><br><span class="line"></span><br><span class="line">数值直接以字面量的形式表示</span><br><span class="line">number: <span class="number">12.30</span></span><br><span class="line"></span><br><span class="line">布尔值用true和false表示</span><br><span class="line">isSet: true</span><br><span class="line"></span><br><span class="line">null用 ~ 表示</span><br><span class="line">parent: ~</span><br><span class="line"></span><br><span class="line">时间采用 ISO8601 格式</span><br><span class="line">iso8601: <span class="number">2001</span><span class="literal">-12</span><span class="literal">-14t21</span>:<span class="number">59</span>:<span class="number">43.10</span><span class="literal">-05</span>:<span class="number">00</span></span><br><span class="line"></span><br><span class="line">日期采用复合 iso8601 格式的年、月、日表示</span><br><span class="line">date: <span class="number">1976</span><span class="literal">-07</span><span class="literal">-31</span></span><br><span class="line"></span><br><span class="line">YAML 允许使用两个感叹号，强制转换数据类型</span><br><span class="line">e: !!str <span class="number">123</span></span><br><span class="line">f: !!str true</span><br></pre></td></tr></table></figure>

<h5 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h5><p>字符串默认不使用引号表示</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">str: 这是一行字符串</span><br></pre></td></tr></table></figure>

<p>如果字符串之中包含空格或特殊字符，需要放在引号之中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">str: &#39;内容：  字符串&#39;</span><br></pre></td></tr></table></figure>

<p>单引号和双引号都可以使用，双引号不会对特殊字符转义</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">s1: <span class="string">&#x27;内容\n字符串&#x27;</span></span><br><span class="line">s2: <span class="string">&quot;内容\n字符串&quot;</span></span><br></pre></td></tr></table></figure>

<p>单引号之中如果还有单引号，必须连续使用两个单引号转义</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">str: <span class="string">&#x27;labor&#x27;</span><span class="string">&#x27;s day&#x27;</span></span><br></pre></td></tr></table></figure>

<p>字符串可以写成多行，从第二行开始，必须有一个单空格缩进。换行符会被转为 空格</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">str: 这是一段</span><br><span class="line">  多行</span><br><span class="line">  字符串</span><br></pre></td></tr></table></figure>

<p>多行字符串可以使用|保留换行符，也可以使用&gt;折叠换行</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">this: |</span><br><span class="line">Foo</span><br><span class="line">Bar</span><br><span class="line">that</span><br><span class="line">Foo</span><br><span class="line">Bar</span><br></pre></td></tr></table></figure>



<h1 id="四、Kubernetes集群中资源对象描述方法"><a href="#四、Kubernetes集群中资源对象描述方法" class="headerlink" title="四、Kubernetes集群中资源对象描述方法"></a>四、Kubernetes集群中资源对象描述方法</h1><p>在kubernetes中，一般使用ymal格式的文件来创建符合我们预期期望的pod,这样的yaml文件称为资源清单文件。</p>
<h2 id="4-1-常用字段"><a href="#4-1-常用字段" class="headerlink" title="4.1 常用字段"></a>4.1 常用字段</h2><table>
<thead>
<tr>
<th>参数名</th>
<th>字段类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>version</td>
<td>String</td>
<td>这里是指的是K8S API的版本，目前基本上是v1，可以用 kubectl api-versions命令查询</td>
</tr>
<tr>
<td>kind</td>
<td>String</td>
<td>这里指的是yam文件定义的资源类型和角色，比如:Pod</td>
</tr>
<tr>
<td>metadata</td>
<td>Object</td>
<td>元数据对象，固定值就写 metadata</td>
</tr>
<tr>
<td>metadata.name</td>
<td>String</td>
<td>元数据对象的名字，这里由我们编写，比如命名Pod的名字</td>
</tr>
<tr>
<td>metadata.namespace</td>
<td>String</td>
<td>元数据对象的命名空间，由我们自身定义</td>
</tr>
<tr>
<td>Spec</td>
<td>Object</td>
<td>详细定义对象，固定值就写Spec</td>
</tr>
<tr>
<td>spec. containers[]</td>
<td>list</td>
<td>这里是Spec对象的容器列表定义，是个列表</td>
</tr>
<tr>
<td>spec containers [].name</td>
<td>String</td>
<td>这里定义容器的名字</td>
</tr>
<tr>
<td>spec.containers [].image</td>
<td>String</td>
<td>这里定义要用到的镜像名称</td>
</tr>
<tr>
<td>spec.containers [].imagePullPolicy</td>
<td>String</td>
<td>定义镜像拉取策路，有 Always、 Never、Ifnotpresent三个值可选：(1) Always:意思是每次都尝试重新拉取镜像；(2) Never:表示仅使用本地镜像；(3) IfNotPresent:如果本地有镜像就使用本地镜像，没有就拉取在线镜像。上面三个值都没设置的话，默认是 Always。</td>
</tr>
<tr>
<td>spec containers [].command[]</td>
<td>List</td>
<td>指定容器启动命令，因为是数组可以指定多个。不指定则使用镜像打包时使用的启动命令。</td>
</tr>
<tr>
<td>spec.containers [].args</td>
<td>List</td>
<td>指定容器启动命令参数，因为是数组可以指定多个.</td>
</tr>
<tr>
<td>spec.containers [].workDir</td>
<td>String</td>
<td>指定容器的工作目录</td>
</tr>
<tr>
<td>spec.containers[]. volumeMounts[]</td>
<td>List</td>
<td>指定容器内部的存储卷配置</td>
</tr>
<tr>
<td>spec.containers[]. volumeMounts[].name</td>
<td>String</td>
<td>指定可以被容器挂载的存储卷的名称</td>
</tr>
<tr>
<td>spec.containers[]. volumeMounts[].mountPath</td>
<td>String</td>
<td>指定可以被容器挂载的存储卷的路径</td>
</tr>
<tr>
<td>spec.containers[]. volumeMounts[].readOnly</td>
<td>String</td>
<td>设置存储卷路径的读写模式，ture或者 false，默认为读写模式</td>
</tr>
<tr>
<td>spec.containers [].ports[]</td>
<td>String</td>
<td>指容器需要用到的端口列表</td>
</tr>
<tr>
<td>spec.containers [].ports[].name</td>
<td>String</td>
<td>指定端口名称</td>
</tr>
<tr>
<td>spec.containers [].ports[].containerPort</td>
<td>String</td>
<td>指定容器需要监听的端口号</td>
</tr>
<tr>
<td>spec.containers [].ports[].hostPort</td>
<td>String</td>
<td>指定容器所在主机需要监听的端口号，默认跟上面 containerPort相同，注意设置了 hostPort同一台主机无法启动该容器的相同副本(因为主机的端口号不能相同，这样会冲突)</td>
</tr>
<tr>
<td>spec.containers [].ports[].protocol</td>
<td>String</td>
<td>指定端口协议，支持TCP和UDP，默认值为TCP</td>
</tr>
<tr>
<td>spec.containers [].env[]</td>
<td>List</td>
<td>指定容器运行前需设的环境变量列表</td>
</tr>
<tr>
<td>spec.containers [].env[].name</td>
<td>String</td>
<td>指定环境变量名称</td>
</tr>
<tr>
<td>spec.containers [].env[].value</td>
<td>String</td>
<td>指定环境变量值</td>
</tr>
<tr>
<td>spec.containers[].resources</td>
<td>Object</td>
<td>指定资源 限制和资源请求的值（这里开始就是设置容器的资源上限）</td>
</tr>
<tr>
<td>spec.containers[].resources.limits</td>
<td>Object</td>
<td>指定设置容器运行时资源的运行上限</td>
</tr>
<tr>
<td>spec.containers[].resources.limits.cpu</td>
<td>String</td>
<td>指定CPU限制，单位为core数，将用于docker run – cpu-shares参数</td>
</tr>
<tr>
<td>spec.containers[].resources.limits.memory</td>
<td>String</td>
<td>指定MEM内存的限制，单位为MiB、GiB</td>
</tr>
<tr>
<td>spec.containers[].resources.requests</td>
<td>Object</td>
<td>指定容器启动和调度时的限制设置</td>
</tr>
<tr>
<td>spec.containers[].resources.requests.cpu</td>
<td>String</td>
<td>CPU请求，单位为core数，容器启动时初始化可用数量</td>
</tr>
<tr>
<td>spec.containers[].resources.requests.memory</td>
<td>String</td>
<td>内存请求，单位为MiB、GiB，容器启动时初始化可用数量</td>
</tr>
<tr>
<td>sepc.restartPolicy</td>
<td>String</td>
<td>定义Pod的重启策略，可选值为Always、OnFailure,默认值为Always。1.Always:Pod一旦终止运行，则无论容器时如何终止的，kubelet服务都将重启它。2.OnFailure:只有Pod以非零退出码终止时，kubelet才会重启该容器。如果容器正常结束（退出码为0），则kubelet将不会重启它。3.Never:Pod终止后，kubelet将退出码报告给Master,不会重启该Pod。</td>
</tr>
<tr>
<td>spec.nodeSelector</td>
<td>Object</td>
<td>定义Node的Label过滤标签，以key:value格式指定。</td>
</tr>
<tr>
<td>spec.imagePullSecrets</td>
<td>Object</td>
<td>定义pull镜像时使用secret名称，以name:secretkey格式指定。</td>
</tr>
<tr>
<td>spec.hostNetwork</td>
<td>Boolean</td>
<td>定义是否使用主机网络模式，默认值为false。设置true表示使用宿主机网络，不使用docker网桥，同时设置了true将无法在同一台宿主机上启动第二个副本。</td>
</tr>
</tbody></table>
<h2 id="4-2-举例说明"><a href="#4-2-举例说明" class="headerlink" title="4.2 举例说明"></a>4.2 举例说明</h2><h3 id="4-2-1-使用声明式文件YAML创建namespace"><a href="#4-2-1-使用声明式文件YAML创建namespace" class="headerlink" title="4.2.1 使用声明式文件YAML创建namespace"></a>4.2.1 使用声明式文件YAML创建namespace</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Namespace</span><br><span class="line">metadata:</span><br><span class="line">  name: test</span><br></pre></td></tr></table></figure>



<h3 id="4-2-2-使用声明式文件YAML创建pod"><a href="#4-2-2-使用声明式文件YAML创建pod" class="headerlink" title="4.2.2 使用声明式文件YAML创建pod"></a>4.2.2 使用声明式文件YAML创建pod</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: pod1</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: k8sonline1</span><br><span class="line">    image: nginx:latest</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes集群命名空间（Namespace）</title>
    <url>/2024/03/18/%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes%E9%9B%86%E7%BE%A4%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%EF%BC%88Namespace%EF%BC%89/</url>
    <content><![CDATA[<h1 id="一、命名空间-namespace-作用"><a href="#一、命名空间-namespace-作用" class="headerlink" title="一、命名空间(namespace)作用"></a>一、命名空间(namespace)作用</h1><ul>
<li>Namespace是对一组资源和对象的抽象集合.</li>
<li>常见的 pod, service, deployment 等都是属于某一个namespace的（默认是 default）</li>
<li>不是所有资源都属于namespace，如nodes, persistent volume，namespace 等资源则不属于任何 namespace</li>
</ul>
<h1 id="二、查看namespace"><a href="#二、查看namespace" class="headerlink" title="二、查看namespace"></a>二、查看namespace</h1><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get namespaces       # namespaces可以简写为namespace或ns</span></span><br><span class="line">NAME              STATUS   AGE</span><br><span class="line">default           Active   <span class="number">130</span>m			<span class="comment"># 所有未指定Namespace的对象都会被默认分配在default命名空间</span></span><br><span class="line">kube<span class="literal">-node</span><span class="literal">-lease</span>   Active   <span class="number">130</span>m			</span><br><span class="line">kube<span class="literal">-public</span>       Active   <span class="number">130</span>m			<span class="comment"># 此命名空间下的资源可以被所有人访问</span></span><br><span class="line">kube<span class="literal">-system</span>       Active   <span class="number">130</span>m			<span class="comment"># 所有由Kubernetes系统创建的资源都处于这个命名空间</span></span><br></pre></td></tr></table></figure>

<h1 id="三、查看namespace里的资源"><a href="#三、查看namespace里的资源" class="headerlink" title="三、查看namespace里的资源"></a>三、查看namespace里的资源</h1><p><strong>使用<code>kubectl get all --namespace=命名空间名称</code>可以查看此命名空间下的所有资源</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get all --namespace=kube-system</span></span><br><span class="line">NAME                                             READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/calico<span class="literal">-kube</span><span class="literal">-controllers</span><span class="literal">-7fdc86d8ff</span><span class="literal">-cskfq</span>     <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">3</span>          <span class="number">5</span>d1<span class="built_in">h</span></span><br><span class="line">pod/calico<span class="literal">-node</span><span class="literal">-9dpc9</span>                            <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">2</span>          <span class="number">5</span>d1<span class="built_in">h</span></span><br><span class="line">pod/calico<span class="literal">-node</span><span class="literal">-jdmxw</span>                            <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">3</span>          <span class="number">5</span>d1<span class="built_in">h</span></span><br><span class="line">pod/calico<span class="literal">-node</span><span class="literal">-krwps</span>                            <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">2</span>          <span class="number">5</span>d1<span class="built_in">h</span></span><br><span class="line">pod/calico<span class="literal">-node</span><span class="literal">-tttlr</span>                            <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">2</span>          <span class="number">5</span>d1<span class="built_in">h</span></span><br><span class="line">pod/coredns<span class="literal">-65dbdb44db</span><span class="literal">-mm7cr</span>                     <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">2</span>          <span class="number">5</span>d1<span class="built_in">h</span></span><br><span class="line">pod/dashboard<span class="literal">-metrics</span><span class="literal">-scraper</span><span class="literal">-545bbb8767</span><span class="literal">-q66bc</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">2</span>          <span class="number">5</span>d1<span class="built_in">h</span></span><br><span class="line">pod/kubernetes<span class="literal">-dashboard</span><span class="literal">-65665f84db</span><span class="literal">-nll6k</span>        <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">4</span>          <span class="number">5</span>d1<span class="built_in">h</span></span><br><span class="line">pod/metrics<span class="literal">-server</span><span class="literal">-869ffc99cd</span><span class="literal">-8f4jd</span>              <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">3</span>          <span class="number">5</span>d1<span class="built_in">h</span></span><br><span class="line"></span><br><span class="line">NAME                                <span class="built_in">TYPE</span>        CLUSTER<span class="literal">-IP</span>     EXTERNAL<span class="literal">-IP</span>   PORT(S)                  AGE</span><br><span class="line">service/dashboard<span class="literal">-metrics</span><span class="literal">-scraper</span>   ClusterIP   <span class="number">10.2</span>.<span class="number">246.128</span>   &lt;none&gt;        <span class="number">8000</span>/TCP                 <span class="number">5</span>d1<span class="built_in">h</span></span><br><span class="line">service/kube<span class="literal">-dns</span>                    ClusterIP   <span class="number">10.2</span>.<span class="number">0.2</span>       &lt;none&gt;        <span class="number">53</span>/UDP,<span class="number">53</span>/TCP,<span class="number">9153</span>/TCP   <span class="number">5</span>d1<span class="built_in">h</span></span><br><span class="line">service/kubernetes<span class="literal">-dashboard</span>        NodePort    <span class="number">10.2</span>.<span class="number">213.30</span>    &lt;none&gt;        <span class="number">443</span>:<span class="number">21351</span>/TCP            <span class="number">5</span>d1<span class="built_in">h</span></span><br><span class="line">service/metrics<span class="literal">-server</span>              ClusterIP   <span class="number">10.2</span>.<span class="number">232.121</span>   &lt;none&gt;        <span class="number">443</span>/TCP                  <span class="number">5</span>d1<span class="built_in">h</span></span><br><span class="line"></span><br><span class="line">NAME                         DESIRED   CURRENT   READY   UP<span class="literal">-TO</span><span class="literal">-DATE</span>   AVAILABLE   NODE SELECTOR                 AGE</span><br><span class="line">daemonset.apps/calico<span class="literal">-node</span>   <span class="number">4</span>         <span class="number">4</span>         <span class="number">4</span>       <span class="number">4</span>            <span class="number">4</span>           beta.kubernetes.io/os=linux   <span class="number">5</span>d1<span class="built_in">h</span></span><br><span class="line"></span><br><span class="line">NAME                                        READY   UP<span class="literal">-TO</span><span class="literal">-DATE</span>   AVAILABLE   AGE</span><br><span class="line">deployment.apps/calico<span class="literal">-kube</span><span class="literal">-controllers</span>     <span class="number">1</span>/<span class="number">1</span>     <span class="number">1</span>            <span class="number">1</span>           <span class="number">5</span>d1<span class="built_in">h</span></span><br><span class="line">deployment.apps/coredns                     <span class="number">1</span>/<span class="number">1</span>     <span class="number">1</span>            <span class="number">1</span>           <span class="number">5</span>d1<span class="built_in">h</span></span><br><span class="line">deployment.apps/dashboard<span class="literal">-metrics</span><span class="literal">-scraper</span>   <span class="number">1</span>/<span class="number">1</span>     <span class="number">1</span>            <span class="number">1</span>           <span class="number">5</span>d1<span class="built_in">h</span></span><br><span class="line">deployment.apps/kubernetes<span class="literal">-dashboard</span>        <span class="number">1</span>/<span class="number">1</span>     <span class="number">1</span>            <span class="number">1</span>           <span class="number">5</span>d1<span class="built_in">h</span></span><br><span class="line">deployment.apps/metrics<span class="literal">-server</span>              <span class="number">1</span>/<span class="number">1</span>     <span class="number">1</span>            <span class="number">1</span>           <span class="number">5</span>d1<span class="built_in">h</span></span><br><span class="line"></span><br><span class="line">NAME                                                   DESIRED   CURRENT   READY   AGE</span><br><span class="line">replicaset.apps/calico<span class="literal">-kube</span><span class="literal">-controllers</span><span class="literal">-7fdc86d8ff</span>     <span class="number">1</span>         <span class="number">1</span>         <span class="number">1</span>       <span class="number">5</span>d1<span class="built_in">h</span></span><br><span class="line">replicaset.apps/coredns<span class="literal">-65dbdb44db</span>                     <span class="number">1</span>         <span class="number">1</span>         <span class="number">1</span>       <span class="number">5</span>d1<span class="built_in">h</span></span><br><span class="line">replicaset.apps/dashboard<span class="literal">-metrics</span><span class="literal">-scraper</span><span class="literal">-545bbb8767</span>   <span class="number">1</span>         <span class="number">1</span>         <span class="number">1</span>       <span class="number">5</span>d1<span class="built_in">h</span></span><br><span class="line">replicaset.apps/kubernetes<span class="literal">-dashboard</span><span class="literal">-65665f84db</span>        <span class="number">1</span>         <span class="number">1</span>         <span class="number">1</span>       <span class="number">5</span>d1<span class="built_in">h</span></span><br><span class="line">replicaset.apps/metrics<span class="literal">-server</span><span class="literal">-869ffc99cd</span>              <span class="number">1</span>         <span class="number">1</span>         <span class="number">1</span>       <span class="number">5</span>d1<span class="built_in">h</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>使用<code>kubectl get 资源类型 --namespace=命名空间名称</code>可以查看此命名空间下的对应的资源</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pod --namespace=kube-system</span></span><br><span class="line">NAME                                         READY   STATUS    RESTARTS   AGE</span><br><span class="line">calico<span class="literal">-kube</span><span class="literal">-controllers</span><span class="literal">-7fdc86d8ff</span><span class="literal">-cskfq</span>     <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">3</span>          <span class="number">5</span>d1<span class="built_in">h</span></span><br><span class="line">calico<span class="literal">-node</span><span class="literal">-9dpc9</span>                            <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">2</span>          <span class="number">5</span>d1<span class="built_in">h</span></span><br><span class="line">calico<span class="literal">-node</span><span class="literal">-jdmxw</span>                            <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">3</span>          <span class="number">5</span>d1<span class="built_in">h</span></span><br><span class="line">calico<span class="literal">-node</span><span class="literal">-krwps</span>                            <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">2</span>          <span class="number">5</span>d1<span class="built_in">h</span></span><br><span class="line">calico<span class="literal">-node</span><span class="literal">-tttlr</span>                            <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">2</span>          <span class="number">5</span>d1<span class="built_in">h</span></span><br><span class="line">coredns<span class="literal">-65dbdb44db</span><span class="literal">-mm7cr</span>                     <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">2</span>          <span class="number">5</span>d1<span class="built_in">h</span></span><br><span class="line">dashboard<span class="literal">-metrics</span><span class="literal">-scraper</span><span class="literal">-545bbb8767</span><span class="literal">-q66bc</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">2</span>          <span class="number">5</span>d1<span class="built_in">h</span></span><br><span class="line">kubernetes<span class="literal">-dashboard</span><span class="literal">-65665f84db</span><span class="literal">-nll6k</span>        <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">4</span>          <span class="number">5</span>d1<span class="built_in">h</span></span><br><span class="line">metrics<span class="literal">-server</span><span class="literal">-869ffc99cd</span><span class="literal">-8f4jd</span>              <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">3</span>          <span class="number">5</span>d1<span class="built_in">h</span></span><br></pre></td></tr></table></figure>



<h1 id="四、创建namespace"><a href="#四、创建namespace" class="headerlink" title="四、创建namespace"></a>四、创建namespace</h1><h2 id="4-1-命令创建"><a href="#4-1-命令创建" class="headerlink" title="4.1 命令创建"></a>4.1 命令创建</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl create namespace ns1</span></span><br><span class="line">namespace/ns1 created</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get ns</span></span><br><span class="line">NAME              STATUS   AGE</span><br><span class="line">default           Active   <span class="number">5</span>d1<span class="built_in">h</span></span><br><span class="line">kube<span class="literal">-node</span><span class="literal">-lease</span>   Active   <span class="number">5</span>d1<span class="built_in">h</span></span><br><span class="line">kube<span class="literal">-public</span>       Active   <span class="number">5</span>d1<span class="built_in">h</span></span><br><span class="line">kube<span class="literal">-system</span>       Active   <span class="number">5</span>d1<span class="built_in">h</span></span><br><span class="line">ns1               Active   <span class="number">10</span>s</span><br></pre></td></tr></table></figure>



<h2 id="4-2-YAML文件创建"><a href="#4-2-YAML文件创建" class="headerlink" title="4.2 YAML文件创建"></a>4.2 YAML文件创建</h2><ul>
<li>k8s中几乎所有的资源都可以通这YAML编排来创建</li>
<li>可以使用<code>kubectl edit 资源类型 资源名</code>编辑资源的YAML语法</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl edit namespace ns1</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<ul>
<li>也可使用<code>kubectl get 资源类型 资源名 -o yaml</code>来查看</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get ns ns1 -o yaml</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<ul>
<li>==<strong>还可通过<code>kubectl explain 资源类型</code>来查看语法文档</strong>== </li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl explain namespace				   # 查看namespace相关语法参数</span></span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl explain namespace.metadata	   # 查看namespace下级metadata的相关语法参数</span></span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl explain namespace.metadata.name  # 查看namespace下级metadata再下级name的相关语法参数</span></span><br></pre></td></tr></table></figure>



<p>编写创建namespace的YAML文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># vim create_ns2.yml</span></span><br><span class="line">apiVersion: v1							<span class="comment"># api版本号</span></span><br><span class="line">kind: Namespace							<span class="comment"># 类型为namespace</span></span><br><span class="line">metadata:								<span class="comment"># 定义namespace的元数据属性</span></span><br><span class="line">  name: ns2					    		<span class="comment"># 定义name属性为ns2</span></span><br></pre></td></tr></table></figure>

<p>使用<code>kubctl apply -f</code>应用YAML文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl apply -f create_ns2.yml</span></span><br><span class="line">namespace/ns2 created</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get ns</span></span><br><span class="line">NAME              STATUS   AGE</span><br><span class="line">default           Active   <span class="number">5</span>d2<span class="built_in">h</span></span><br><span class="line">kube<span class="literal">-node</span><span class="literal">-lease</span>   Active   <span class="number">5</span>d2<span class="built_in">h</span></span><br><span class="line">kube<span class="literal">-public</span>       Active   <span class="number">5</span>d2<span class="built_in">h</span></span><br><span class="line">kube<span class="literal">-system</span>       Active   <span class="number">5</span>d2<span class="built_in">h</span></span><br><span class="line">ns1               Active   <span class="number">10</span>m</span><br><span class="line">ns2               Active   <span class="number">46</span>s</span><br></pre></td></tr></table></figure>



<h1 id="五、删除namespace"><a href="#五、删除namespace" class="headerlink" title="五、删除namespace"></a>五、删除namespace</h1><p><strong>注意:</strong> </p>
<ul>
<li>删除一个namespace会自动删除所有属于该namespace的资源(类似mysql中drop库会删除库里的所有表一样，请慎重操作)</li>
<li>default,kube-system,kube-public命名空间不可删除</li>
</ul>
<h2 id="5-1-命令删除"><a href="#5-1-命令删除" class="headerlink" title="5.1 命令删除"></a>5.1 命令删除</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl delete namespace ns1</span></span><br><span class="line">namespace <span class="string">&quot;ns1&quot;</span> deleted</span><br></pre></td></tr></table></figure>



<h2 id="5-2-YAML文件删除"><a href="#5-2-YAML文件删除" class="headerlink" title="5.2 YAML文件删除"></a>5.2 YAML文件删除</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl delete -f create_ns2.yml</span></span><br><span class="line">namespace <span class="string">&quot;ns2&quot;</span> deleted</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get ns</span></span><br><span class="line">NAME              STATUS   AGE</span><br><span class="line">default           Active   <span class="number">5</span>d2<span class="built_in">h</span></span><br><span class="line">kube<span class="literal">-node</span><span class="literal">-lease</span>   Active   <span class="number">5</span>d2<span class="built_in">h</span></span><br><span class="line">kube<span class="literal">-public</span>       Active   <span class="number">5</span>d2<span class="built_in">h</span></span><br><span class="line">kube<span class="literal">-system</span>       Active   <span class="number">5</span>d2<span class="built_in">h</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes核心概念Service</title>
    <url>/2024/03/29/%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/kubernetes%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5service/</url>
    <content><![CDATA[<h1 id="一、-service作用"><a href="#一、-service作用" class="headerlink" title="一、 service作用"></a>一、 service作用</h1><p>使用kubernetes集群运行工作负载时，由于Pod经常处于用后即焚状态，Pod经常被重新生成，因此Pod对应的IP地址也会经常变化，导致无法直接访问Pod提供的服务，Kubernetes中使用了Service来解决这一问题，即在Pod前面使用Service对Pod进行代理，无论Pod怎样变化 ，只要有Label，就可以让Service能够联系上Pod，把PodIP地址添加到Service对应的端点列表（Endpoints）实现对Pod IP跟踪，进而实现通过Service访问Pod目的。</p>
<ul>
<li>通过service为pod客户端提供访问pod方法，即可客户端访问pod入口</li>
<li>通过标签动态感知pod IP地址变化等</li>
<li>防止pod失联</li>
<li>定义访问pod访问策略</li>
<li>通过label-selector相关联</li>
<li>通过Service实现Pod的负载均衡（TCP/UDP 4层）</li>
<li>底层实现由kube-proxy通过userspace、iptables、ipvs三种代理模式</li>
</ul>
<h1 id="二、kube-proxy三种代理模式"><a href="#二、kube-proxy三种代理模式" class="headerlink" title="二、kube-proxy三种代理模式"></a>二、kube-proxy三种代理模式</h1><ul>
<li><p>kubernetes集群中有三层网络，一类是真实存在的，例如Node Network、Pod Network,提供真实IP地址;一类是虚拟的，例如Cluster Network或Service Network，提供虚拟IP地址，不会出现在接口上，仅会出现在Service当中</p>
</li>
<li><p>kube-proxy始终watch（监控）kube-apiserver上关于Service相关的资源变动状态，一旦获取相关信息kube-proxy都要把相关信息转化为当前节点之上的，能够实现Service资源调度到特定Pod之上的规则，进而实现访问Service就能够获取Pod所提供的服务</p>
</li>
<li><p>kube-proxy三种代理模式：UserSpace模式、iptables模式、ipvs模式</p>
</li>
</ul>
<h2 id="2-1-UserSpace模式"><a href="#2-1-UserSpace模式" class="headerlink" title="2.1 UserSpace模式"></a>2.1 UserSpace模式</h2><p>userspace 模式是 kube-proxy 使用的第一代模式，该模式在 kubernetes v1.0 版本开始支持使用。</p>
<p>userspace 模式的实现原理图示如下：</p>
<p><img src="/images/Kubernetes/kubernetes%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5service.assets/image-20220402102113765.png" alt="image-20220402102113765"></p>
<p>kube-proxy 会为每个 Service 随机监听一个端口(proxy port)，并增加一条 iptables 规则。所以通过 ClusterIP:Port 访问 Service 的报文都 redirect 到 proxy port，kube-proxy 从它监听的 proxy port 收到报文以后，走 round robin(默认) 或是 session affinity(会话亲和力，即同一 client IP 都走同一链路给同一 pod 服务)，分发给对应的 pod。</p>
<p>由于 userspace 模式会造成所有报文都走一遍用户态（也就是 Service 请求会先从用户空间进入内核 iptables，然后再回到用户空间，由 kube-proxy 完成后端 Endpoints 的选择和代理工作），需要在内核空间和用户空间转换，流量从用户空间进出内核会带来性能损耗，所以这种模式效率低、性能不高，不推荐使用。</p>
<p><img src="/images/Kubernetes/kubernetes%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5service.assets/service-userspace.png"></p>
<h2 id="2-2-iptables模式"><a href="#2-2-iptables模式" class="headerlink" title="2.2 iptables模式"></a>2.2 iptables模式</h2><p>iptables 模式是 kube-proxy 使用的第二代模式，该模式在 kubernetes v1.1 版本开始支持，从 v1.2 版本开始成为 kube-proxy 的默认模式。</p>
<p>iptables 模式的负载均衡模式是通过底层 netfilter/iptables 规则来实现的，通过 Informer 机制 Watch 接口实时跟踪 Service 和 Endpoint 的变更事件，并触发对 iptables 规则的同步更新。</p>
<p>iptables 模式的实现原理图示如下：</p>
<p><img src="/images/Kubernetes/kubernetes%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5service.assets/image-20220402102306186.png" alt="image-20220402102306186"></p>
<p>通过图示我们可以发现在 iptables 模式下，kube-proxy 只是作为 controller，而不是 server，真正服务的是内核的 netfilter，体现在用户态的是 iptables。所以整体的效率会比 userspace 模式高。</p>
<p><img src="/images/Kubernetes/kubernetes%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5service.assets/service-iptables.png"></p>
<h2 id="2-3-ipvs模式"><a href="#2-3-ipvs模式" class="headerlink" title="2.3 ipvs模式"></a>2.3 ipvs模式</h2><p>ipvs 模式被 kube-proxy 采纳为第三代模式，模式在 kubernetes v1.8 版本开始引入，在 v1.9 版本中处于 beta 阶段，在 v1.11 版本中正式开始使用。</p>
<p>ipvs(IP Virtual Server) 实现了传输层负载均衡，也就是 4 层交换，作为 Linux 内核的一部分。<code>ipvs</code>运行在主机上，在真实服务器前充当负载均衡器。ipvs 可以将基于 TCP 和 UDP 的服务请求转发到真实服务器上，并使真实服务器上的服务在单个 IP 地址上显示为虚拟服务。</p>
<p>ipvs 模式的实现原理图示如下：</p>
<p><img src="/images/Kubernetes/kubernetes%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5service.assets/image-20220402102614692.png" alt="image-20220402102614692"></p>
<p><img src="/images/Kubernetes/kubernetes%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5service.assets/service-ipvs.png"></p>
<p>ipvs 和 iptables 都是基于 netfilter 的，那么 ipvs 模式有哪些更好的性能呢？</p>
<ul>
<li>ipvs 为大型集群提供了更好的可拓展性和性能</li>
<li>ipvs 支持比 iptables 更复杂的负载均衡算法（包括：最小负载、最少连接、加权等）</li>
<li>ipvs 支持服务器健康检查和连接重试等功能</li>
<li>可以动态修改 ipset 的集合，即使 iptables 的规则正在使用这个集合</li>
</ul>
<p>ipvs 依赖于 iptables。ipvs 会使用 iptables 进行包过滤、airpin-masquerade tricks(地址伪装)、SNAT 等功能，但是使用的是 iptables 的扩展 ipset，并不是直接调用 iptables 来生成规则链。通过 ipset 来存储需要 DROP 或 masquerade 的流量的源或目标地址，用于确保 iptables 规则的数量是恒定的，这样我们就不需要关心有多少 Service 或是 Pod 了。</p>
<p>使用 ipset 相较于 iptables 有什么优点呢？iptables 是线性的数据结构，而 ipset 引入了带索引的数据结构，当规则很多的时候，ipset 依然可以很高效的查找和匹配。我们可以将 ipset 简单理解为一个 IP(段) 的集合，这个集合的内容可以是 IP 地址、IP 网段、端口等，iptables 可以直接添加规则对这个“可变的集合进行操作”，这样就可以大大减少 iptables 规则的数量，从而减少性能损耗。</p>
<p>举一个例子，如果我们要禁止成千上万个 IP 访问我们的服务器，如果使用 iptables 就需要一条一条的添加规则，这样会在 iptables 中生成大量的规则；如果用 ipset 就只需要将相关的 IP 地址(网段)加入到 ipset 集合中，然后只需要设置少量的 iptables 规则就可以实现这个目标。</p>
<p>下面的表格是 ipvs 模式下维护的 ipset 表集合：</p>
<table>
<thead>
<tr>
<th align="left">设置名称</th>
<th align="left">成员</th>
<th align="left">用法</th>
</tr>
</thead>
<tbody><tr>
<td align="left">KUBE-CLUSTER-IP</td>
<td align="left">所有服务 IP + 端口</td>
<td align="left">在 masquerade-all=true 或 clusterCIDR 指定的情况下对 Service Cluster IP 地址进行伪装，解决数据包欺骗问题</td>
</tr>
<tr>
<td align="left">KUBE-LOOP-BACK</td>
<td align="left">所有服务 IP + 端口 + IP</td>
<td align="left">解决数据包欺骗问题</td>
</tr>
<tr>
<td align="left">KUBE-EXTERNAL-IP</td>
<td align="left">服务外部 IP + 端口</td>
<td align="left">将数据包伪装成 Service 的外部 IP 地址</td>
</tr>
<tr>
<td align="left">KUBE-LOAD-BALANCER</td>
<td align="left">负载均衡器入口 IP + 端口</td>
<td align="left">将数据包伪装成 Load Balancer 类型的 Service</td>
</tr>
<tr>
<td align="left">KUBE-LOAD-BALANCER-LOCAL</td>
<td align="left">负载均衡器入口 IP + 端口 以及<code>externalTrafficPolicy=local</code></td>
<td align="left">接受数据包到 Load Balancer externalTrafficPolicy=local</td>
</tr>
<tr>
<td align="left">KUBE-LOAD-BALANCER-FW</td>
<td align="left">负载均衡器入口 IP + 端口 以及<code>loadBalancerSourceRanges</code></td>
<td align="left">使用指定的 loadBalancerSourceRanges 丢弃 Load Balancer 类型 Service 的数据包</td>
</tr>
<tr>
<td align="left">KUBE-LOAD-BALANCER-SOURCE-CIDR</td>
<td align="left">负载均衡器入口 IP + 端口 + 源 CIDR</td>
<td align="left">接受 Load Balancer 类型 Service 的数据包，并指定 loadBalancerSourceRanges</td>
</tr>
<tr>
<td align="left">KUBE-NODE-PORT-TCP</td>
<td align="left">NodePort 类型服务 TCP 端口</td>
<td align="left">将数据包伪装成 NodePort（TCP）</td>
</tr>
<tr>
<td align="left">KUBE-NODE-PORT-LOCAL-TCP</td>
<td align="left">NodePort 类型服务 TCP 端口，带有<code>externalTrafficPolicy=local</code></td>
<td align="left">接受数据包到 NodePort 服务，使用 externalTrafficPolicy=local</td>
</tr>
<tr>
<td align="left">KUBE-NODE-PORT-UDP</td>
<td align="left">NodePort 类型服务 UDP 端口</td>
<td align="left">将数据包伪装成 NodePort(UDP)</td>
</tr>
<tr>
<td align="left">KUBE-NODE-PORT-LOCAL-UDP</td>
<td align="left">NodePort 类型服务 UDP 端口，使用<code>externalTrafficPolicy=local</code></td>
<td align="left">接受数据包到 NodePort 服务，使用 externalTrafficPolicy=local</td>
</tr>
</tbody></table>
<h2 id="2-4-iptables与ipvs对比"><a href="#2-4-iptables与ipvs对比" class="headerlink" title="2.4 iptables与ipvs对比"></a>2.4 iptables与ipvs对比</h2><ul>
<li>iptables<ul>
<li>工作在内核空间</li>
<li>优点<ul>
<li>灵活，功能强大（可以在数据包不同阶段对包进行操作）</li>
</ul>
</li>
<li>缺点<ul>
<li>表中规则过多时，响应变慢，即规则遍历匹配和更新，呈线性时延</li>
</ul>
</li>
</ul>
</li>
<li>ipvs<ul>
<li>工作在内核空间</li>
<li>优点<ul>
<li>转发效率高</li>
<li>调度算法丰富：rr，wrr，lc，wlc，ip hash…</li>
</ul>
</li>
<li>缺点<ul>
<li>内核支持不全,低版本内核不能使用，需要升级到4.0或5.0以上。</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li>使用iptables与ipvs时机<ul>
<li>1.10版本之前使用iptables(1.1版本之前使用UserSpace进行转发)</li>
<li>1.11版本之后同时支持iptables与ipvs，默认使用ipvs，如果ipvs模块没有加载时，会自动降级至iptables</li>
</ul>
</li>
</ul>
<h1 id="三、-service类型"><a href="#三、-service类型" class="headerlink" title="三、 service类型"></a>三、 service类型</h1><p>Service类型决定了访问Service的方法</p>
<h2 id="3-1-service类型"><a href="#3-1-service类型" class="headerlink" title="3.1 service类型"></a>3.1 service类型</h2><ul>
<li><p>ClusterIP</p>
<ul>
<li>默认，分配一个集群内部可以访问的虚拟IP</li>
</ul>
</li>
<li><p>NodePort</p>
<ul>
<li>在每个Node上分配一个端口作为外部访问入口</li>
<li>nodePort端口范围为:30000-32767</li>
</ul>
</li>
<li><p>LoadBalancer</p>
<ul>
<li>工作在特定的Cloud Provider上，例如Google Cloud，AWS，OpenStack</li>
</ul>
</li>
<li><p>ExternalName</p>
<ul>
<li>表示把集群外部的服务引入到集群内部中来，即实现了集群内部pod和集群外部的服务进行通信</li>
</ul>
</li>
</ul>
<h2 id="3-2-Service参数"><a href="#3-2-Service参数" class="headerlink" title="3.2 Service参数"></a>3.2 Service参数</h2><ul>
<li><p>port             访问service使用的端口</p>
</li>
<li><p>targetPort  Pod中容器端口</p>
</li>
<li><p>nodePort   通过Node实现外网用户访问k8s集群内service (30000-32767)</p>
</li>
</ul>
<h1 id="四、-Service创建"><a href="#四、-Service创建" class="headerlink" title="四、 Service创建"></a>四、 Service创建</h1><blockquote>
<p>Service的创建在工作中有两种方式，一是命令行创建，二是通过资源清单文件YAML文件创建。</p>
</blockquote>
<h2 id="4-1-ClusterIP类型"><a href="#4-1-ClusterIP类型" class="headerlink" title="4.1 ClusterIP类型"></a>4.1 ClusterIP类型</h2><p>ClusterIP根据是否生成ClusterIP又可分为普通Service和Headless Service</p>
<p>Service两类：</p>
<ul>
<li>普通Service: </li>
</ul>
<p>为Kubernetes的Service分配一个集群内部可访问的固定虚拟IP(Cluster IP), 实现集群内的访问。</p>
<ul>
<li>Headless Service: </li>
</ul>
<p>该服务不会分配Cluster IP, 也不通过kube-proxy做反向代理和负载均衡。而是通过DNS提供稳定的网络ID来访问，DNS会将headless service的后端直接解析为pod IP列表。</p>
<p><img src="/images/Kubernetes/kubernetes%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5service.assets/image-20200531203549337.png" alt="image-20200531203549337"></p>
<h3 id="4-1-1-普通ClusterIP-Service创建"><a href="#4-1-1-普通ClusterIP-Service创建" class="headerlink" title="4.1.1 普通ClusterIP Service创建"></a>4.1.1 普通ClusterIP Service创建</h3><h4 id="4-1-1-1-命令行创建Service"><a href="#4-1-1-1-命令行创建Service" class="headerlink" title="4.1.1.1 命令行创建Service"></a>4.1.1.1 命令行创建Service</h4><ul>
<li>创建Deployment类型的应用</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># cat 01_create_deployment_app_nginx.yaml</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx<span class="literal">-server1</span></span><br><span class="line">spec:</span><br><span class="line">  replicas: <span class="number">2</span></span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  template:</span><br><span class="line">     metadata:</span><br><span class="line">       labels:</span><br><span class="line">         app: nginx</span><br><span class="line">     spec:</span><br><span class="line">       containers:</span><br><span class="line">       - name: c1</span><br><span class="line">         image: nginx:<span class="number">1.15</span><span class="literal">-alpine</span></span><br><span class="line">         imagePullPolicy: IfNotPresent</span><br><span class="line">         ports:</span><br><span class="line">         - containerPort: <span class="number">80</span></span><br></pre></td></tr></table></figure>



<ul>
<li>应用资源清单文件</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl apply -f 01_create_deployment_app_nginx.yaml</span></span><br></pre></td></tr></table></figure>



<ul>
<li>验证Deployment类型的创建情况</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl get deployment.apps</span></span><br><span class="line">NAME            READY   UP<span class="literal">-TO</span><span class="literal">-DATE</span>   AVAILABLE   AGE</span><br><span class="line">nginx<span class="literal">-server1</span>   <span class="number">2</span>/<span class="number">2</span>     <span class="number">2</span>            <span class="number">2</span>           <span class="number">13</span>s</span><br></pre></td></tr></table></figure>



<ul>
<li>创建ClusterIP类型service与Deployment类型应用关联</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">命令创建service</span><br><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl expose deployment.apps nginx-server1 --type=ClusterIP --target-port=80 --port=80</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">输出</span><br><span class="line">service/nginx<span class="literal">-server1</span> exposed</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">说明</span><br><span class="line">expose 创建service</span><br><span class="line">deployment.apps 控制器类型</span><br><span class="line">nginx<span class="literal">-server1</span> 应用名称，也是service名称</span><br><span class="line">-<span class="literal">-type</span>=ClusterIP 指定service类型</span><br><span class="line">-<span class="literal">-target</span><span class="literal">-port</span>=<span class="number">80</span> 指定Pod中容器端口</span><br><span class="line">-<span class="literal">-port</span>=<span class="number">80</span> 指定service端口</span><br></pre></td></tr></table></figure>





<h4 id="4-1-1-2-通过资源清单文件创建Service"><a href="#4-1-1-2-通过资源清单文件创建Service" class="headerlink" title="4.1.1.2 通过资源清单文件创建Service"></a>4.1.1.2 通过资源清单文件创建Service</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># cat 02_create_deployment_app_nginx_with_service.yaml</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx<span class="literal">-server1</span></span><br><span class="line">spec:</span><br><span class="line">  replicas: <span class="number">2</span></span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  template:</span><br><span class="line">     metadata:</span><br><span class="line">       labels:</span><br><span class="line">         app: nginx</span><br><span class="line">     spec:</span><br><span class="line">       containers:</span><br><span class="line">       - name: nginx<span class="literal">-smart</span></span><br><span class="line">         image: nginx:<span class="number">1.15</span><span class="literal">-alpine</span></span><br><span class="line">         imagePullPolicy: IfNotPresent</span><br><span class="line">         ports:</span><br><span class="line">         - containerPort: <span class="number">80</span></span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx<span class="literal">-svc</span></span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: ClusterIP</span><br><span class="line">  ports:</span><br><span class="line">  - protocol: TCP</span><br><span class="line">    port: <span class="number">80</span></span><br><span class="line">    targetPort: <span class="number">80</span></span><br><span class="line">  selector:</span><br><span class="line">    app: nginx</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl  apply -f 02_create_deployment_app_nginx_with_service.yaml</span></span><br></pre></td></tr></table></figure>



<ul>
<li>验证</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">查看service</span><br><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl get service</span></span><br><span class="line">NAME         <span class="built_in">TYPE</span>        CLUSTER<span class="literal">-IP</span>       EXTERNAL<span class="literal">-IP</span>   PORT(S)    AGE</span><br><span class="line">kubernetes   ClusterIP   <span class="number">10.96</span>.<span class="number">0.1</span>        &lt;none&gt;        <span class="number">443</span>/TCP    <span class="number">4</span>d15<span class="built_in">h</span></span><br><span class="line">nginx<span class="literal">-svc</span>    ClusterIP   <span class="number">10.101</span>.<span class="number">153.50</span>   &lt;none&gt;        <span class="number">80</span>/TCP    <span class="number">3</span>s</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">查看endpoints</span><br><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl get endpoints</span></span><br><span class="line">NAME         ENDPOINTS                            AGE</span><br><span class="line">kubernetes   <span class="number">192.168</span>.<span class="number">122.30</span>:<span class="number">6443</span>                  <span class="number">4</span>d15<span class="built_in">h</span></span><br><span class="line">nginx<span class="literal">-svc</span>    <span class="number">172.16</span>.<span class="number">189.74</span>:<span class="number">80</span>,<span class="number">172.16</span>.<span class="number">235.150</span>:<span class="number">80</span>   <span class="number">8</span>s</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">查看Pod</span><br><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl get pods -l app=nginx</span></span><br><span class="line">NAME                             READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx<span class="literal">-server1</span><span class="literal">-77d4c485d8</span><span class="literal">-gsrmq</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">12</span>s</span><br><span class="line">nginx<span class="literal">-server1</span><span class="literal">-77d4c485d8</span><span class="literal">-mmc52</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">12</span>s</span><br></pre></td></tr></table></figure>



<h4 id="4-1-1-3-访问"><a href="#4-1-1-3-访问" class="headerlink" title="4.1.1.3 访问"></a>4.1.1.3 访问</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># curl http://10.101.153.50:80</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">        width: <span class="number">35</span>em;</span><br><span class="line">        margin: <span class="number">0</span> auto;</span><br><span class="line">        font<span class="literal">-family</span>: Tahoma, Verdana, Arial, sans<span class="literal">-serif</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;<span class="keyword">If</span> you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;<span class="keyword">For</span> online documentation and support please refer to</span><br><span class="line">&lt;a href=<span class="string">&quot;http://nginx.org/&quot;</span>&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href=<span class="string">&quot;http://nginx.com/&quot;</span>&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you <span class="keyword">for</span> <span class="keyword">using</span> nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<h4 id="4-1-1-4-两个pod里做成不同的主页方便测试负载均衡"><a href="#4-1-1-4-两个pod里做成不同的主页方便测试负载均衡" class="headerlink" title="4.1.1.4 两个pod里做成不同的主页方便测试负载均衡"></a>4.1.1.4 两个pod里做成不同的主页方便测试负载均衡</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl exec -it nginx-server1-77d4c485d8-gsrmq -- /bin/bash</span></span><br><span class="line">root@deployment<span class="literal">-nginx</span><span class="literal">-6fcfb67547</span><span class="literal">-nv7dn</span>:/<span class="comment"># cd /usr/share/nginx/html/</span></span><br><span class="line">root@deployment<span class="literal">-nginx</span><span class="literal">-6fcfb67547</span><span class="literal">-nv7dn</span>:/usr/share/nginx/html<span class="comment"># echo web1 &gt; index.html</span></span><br><span class="line">root@deployment<span class="literal">-nginx</span><span class="literal">-6fcfb67547</span><span class="literal">-nv7dn</span>:/usr/share/nginx/html<span class="comment"># exit</span></span><br><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl exec -it nginx-server1-77d4c485d8-mmc52 -- /bin/bash</span></span><br><span class="line">root@deployment<span class="literal">-nginx</span><span class="literal">-6fcfb67547</span><span class="literal">-rqrcw</span>:/<span class="comment"># cd /usr/share/nginx/html/</span></span><br><span class="line">root@deployment<span class="literal">-nginx</span><span class="literal">-6fcfb67547</span><span class="literal">-rqrcw</span>:/usr/share/nginx/html<span class="comment"># echo web2 &gt; index.html</span></span><br><span class="line">root@deployment<span class="literal">-nginx</span><span class="literal">-6fcfb67547</span><span class="literal">-rqrcw</span>:/usr/share/nginx/html<span class="comment"># exit</span></span><br><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure>



<h4 id="4-1-1-5-测试"><a href="#4-1-1-5-测试" class="headerlink" title="4.1.1.5 测试"></a>4.1.1.5 测试</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># curl 10.101.153.50</span></span><br><span class="line">或</span><br><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># while true;do curl 10.101.153.50;sleep 1; done</span></span><br></pre></td></tr></table></figure>



<h3 id="4-1-2-Headless-Service"><a href="#4-1-2-Headless-Service" class="headerlink" title="4.1.2 Headless Service"></a>4.1.2 Headless Service</h3><ul>
<li>普通的ClusterIP service是service name解析为cluster ip,然后cluster ip对应到后面的pod ip</li>
<li>Headless service是指service name 直接解析为后面的pod ip</li>
</ul>
<h4 id="4-1-2-1-编写用于创建Deployment控制器类型的资源清单文件"><a href="#4-1-2-1-编写用于创建Deployment控制器类型的资源清单文件" class="headerlink" title="4.1.2.1 编写用于创建Deployment控制器类型的资源清单文件"></a>4.1.2.1 编写用于创建Deployment控制器类型的资源清单文件</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># cat 03_create_deployment_app_nginx.yaml</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx<span class="literal">-server1</span></span><br><span class="line">spec:</span><br><span class="line">  replicas: <span class="number">2</span></span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  template:</span><br><span class="line">     metadata:</span><br><span class="line">       labels:</span><br><span class="line">         app: nginx</span><br><span class="line">     spec:</span><br><span class="line">       containers:</span><br><span class="line">       - name: nginx<span class="literal">-smart</span></span><br><span class="line">         image: nginx:<span class="number">1.15</span><span class="literal">-alpine</span></span><br><span class="line">         imagePullPolicy: IfNotPresent</span><br><span class="line">         ports:</span><br><span class="line">         - containerPort: <span class="number">80</span></span><br></pre></td></tr></table></figure>



<h4 id="4-1-2-2-通过资源清单文件创建headless-Service"><a href="#4-1-2-2-通过资源清单文件创建headless-Service" class="headerlink" title="4.1.2.2 通过资源清单文件创建headless Service"></a>4.1.2.2 通过资源清单文件创建headless Service</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">编写YAML文件</span><br><span class="line">命令</span><br><span class="line">[<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># vim 04_headless-service.yml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: headless<span class="literal">-service</span></span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: ClusterIP     <span class="comment"># ClusterIP类型,也是默认类型</span></span><br><span class="line">  clusterIP: None     <span class="comment"># None就代表是无头service</span></span><br><span class="line">  ports:                                <span class="comment"># 指定service 端口及容器端口</span></span><br><span class="line">  - port: <span class="number">80</span>                            <span class="comment"># service ip中的端口</span></span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: <span class="number">80</span>                      <span class="comment"># pod中的端口</span></span><br><span class="line">  selector:                             <span class="comment"># 指定后端pod标签</span></span><br><span class="line">     app: nginx                    <span class="comment"># 可通过kubectl get pod -l app=nginx查看哪些pod在使用此标签</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure>



<h4 id="4-1-2-3-应用资源清单文件创建headless-Service"><a href="#4-1-2-3-应用资源清单文件创建headless-Service" class="headerlink" title="4.1.2.3 应用资源清单文件创建headless Service"></a>4.1.2.3 应用资源清单文件创建headless Service</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">命令</span><br><span class="line">[<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># kubectl apply -f 04_headless_service.yml</span></span><br><span class="line">输出</span><br><span class="line">service/headless<span class="literal">-service</span> created</span><br></pre></td></tr></table></figure>



<h4 id="4-1-2-4-查看已创建的headless-Service"><a href="#4-1-2-4-查看已创建的headless-Service" class="headerlink" title="4.1.2.4 查看已创建的headless Service"></a>4.1.2.4 查看已创建的headless Service</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">命令</span><br><span class="line">[<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># kubectl get svc</span></span><br><span class="line">输出</span><br><span class="line">NAME               <span class="built_in">TYPE</span>        CLUSTER<span class="literal">-IP</span>       EXTERNAL<span class="literal">-IP</span>   PORT(S)          AGE</span><br><span class="line">headless<span class="literal">-service</span>   ClusterIP   None             &lt;none&gt;        <span class="number">80</span>/TCP           <span class="number">2</span>m18s</span><br><span class="line">kubernetes         ClusterIP   <span class="number">10.96</span>.<span class="number">0.1</span>        &lt;none&gt;        <span class="number">443</span>/TCP          <span class="number">5</span>d9<span class="built_in">h</span></span><br><span class="line">可以看到headless<span class="literal">-service</span>没有CLUSTER<span class="literal">-IP</span>,用None表示</span><br></pre></td></tr></table></figure>



<h4 id="4-1-2-5-DNS"><a href="#4-1-2-5-DNS" class="headerlink" title="4.1.2.5 DNS"></a>4.1.2.5 DNS</h4><p>DNS服务监视Kubernetes API,为每一个Service创建DNS记录用于域名解析</p>
<p>headless service需要DNS来解决访问问题</p>
<p>DNS记录格式为: <service-name>.<namespace-name>.svc.cluster.local.</namespace-name></service-name></p>
<h5 id="4-1-2-5-1-查看kube-dns服务的IP"><a href="#4-1-2-5-1-查看kube-dns服务的IP" class="headerlink" title="4.1.2.5.1 查看kube-dns服务的IP"></a>4.1.2.5.1 查看kube-dns服务的IP</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">命令</span><br><span class="line">[<span class="type">root</span>@<span class="type">master1</span> ~]<span class="comment"># kubectl get svc -n kube-system</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">NAME             <span class="built_in">TYPE</span>        CLUSTER<span class="literal">-IP</span>      EXTERNAL<span class="literal">-IP</span>   PORT(S)                  AGE</span><br><span class="line">kube<span class="literal">-dns</span>         ClusterIP   <span class="number">10.96</span>.<span class="number">0.2</span>      &lt;none&gt;        <span class="number">53</span>/UDP,<span class="number">53</span>/TCP,<span class="number">9153</span>/TCP   <span class="number">5</span>d9<span class="built_in">h</span></span><br><span class="line">metrics<span class="literal">-server</span>   ClusterIP   <span class="number">10.105</span>.<span class="number">219.44</span>   &lt;none&gt;        <span class="number">443</span>/TCP                  <span class="number">45</span><span class="built_in">h</span></span><br><span class="line">查看到coreDNS的服务地址是<span class="number">10.96</span>.<span class="number">0.2</span></span><br></pre></td></tr></table></figure>



<h5 id="4-1-2-5-2-在集群主机通过DNS服务地址查找无头服务的dns解析"><a href="#4-1-2-5-2-在集群主机通过DNS服务地址查找无头服务的dns解析" class="headerlink" title="4.1.2.5.2 在集群主机通过DNS服务地址查找无头服务的dns解析"></a>4.1.2.5.2 在集群主机通过DNS服务地址查找无头服务的dns解析</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">命令</span><br><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># dig -t A headless-service.default.svc.cluster.local. @10.96.0.2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">; &lt;&lt;&gt;&gt; DiG <span class="number">9.11</span>.<span class="number">4</span><span class="literal">-P2</span><span class="literal">-RedHat</span><span class="literal">-9</span>.<span class="number">11.4</span><span class="literal">-16</span>.P2.el7_8.<span class="number">2</span> &lt;&lt;&gt;&gt; <span class="literal">-t</span> A headless<span class="literal">-service</span>.default.svc.cluster.local. @<span class="number">10.96</span>.<span class="number">0.2</span></span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; WARNING: .local is reserved <span class="keyword">for</span> Multicast DNS</span><br><span class="line">;; You are currently testing what happens when an mDNS query is leaked to DNS</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: <span class="number">31371</span></span><br><span class="line">;; flags: qr aa <span class="built_in">rd</span>; QUERY: <span class="number">1</span>, ANSWER: <span class="number">1</span>, AUTHORITY: <span class="number">0</span>, ADDITIONAL: <span class="number">1</span></span><br><span class="line">;; WARNING: recursion requested but not available</span><br><span class="line"></span><br><span class="line">;; OPT PSEUDOSECTION:</span><br><span class="line">; EDNS: version: <span class="number">0</span>, flags:; udp: <span class="number">4096</span></span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;headless<span class="literal">-service</span>.default.svc.cluster.local. <span class="keyword">IN</span> A <span class="comment">#被解析域名</span></span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">headless<span class="literal">-service</span>.default.svc.cluster.local. <span class="number">30</span> <span class="keyword">IN</span> A <span class="number">10.224</span>.<span class="number">235.147</span> <span class="comment">#注意这里IP</span></span><br><span class="line"></span><br><span class="line">;; Query time: <span class="number">0</span> msec</span><br><span class="line">;; SERVER: <span class="number">10.96</span>.<span class="number">0.10</span><span class="comment">#53(10.96.0.2)</span></span><br><span class="line">;; WHEN: Sun May <span class="number">17</span> <span class="number">10</span>:<span class="number">58</span>:<span class="number">50</span> CST <span class="number">2020</span></span><br><span class="line">;; MSG SIZE  rcvd: <span class="number">129</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="4-1-2-5-3-验证pod的IP"><a href="#4-1-2-5-3-验证pod的IP" class="headerlink" title="4.1.2.5.3  验证pod的IP"></a>4.1.2.5.3  验证pod的IP</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">命令</span><br><span class="line">[<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># kubectl get pod -o wide</span></span><br><span class="line">输出</span><br><span class="line">NAME                                READY   STATUS             RESTARTS   AGE   IP               NODE      NOMINATED NODE   READINESS GATES</span><br><span class="line">nginx<span class="literal">-deployment</span><span class="literal">-56bf6c9c8c</span><span class="literal">-jmk7r</span>   <span class="number">1</span>/<span class="number">1</span>     Running            <span class="number">0</span>          <span class="number">35</span>m   <span class="number">10.224</span>.<span class="number">235.147</span>   worker1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="4-1-2-5-4-在集群中创建一个pod验证"><a href="#4-1-2-5-4-在集群中创建一个pod验证" class="headerlink" title="4.1.2.5.4 在集群中创建一个pod验证"></a>4.1.2.5.4 在集群中创建一个pod验证</h5><blockquote>
<p>创建一个镜像为busyboxplus:curl的pod，pod名称为bb2,用来解析域名</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">命令</span><br><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl run bbp --image=busyboxplus:curl -it</span></span><br><span class="line"></span><br><span class="line">或</span><br><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl run bbp --image=1.28 -it</span></span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line"><span class="keyword">If</span> you don<span class="string">&#x27;t see a command prompt, try pressing enter.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">解析域名</span></span><br><span class="line"><span class="string">nslookup headless-service.default.svc.cluster.local.</span></span><br><span class="line"><span class="string">访问命令</span></span><br><span class="line"><span class="string">[ root@bbp:/ ]$ curl http://headless-service.default.svc.cluster.local.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">输出</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;style&gt;</span></span><br><span class="line"><span class="string">    body &#123;</span></span><br><span class="line"><span class="string">        width: 35em;</span></span><br><span class="line"><span class="string">        margin: 0 auto;</span></span><br><span class="line"><span class="string">        font-family: Tahoma, Verdana, Arial, sans-serif;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span></span><br><span class="line"><span class="string">working. Further configuration is required.&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p&gt;For online documentation and support please refer to</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span></span><br><span class="line"><span class="string">Commercial support is available at</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">[ root@bbp:/ ]$ exit</span></span><br><span class="line"><span class="string">Session ended, resume using &#x27;</span>kubectl attach bbp <span class="literal">-c</span> bbp <span class="literal">-i</span> <span class="literal">-t</span><span class="string">&#x27; command when the pod is running</span></span><br></pre></td></tr></table></figure>





<h2 id="4-2-NodePort类型"><a href="#4-2-NodePort类型" class="headerlink" title="4.2 NodePort类型"></a>4.2 NodePort类型</h2><ul>
<li>创建资源清单文件</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># cat 05_create_nodeport_service_app.yaml</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx<span class="literal">-app</span></span><br><span class="line">  labels:</span><br><span class="line">    app: nginx<span class="literal">-app</span></span><br><span class="line">spec:</span><br><span class="line">  replicas: <span class="number">2</span></span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx<span class="literal">-app</span></span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx<span class="literal">-app</span></span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: c1</span><br><span class="line">        image: nginx:<span class="number">1.15</span><span class="literal">-alpine</span></span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: <span class="number">80</span></span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx<span class="literal">-app</span></span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  selector:</span><br><span class="line">    app: nginx<span class="literal">-app</span></span><br><span class="line">  ports:</span><br><span class="line">  - protocol: TCP</span><br><span class="line">    nodePort: <span class="number">30001</span></span><br><span class="line">    port: <span class="number">8060</span></span><br><span class="line">    targetPort: <span class="number">80</span></span><br></pre></td></tr></table></figure>

<ul>
<li>应用资源清单文件</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl apply -f 05_create_nodeport_service_app.yaml</span></span><br><span class="line">deployment.apps/nginx<span class="literal">-app</span> created</span><br><span class="line">service/nginx<span class="literal">-app</span> created</span><br></pre></td></tr></table></figure>

<ul>
<li>验证service创建</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl get deployment.apps</span></span><br><span class="line">NAME         READY   UP<span class="literal">-TO</span><span class="literal">-DATE</span>   AVAILABLE   AGE</span><br><span class="line">nginx<span class="literal">-app</span>    <span class="number">2</span>/<span class="number">2</span>     <span class="number">2</span>            <span class="number">2</span>           <span class="number">26</span>s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl get svc</span></span><br><span class="line">NAME         <span class="built_in">TYPE</span>        CLUSTER<span class="literal">-IP</span>       EXTERNAL<span class="literal">-IP</span>   PORT(S)          AGE</span><br><span class="line">kubernetes   ClusterIP   <span class="number">10.96</span>.<span class="number">0.1</span>        &lt;none&gt;        <span class="number">443</span>/TCP          <span class="number">2</span>d22<span class="built_in">h</span></span><br><span class="line">nginx<span class="literal">-app</span>    NodePort    <span class="number">10.104</span>.<span class="number">157.20</span>    &lt;none&gt;        <span class="number">8060</span>:<span class="number">30001</span>/TCP   <span class="number">36</span>s</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl get endpoints</span></span><br><span class="line">NAME         ENDPOINTS                       AGE</span><br><span class="line">kubernetes   <span class="number">192.168</span>.<span class="number">122.10</span>:<span class="number">6443</span>             <span class="number">2</span>d22<span class="built_in">h</span></span><br><span class="line">nginx<span class="literal">-app</span>    <span class="number">172.16</span>.<span class="number">1.24</span>:<span class="number">80</span>,<span class="number">172.16</span>.<span class="number">2.20</span>:<span class="number">80</span>   <span class="number">2</span>m10s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># ss -anput | grep &quot;:30001&quot;</span></span><br><span class="line">tcp    LISTEN     <span class="number">0</span>      <span class="number">128</span>      :::<span class="number">30001</span>                :::*                   users:((<span class="string">&quot;kube-proxy&quot;</span>,pid=<span class="number">5826</span>,fd=<span class="number">9</span>))</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">worker01</span> ~]<span class="comment"># ss -anput | grep &quot;:30001&quot;</span></span><br><span class="line">tcp    LISTEN     <span class="number">0</span>      <span class="number">128</span>      :::<span class="number">30001</span>                :::*                   users:((<span class="string">&quot;kube-proxy&quot;</span>,pid=<span class="number">4937</span>,fd=<span class="number">11</span>))</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">worker02</span> ~]<span class="comment"># ss -anput | grep &quot;:30001&quot;</span></span><br><span class="line">tcp    LISTEN     <span class="number">0</span>      <span class="number">128</span>      :::<span class="number">30001</span>                :::*                   users:((<span class="string">&quot;kube-proxy&quot;</span>,pid=<span class="number">5253</span>,fd=<span class="number">11</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl get pods</span></span><br><span class="line">NAME                          READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx<span class="literal">-app</span><span class="literal">-ffd5ccc78</span><span class="literal">-cnwbx</span>    <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">8</span>m59s</span><br><span class="line">nginx<span class="literal">-app</span><span class="literal">-ffd5ccc78</span><span class="literal">-mz77g</span>    <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">8</span>m59s</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl exec -it nginx-app-ffd5ccc78-cnwbx -- bash</span></span><br><span class="line">root@nginx<span class="literal">-app</span><span class="literal">-ffd5ccc78</span><span class="literal">-cnwbx</span>:/<span class="comment"># echo &quot;nginx-app-1&quot; &gt; /usr/share/nginx/html/index.html</span></span><br><span class="line">root@nginx<span class="literal">-app</span><span class="literal">-ffd5ccc78</span><span class="literal">-cnwbx</span>:/<span class="comment"># exit</span></span><br><span class="line"><span class="keyword">exit</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl exec -it nginx-app-ffd5ccc78-mz77g -- bash</span></span><br><span class="line">root@nginx<span class="literal">-app</span><span class="literal">-ffd5ccc78</span><span class="literal">-mz77g</span>:/<span class="comment"># echo &quot;nginx-app-2&quot; &gt; /usr/share/nginx/html/index.html</span></span><br><span class="line">root@nginx<span class="literal">-app</span><span class="literal">-ffd5ccc78</span><span class="literal">-mz77g</span>:/<span class="comment"># exit</span></span><br><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在与kubernetes 节点同一网络主机中访问k8s集群内service</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">bogon</span> ~]<span class="comment"># curl http://192.168.10.12:30001</span></span><br><span class="line">nginx<span class="literal">-app</span><span class="literal">-2</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">bogon</span> ~]<span class="comment"># curl http://192.168.10.13:30001</span></span><br><span class="line">nginx<span class="literal">-app</span><span class="literal">-1</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">bogon</span> ~]<span class="comment"># curl http://192.168.10.14:30001</span></span><br><span class="line">nginx<span class="literal">-app</span><span class="literal">-1</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">bogon</span> ~]<span class="comment"># curl http://192.168.10.15:30001</span></span><br><span class="line">nginx<span class="literal">-app</span><span class="literal">-2</span></span><br></pre></td></tr></table></figure>



<h2 id="4-3-LoadBalancer"><a href="#4-3-LoadBalancer" class="headerlink" title="4.3 LoadBalancer"></a>4.3 LoadBalancer</h2><h3 id="4-3-1-集群外访问过程"><a href="#4-3-1-集群外访问过程" class="headerlink" title="4.3.1 集群外访问过程"></a>4.3.1 集群外访问过程</h3><ul>
<li><h4 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h4></li>
<li><h4 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h4></li>
<li><h4 id="云服务提供商提供LB服务"><a href="#云服务提供商提供LB服务" class="headerlink" title="云服务提供商提供LB服务"></a>云服务提供商提供LB服务</h4></li>
<li><h4 id="NodeIP-Port-service-IP"><a href="#NodeIP-Port-service-IP" class="headerlink" title="NodeIP:Port(service IP)"></a>NodeIP:Port(service IP)</h4></li>
<li><h4 id="Pod-IP：端口"><a href="#Pod-IP：端口" class="headerlink" title="Pod IP：端口"></a>Pod IP：端口</h4></li>
</ul>
<p><img src="/images/Kubernetes/kubernetes%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5service.assets/image-20200531203510735.png" alt="image-20200531203510735"></p>
<h3 id="4-3-2-自建Kubernetes的LoadBalancer类型服务方案-MetalLB"><a href="#4-3-2-自建Kubernetes的LoadBalancer类型服务方案-MetalLB" class="headerlink" title="4.3.2  自建Kubernetes的LoadBalancer类型服务方案-MetalLB"></a>4.3.2  自建Kubernetes的LoadBalancer类型服务方案-MetalLB</h3><p>MetalLB可以为kubernetes集群中的Service提供网络负载均衡功能。</p>
<p>MetalLB两大功能为:</p>
<ul>
<li>地址分配，类似于DHCP</li>
<li>外部通告，一旦MetalLB为服务分配了外部IP地址，它就需要使群集之外的网络意识到该IP在群集中“存在”。MetalLB使用标准路由协议来实现此目的：ARP，NDP或BGP。</li>
</ul>
<h4 id="4-3-2-1-参考资料"><a href="#4-3-2-1-参考资料" class="headerlink" title="4.3.2.1  参考资料"></a>4.3.2.1  参考资料</h4><p>参考网址： <a href="https://metallb.universe.tf/installation/">https://metallb.universe.tf/installation/</a></p>
<h4 id="4-3-2-2-应用资源清单文件"><a href="#4-3-2-2-应用资源清单文件" class="headerlink" title="4.3.2.2  应用资源清单文件"></a>4.3.2.2  应用资源清单文件</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">资源清单文件下载：</span><br><span class="line"><span class="comment"># kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.12.1/manifests/namespace.yaml</span></span><br><span class="line"><span class="comment"># kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.12.1/manifests/metallb.yaml</span></span><br></pre></td></tr></table></figure>



<h4 id="4-3-2-3-准备metallb配置文件"><a href="#4-3-2-3-准备metallb配置文件" class="headerlink" title="4.3.2.3 准备metallb配置文件"></a>4.3.2.3 准备metallb配置文件</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">nginx</span> <span class="type">metallb</span>]<span class="comment"># cat metallb-conf.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  namespace: metallb<span class="literal">-system</span></span><br><span class="line">  name: config</span><br><span class="line"><span class="keyword">data</span>:</span><br><span class="line">  config: |</span><br><span class="line">    address<span class="literal">-pools</span>:</span><br><span class="line">    - name: default</span><br><span class="line">      protocol: layer2</span><br><span class="line">      addresses:</span><br><span class="line">      - <span class="number">192.168</span>.<span class="number">10.90</span><span class="literal">-192</span>.<span class="number">168.10</span>.<span class="number">100</span></span><br><span class="line"> </span><br><span class="line"><span class="number">192.168</span>.<span class="number">10.90</span><span class="literal">-192</span>.<span class="number">168.10</span>.<span class="number">100</span>是集群节点服务器IP同一段。</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">在master01节点应用资源清单文件</span><br><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl apply -f metallb-conf.yaml	</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">验证配置</span><br><span class="line"><span class="comment"># kubectl describe configmap config -n metallb-system</span></span><br><span class="line">Name:         config</span><br><span class="line">Namespace:    metallb<span class="literal">-system</span></span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">Data</span></span><br><span class="line">====</span><br><span class="line">config:</span><br><span class="line">----</span><br><span class="line">address<span class="literal">-pools</span>:</span><br><span class="line">- name: default</span><br><span class="line">  protocol: layer2</span><br><span class="line">  addresses:</span><br><span class="line">  - <span class="number">192.168</span>.<span class="number">10.90</span><span class="literal">-192</span>.<span class="number">168.10</span>.<span class="number">100</span></span><br><span class="line"></span><br><span class="line">Events:  &lt;none&gt;</span><br></pre></td></tr></table></figure>





<h4 id="4-3-2-4发布Service类型为LoadBalancer的Deployment控制器类型应用"><a href="#4-3-2-4发布Service类型为LoadBalancer的Deployment控制器类型应用" class="headerlink" title="4.3.2.4发布Service类型为LoadBalancer的Deployment控制器类型应用"></a>4.3.2.4发布Service类型为LoadBalancer的Deployment控制器类型应用</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">创建Deployment控制器类型应用nginx<span class="literal">-metallb</span>及service，service类型为LoadBalancer</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># vim 02_nginx-metabllb.yaml</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx<span class="literal">-metallb</span></span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx<span class="literal">-metallb1</span></span><br><span class="line">        image: nginx:<span class="number">1.15</span><span class="literal">-alpine</span></span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: <span class="number">80</span></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx<span class="literal">-metallb</span></span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: <span class="number">8090</span></span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: <span class="number">80</span></span><br><span class="line">  selector:</span><br><span class="line">    app: nginx</span><br><span class="line">  <span class="built_in">type</span>: LoadBalancer</span><br><span class="line">  </span><br><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl apply -f nginx.yaml</span></span><br></pre></td></tr></table></figure>



<h4 id="4-3-2-5-验证"><a href="#4-3-2-5-验证" class="headerlink" title="4.3.2.5 验证"></a>4.3.2.5 验证</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl get ns</span></span><br><span class="line">NAME                   STATUS   AGE</span><br><span class="line">default                Active   <span class="number">16</span>d</span><br><span class="line">kube<span class="literal">-node</span><span class="literal">-lease</span>        Active   <span class="number">16</span>d</span><br><span class="line">kube<span class="literal">-public</span>            Active   <span class="number">16</span>d</span><br><span class="line">kube<span class="literal">-system</span>            Active   <span class="number">16</span>d</span><br><span class="line">kubernetes<span class="literal">-dashboard</span>   Active   <span class="number">13</span>d</span><br><span class="line">metallb<span class="literal">-system</span>         Active   <span class="number">130</span>m</span><br><span class="line">test1                  Active   <span class="number">12</span>d</span><br><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl get pods -n metallb-system</span></span><br><span class="line">NAME                         READY   STATUS    RESTARTS   AGE</span><br><span class="line">controller<span class="literal">-64f8f944d</span><span class="literal">-qdf8m</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">110</span>m</span><br><span class="line">speaker<span class="literal">-cwzq7</span>                <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">110</span>m</span><br><span class="line">speaker<span class="literal">-qk5fb</span>                <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">110</span>m</span><br><span class="line">speaker<span class="literal">-wsllb</span>                <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">110</span>m</span><br><span class="line">speaker<span class="literal">-x4bwt</span>                <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">110</span>m</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl get svc</span></span><br><span class="line">NAME            <span class="built_in">TYPE</span>           CLUSTER<span class="literal">-IP</span>      EXTERNAL<span class="literal">-IP</span>      PORT(S)          AGE</span><br><span class="line">kubernetes      ClusterIP      <span class="number">10.96</span>.<span class="number">0.1</span>       &lt;none&gt;           <span class="number">443</span>/TCP          <span class="number">16</span>d</span><br><span class="line">nginx<span class="literal">-metallb</span>   LoadBalancer   <span class="number">10.105</span>.<span class="number">239.69</span>   <span class="number">192.168</span>.<span class="number">10.90</span>   <span class="number">8090</span>:<span class="number">31372</span>/TCP   <span class="number">106</span>m</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># ping 192.168.10.90</span></span><br><span class="line">PING <span class="number">192.168</span>.<span class="number">10.90</span> (<span class="number">192.168</span>.<span class="number">10.90</span>) <span class="number">56</span>(<span class="number">84</span>) bytes of <span class="keyword">data</span>.</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">192.168</span>.<span class="number">10.90</span>: icmp_seq=<span class="number">1</span> ttl=<span class="number">64</span> time=<span class="number">3.45</span> ms</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">192.168</span>.<span class="number">10.90</span>: icmp_seq=<span class="number">2</span> ttl=<span class="number">64</span> time=<span class="number">0.040</span> ms</span><br></pre></td></tr></table></figure>

<h4 id="4-3-2-6-访问"><a href="#4-3-2-6-访问" class="headerlink" title="4.3.2.6 访问"></a>4.3.2.6 访问</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># curl http://192.168.122.90:8090</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">        width: <span class="number">35</span>em;</span><br><span class="line">        margin: <span class="number">0</span> auto;</span><br><span class="line">        font<span class="literal">-family</span>: Tahoma, Verdana, Arial, sans<span class="literal">-serif</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;<span class="keyword">If</span> you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;<span class="keyword">For</span> online documentation and support please refer to</span><br><span class="line">&lt;a href=<span class="string">&quot;http://nginx.org/&quot;</span>&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href=<span class="string">&quot;http://nginx.com/&quot;</span>&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you <span class="keyword">for</span> <span class="keyword">using</span> nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<p><img src="/images/Kubernetes/kubernetes%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5service.assets/image-20220402101421824.png" alt="image-20220402101421824"></p>
<p><strong>注意：使用kubeadm部署kubernetes集群修改方法</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">如果在IPVS模式下使用kube<span class="literal">-proxy</span>，从Kubernetes v1.<span class="number">14.2</span>开始，必须启用ARP模式。</span><br><span class="line"></span><br><span class="line">可以通过在当前集群中编辑kube<span class="literal">-proxy</span>配置来实现：</span><br><span class="line"><span class="comment"># kubectl edit configmap -n kube-system kube-proxy</span></span><br><span class="line"></span><br><span class="line">并设置：</span><br><span class="line">apiVersion: kubeproxy.config.k8s.io/v1alpha1</span><br><span class="line">kind: KubeProxyConfiguration</span><br><span class="line">mode: <span class="string">&quot;ipvs&quot;</span></span><br><span class="line">ipvs:</span><br><span class="line">  strictARP: true</span><br></pre></td></tr></table></figure>



<h2 id="4-4-ExternalName"><a href="#4-4-ExternalName" class="headerlink" title="4.4 ExternalName"></a>4.4 ExternalName</h2><h3 id="4-4-1-ExternalName作用"><a href="#4-4-1-ExternalName作用" class="headerlink" title="4.4.1 ExternalName作用"></a>4.4.1 ExternalName作用</h3><ul>
<li>把集群外部的服务引入到集群内部中来，实现了集群内部pod和集群外部的服务进行通信</li>
<li>ExternalName 类型的服务适用于外部服务使用域名的方式，缺点是不能指定端口</li>
<li>还有一点要注意: 集群内的Pod会继承Node上的DNS解析规则。所以只要Node可以访问的服务，Pod中也可以访问到, 这就实现了集群内服务访问集群外服务</li>
</ul>
<h3 id="4-4-2-将公网域名引入"><a href="#4-4-2-将公网域名引入" class="headerlink" title="4.4.2   将公网域名引入"></a>4.4.2   将公网域名引入</h3><p>1, 编写YAML文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"> [<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># vim externelname.yml</span></span><br><span class="line"> </span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: my<span class="literal">-externalname</span></span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: ExternalName</span><br><span class="line">  externalName: www.baidu.com                  <span class="comment"># 对应的外部域名为www.baidu.com</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p>2, 应用YAML文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl apply -f externelname.yml</span></span><br><span class="line">service/my<span class="literal">-externalname</span> created</span><br></pre></td></tr></table></figure>

<p>3, 查看service</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl get svc |grep exter</span></span><br><span class="line">my<span class="literal">-externalname</span>    ExternalName   &lt;none&gt;         www.baidu.com   &lt;none&gt;         <span class="number">69</span>s</span><br></pre></td></tr></table></figure>



<p>4, 查看my-service的dns解析</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># dig -t A my-externalname.default.svc.cluster.local. @10.96.0.2</span></span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG <span class="number">9.9</span>.<span class="number">4</span><span class="literal">-RedHat</span><span class="literal">-9</span>.<span class="number">9.4</span><span class="literal">-72</span>.el7 &lt;&lt;&gt;&gt; <span class="literal">-t</span> A my<span class="literal">-externalname</span>.default.svc.cluster.local. @<span class="number">10.2</span>.<span class="number">0.2</span></span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: <span class="number">31378</span></span><br><span class="line">;; flags: qr aa <span class="built_in">rd</span>; QUERY: <span class="number">1</span>, ANSWER: <span class="number">4</span>, AUTHORITY: <span class="number">0</span>, ADDITIONAL: <span class="number">1</span></span><br><span class="line">;; WARNING: recursion requested but not available</span><br><span class="line"></span><br><span class="line">;; OPT PSEUDOSECTION:</span><br><span class="line">; EDNS: version: <span class="number">0</span>, flags:; udp: <span class="number">4096</span></span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;my<span class="literal">-externalname</span>.default.svc.cluster.local. <span class="keyword">IN</span> A</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">my<span class="literal">-externalname</span>.default.svc.cluster.local. <span class="number">5</span> <span class="keyword">IN</span> CNAME www.baidu.com.</span><br><span class="line">www.baidu.com.          <span class="number">5</span>       <span class="keyword">IN</span>      CNAME   www.a.shifen.com.</span><br><span class="line">www.a.shifen.com.       <span class="number">5</span>       <span class="keyword">IN</span>      A       <span class="number">14.215</span>.<span class="number">177.38</span>           解析的是百度的IP</span><br><span class="line">www.a.shifen.com.       <span class="number">5</span>       <span class="keyword">IN</span>      A       <span class="number">14.215</span>.<span class="number">177.39</span>           解析的是百度的IP</span><br><span class="line"></span><br><span class="line">;; Query time: <span class="number">32</span> msec</span><br><span class="line">;; SERVER: <span class="number">10.2</span>.<span class="number">0.2</span><span class="comment">#53(10.96.0.2)</span></span><br><span class="line">;; WHEN: Thu Nov <span class="number">05</span> <span class="number">11</span>:<span class="number">23</span>:<span class="number">41</span> CST <span class="number">2020</span></span><br><span class="line">;; MSG SIZE  rcvd: <span class="number">245</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl exec -it deploy-nginx-6c9764bb69-86gwj -- /bin/sh</span></span><br><span class="line">/ <span class="comment"># nslookup www.baidu.com</span></span><br><span class="line">......</span><br><span class="line">Name:      www.baidu.com</span><br><span class="line">Address <span class="number">1</span>: <span class="number">14.215</span>.<span class="number">177.39</span></span><br><span class="line">Address <span class="number">2</span>: <span class="number">14.215</span>.<span class="number">177.38</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/ <span class="comment"># nslookup my-externalname.default.svc.cluster.local         </span></span><br><span class="line">......</span><br><span class="line">Name:      my<span class="literal">-externalname</span>.default.svc.cluster.local</span><br><span class="line">Address <span class="number">1</span>: <span class="number">14.215</span>.<span class="number">177.38</span></span><br><span class="line">Address <span class="number">2</span>: <span class="number">14.215</span>.<span class="number">177.39</span></span><br></pre></td></tr></table></figure>

<p>解析此<code>my-externalname.default.svc.cluster.local</code>域名和解析<code>www.baidu.com</code>是一样的结果</p>
<h3 id="4-4-3-不同命名空间访问"><a href="#4-4-3-不同命名空间访问" class="headerlink" title="4.4.3 不同命名空间访问"></a>4.4.3 不同命名空间访问</h3><p>1， 创建ns1命名空间和相关deploy, pod,service</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"> [<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># vim ns1-nginx.yml</span></span><br><span class="line">apiVersion: v1                                                  </span><br><span class="line">kind: Namespace                                                 </span><br><span class="line">metadata:                                                             </span><br><span class="line">  name: ns1                                                     <span class="comment"># 创建ns1命名空间</span></span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: <span class="built_in">deploy-nginx</span>                    </span><br><span class="line">  namespace: ns1                                                <span class="comment"># 属于ns1命名空间</span></span><br><span class="line">spec:</span><br><span class="line">  replicas: <span class="number">1</span>                                  </span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx                                </span><br><span class="line">  template:                                        </span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx                             </span><br><span class="line">    spec:</span><br><span class="line">      containers:                              </span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:<span class="number">1.15</span><span class="literal">-alpine</span></span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: <span class="number">80</span></span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: svc1                                <span class="comment"># 服务名</span></span><br><span class="line">  namespace: ns1                            <span class="comment"># 属于ns1命名空间</span></span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: nginx</span><br><span class="line">  clusterIP: None                           <span class="comment"># 无头service</span></span><br><span class="line">  ports:</span><br><span class="line">  - port: <span class="number">80</span>                         </span><br><span class="line">    targetPort: <span class="number">80</span>                  </span><br><span class="line">---</span><br><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: external<span class="literal">-svc1</span></span><br><span class="line">  namespace: ns1                            <span class="comment">#  属于ns1命名空间</span></span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: ExternalName</span><br><span class="line">  externalName: svc2.ns2.svc.cluster.local   <span class="comment"># 将ns2空间的svc2服务引入到ns1命名空间</span></span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line"> [<span class="type">root</span>@<span class="type">master1</span> ~]<span class="comment"># kubectl apply -f ns1-nginx.yml</span></span><br><span class="line"> namespace/ns1 created</span><br><span class="line"> deployment.apps/<span class="built_in">deploy-nginx</span> created</span><br><span class="line"> service/svc1 created</span><br><span class="line"> </span><br></pre></td></tr></table></figure>



<p>2， 创建ns2命名空间和相关deploy, pod,service</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># vim ns1-nginx.yml</span></span><br><span class="line">apiVersion: v1                                                  </span><br><span class="line">kind: Namespace                                                 </span><br><span class="line">metadata:                                                             </span><br><span class="line">  name: ns2                                                     <span class="comment"># 创建ns2命名空间</span></span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: <span class="built_in">deploy-nginx</span>                    </span><br><span class="line">  namespace: ns2                                                <span class="comment"># 属于ns2命名空间</span></span><br><span class="line">spec:</span><br><span class="line">  replicas: <span class="number">1</span>                                  </span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx                                </span><br><span class="line">  template:                                        </span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx                             </span><br><span class="line">    spec:</span><br><span class="line">      containers:                              </span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:<span class="number">1.15</span><span class="literal">-alpine</span></span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: <span class="number">80</span></span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: svc2                                <span class="comment"># 服务名</span></span><br><span class="line">  namespace: ns2                            <span class="comment"># 属于ns2命名空间</span></span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: nginx</span><br><span class="line">  clusterIP: None                           <span class="comment"># 无头service</span></span><br><span class="line">  ports:</span><br><span class="line">  - port: <span class="number">80</span>                         </span><br><span class="line">    targetPort: <span class="number">80</span>                  </span><br><span class="line">---</span><br><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: external<span class="literal">-svc1</span></span><br><span class="line">  namespace: ns2                            <span class="comment">#  属于ns2命名空间</span></span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: ExternalName</span><br><span class="line">  externalName: svc1.ns1.svc.cluster.local   <span class="comment"># 将ns1空间的svc1服务引入到ns2命名空间</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl apply -f ns2-nginx.yml</span></span><br><span class="line">namespace/ns2 created</span><br><span class="line">deployment.apps/<span class="built_in">deploy-nginx</span> created</span><br><span class="line">service/svc2 created</span><br><span class="line">service/external<span class="literal">-svc2</span> created</span><br></pre></td></tr></table></figure>



<p>3,  在ns1命名空间的pod里验证</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl get pods -n ns1</span></span><br><span class="line">NAME                            READY   STATUS    RESTARTS   AGE</span><br><span class="line"><span class="built_in">deploy-nginx</span><span class="literal">-6c9764bb69</span><span class="literal">-g5xl8</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">8</span>m10s</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl exec -it -n ns1 deploy-nginx-6c9764bb69-g5xl8 -- /bin/sh</span></span><br><span class="line">/ <span class="comment"># nslookup svc1</span></span><br><span class="line">......</span><br><span class="line">Name:      svc1</span><br><span class="line">Address <span class="number">1</span>: <span class="number">10.3</span>.<span class="number">166.140</span> <span class="built_in">deploy-nginx</span><span class="literal">-6c9764bb69</span><span class="literal">-g5xl8</span>       IP与ns1里的podIP一致(见下面的查询结果)</span><br><span class="line"></span><br><span class="line">/ <span class="comment"># nslookup svc2.ns2.svc.cluster.local</span></span><br><span class="line">.....</span><br><span class="line">Name:      svc2.ns2.svc.cluster.local</span><br><span class="line">Address <span class="number">1</span>: <span class="number">10.3</span>.<span class="number">104.17</span> <span class="number">10</span><span class="literal">-3</span><span class="literal">-104</span><span class="literal">-17</span>.svc2.ns2.svc.cluster.local   IP与ns2里的podIP一致(见下面的查询结果)</span><br><span class="line"></span><br><span class="line">/ <span class="comment"># exit</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl get pods -o wide -n ns1</span></span><br><span class="line">NAME                            READY   STATUS    RESTARTS   AGE   IP             NODE             NOMINATED NODE   READINESS GATES</span><br><span class="line"><span class="built_in">deploy-nginx</span><span class="literal">-6c9764bb69</span><span class="literal">-g5xl8</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">70</span>m   <span class="number">10.3</span>.<span class="number">166.140</span>   <span class="number">192.168</span>.<span class="number">122.13</span>   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl get pods -o wide -n ns2</span></span><br><span class="line">NAME                            READY   STATUS    RESTARTS   AGE   IP            NODE             NOMINATED NODE   READI            NESS GATES</span><br><span class="line"><span class="built_in">deploy-nginx</span><span class="literal">-6c9764bb69</span><span class="literal">-8psxl</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">68</span>m   <span class="number">10.3</span>.<span class="number">104.17</span>   <span class="number">192.168</span>.<span class="number">122.14</span>   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>反之，在ns2命名空间的pod里访问<code>svc1.ns1.svc.cluster.local</code>，解析的IP是ns1命名空间里的pod的IP(请自行验证)</p>
<p>4， 验证ns2中的pod的IP变化, ns1中的pod仍然可以使用<code>svc2.ns2.svc.cluster.local</code>访问</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl get pod -n ns2</span></span><br><span class="line">NAME                            READY   STATUS    RESTARTS   AGE</span><br><span class="line"><span class="built_in">deploy-nginx</span><span class="literal">-6c9764bb69</span><span class="literal">-8psxl</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">81</span>m</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl delete pod deploy-nginx-6c9764bb69-8psxl -n ns2</span></span><br><span class="line">pod <span class="string">&quot;deploy-nginx-6c9764bb69-8psxl&quot;</span> deleted                   因为有replicas控制器，所以删除pod会自动拉一个起来</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl get pod -o wide -n ns2</span></span><br><span class="line">NAME                            READY   STATUS    RESTARTS   AGE     IP             NODE             NOMINATED NODE   READINESS GATES</span><br><span class="line"><span class="built_in">deploy-nginx</span><span class="literal">-6c9764bb69</span><span class="literal">-8qbz2</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">5</span>m36s   <span class="number">10.3</span>.<span class="number">166.141</span>   <span class="number">192.168</span>.<span class="number">122.13</span>   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line">pod名称变了,IP也变成了<span class="number">10.3</span>.<span class="number">166.141</span></span><br></pre></td></tr></table></figure>

<p>回到ns1中的pod验证</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl exec -it -n ns1 deploy-nginx-6c9764bb69-g5xl8 -- /bin/sh</span></span><br><span class="line"></span><br><span class="line">/ <span class="comment"># ping svc2.ns2.svc.cluster.local -c 2</span></span><br><span class="line">PING svc2.ns2.svc.cluster.local (<span class="number">10.3</span>.<span class="number">166.141</span>): <span class="number">56</span> <span class="keyword">data</span> bytes    解析的IP就是ns2中pod的新IP</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">10.3</span>.<span class="number">166.141</span>: seq=<span class="number">0</span> ttl=<span class="number">63</span> time=<span class="number">0.181</span> ms</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">10.3</span>.<span class="number">166.141</span>: seq=<span class="number">1</span> ttl=<span class="number">63</span> time=<span class="number">0.186</span> ms</span><br><span class="line"></span><br><span class="line">--- svc2.ns2.svc.cluster.local ping statistics ---</span><br><span class="line"><span class="number">2</span> packets transmitted, <span class="number">2</span> packets received, <span class="number">0</span>% packet loss</span><br><span class="line">round<span class="literal">-trip</span> min/avg/max = <span class="number">0.181</span>/<span class="number">0.183</span>/<span class="number">0.186</span> ms</span><br><span class="line">/ <span class="comment"># exit</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h1 id="五、sessionAffinity"><a href="#五、sessionAffinity" class="headerlink" title="五、sessionAffinity"></a>五、sessionAffinity</h1><blockquote>
<p>会话粘贴</p>
</blockquote>
<p>设置sessionAffinity为Clientip  (类似nginx的ip_hash算法,lvs的sh算法)</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">nginx</span> ~]<span class="comment"># cat 02_create_deployment_app_nginx_with_service.yaml</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx<span class="literal">-server1</span></span><br><span class="line">spec:</span><br><span class="line">  replicas: <span class="number">2</span></span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  template:</span><br><span class="line">     metadata:</span><br><span class="line">       labels:</span><br><span class="line">         app: nginx</span><br><span class="line">     spec:</span><br><span class="line">       containers:</span><br><span class="line">       - name: c1</span><br><span class="line">         image: nginx:<span class="number">1.15</span><span class="literal">-alpine</span></span><br><span class="line">         imagePullPolicy: IfNotPresent</span><br><span class="line">         ports:</span><br><span class="line">         - containerPort: <span class="number">80</span></span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx<span class="literal">-svc</span></span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: ClusterIP</span><br><span class="line">  ports:</span><br><span class="line">  - protocol: TCP</span><br><span class="line">    port: <span class="number">80</span></span><br><span class="line">    targetPort: <span class="number">80</span></span><br><span class="line">  selector:</span><br><span class="line">    app: nginx</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl apply -f 02_create_deployment_app_nginx_with_service.yaml</span></span><br><span class="line">deployment.apps/nginx<span class="literal">-server1</span> created</span><br><span class="line">service/nginx<span class="literal">-svc</span> created</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl get pods</span></span><br><span class="line">NAME                             READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx<span class="literal">-server1</span><span class="literal">-58845f75f4</span><span class="literal">-9zlnw</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">2</span>m11s</span><br><span class="line">nginx<span class="literal">-server1</span><span class="literal">-58845f75f4</span><span class="literal">-ffqdt</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">2</span>m11s</span><br><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl exec -it nginx-server1-58845f75f4-9zlnw bash</span></span><br><span class="line">kubectl exec [<span class="type">POD</span>] [<span class="type">COMMAND</span>] is DEPRECATED and will be removed <span class="keyword">in</span> a future version. Use kubectl kubectl exec [<span class="type">POD</span>] -- [<span class="type">COMMAND</span>] instead.</span><br><span class="line">root@nginx<span class="literal">-server1</span><span class="literal">-58845f75f4</span><span class="literal">-9zlnw</span>:/<span class="comment"># echo web1 &gt; /usr/share/nginx/html/index.html</span></span><br><span class="line">root@nginx<span class="literal">-server1</span><span class="literal">-58845f75f4</span><span class="literal">-9zlnw</span>:/<span class="comment"># exit</span></span><br><span class="line"><span class="keyword">exit</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl exec -it nginx-server1-58845f75f4-ffqdt bash</span></span><br><span class="line">kubectl exec [<span class="type">POD</span>] [<span class="type">COMMAND</span>] is DEPRECATED and will be removed <span class="keyword">in</span> a future version. Use kubectl kubectl exec [<span class="type">POD</span>] -- [<span class="type">COMMAND</span>] instead.</span><br><span class="line">root@nginx<span class="literal">-server1</span><span class="literal">-58845f75f4</span><span class="literal">-ffqdt</span>:/<span class="comment"># echo web2 &gt; /usr/share/nginx/html/index.html</span></span><br><span class="line">root@nginx<span class="literal">-server1</span><span class="literal">-58845f75f4</span><span class="literal">-ffqdt</span>:/<span class="comment"># exit</span></span><br><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl get svc</span></span><br><span class="line">NAME         <span class="built_in">TYPE</span>        CLUSTER<span class="literal">-IP</span>     EXTERNAL<span class="literal">-IP</span>   PORT(S)   AGE</span><br><span class="line">kubernetes   ClusterIP   <span class="number">10.96</span>.<span class="number">0.1</span>      &lt;none&gt;        <span class="number">443</span>/TCP   <span class="number">16</span>d</span><br><span class="line">nginx<span class="literal">-svc</span>    ClusterIP   <span class="number">10.100</span>.<span class="number">53.31</span>   &lt;none&gt;        <span class="number">80</span>/TCP    <span class="number">3</span>m53s</span><br><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># curl http://10.100.53.31</span></span><br><span class="line">web1</span><br><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># curl http://10.100.53.31</span></span><br><span class="line">web2</span><br><span class="line">或</span><br><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># while true;do curl 10.100.53.31;sleep 1; done</span></span><br></pre></td></tr></table></figure>





<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl patch svc nginx-svc -p &#x27;&#123;&quot;spec&quot;:&#123;&quot;sessionAffinity&quot;:&quot;ClientIP&quot;&#125;&#125;&#x27;</span></span><br><span class="line">service/nginx<span class="literal">-svc</span> patched</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># curl 10.100.53.31</span></span><br><span class="line">web1</span><br><span class="line">多次访问,会话粘贴</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">设置回sessionAffinity为None</span><br><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl patch svc nginx-svc -p &#x27;&#123;&quot;spec&quot;:&#123;&quot;sessionAffinity&quot;:&quot;None&quot;&#125;&#125;&#x27;</span></span><br><span class="line">service/my<span class="literal">-service</span> patched</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">测试</span><br><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># curl 10.100.53.31</span></span><br><span class="line">web1</span><br><span class="line">多次访问,回到负载均衡</span><br><span class="line">或</span><br><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># while true;do curl 10.100.53.31;sleep 1; done</span></span><br><span class="line">web1</span><br><span class="line">多次访问,会话粘贴</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="六、修改为ipvs调度方式（拓展）"><a href="#六、修改为ipvs调度方式（拓展）" class="headerlink" title="六、修改为ipvs调度方式（拓展）"></a>六、修改为ipvs调度方式（拓展）</h1><blockquote>
<p>部署方式不同，修改方法不一样。</p>
<p>本次主要介绍使用kubeadm部署集群方式，二进制部署较为简单。</p>
<p>二进制部署修改：/etc/kubernetes/kube-proxy.yaml文件即可。</p>
</blockquote>
<p>从kubernetes1.8版本开始，新增了kube-proxy对ipvs的支持，在kubernetes1.11版本中被纳入了GA.</p>
<h2 id="6-1-修改为IPVS调度方式前升级内核"><a href="#6-1-修改为IPVS调度方式前升级内核" class="headerlink" title="6.1 修改为IPVS调度方式前升级内核"></a>6.1 修改为IPVS调度方式前升级内核</h2><blockquote>
<p>现使用Centos7u6发布版本，默认内核版本为3.10.0，使用kubernetes为1.18.0时，可升级内核版本至4.18.0或5.6.0版本。</p>
</blockquote>
<blockquote>
<p>在所有节点中安装,需要重启操作系统更换内核。以下升级方法供参考。</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># yum -y install perl</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># yum -y install https://www.elrepo.org/elrepo-release-7.0-4.el7.elrepo.noarch.rpm</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># yum  --enablerepo=&quot;elrepo-kernel&quot;  -y install kernel-ml.x86_64 </span></span><br><span class="line">此处升级为<span class="number">5.0</span>以上版本。</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># grub2-set-default 0</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># grub2-mkconfig -o /boot/grub2/grub.cfg</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># reboot</span></span><br></pre></td></tr></table></figure>





<h2 id="6-2-修改kube-proxy的配置文件"><a href="#6-2-修改kube-proxy的配置文件" class="headerlink" title="6.2 修改kube-proxy的配置文件"></a>6.2 修改kube-proxy的配置文件</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl edit configmap kube-proxy -n kube-system</span></span><br><span class="line">     <span class="number">26</span>     iptables:</span><br><span class="line">     <span class="number">27</span>       masqueradeAll: false</span><br><span class="line">     <span class="number">28</span>       masqueradeBit: <span class="number">14</span></span><br><span class="line">     <span class="number">29</span>       minSyncPeriod: <span class="number">0</span>s</span><br><span class="line">     <span class="number">30</span>       syncPeriod: <span class="number">30</span>s</span><br><span class="line">     <span class="number">31</span>     ipvs:</span><br><span class="line">     <span class="number">32</span>       excludeCIDRs: null</span><br><span class="line">     <span class="number">33</span>       minSyncPeriod: <span class="number">0</span>s</span><br><span class="line">     <span class="number">34</span>       scheduler: <span class="string">&quot;&quot;</span>	  <span class="comment"># 可以在这里修改ipvs的算法,默认为rr轮循算法</span></span><br><span class="line">     <span class="number">35</span>       strictARP: false</span><br><span class="line">     <span class="number">36</span>       syncPeriod: <span class="number">30</span>s</span><br><span class="line">     <span class="number">37</span>     kind: KubeProxyConfiguration</span><br><span class="line">     <span class="number">38</span>     metricsBindAddress: <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">10249</span></span><br><span class="line">     <span class="number">39</span>     mode: <span class="string">&quot;ipvs&quot;</span>	  <span class="comment"># 默认&quot;&quot;号里为空,加上ipvs</span></span><br></pre></td></tr></table></figure>



<h2 id="6-3-查看kube-system的namespace中kube-proxy有关的pod"><a href="#6-3-查看kube-system的namespace中kube-proxy有关的pod" class="headerlink" title="6.3  查看kube-system的namespace中kube-proxy有关的pod"></a>6.3  查看kube-system的namespace中kube-proxy有关的pod</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl get pods -n kube-system |grep kube-proxy</span></span><br><span class="line">kube<span class="literal">-proxy</span><span class="literal">-69mv6</span>                           <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">6</span>          <span class="number">2</span>d18<span class="built_in">h</span></span><br><span class="line">kube<span class="literal">-proxy</span><span class="literal">-jpc6c</span>                           <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">4</span>          <span class="number">4</span>d16<span class="built_in">h</span></span><br><span class="line">kube<span class="literal">-proxy</span><span class="literal">-kq65l</span>                           <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">4</span>          <span class="number">4</span>d16<span class="built_in">h</span></span><br><span class="line">kube<span class="literal">-proxy</span><span class="literal">-lmphf</span>                           <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">5</span>          <span class="number">4</span>d16<span class="built_in">h</span></span><br></pre></td></tr></table></figure>



<h2 id="6-4-验证kube-proxy-xxx的pod中的信息"><a href="#6-4-验证kube-proxy-xxx的pod中的信息" class="headerlink" title="6.4 验证kube-proxy-xxx的pod中的信息"></a>6.4 验证kube-proxy-xxx的pod中的信息</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl logs kube-proxy-jpc6c -n kube-system</span></span><br><span class="line">W0517 <span class="number">00</span>:<span class="number">55</span>:<span class="number">10.914754</span>       <span class="number">1</span> server_others.go:<span class="number">559</span>] Unknown proxy mode <span class="string">&quot;&quot;</span>, assuming iptables proxy</span><br><span class="line">I0517 <span class="number">00</span>:<span class="number">55</span>:<span class="number">10.923228</span>       <span class="number">1</span> node.go:<span class="number">136</span>] Successfully retrieved node IP: <span class="number">192.168</span>.<span class="number">122.32</span></span><br><span class="line">I0517 <span class="number">00</span>:<span class="number">55</span>:<span class="number">10.923264</span>       <span class="number">1</span> server_others.go:<span class="number">186</span>] <span class="keyword">Using</span> iptables Proxier.</span><br><span class="line">I0517 <span class="number">00</span>:<span class="number">55</span>:<span class="number">10.923567</span>       <span class="number">1</span> server.go:<span class="number">583</span>] Version: v1.<span class="number">18.2</span></span><br><span class="line">I0517 <span class="number">00</span>:<span class="number">55</span>:<span class="number">10.923965</span>       <span class="number">1</span> conntrack.go:<span class="number">100</span>] <span class="built_in">Set</span> sysctl <span class="string">&#x27;net/netfilter/nf_conntrack_max&#x27;</span> to <span class="number">131072</span></span><br><span class="line">I0517 <span class="number">00</span>:<span class="number">55</span>:<span class="number">10.924001</span>       <span class="number">1</span> conntrack.go:<span class="number">52</span>] Setting nf_conntrack_max to <span class="number">131072</span></span><br><span class="line">I0517 <span class="number">00</span>:<span class="number">55</span>:<span class="number">10.924258</span>       <span class="number">1</span> conntrack.go:<span class="number">83</span>] Setting conntrack hashsize to <span class="number">32768</span></span><br><span class="line">I0517 <span class="number">00</span>:<span class="number">55</span>:<span class="number">10.927041</span>       <span class="number">1</span> conntrack.go:<span class="number">100</span>] <span class="built_in">Set</span> sysctl <span class="string">&#x27;net/netfilter/nf_conntrack_tcp_timeout_established&#x27;</span> to <span class="number">86400</span></span><br><span class="line">I0517 <span class="number">00</span>:<span class="number">55</span>:<span class="number">10.927086</span>       <span class="number">1</span> conntrack.go:<span class="number">100</span>] <span class="built_in">Set</span> sysctl <span class="string">&#x27;net/netfilter/nf_conntrack_tcp_timeout_close_wait&#x27;</span> to <span class="number">3600</span></span><br><span class="line">I0517 <span class="number">00</span>:<span class="number">55</span>:<span class="number">10.927540</span>       <span class="number">1</span> config.go:<span class="number">315</span>] Starting service config controller</span><br><span class="line">I0517 <span class="number">00</span>:<span class="number">55</span>:<span class="number">10.927556</span>       <span class="number">1</span> shared_informer.go:<span class="number">223</span>] Waiting <span class="keyword">for</span> caches to sync <span class="keyword">for</span> service config</span><br><span class="line">I0517 <span class="number">00</span>:<span class="number">55</span>:<span class="number">10.927576</span>       <span class="number">1</span> config.go:<span class="number">133</span>] Starting endpoints config controller</span><br><span class="line">I0517 <span class="number">00</span>:<span class="number">55</span>:<span class="number">10.927594</span>       <span class="number">1</span> shared_informer.go:<span class="number">223</span>] Waiting <span class="keyword">for</span> caches to sync <span class="keyword">for</span> endpoints config</span><br><span class="line">I0517 <span class="number">00</span>:<span class="number">55</span>:<span class="number">11.027749</span>       <span class="number">1</span> shared_informer.go:<span class="number">230</span>] Caches are synced <span class="keyword">for</span> service config</span><br><span class="line">I0517 <span class="number">00</span>:<span class="number">55</span>:<span class="number">11.027858</span>       <span class="number">1</span> shared_informer.go:<span class="number">230</span>] Caches are synced <span class="keyword">for</span> endpoints config</span><br></pre></td></tr></table></figure>



<h2 id="6-5-重新启动kube-proxy"><a href="#6-5-重新启动kube-proxy" class="headerlink" title="6.5 重新启动kube-proxy"></a>6.5 重新启动kube-proxy</h2><blockquote>
<p>删除kube-proxy-xxx的所有pod，让它重新拉取新的kube-proxy-xxx的pod</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl delete pod kube-proxy-69mv6 -n kube-system</span></span><br><span class="line">pod <span class="string">&quot;kube-proxy-69mv6&quot;</span> deleted</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl delete pod kube-proxy-jpc6c -n kube-system</span></span><br><span class="line">pod <span class="string">&quot;kube-proxy-jpc6c&quot;</span> deleted</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl delete pod kube-proxy-kq65l -n kube-system</span></span><br><span class="line">pod <span class="string">&quot;kube-proxy-kq65l&quot;</span> deleted</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl delete pod kube-proxy-lmphf -n kube-system</span></span><br><span class="line">pod <span class="string">&quot;kube-proxy-lmphf&quot;</span> deleted</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master01</span> ~]<span class="comment"># kubectl get pods -n kube-system |grep kube-proxy</span></span><br><span class="line">kube<span class="literal">-proxy</span><span class="literal">-2mk2b</span>                           <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">2</span>m23s</span><br><span class="line">kube<span class="literal">-proxy</span><span class="literal">-5bj87</span>                           <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">30</span>s</span><br><span class="line">kube<span class="literal">-proxy</span><span class="literal">-7qq9l</span>                           <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">52</span>s</span><br><span class="line">kube<span class="literal">-proxy</span><span class="literal">-tjtqf</span>                           <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">80</span>s</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">随意查看其中<span class="number">1</span>个或<span class="number">3</span>个kube<span class="literal">-proxy</span><span class="literal">-xxx</span>的pod,验证是否为IPVS方式了</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">master1</span> ~]<span class="comment"># kubectl logs kube-proxy-tjtqf -n kube-system</span></span><br><span class="line">I0517 <span class="number">02</span>:<span class="number">32</span>:<span class="number">26.557696</span>       <span class="number">1</span> node.go:<span class="number">136</span>] Successfully retrieved node IP: <span class="number">192.168</span>.<span class="number">122.32</span></span><br><span class="line">I0517 <span class="number">02</span>:<span class="number">32</span>:<span class="number">26.557745</span>       <span class="number">1</span> server_others.go:<span class="number">259</span>] <span class="keyword">Using</span> ipvs Proxier.</span><br><span class="line">W0517 <span class="number">02</span>:<span class="number">32</span>:<span class="number">26.557912</span>       <span class="number">1</span> proxier.go:<span class="number">429</span>] IPVS scheduler not specified, use rr by default</span><br><span class="line">I0517 <span class="number">02</span>:<span class="number">32</span>:<span class="number">26.560008</span>       <span class="number">1</span> server.go:<span class="number">583</span>] Version: v1.<span class="number">18.2</span></span><br><span class="line">I0517 <span class="number">02</span>:<span class="number">32</span>:<span class="number">26.560428</span>       <span class="number">1</span> conntrack.go:<span class="number">52</span>] Setting nf_conntrack_max to <span class="number">131072</span></span><br><span class="line">I0517 <span class="number">02</span>:<span class="number">32</span>:<span class="number">26.561094</span>       <span class="number">1</span> config.go:<span class="number">315</span>] Starting service config controller</span><br><span class="line">I0517 <span class="number">02</span>:<span class="number">32</span>:<span class="number">26.562251</span>       <span class="number">1</span> shared_informer.go:<span class="number">223</span>] Waiting <span class="keyword">for</span> caches to sync <span class="keyword">for</span> service config</span><br><span class="line">I0517 <span class="number">02</span>:<span class="number">32</span>:<span class="number">26.561579</span>       <span class="number">1</span> config.go:<span class="number">133</span>] Starting endpoints config controller</span><br><span class="line">I0517 <span class="number">02</span>:<span class="number">32</span>:<span class="number">26.562271</span>       <span class="number">1</span> shared_informer.go:<span class="number">223</span>] Waiting <span class="keyword">for</span> caches to sync <span class="keyword">for</span> endpoints config</span><br><span class="line">I0517 <span class="number">02</span>:<span class="number">32</span>:<span class="number">26.662541</span>       <span class="number">1</span> shared_informer.go:<span class="number">230</span>] Caches are synced <span class="keyword">for</span> service config</span><br><span class="line">I0517 <span class="number">02</span>:<span class="number">32</span>:<span class="number">26.662566</span>       <span class="number">1</span> shared_informer.go:<span class="number">230</span>] Caches are synced <span class="keyword">for</span> endpoints config</span><br></pre></td></tr></table></figure>





]]></content>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache Kafka的定位及用途</title>
    <url>/2022/10/25/kafka/Apache%20Kafka%E7%9A%84%E5%AE%9A%E4%BD%8D%E5%8F%8A%E7%94%A8%E9%80%94/</url>
    <content><![CDATA[<p>Kafka官方网站将Apache Kafka表述为一种高性能、分布式的消息发布与订阅系统，同时也是一个强大的流式处理平台。它被设计用于处理实时数据流，能够以高吞吐量在系统组件之间可靠地传输数据。Kafka不仅允许生产者发布消息到多个主题上，还允许消费者订阅这些主题并进行消息的拉取，这一机制支持了数据的解耦、冗余存储及实时处理。<br>Kafka的核心优势在于其高度可扩展性、持久化特性和容错能力。通过在集群中分布式的部署多个代理（brokers），Kafka能够轻易地处理极高的数据吞吐量，每秒处理数百万条消息，同时保证低延迟。数据在Kafka中是以日志的形式存储的，这使得即使在系统出现故障时也能保证数据不丢失，实现了高可用性。<br>作为流处理平台，Kafka集成了Kafka Streams库，该库使得开发者能够构建轻量级的实时流处理应用，直接在Kafka内部执行数据转换和聚合操作，无需依赖外部复杂系统。此外，Kafka与许多流行的流处理框架如Apache Spark、Flink等紧密集成，进一步丰富了其在大数据处理和分析领域的应用范围。<br>总而言之，Kafka不仅仅是一个消息队列，而是一个全面的分布式流式处理生态系统，广泛应用于日志聚合、实时监控数据分析、事件驱动架构以及大规模数据管道构建等多个领域，为企业提供了一站式的解决方案来应对现代数据处理的挑战。它有3个主要功能：</p>
<p><img src="/images/kafka/20221025-1.png" alt="image-20221025-1"></p>
<p>Kafka包含用于与其他系统发生交互的客户端。其中的一个客户端叫作生产者，它向Kafka Broker发送数据流。Kafka的另一个客户端叫作消费者，它从Broker读取和处理数据。数据的目的地不一定只有一个。生产者和消费者之间是完全解耦的，它们是独立运行的。我们将在后面的章节深入讲解这是如何做到的。<br>与其他消息平台一样，Kafka就像是（对于生产者）进入系统和（对于消费者或最终用户）离开系统的数据的中间人。消息的生产者和最终用户之间是分离的，因此可以实现松散的耦合。生产者可以发送任意的消息，但不知道是否有人订阅。此外，Kafka提供了适用于各种业务场景的消息传递方式。Kafka的消息至少可以采用以下3种传递方式<br>● 至少一次语义（At least once semantics）：在需要时发送消息，直到得到确认。<br>在这种情况下，Kafka允许消息的生产者多次发送相同的消息，并将其写入Broker。如果生产者没有收到消息写入Broker的确认，可以重新发送消息。对于那些不允许丢失消息的场景，如付款的场景，这是最安全的传递方式之一，尽管可能需要在消费者端做一些过滤确保幂等性。</p>
<p><img src="/images/kafka/20221025-2.png" alt="image-20221025-1"></p>
<p>● 至多一次语义（At most once semantics）：只发送一次消息，如果失败，不重新发送。<br>至多一次语义是指消息的生产者只发送一次消息，并且永远不进行重试。如果发送失败，生产者会继续发送其他消息，不再重新发送已经发送失败的消息。为什么有人可以接受消息丢失呢？试想一下，如果一个很受欢迎的网站正在跟踪访问者的页面浏览情况，那么在每天发生的数百万个页面浏览事件中遗漏掉一些是可接受的。保持系统正常运行，不需要等待确认，可能比丢失数据更重要。</p>
<p><img src="/images/kafka/20221025-3.png" alt="image-20221025-1"></p>
<p>● 精确一次语义（Exactly Once semantics）：消息的消费者只能读取一次消息。<br>Kafka在0.11.0版本中加入了精确一次语义（Exactly Once Semantics，EOS）。EOS在发布后引发了许多褒贬不一的讨论。EOS（见图 1.5）对于许多场景来说是很理想的语义。它似乎是对消息除重的一种逻辑上的保证，并让消息除重成为过去。但大多数开发人员认为在生产端发送消息并能够在消费端接收到同样的消息就已经足够了。</p>
<p><img src="/images/kafka/20221025-4.png" alt="image-20221025-1"></p>
<p>除传递各种语义之外，Broker的另一个作用是，即使消费端的应用程序因为发生故障或处于维护期而关闭，生产者也不需要等待消费者处理消息。当消费者重新上线并继续处理数据时，它们能够从之前离开的位置继续，而不会丢失任何信息。</p>
<h2 id="开发人员的Kafka"><a href="#开发人员的Kafka" class="headerlink" title="开发人员的Kafka"></a>开发人员的Kafka</h2><p>为何软件工程师对Apache Kafka展现出浓厚兴趣？Kafka见证了其采纳率的急剧攀升，然而，市场对相关技术人才的需求却尚未得到充分满足。这一现状呼吁我们革新传统数据处理的思维模式。通过共享实践经验与教训，可以有效引导开发者理解Kafka为何成为其数据架构中极具吸引力的组件。<br>针对Kafka开发初学者，利用熟悉的原理解决新领域的挑战是入门的有效途径。例如，Java开发者可借力Spring框架的核心概念，如依赖注入，Spring for Apache Kafka（Spring-Kafka）项目已历经多次重大版本迭代，彰显了其成熟度与社区活跃度。同时，Kafka及其周边生态项目的工具集正持续扩张，为开发者提供了丰富资源。<br>在常规软件开发实践中，开发者常面临模块间高耦合的难题，修改单一应用可能波及众多关联系统，或在进行单元测试时遭遇构造大量模拟对象的困境。恰当地引入Kafka，能显著缓解此类问题。<br>以人力资源系统中员工提交带薪休假申请的场景为例，该流程通常涉及与薪资处理系统及项目管理系统（用于任务进度预测）的交互。若沿用传统的CRUD模式，这些系统间将形成紧密耦合。考虑如下疑问：薪资系统故障是否会影响项目管理系统的正常运行？通过集成Kafka，我们可以实现系统间的松耦合，它充当了工作流的中介，使得数据交换的界面统一为Kafka，大大减少了直接API调用和数据库访问的复杂性，从而增强了系统的弹性和可维护性。</p>
<p><img src="/images/kafka/20221025-5.png" alt="image-20221025-1"></p>
<p>有观点指出，存在更为优越且简化的替代方案，比如利用ETL（Extract, Transform, Load）过程将数据导入各应用的数据库中，理论上，此法仅需单一接口对接，看似简便。然而，必须考虑如下问题：一旦源头数据遭受损坏或变得陈旧，应如何应对？数据刷新的频率如何设定？可接受的数据延时或不一致性阈值为何？是否会出现数据副本老化乃至与源头数据显著偏差的情况，以至于重复执行相同处理流程时结果难以复现？究其根本，这些挑战的本质何在？Kafka便是为了解决此类问题而生。<br>另外，Kafka的自用性也是增强其信赖度的一个重要方面。以Kafka内部使用主题管理消费者偏移量为例，这一实践展示了其技术的内循环效益。尤其是在0.11版本及以后，通过引入内部主题机制，Kafka成功实现了端到端的精确一次处理语义，进一步彰显了其技术实力。此外，Kafka支持一个消息被多个消费者读取并衍生出多样化的处理结果，这种灵活性为其在复杂数据流处理场景中的应用提供了坚实基础。</p>
<h2 id="向管理人员介绍Kafka"><a href="#向管理人员介绍Kafka" class="headerlink" title="向管理人员介绍Kafka"></a>向管理人员介绍Kafka</h2><p>Kafka的一项关键特性在于其能够高效地摄取大规模数据集，并确保这些数据对广泛的业务领域具有可用性。此特性赋予企业以高度的灵活性和开放性，通过促进信息的无障碍共享跨越所有业务范畴，虽然并未预设具体成果，但显著增强了数据的可访问性。高层管理者普遍认识到，随着数据量的指数级增长，企业亟需加速洞察提炼过程，旨在即刻从数据中提取价值，而非任其在存储介质中沉睡贬值。传统的批处理作业模式在处理速度上已显得捉襟见肘，限制了数据价值转换的时效性，而采用Kafka机制则成为了一种有效规避批处理局限性的策略。在此背景下，“快数据”（Fast Data）概念应运而生，它强调了数据价值实现的即时性，与“大数据”侧重于规模的愿景形成鲜明对比，揭示了数据价值实现的另一种维度。</p>
<p><img src="/images/kafka/20221025-6.png" alt="image-20221025-1"></p>
<p>对于众多企业级软件开发团队而言，部署应用程序于Java虚拟机（Java Virtual Machine, JVM）环境中乃是其技术栈中的成熟实践。尤其针对那些企业，它们在数据监控方面有着严格的本地化需求，选择在本地环境运行应用系统成为了不可或缺的驱动力。尽管如此，云端运算及托管服务方案亦展现出其独特的吸引力与价值，为不同规模和技术需求的企业提供了多样化的部署选项。<br>Apache Kafka作为一个分布式流处理平台，展现了出色的可扩展性能力，不仅支持传统的垂直扩展模式，更强调水平扩展的能力，以此克服单机性能上限的局限，确保了系统能够随着数据量和处理需求的增长而高效、线性地扩展。</p>
<p><img src="/images/kafka/20221025-7.png" alt="image-20221025-1"></p>
<p><img src="/images/kafka/20221025-8.webp" alt="image-20221025-1"></p>
<p>也许学习Kafka最重要的原因之一是看看初创公司和其他行业的公司如何降低曾经令人望而却步的算力成本。分布式应用程序和架构不再依赖可能价值数百万美元的大型服务器或大型机，而以更少的财务支出向竞争对手快速逼近。</p>
<h1 id="Kafka的应用场景"><a href="#Kafka的应用场景" class="headerlink" title="Kafka的应用场景"></a>Kafka的应用场景</h1><p>Kafka从一开始就支持高可用性和持久存储。Flume有一个Kafka通道，Kafka的复制特性和高可用性让Flume事件在代理（或运行它的服务器）发生崩溃时仍然对其他接收器可用。Kafka可用于构建健壮的应用程序，并帮助分布式应用程序处理在某些时候必然会发生的预期故障。</p>
<h3 id="日志聚合"><a href="#日志聚合" class="headerlink" title="日志聚合"></a>日志聚合</h3><p>日志聚合技术在多种场景下展现出其重要性，尤其是在汇总分布式应用环境中的事件时。此过程涉及将日志信息封装为消息，随后投递至Apache Kafka这一消息中间件，进而使不同应用程序能够根据其特定逻辑需求，从相应的主题中订阅并处理这些消息。Kafka之所以成为跨服务器或事件源头汇总事件的核心平台，得益于其处理大规模数据流的能力。众多机构利用这些汇聚的日志事件，不仅进行审计追踪，还有效识别故障模式及趋势。此外，Kafka广泛融入各类日志管理系统，充当数据摄入的桥梁。<br>鉴于日志处理规模庞大，如何在确保服务器资源高效利用的同时维持高性能，成为一大挑战。特别是在高消息吞吐量场景下，逐条消息处理易引发系统负载过重的问题，因每条消息处理均伴随着时间与资源开销。为应对这一挑战，Kafka采取了消息批处理策略，在数据传输与持久化阶段均采用批量操作，显著提升了效率。加之其采用的日志追加写入机制，相较于频繁的随机读写操作，能够以更高的磁盘I/O效率执行，进一步巩固了其在高并发日志处理场景下的稳定性与性能表现。</p>
<p><img src="/images/kafka/20221025-9.png" alt="image-20221025-1"></p>
<h3 id="微服务架构消息总线"><a href="#微服务架构消息总线" class="headerlink" title="微服务架构消息总线"></a>微服务架构消息总线</h3><p>在过去，微服务架构中各个服务之间的通信主要依赖于像REST（Representational State Transfer）这样的同步API接口来进行信息交换。RESTful API以其简洁性和无状态性的特点，成为实现服务间直接交互的主流技术，允许服务以资源的形式进行组织和访问。这种方式简化了服务间的调用逻辑，促进了服务的独立部署与扩展。<br>然而，随着系统复杂度的增加以及对高并发、高性能、低延迟需求的日益增长，传统的基于REST的同步通信模式开始面临挑战。特别是在需要处理大量实时数据流、事件驱动的场景下，这种模式可能不足以高效地支持服务间的数据传递与处理。<br>因此，现在越来越多的微服务架构倾向于采用Apache Kafka这样的分布式流处理平台作为服务间通信的桥梁。Kafka不仅仅是一个消息队列，更是一个强大的发布-订阅消息系统，它允许微服务异步地通过事件来通信。这意味着服务可以产生事件并将其发布到Kafka主题中，而其他服务则可以根据需要订阅这些主题，从而消费这些事件。这种模式解耦了服务间的直接依赖，提高了系统的可扩展性、弹性和容错能力。<br>利用Kafka，微服务可以避免直接绑定到特定的API接口上，转而通过事件驱动的方式进行交互，使得系统设计更加灵活。每个服务可以根据其处理能力自主决定何时从Kafka中读取和处理消息，这不仅优化了资源利用，也使得系统能够更好地应对流量峰值。<br>Kafka凭借其高吞吐量、低延迟、可持久化和容错性等特性，已经成为现代微服务架构中不可或缺的一环。它不仅帮助开发者快速可靠地获取和处理数据，还促进了微服务间的解耦和异步通信，为构建大规模分布式系统提供了强有力的支持。通过将Kafka整合进微服务架构，开发者能够更快地响应市场变化，实现服务的快速迭代与部署，同时保持系统的稳定性和可维护性。</p>
<p><img src="/images/kafka/20221025-10.png" alt="image-20221025-1"></p>
<h3 id="物联网数据总线"><a href="#物联网数据总线" class="headerlink" title="物联网数据总线"></a>物联网数据总线</h3><p>利用Kafka的Streams API，端到端工作负载的实施者均能受益于Kafka内置的消息传递保障机制。这一API简化了确保消息从事务初始化至完成仅被处理一次的过程，无需开发者额外实现复杂的自定义逻辑，从而提升了处理流程的可靠性和易用性。<br>随着时代发展，物联网（IoT）设备的数量呈持续增长趋势。这些设备频繁地生成并传输数据，尤其在连接至Wi-Fi或蜂窝网络的瞬间，数据传输量会急剧上升，这对数据处理系统的效率与扩展性提出了更高要求。Kafka凭借其在高效处理大规模数据流方面的卓越能力，成为应对这一挑战的理想工具。无论是来自信标、车辆、智能手机或其他物联网终端的数据，Kafka都能有效应对，确保数据不仅被可靠处理，还能据此触发相应的业务动作，展现了其在数据密集型应用场景中的核心价值。<br>上述仅为Kafka广泛应用场景的冰山一角，其实际应用范畴远不止于此。接续的讨论将进一步深入Kafka的基本原理与核心特性，为探索和实现更多创新应用场景奠定坚实基础。</p>
<p><img src="/images/kafka/20221025-11.png" alt="image-20221025-1"></p>
<h1 id="什么时候不适合使用Kafka"><a href="#什么时候不适合使用Kafka" class="headerlink" title="什么时候不适合使用Kafka"></a>什么时候不适合使用Kafka</h1><p>尽管Apache Kafka已在多种创新应用场景中证明其价值，但它并非所有任务处理场景下的最优解。以下情形推荐考虑采用其他技术或工具：</p>
<ol>
<li>批处理与历史数据分析需求：当你仅关注月度或年度数据汇总，且无需即时查询、迅速响应或数据重处理功能时，全年运行Kafka可能过于资源密集。在此类需求下，定期调度的任务（如cron作业）可能是更高效的选择。值得注意的是，‘批次大小’这一概念在不同应用场景中的界定存在显著差异，需依据具体需求灵活设定。</li>
<li>随机查询场景：若数据访问模式主要涉及随机查找，Kafka的线性读写优化可能无法发挥最大效用，特别是考虑到其索引机制与传统关系型数据库中的索引设计有本质区别，后者更擅长于支持复杂查询与快速定位。</li>
<li>严格消息顺序保证：确保Kafka主题中的消息维持严格顺序，要求特殊的配置与限制，比如单一生产者及单一分区设置，这在高并发或大规模数据流中可能导致瓶颈。虽然通过架构调整可应对此类挑战，但对于要求极端顺序一致性的场景，这种约束可能引入扩展性和性能上的潜在问题。</li>
<li>大消息体处理：Kafka默认配置对消息大小的限制（1MB），意味着处理超大消息时需谨慎评估其对系统内存的影响，尤其是考虑页面缓存的有效利用。在需要传输大量归档数据时，探索替代方案以优化存储与传输效率显得尤为重要，尽管Kafka在理论上可被配置以适应此类需求，但其可能并非最适宜的技术选型。<br>综上所述，在面对上述特定场景时，尽管利用Kafka实现目标功能在技术上可行，但从效率、成本及系统设计的简洁性考量，评估并选用更为匹配的工具或策略将更为明智。</li>
</ol>
]]></content>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka的关键概念</title>
    <url>/2022/10/26/kafka/Kafka%E7%9A%84%E5%85%B3%E9%94%AE%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<p><img src="/images/kafka/20221026-1.png" alt="image-20221026-1"></p>
<ol>
<li>Broker（代理）<br>○ 定义：Kafka Broker是Kafka集群中的一个服务器实例，负责存储和转发消息。它就像是一个数据仓库，接收生产者发送的消息，存储这些消息，并为消费者提供获取消息的服务。<br>○ 作用：<br> ■ 存储消息：消息以日志（Log）的形式存储在Broker的本地磁盘上。这些日志文件是持久化存储的，保证了消息即使在服务器重启等情况下也不会丢失（当然，这也依赖于合适的配置和硬件稳定性）。<br> ■ 处理客户端请求：接收和处理来自生产者（Producer）和消费者（Consumer）的请求。例如，当生产者发送消息时，Broker会将消息追加到相应的分区（Partition）中；当消费者请求消息时，Broker会从分区中读取消息并发送给消费者。</li>
<li>Topic（主题）<br>○ 定义：Topic是消息的类别或者说逻辑上的分组。生产者将消息发送到特定的Topic，消费者从特定的Topic中订阅和接收消息。它类似于数据库中的表，是一种对消息进行分类管理的概念。<br>○ 作用：<br> ■ 消息分类：不同类型的消息可以通过不同的Topic进行区分。例如，一个电商系统可能有“订单消息”Topic、“用户注册消息”Topic、“商品库存消息”Topic等，这样不同的业务模块可以根据自己的需求订阅和处理相应Topic中的消息。<br> ■ 解耦生产者和消费者：生产者只需要将消息发送到正确的Topic，而不需要关心哪些消费者会接收这些消息；消费者只需要订阅感兴趣的Topic，而不用考虑消息是由哪个生产者发送的。</li>
<li>Partition（分区）<br>○ 定义：Partition是Topic物理上的分区，是存储消息的基本单元。一个Topic可以分为一个或多个分区，每个分区在存储层面是一个有序的、不可变的消息序列。<br>○ 作用：<br> ■ 提高并行度：通过将一个Topic的数据分布在多个分区上，可以让多个生产者和消费者同时对这些分区进行读写操作，从而大大提高了系统的吞吐量。例如，在一个有多个分区的Topic中，多个生产者可以并发地向不同分区发送消息，多个消费者也可以同时从不同分区读取消息。<br> ■ 数据存储和管理：每个分区在Broker的本地磁盘上有自己独立的日志文件，用于存储消息。分区的有序性保证了消息在每个分区内是按照发送的顺序存储的，方便消费者按照顺序读取消息。</li>
<li>Producer（生产者）<br>○ 定义：Producer是消息的生产者，负责创建消息并将其发送到Kafka的Topic中。它可以是一个应用程序中的一个组件，或者是一个独立的服务，将业务数据转换为Kafka消息并发送。<br>○ 作用：<br> ■ 消息生成：从数据源（如数据库、传感器、其他应用系统等）获取数据，将其封装成Kafka消息格式。例如，一个电商系统中的订单服务在订单状态发生变化时，会将订单状态消息封装成Kafka消息。<br> ■ 消息发送：确定消息要发送到的Topic，然后将消息发送到Kafka集群中的一个或多个Broker。生产者可以根据一定的策略选择Broker和分区，比如通过轮询策略将消息均匀地发送到Topic的各个分区。</li>
<li>Consumer（消费者）<br>○ 定义：Consumer是消息的消费者，从Kafka的Topic中订阅并读取消息进行处理。它也是应用程序中的一个组件或独立的服务，通过消费消息来实现业务逻辑。<br>○ 作用：<br> ■ 消息订阅：消费者需要订阅一个或多个Topic，告诉Kafka集群它对哪些消息感兴趣。例如，一个数据分析系统可能会订阅“user - behavior”Topic来获取用户行为数据进行分析。<br> ■ 消息处理：从订阅的Topic的分区中读取消息，按照业务需求进行处理。处理方式可以多种多样，如将消息存储到数据库、进行实时分析、触发其他业务流程等。</li>
<li>Consumer Group（消费者组）<br>○ 定义：Consumer Group是一组消费者的集合，用于实现消息的负载均衡和容错。一个消费者组中的消费者共同消费一个或多个Topic中的消息，每个分区的消息在一个消费者组内只会被一个消费者消费。<br>○ 作用：<br> ■ 负载均衡：当一个Topic有多个分区时，消费者组中的多个消费者可以并行地从不同分区获取消息，从而提高消息的消费速度。例如，一个有3个消费者的消费者组消费一个有6个分区的Topic，每个消费者可以负责消费2个分区的消息。<br> ■ 容错：如果一个消费者出现故障，其他消费者可以接管它负责的分区的消息消费，保证消息的持续消费。</li>
<li>它们之间的关系：<br>○ 生产者（Producer）将消息发送到指定的Topic。消息在Topic内部会根据分区规则（如哈希、轮询等）被分配到一个或多个分区（Partition）中存储在Broker上。<br>○ 消费者（Consumer）通过订阅Topic来获取消息。消费者组（Consumer Group）中的消费者会协调从Topic的分区中获取消息，保证每个分区的消息在一个消费者组内只会被一个消费者消费。每个Broker存储了多个Topic的分区，是整个消息存储和转发的核心节点，为生产者和消费者提供服务。例如，一个生产者将用户登录消息发送到“user-activity”Topic，这个Topic有3个分区存储在2个Broker上。一个消费者组中有3个消费者，它们会根据分区分配策略从这3个分区中获取消息进行处理，比如记录登录时间、更新用户状态等操作。</li>
</ol>
]]></content>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker部署Kafka 3.9</title>
    <url>/2022/10/30/kafka/Docker%E9%83%A8%E7%BD%B2Kafka%203.9/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">rm -rf /home/kafka/ </span><br><span class="line">mkdir /home/kafka/</span><br><span class="line">cd /home/kafka</span><br><span class="line">cat &gt; docker-compose.yaml &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">version: <span class="string">&quot;2&quot;</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  zookeeper:</span><br><span class="line">    image: docker.io/bitnami/zookeeper:<span class="number">3.9</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;2181:2181&quot;</span></span><br><span class="line">    environment:</span><br><span class="line">      - ALLOW_ANONYMOUS_LOGIN=yes</span><br><span class="line">  kafka:</span><br><span class="line">    image: docker.io/bitnami/kafka:<span class="number">3.9</span><span class="number">.0</span></span><br><span class="line">    hostname: kafka</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;9092:9092&quot;</span></span><br><span class="line">    environment:</span><br><span class="line">      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:<span class="number">2181</span></span><br><span class="line">    depends_on:</span><br><span class="line">      - zookeeper</span><br><span class="line">EOF</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">docker-compose down</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=<span class="keyword">public</span> --add-port=<span class="number">9092</span>/tcp --permanent</span><br><span class="line">firewall-cmd  --reload</span><br></pre></td></tr></table></figure>

<h2 id="创建主题Topic"><a href="#创建主题Topic" class="headerlink" title="创建主题Topic"></a>创建主题Topic</h2><p>Kafka的主题（Topic）是Kafka中用于分类和发布消息的逻辑通道。它类似于一个消息队列，生产者向特定主题发布消息，消费者则订阅这些主题来接收消息。每个主题可以有多个分区（Partition），以支持并行处理和扩展性。简而言之，Topic是Kafka中消息流转的基本单位和核心概念。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">docker exec -it kafka-kafka-<span class="number">1</span> /bin/bash</span><br><span class="line">/opt/bitnami/kafka/bin/kafka-topics.sh --create --bootstrap-server=localhost:<span class="number">9092</span> --topic=kinaction_helloworld --partitions <span class="number">1</span> --replication-factor <span class="number">1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">WARNING: Due to limitations in metric names, <span class="function">topics with a <span class="title">period</span> <span class="params">(<span class="string">&#x27;.&#x27;</span>)</span> or <span class="title">underscore</span> <span class="params">(<span class="string">&#x27;_&#x27;</span>)</span> could collide. To avoid issues it is best to use either, but not both.</span></span><br><span class="line"><span class="function">Created topic kinaction_helloworld.</span></span><br></pre></td></tr></table></figure>

<p>这条命令是用于在Kafka集群中创建一个名为kinaction_helloworld的主题。让我们详细解析一下这个命令的各个部分：<br>● /opt/bitnami/kafka/bin/kafka-topics.sh：这是Kafka提供的一个脚本，用于管理Kafka的主题，包括创建、列出、删除等操作。<br>● –create：标志告诉脚本你想要创建一个新的主题。<br>● –bootstrap-server=localhost:9092：指定了Kafka集群的地址和端口，这里是假设Kafka运行在本地，并且使用默认的端口9092。如果你的Kafka集群不在本地或者使用了不同的端口，你需要将这部分替换为实际的地址和端口。<br>● –topic=kinaction_helloworld：定义了你想要创建的主题名称，在这个例子中是kinaction_helloworld。<br>● –partitions 1：指定了主题中的分区数量。分区是Kafka并行处理消息的基础，每个分区可以被看作是一个有序的消息队列。在这个例子中，我们只创建了一个分区。<br>● –replication-factor 1：我为你补全了这一部分，它指定了每个分区的副本因子。副本因子表示每个分区会有多少个副本以确保数据的持久性和故障恢复能力。在这个例子中设置为1意味着没有额外的副本，这在生产环境中可能不够健壮，因为如果该分区所在的Broker失败，那么这部分数据将不可用。在生产环境中，通常会设置一个更高的副本因子（如3）来保证高可用性。<br>综上所述，该命令完整地执行后，会在本地Kafka集群上创建一个名为kinaction_helloworld的主题，该主题包含1个分区和1个副本。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">/opt/bitnami/kafka/bin/kafka-topics.sh --list --bootstrap-server localhost:<span class="number">9092</span></span><br><span class="line">kinaction_helloworld</span><br></pre></td></tr></table></figure>

<h2 id="查看主题详细内容"><a href="#查看主题详细内容" class="headerlink" title="查看主题详细内容"></a>查看主题详细内容</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server localhost:<span class="number">9092</span> --describe --topic kinaction_helloworld</span><br><span class="line">Topic: kinaction_helloworld	TopicId: 7El5X-HBQre8t9R2H9ec8w	PartitionCount: <span class="number">1</span>	ReplicationFactor: <span class="number">1</span>	Configs: </span><br><span class="line">Topic: kinaction_helloworld	Partition: <span class="number">0</span>	Leader: <span class="number">1001</span>	Replicas: <span class="number">1001</span>	Isr: <span class="number">1001</span></span><br></pre></td></tr></table></figure>

<p>该命令行语句是用于查询Kafka中特定主题（topic）的详细信息。下面是该命令的分解和其输出内容的详细解释：</p>
<h3 id="输出内容解释"><a href="#输出内容解释" class="headerlink" title="输出内容解释:"></a>输出内容解释:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Topic: kinaction_helloworld	TopicId: 7El5X-HBQre8t9R2H9ec8w	PartitionCount: <span class="number">1</span>	ReplicationFactor: <span class="number">1</span>	Configs: </span><br></pre></td></tr></table></figure>

<p>● Topic: 表示主题的名称，这里是kinaction_helloworld。<br>● TopicId: 是主题的唯一标识符，用于在Kafka内部识别不同的主题，例如7El5X-HBQre8t9R2H9ec8w。<br>● PartitionCount: 指出该主题包含的分区数量，这里是1个分区。分区是Kafka并行处理和扩展消息存储的基础。<br>● ReplicationFactor: 表示每个分区的副本数，这里也是1，意味着没有数据冗余。在生产环境中，通常会设置更高的副本数以确保高可用性。<br>● Configs: 后面没有列出具体的配置项，表明该主题使用的是默认配置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Topic: kinaction_helloworld	Partition: <span class="number">0</span>	Leader: <span class="number">1001</span>	Replicas: <span class="number">1001</span>	Isr: <span class="number">1001</span></span><br></pre></td></tr></table></figure>

<p>● Partition: 指定具体分区的信息，这里是分区0。<br>● Leader: 每个分区都有一个领导者副本，负责处理对该分区的所有读写请求。这里分区0的领导者是Broker id为1001的节点。<br>● Replicas: 列出了该分区的所有副本节点，这里只有一个副本，也是1001。<br>● Isr: 表示“in-sync replicas”（同步副本集），这些副本与领导者保持同步并且被认为是可以立即接替成为领导者的副本。在这个例子中，ISR中也只有1001这一个副本。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">/opt/bitnami/kafka/bin/kafka-console-producer.sh --bootstrap-server localhost:<span class="number">9092</span> --topic kinaction_helloworld</span><br><span class="line">&gt;<span class="number">773616</span></span><br><span class="line">&gt;<span class="number">187271</span></span><br><span class="line">&gt;<span class="number">8381</span></span><br><span class="line">&gt;<span class="number">3810018</span></span><br></pre></td></tr></table></figure>

<p>整个命令的作用是启动Kafka的控制台生产者，连接到本地（localhost）的Kafka服务器，然后开始向名为 kinaction_helloworld 的主题发送消息。用户可以在启动的命令行界面中输入消息内容，每按一次回车，输入的内容就会作为一条消息发送到指定的主题中。这对于测试和演示Kafka消息生产与消费流程非常有用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">/opt/bitnami/kafka/bin/kafka-console-consumer.sh --bootstrap-server localhost:<span class="number">9092</span> --topic kinaction_helloworld --from-beginning</span><br><span class="line"><span class="number">773616</span></span><br><span class="line"><span class="number">187271</span></span><br><span class="line"><span class="number">8381</span></span><br><span class="line"><span class="number">3810018</span></span><br></pre></td></tr></table></figure>

<p>该命令的作用是使用Kafka提供的命令行工具，从本地Kafka服务器上的kinaction_helloworld主题中消费消息，并且是从该主题最开始的消息消费起。这对于测试、调试或初学者了解Kafka消息队列的工作原理非常有用。</p>
]]></content>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>Java程序接入Kakfa</title>
    <url>/2022/11/01/kafka/Java%E7%A8%8B%E5%BA%8F%E6%8E%A5%E5%85%A5Kakfa/</url>
    <content><![CDATA[<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="line">  xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">  xsi:schemaLocation=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;groupId&gt;com.lixiang&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;ex00100&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">  &lt;properties&gt;</span><br><span class="line">    &lt;maven.compiler.source&gt;17&lt;/maven.compiler.source&gt;</span><br><span class="line">    &lt;maven.compiler.target&gt;17&lt;/maven.compiler.target&gt;</span><br><span class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">  &lt;/properties&gt;</span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;!-- Kafka客户端库，用于与Kafka集群进行通信 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;kafka-clients&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;3.9.0&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Logback日志框架，用于记录应用程序的日志 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.2.10&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.KafkaProducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.Producer;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.ProducerRecord;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建Properties对象以存储Kafka生产者的配置属性</span></span><br><span class="line">        Properties kaProperties = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置Kafka服务器的地址</span></span><br><span class="line">        kaProperties.put(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;192.168.31.230:9092&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置键的序列化器为字符串类型</span></span><br><span class="line">        kaProperties.put(<span class="string">&quot;key.serializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置值的序列化器为字符串类型</span></span><br><span class="line">        kaProperties.put(<span class="string">&quot;value.serializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建Kafka生产者并使用之前设置的配置属性</span></span><br><span class="line">        <span class="keyword">try</span> (Producer&lt;String, String&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;&gt;(kaProperties)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建一个ProducerRecord对象，指定主题和消息内容</span></span><br><span class="line">            ProducerRecord&lt;String, String&gt; producerRecord =</span><br><span class="line">                    <span class="keyword">new</span> ProducerRecord&lt;&gt;(<span class="string">&quot;kinaction_helloworld&quot;</span>, <span class="string">&quot;hello world again!&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 发送消息</span></span><br><span class="line">            producer.send(producerRecord);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecords;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.KafkaConsumer;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(HelloWorldConsumer.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> keepConsuming = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建Properties对象来存储Kafka消费者的配置属性</span></span><br><span class="line">        Properties kaProperties = <span class="keyword">new</span> Properties();  <span class="comment">//&lt;1&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置Kafka服务器的地址</span></span><br><span class="line">        kaProperties.put(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;192.168.31.230:9092&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置消费者组的ID，同一组内的消费者会竞争消费分区</span></span><br><span class="line">        kaProperties.put(<span class="string">&quot;group.id&quot;</span>, <span class="string">&quot;kinaction_helloconsumer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启用自动提交偏移量，表示消费者会自动向Kafka报告它读取到的最后一条消息的位置</span></span><br><span class="line">        kaProperties.put(<span class="string">&quot;enable.auto.commit&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置自动提交偏移量的时间间隔，这里设置为每1000毫秒提交一次</span></span><br><span class="line">        kaProperties.put(<span class="string">&quot;auto.commit.interval.ms&quot;</span>, <span class="string">&quot;1000&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置键的反序列化器为字符串类型</span></span><br><span class="line">        kaProperties.put(<span class="string">&quot;key.deserializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置值的反序列化器为字符串类型</span></span><br><span class="line">        kaProperties.put(<span class="string">&quot;value.deserializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建HelloWorldConsumer实例</span></span><br><span class="line">        HelloWorldConsumer helloWorldConsumer = <span class="keyword">new</span> HelloWorldConsumer();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用配置属性开始消费Kafka主题的消息</span></span><br><span class="line">        helloWorldConsumer.consume(kaProperties);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加关闭钩子，当JVM关闭时，调用HelloWorldConsumer的shutdown方法进行清理</span></span><br><span class="line">        Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread(helloWorldConsumer::shutdown));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">consume</span><span class="params">(Properties kaProperties)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建Kafka消费者并使用之前设置的配置属性</span></span><br><span class="line">        <span class="keyword">try</span> (KafkaConsumer&lt;String, String&gt; consumer = <span class="keyword">new</span> KafkaConsumer&lt;&gt;(kaProperties)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 订阅指定的主题</span></span><br><span class="line">            consumer.subscribe(List.of(<span class="string">&quot;kinaction_helloworld&quot;</span>));  <span class="comment">//&lt;2&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 当继续消费标志为真时循环执行</span></span><br><span class="line">            <span class="keyword">while</span> (keepConsuming) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 拉取消息，最长等待250毫秒</span></span><br><span class="line">                ConsumerRecords&lt;String, String&gt; records = consumer.poll(Duration.ofMillis(<span class="number">250</span>));  <span class="comment">//&lt;3&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 遍历接收到的消息记录</span></span><br><span class="line">                <span class="keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : records) &#123;   <span class="comment">//&lt;4&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 打印消息的偏移量和值</span></span><br><span class="line">                    log.info(<span class="string">&quot;kinaction_info offset = &#123;&#125;, kinaction_value = &#123;&#125;&quot;</span>, record.offset(), record.value());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        keepConsuming = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka生产者关键配置</title>
    <url>/2022/11/01/kafka/Kafka%E7%94%9F%E4%BA%A7%E8%80%85%E5%85%B3%E9%94%AE%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="line">         xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.lixiang.ex00200&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;ex00200&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;maven.compiler.source&gt;8&lt;/maven.compiler.source&gt;</span><br><span class="line">        &lt;maven.compiler.target&gt;8&lt;/maven.compiler.target&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!-- Kafka客户端库，用于与Kafka集群进行通信 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;kafka-clients&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.9.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- Logback日志框架，用于记录应用程序的日志 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2.10&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.13.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String orderId;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> timestamp;</span><br><span class="line">    <span class="keyword">private</span> String product;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> quantity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 全参构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">(String orderId, <span class="keyword">long</span> timestamp, String product, <span class="keyword">int</span> quantity, <span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderId = orderId;</span><br><span class="line">        <span class="keyword">this</span>.timestamp = timestamp;</span><br><span class="line">        <span class="keyword">this</span>.product = product;</span><br><span class="line">        <span class="keyword">this</span>.quantity = quantity;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Getter 和 Setter 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOrderId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderId</span><span class="params">(String orderId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderId = orderId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTimestamp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> timestamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTimestamp</span><span class="params">(<span class="keyword">long</span> timestamp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.timestamp = timestamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProduct</span><span class="params">(String product)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.product = product;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getQuantity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> quantity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setQuantity</span><span class="params">(<span class="keyword">int</span> quantity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.quantity = quantity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// toString 方法，方便打印对象信息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Order&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;orderId=&#x27;&quot;</span> + orderId + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, timestamp=&quot;</span> + timestamp +</span><br><span class="line">                <span class="string">&quot;, product=&#x27;&quot;</span> + product + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, quantity=&quot;</span> + quantity +</span><br><span class="line">                <span class="string">&quot;, price=&quot;</span> + price +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String orderId;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> timestamp;</span><br><span class="line">    <span class="keyword">private</span> String product;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> quantity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 全参构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">(String orderId, <span class="keyword">long</span> timestamp, String product, <span class="keyword">int</span> quantity, <span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderId = orderId;</span><br><span class="line">        <span class="keyword">this</span>.timestamp = timestamp;</span><br><span class="line">        <span class="keyword">this</span>.product = product;</span><br><span class="line">        <span class="keyword">this</span>.quantity = quantity;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Getter 和 Setter 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOrderId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderId</span><span class="params">(String orderId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderId = orderId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTimestamp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> timestamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTimestamp</span><span class="params">(<span class="keyword">long</span> timestamp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.timestamp = timestamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProduct</span><span class="params">(String product)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.product = product;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getQuantity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> quantity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setQuantity</span><span class="params">(<span class="keyword">int</span> quantity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.quantity = quantity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// toString 方法，方便打印对象信息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Order&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;orderId=&#x27;&quot;</span> + orderId + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, timestamp=&quot;</span> + timestamp +</span><br><span class="line">                <span class="string">&quot;, product=&#x27;&quot;</span> + product + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, quantity=&quot;</span> + quantity +</span><br><span class="line">                <span class="string">&quot;, price=&quot;</span> + price +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.KafkaProducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.Producer;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.ProducerConfig;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.ProducerRecord;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.RecordMetadata;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.common.serialization.StringSerializer;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderProducer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(OrderProducer.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</span><br><span class="line">        Properties kaProperties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//它用于指定初始连接的服务器地址列表。</span></span><br><span class="line">        kaProperties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">&quot;192.168.31.230:9092&quot;</span>); <span class="comment">// 指定Kafka集群地址</span></span><br><span class="line">        kaProperties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName()); <span class="comment">// 设置键序列化类</span></span><br><span class="line">        kaProperties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, JsonSerializer.class.getName()); <span class="comment">// 设置值序列化类</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         acks配置掌控着生产者消息发送的确认策略。</span></span><br><span class="line"><span class="comment">         acks = 0时，生产者发完即走，速度最快但可能丢消息；</span></span><br><span class="line"><span class="comment">         acks = 1，会等主副本确认，有一定可靠性；</span></span><br><span class="line"><span class="comment">         acks = -1/all则需所有同步副本确认，可靠性高但性能损耗大。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        kaProperties.put(ProducerConfig.ACKS_CONFIG, <span class="string">&quot;all&quot;</span>); <span class="comment">// 配置消息确认模式为所有副本确认</span></span><br><span class="line">        kaProperties.put(ProducerConfig.RETRIES_CONFIG, <span class="string">&quot;3&quot;</span>); <span class="comment">// 设置消息发送失败重试次数</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION是 Kafka 生产者配置参数。</span></span><br><span class="line"><span class="comment">        它用于限制每个连接中可以同时发送但尚未收到响应的请求数量。</span></span><br><span class="line"><span class="comment">        如果设置为 1，能保证消息按顺序写入分区。</span></span><br><span class="line"><span class="comment">        在启用幂等性或事务时，这个值强制设为 1，有助于确保消息的顺序和事务的一致性。</span></span><br><span class="line"><span class="comment">        如果大于 1，可能出现乱序写入，但能提升吞吐量。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        kaProperties.put(ProducerConfig.MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION, <span class="string">&quot;1&quot;</span>); <span class="comment">// 限制每个连接的未完成请求数量</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (Producer&lt;String, Order&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;&gt;(kaProperties)) &#123;</span><br><span class="line">            Order order = <span class="keyword">new</span> Order(<span class="string">&quot;orders&quot;</span>, System.currentTimeMillis(), <span class="string">&quot;Laptop&quot;</span>, <span class="number">1</span>, <span class="number">999.99</span>);</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            ProducerRecord 是 Kafka 生产者发送消息的重要组件。</span></span><br><span class="line"><span class="comment">            它用于指定消息发送的目标主题，这决定了消息的基本流向。</span></span><br><span class="line"><span class="comment">            可以设定分区，能精准控制消息存储分区，若不指定，Kafka 会按策略分配。</span></span><br><span class="line"><span class="comment">            其中的键能够用于分区分配，确保相关消息在同一分区。</span></span><br><span class="line"><span class="comment">            时间戳记录消息产生时间，方便后续时间相关处理。</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            ProducerRecord&lt;String, Order&gt; producerRecord = <span class="keyword">new</span> ProducerRecord&lt;&gt;(<span class="string">&quot;orders&quot;</span>, <span class="keyword">null</span>, order);</span><br><span class="line">            <span class="comment">// 发送ProducerRecord对象，并同步获取发送结果</span></span><br><span class="line">            RecordMetadata result = producer.send(producerRecord).get();</span><br><span class="line">            log.info(<span class="string">&quot;offset = &#123;&#125;, topic = &#123;&#125;, timestamp = &#123;&#125;&quot;</span>, result.offset(), result.topic(), result.timestamp());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;Error sending message&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonSerializer</span> <span class="keyword">implements</span> <span class="title">org</span>.<span class="title">apache</span>.<span class="title">kafka</span>.<span class="title">common</span>.<span class="title">serialization</span>.<span class="title">Serializer</span>&lt;<span class="title">Order</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">byte</span>[] serialize(String topic, Order data) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> objectMapper.writeValueAsBytes(data);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;Error serializing JSON message&quot;</span>, e);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Error serializing JSON message&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>生产者数据传递语义</title>
    <url>/2022/11/02/kafka/%E7%94%9F%E4%BA%A7%E8%80%85%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%92%E8%AF%AD%E4%B9%89/</url>
    <content><![CDATA[<p><img src="/images/kafka/20221102-1.png" alt="image-20221102-1"></p>
<ol>
<li>At Most Once 语义（最多一次）<br>● 原理：<br>○ 生产者发送消息后，不会等待任何来自 Kafka 服务器的确认。一旦消息发送出去，生产者就认为任务完成，不会关心消息是否成功到达 Kafka 集群或被存储。如果在消息发送过程中出现网络故障、服务器故障等问题，该消息可能会丢失，并且生产者不会尝试重新发送。<br>○ 这种语义下，生产者的性能通常是最高的，因为它减少了等待确认的时间，但牺牲了消息的可靠性。<br>● 适用场景：<br>○ 适用于对消息丢失不太敏感，但对性能和低延迟要求较高的场景。例如，一些监控数据的实时传输，即使部分数据丢失，也不会对整体监控结果产生重大影响，因为后续的数据可以弥补之前的信息缺失。</li>
<li>At Least Once 语义（至少一次）<br>● 原理：<br>○ 生产者发送消息后，会等待 Kafka 服务器的确认（通常是 ack 确认）。如果没有收到确认，生产者会认为消息发送失败，会尝试重新发送该消息，直到收到确认。这种情况下，可能会导致消息被重复发送，因为生产者无法确定消息是在第一次发送时未到达还是在确认过程中丢失。<br>○ 为了保证消息不丢失，生产者会不断重试发送消息，可能会导致接收方收到重复的消息，因此在消费者端需要处理可能出现的重复消息，如通过消息去重机制。<br>● 适用场景：<br>○ 适用于大多数业务场景，特别是对消息丢失非常敏感，但可以容忍一定程度的消息重复的情况。例如，在金融交易系统中，宁可重复处理一笔交易，也不能让交易消息丢失，后续可以通过业务逻辑或幂等性操作来解决重复消息的问题。</li>
<li>Exactly Once 语义（精确一次）</li>
</ol>
<p><img src="/images/kafka/20221102-2.jpg" alt="image-20221102-1"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;PID,Partition,SeqNumber&gt;</span><br></pre></td></tr></table></figure>

<p>● 原理：<br>  ○ 生产者确保消息在发送过程中，从发送到存储在 Kafka 集群的整个过程中，只会被存储一次，既不会丢失也不会重复。这是最严格的数据传递语义，需要生产者、Kafka 集群和消费者端协同工作。<br>  ○ 在生产者端，通过使用事务（transactions）和幂等性（idempotency）机制。事务允许生产者将多个消息发送操作组合成一个原子操作，幂等性确保生产者在重试发送时不会重复发送消息。Kafka 集群内部也需要支持事务，消费者端也需要配合使用事务来保证从正确的偏移量开始消费，以避免重复消费。<br>● 生产者端的消息标识：<br>  ○ Kafka 生产者启用幂等性（enable.idempotency=true）后，会为每条消息分配一个唯一的序列号（Sequence Number）。这个序列号是针对每个生产者实例和主题分区的组合生成的。<br>  ○ 对于同一个生产者发送到同一分区的消息，序列号是递增的。当 Kafka 服务器接收到消息时，会检查该消息的序列号。如果接收到的消息序列号与该分区下此生产者上一个成功存储的消息序列号连续（即比上一个序列号大 1），则认为该消息是合法的；如果序列号小于或等于上一个存储的序列号，Kafka 服务器会将其视为重复消息并拒绝存储。<br>● 适用场景：<br>  ○ 适用于对消息的准确性和一致性要求极高，既不能丢失也不能重复的场景。例如，在涉及重要的订单处理、库存管理等业务场景中，确保消息的精确传递非常重要，避免出现多扣库存或重复订单等问题。<br>以下是 Kafka 生产者实现不同数据传递语义的关键配置：</p>
<h3 id="At-Most-Once-语义配置示例"><a href="#At-Most-Once-语义配置示例" class="headerlink" title="At Most Once 语义配置示例"></a>At Most Once 语义配置示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">kaProperties.put(ProducerConfig.ACKS_CONFIG, <span class="string">&quot;0&quot;</span>); </span><br><span class="line">kaProperties.put(ProducerConfig.RETRIES_CONFIG, <span class="string">&quot;0&quot;</span>); </span><br></pre></td></tr></table></figure>
<p>● acks=0 表示生产者不需要等待任何确认，retries=0 表示不进行重试。</p>
<h3 id="At-Least-Once-语义配置示例"><a href="#At-Least-Once-语义配置示例" class="headerlink" title="At Least Once 语义配置示例"></a>At Least Once 语义配置示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">kaProperties.put(ProducerConfig.ACKS_CONFIG, <span class="string">&quot;all&quot;</span>); </span><br><span class="line">kaProperties.put(ProducerConfig.RETRIES_CONFIG, Integer.MAX_VALUE); </span><br></pre></td></tr></table></figure>
<p>● acks=all 表示生产者需要等待所有副本确认，retries=Integer.MAX_VALUE 表示无限次重试，以确保消息至少被存储一次。</p>
<h3 id="Exactly-Once-语义配置示例"><a href="#Exactly-Once-语义配置示例" class="headerlink" title="Exactly Once 语义配置示例"></a>Exactly Once 语义配置示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">kaProperties.put(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG, <span class="keyword">true</span>);</span><br><span class="line">kaProperties.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG, <span class="string">&quot;your_transaction_id&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>enable.idempotency=true 启用生产者的幂等性，transactional.id 为事务提供唯一标识，启用事务机制。</p>
]]></content>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>生产者消息分区</title>
    <url>/2022/11/08/kafka/%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E6%81%AF%E5%88%86%E5%8C%BA/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[root@docker-vm kafka]# docker-compose exec -it kafka /bin/bash</span><br><span class="line">WARN[<span class="number">0000</span>] /home/kafka/docker-compose.yaml: the attribute `version` is obsolete, it will be ignored, please remove it to avoid potential confusion </span><br><span class="line"></span><br><span class="line">$ /opt/bitnami/kafka/bin/kafka-topics.sh --create --bootstrap-server=localhost:<span class="number">9092</span> --topic=porders --partitions <span class="number">3</span> --replication-factor <span class="number">1</span></span><br><span class="line">Created topic porders.</span><br><span class="line"></span><br><span class="line">$ /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server localhost:<span class="number">9092</span> --describe --topic porders</span><br><span class="line"></span><br><span class="line">Topic: porders	TopicId: CsLNaSudRgm_Xe5uinwrVg	PartitionCount: <span class="number">3</span>	ReplicationFactor: <span class="number">1</span>	Configs: </span><br><span class="line">	Topic: porders	Partition: <span class="number">0</span>	Leader: <span class="number">1001</span>	Replicas: <span class="number">1001</span>	Isr: <span class="number">1001</span>	Elr: N/A	LastKnownElr: N/A</span><br><span class="line">	Topic: porders	Partition: <span class="number">1</span>	Leader: <span class="number">1001</span>	Replicas: <span class="number">1001</span>	Isr: <span class="number">1001</span>	Elr: N/A	LastKnownElr: N/A</span><br><span class="line">	Topic: porders	Partition: <span class="number">2</span>	Leader: <span class="number">1001</span>	Replicas: <span class="number">1001</span>	Isr: <span class="number">1001</span>	Elr: N/A	LastKnownElr: N/A</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.common.serialization.StringSerializer;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderProducer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(OrderProducer.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</span><br><span class="line">        Properties kaProperties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//它用于指定初始连接的服务器地址列表。</span></span><br><span class="line">        kaProperties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">&quot;192.168.31.230:9092&quot;</span>); <span class="comment">// 指定Kafka集群地址</span></span><br><span class="line">        kaProperties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName()); <span class="comment">// 设置键序列化类</span></span><br><span class="line">        kaProperties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, JsonSerializer.class.getName()); <span class="comment">// 设置值序列化类</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        org.apache.kafka.clients.producer.RoundRobinPartitioner：一种分区策略，在一系列连续记录中，每个记录都被发送到不同的分区，无论是否提供了“键”，直到分区用尽，然后该过程重新开始。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        kaProperties.put(ProducerConfig.PARTITIONER_CLASS_CONFIG, RoundRobinPartitioner.class.getName());</span><br><span class="line">        kaProperties.put(ProducerConfig.ACKS_CONFIG, <span class="string">&quot;all&quot;</span>);</span><br><span class="line">        kaProperties.put(ProducerConfig.RETRIES_CONFIG, <span class="string">&quot;3&quot;</span>);</span><br><span class="line">        kaProperties.put(ProducerConfig.MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION, <span class="string">&quot;1&quot;</span>); <span class="comment">// 限制每个连接的未完成请求数量</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (Producer&lt;String, Order&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;&gt;(kaProperties)) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                Order order = <span class="keyword">new</span> Order(<span class="string">&quot;o&quot;</span> + i, System.currentTimeMillis(), <span class="string">&quot;Laptop&quot;</span>, <span class="number">1</span>, <span class="number">999.99</span>);</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                如果未指定分区但存在键，则根据键的哈希值选择分区。</span></span><br><span class="line"><span class="comment">                如果既没有分区也没有键，则选择粘性分区，当向该分区生成至少 batch.size 字节的数据时，该分区会发生变化。</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                ProducerRecord&lt;String, Order&gt; producerRecord = <span class="keyword">new</span> ProducerRecord&lt;&gt;(<span class="string">&quot;porders&quot;</span>, <span class="keyword">null</span>, order);</span><br><span class="line">                RecordMetadata result = producer.send(producerRecord).get();</span><br><span class="line">                log.info(<span class="string">&quot;topic=&#123;&#125;, partition=&#123;&#125;, offset = &#123;&#125;, timestamp = &#123;&#125;&quot;</span>, result.topic(), result.partition(), result.offset(), result.timestamp());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;Error sending message&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonSerializer</span> <span class="keyword">implements</span> <span class="title">org</span>.<span class="title">apache</span>.<span class="title">kafka</span>.<span class="title">common</span>.<span class="title">serialization</span>.<span class="title">Serializer</span>&lt;<span class="title">Order</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">byte</span>[] serialize(String topic, Order data) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> objectMapper.writeValueAsBytes(data);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;Error serializing JSON message&quot;</span>, e);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Error serializing JSON message&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>未设置Key，未设置partitioner.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">11</span> <span class="number">21</span>:<span class="number">23</span>:<span class="number">17</span> [INFO] (TransactionManager.java:<span class="number">503</span>) - [Producer clientId=producer-<span class="number">1</span>] ProducerId set to <span class="number">10</span> with epoch <span class="number">0</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">11</span> <span class="number">21</span>:<span class="number">23</span>:<span class="number">17</span> [INFO] (OrderProducer.java:<span class="number">36</span>) - topic=porders, partition=<span class="number">1</span>, offset = <span class="number">14</span>, timestamp = <span class="number">1736601797657</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">11</span> <span class="number">21</span>:<span class="number">23</span>:<span class="number">17</span> [INFO] (OrderProducer.java:<span class="number">36</span>) - topic=porders, partition=<span class="number">1</span>, offset = <span class="number">15</span>, timestamp = <span class="number">1736601797710</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">11</span> <span class="number">21</span>:<span class="number">23</span>:<span class="number">17</span> [INFO] (OrderProducer.java:<span class="number">36</span>) - topic=porders, partition=<span class="number">1</span>, offset = <span class="number">16</span>, timestamp = <span class="number">1736601797714</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">11</span> <span class="number">21</span>:<span class="number">23</span>:<span class="number">17</span> [INFO] (OrderProducer.java:<span class="number">36</span>) - topic=porders, partition=<span class="number">1</span>, offset = <span class="number">17</span>, timestamp = <span class="number">1736601797717</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">11</span> <span class="number">21</span>:<span class="number">23</span>:<span class="number">17</span> [INFO] (OrderProducer.java:<span class="number">36</span>) - topic=porders, partition=<span class="number">1</span>, offset = <span class="number">18</span>, timestamp = <span class="number">1736601797720</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">11</span> <span class="number">21</span>:<span class="number">23</span>:<span class="number">17</span> [INFO] (OrderProducer.java:<span class="number">36</span>) - topic=porders, partition=<span class="number">1</span>, offset = <span class="number">19</span>, timestamp = <span class="number">1736601797723</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">11</span> <span class="number">21</span>:<span class="number">23</span>:<span class="number">17</span> [INFO] (OrderProducer.java:<span class="number">36</span>) - topic=porders, partition=<span class="number">1</span>, offset = <span class="number">20</span>, timestamp = <span class="number">1736601797726</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">11</span> <span class="number">21</span>:<span class="number">23</span>:<span class="number">17</span> [INFO] (OrderProducer.java:<span class="number">36</span>) - topic=porders, partition=<span class="number">1</span>, offset = <span class="number">21</span>, timestamp = <span class="number">1736601797729</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">11</span> <span class="number">21</span>:<span class="number">23</span>:<span class="number">17</span> [INFO] (OrderProducer.java:<span class="number">36</span>) - topic=porders, partition=<span class="number">1</span>, offset = <span class="number">22</span>, timestamp = <span class="number">1736601797733</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">11</span> <span class="number">21</span>:<span class="number">23</span>:<span class="number">17</span> [INFO] (OrderProducer.java:<span class="number">36</span>) - topic=porders, partition=<span class="number">1</span>, offset = <span class="number">23</span>, timestamp = <span class="number">1736601797736</span></span><br></pre></td></tr></table></figure>
<p>设置了Key，未设置partitioner.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">11</span> <span class="number">21</span>:<span class="number">20</span>:<span class="number">50</span> [INFO] (TransactionManager.java:<span class="number">503</span>) - [Producer clientId=producer-<span class="number">1</span>] ProducerId set to <span class="number">7</span> with epoch <span class="number">0</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">11</span> <span class="number">21</span>:<span class="number">20</span>:<span class="number">50</span> [INFO] (OrderProducer.java:<span class="number">36</span>) - topic=porders, partition=<span class="number">2</span>, offset = <span class="number">18</span>, timestamp = <span class="number">1736601650006</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">11</span> <span class="number">21</span>:<span class="number">20</span>:<span class="number">50</span> [INFO] (OrderProducer.java:<span class="number">36</span>) - topic=porders, partition=<span class="number">1</span>, offset = <span class="number">5</span>, timestamp = <span class="number">1736601650061</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">11</span> <span class="number">21</span>:<span class="number">20</span>:<span class="number">50</span> [INFO] (OrderProducer.java:<span class="number">36</span>) - topic=porders, partition=<span class="number">0</span>, offset = <span class="number">7</span>, timestamp = <span class="number">1736601650065</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">11</span> <span class="number">21</span>:<span class="number">20</span>:<span class="number">50</span> [INFO] (OrderProducer.java:<span class="number">36</span>) - topic=porders, partition=<span class="number">2</span>, offset = <span class="number">19</span>, timestamp = <span class="number">1736601650068</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">11</span> <span class="number">21</span>:<span class="number">20</span>:<span class="number">50</span> [INFO] (OrderProducer.java:<span class="number">36</span>) - topic=porders, partition=<span class="number">1</span>, offset = <span class="number">6</span>, timestamp = <span class="number">1736601650072</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">11</span> <span class="number">21</span>:<span class="number">20</span>:<span class="number">50</span> [INFO] (OrderProducer.java:<span class="number">36</span>) - topic=porders, partition=<span class="number">0</span>, offset = <span class="number">8</span>, timestamp = <span class="number">1736601650075</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">11</span> <span class="number">21</span>:<span class="number">20</span>:<span class="number">50</span> [INFO] (OrderProducer.java:<span class="number">36</span>) - topic=porders, partition=<span class="number">2</span>, offset = <span class="number">20</span>, timestamp = <span class="number">1736601650077</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">11</span> <span class="number">21</span>:<span class="number">20</span>:<span class="number">50</span> [INFO] (OrderProducer.java:<span class="number">36</span>) - topic=porders, partition=<span class="number">1</span>, offset = <span class="number">7</span>, timestamp = <span class="number">1736601650081</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">11</span> <span class="number">21</span>:<span class="number">20</span>:<span class="number">50</span> [INFO] (OrderProducer.java:<span class="number">36</span>) - topic=porders, partition=<span class="number">0</span>, offset = <span class="number">9</span>, timestamp = <span class="number">1736601650084</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">11</span> <span class="number">21</span>:<span class="number">20</span>:<span class="number">50</span> [INFO] (OrderProducer.java:<span class="number">36</span>) - topic=porders, partition=<span class="number">2</span>, offset = <span class="number">21</span>, timestamp = <span class="number">1736601650086</span></span><br></pre></td></tr></table></figure>
<p>已设置partitioner.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">11</span> <span class="number">21</span>:<span class="number">13</span>:<span class="number">50</span> [INFO] (TransactionManager.java:<span class="number">503</span>) - [Producer clientId=producer-<span class="number">1</span>] ProducerId set to <span class="number">6</span> with epoch <span class="number">0</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">11</span> <span class="number">21</span>:<span class="number">13</span>:<span class="number">50</span> [INFO] (OrderProducer.java:<span class="number">32</span>) - topic=porders, partition=<span class="number">2</span>, offset = <span class="number">14</span>, timestamp = <span class="number">1736601230629</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">11</span> <span class="number">21</span>:<span class="number">13</span>:<span class="number">50</span> [INFO] (OrderProducer.java:<span class="number">32</span>) - topic=porders, partition=<span class="number">1</span>, offset = <span class="number">2</span>, timestamp = <span class="number">1736601230677</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">11</span> <span class="number">21</span>:<span class="number">13</span>:<span class="number">50</span> [INFO] (OrderProducer.java:<span class="number">32</span>) - topic=porders, partition=<span class="number">0</span>, offset = <span class="number">4</span>, timestamp = <span class="number">1736601230681</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">11</span> <span class="number">21</span>:<span class="number">13</span>:<span class="number">50</span> [INFO] (OrderProducer.java:<span class="number">32</span>) - topic=porders, partition=<span class="number">2</span>, offset = <span class="number">15</span>, timestamp = <span class="number">1736601230684</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">11</span> <span class="number">21</span>:<span class="number">13</span>:<span class="number">50</span> [INFO] (OrderProducer.java:<span class="number">32</span>) - topic=porders, partition=<span class="number">1</span>, offset = <span class="number">3</span>, timestamp = <span class="number">1736601230687</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">11</span> <span class="number">21</span>:<span class="number">13</span>:<span class="number">50</span> [INFO] (OrderProducer.java:<span class="number">32</span>) - topic=porders, partition=<span class="number">0</span>, offset = <span class="number">5</span>, timestamp = <span class="number">1736601230689</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">11</span> <span class="number">21</span>:<span class="number">13</span>:<span class="number">50</span> [INFO] (OrderProducer.java:<span class="number">32</span>) - topic=porders, partition=<span class="number">2</span>, offset = <span class="number">16</span>, timestamp = <span class="number">1736601230692</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">11</span> <span class="number">21</span>:<span class="number">13</span>:<span class="number">50</span> [INFO] (OrderProducer.java:<span class="number">32</span>) - topic=porders, partition=<span class="number">1</span>, offset = <span class="number">4</span>, timestamp = <span class="number">1736601230696</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">11</span> <span class="number">21</span>:<span class="number">13</span>:<span class="number">50</span> [INFO] (OrderProducer.java:<span class="number">32</span>) - topic=porders, partition=<span class="number">0</span>, offset = <span class="number">6</span>, timestamp = <span class="number">1736601230699</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">11</span> <span class="number">21</span>:<span class="number">13</span>:<span class="number">50</span> [INFO] (OrderProducer.java:<span class="number">32</span>) - topic=porders, partition=<span class="number">2</span>, offset = <span class="number">17</span>, timestamp = <span class="number">1736601230702</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka的消息是如何存储的</title>
    <url>/2022/11/09/kafka/Kafka%E7%9A%84%E6%B6%88%E6%81%AF%E6%98%AF%E5%A6%82%E4%BD%95%E5%AD%98%E5%82%A8%E7%9A%84/</url>
    <content><![CDATA[<p><img src="/images/kafka/20221109-1.png" alt="image-20221102-1"></p>
<h3 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h3><p>Topic（主题）：是最顶层的概念，类似于一个消息的类别或频道，是消息的集合。例如，在一个电商系统中，可以有“订单主题”“用户行为主题”等，不同类型的消息会被归类到不同的主题下。<br>Partition（分区）：每个主题可以被划分为一个或多个分区，图中展示了Partition 0、Partition 1、Partition 2。分区主要用于实现数据的并行处理和存储，同一主题下的不同分区可以分布在不同的服务器（broker）上，从而实现水平扩展。比如一个“日志主题”可能有多个分区，大量的日志消息会根据一定规则分配到不同分区，提高处理效率。分区内的消息是有序的，这对于一些需要保证消息顺序的场景很重要。</p>
<h3 id="分区内的结构"><a href="#分区内的结构" class="headerlink" title="分区内的结构"></a>分区内的结构</h3><p>Segment（段）：分区中的数据进一步划分为多个段，如图中的Segment 0、Segment 1、Segment N。每个段是一个独立的文件（在磁盘上存储），当分区中的消息数据量增加到一定程度（如段文件大小达到阈值或经过一定时间），就会进行滚动更新，开启新段文件存储后续消息。这种划分方式便于数据管理和维护，比如方便进行数据清理、备份等操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ pwd  </span><br><span class="line">/bitnami/kafka/data</span><br><span class="line"></span><br><span class="line">$ ls   </span><br><span class="line">__consumer_offsets-<span class="number">0</span>   __consumer_offsets-<span class="number">2</span>   __consumer_offsets-<span class="number">30</span>  __consumer_offsets-<span class="number">41</span>  __consumer_offsets-<span class="number">8</span></span><br><span class="line">__consumer_offsets-<span class="number">1</span>   __consumer_offsets-<span class="number">20</span>  __consumer_offsets-<span class="number">31</span>  __consumer_offsets-<span class="number">42</span>  __consumer_offsets-<span class="number">9</span></span><br><span class="line">__consumer_offsets-<span class="number">10</span>  __consumer_offsets-<span class="number">21</span>  __consumer_offsets-<span class="number">32</span>  __consumer_offsets-<span class="number">43</span>  cleaner-offset-checkpoint</span><br><span class="line">__consumer_offsets-<span class="number">11</span>  __consumer_offsets-<span class="number">22</span>  __consumer_offsets-<span class="number">33</span>  __consumer_offsets-<span class="number">44</span>  log-start-offset-checkpoint</span><br><span class="line">__consumer_offsets-<span class="number">12</span>  __consumer_offsets-<span class="number">23</span>  __consumer_offsets-<span class="number">34</span>  __consumer_offsets-<span class="number">45</span>  meta.properties</span><br><span class="line">__consumer_offsets-<span class="number">13</span>  __consumer_offsets-<span class="number">24</span>  __consumer_offsets-<span class="number">35</span>  __consumer_offsets-<span class="number">46</span>  orders-<span class="number">0</span></span><br><span class="line">__consumer_offsets-<span class="number">14</span>  __consumer_offsets-<span class="number">25</span>  __consumer_offsets-<span class="number">36</span>  __consumer_offsets-<span class="number">47</span>  recovery-point-offset-checkpoint</span><br><span class="line">__consumer_offsets-<span class="number">15</span>  __consumer_offsets-<span class="number">26</span>  __consumer_offsets-<span class="number">37</span>  __consumer_offsets-<span class="number">48</span>  replication-offset-checkpoint</span><br><span class="line">__consumer_offsets-<span class="number">16</span>  __consumer_offsets-<span class="number">27</span>  __consumer_offsets-<span class="number">38</span>  __consumer_offsets-<span class="number">49</span></span><br><span class="line">__consumer_offsets-<span class="number">17</span>  __consumer_offsets-<span class="number">28</span>  __consumer_offsets-<span class="number">39</span>  __consumer_offsets-<span class="number">5</span></span><br><span class="line">__consumer_offsets-<span class="number">18</span>  __consumer_offsets-<span class="number">29</span>  __consumer_offsets-<span class="number">4</span>   __consumer_offsets-<span class="number">6</span></span><br><span class="line">__consumer_offsets-<span class="number">19</span>  __consumer_offsets-<span class="number">3</span>   __consumer_offsets-<span class="number">40</span>  __consumer_offsets-<span class="number">7</span></span><br><span class="line"></span><br><span class="line">$ ls</span><br><span class="line"><span class="number">00000000000000000000.</span>index  <span class="number">00000000000000000000.</span>log  <span class="number">00000000000000000000.</span>timeindex  leader-epoch-checkpoint  partition.metadata</span><br><span class="line"></span><br><span class="line">$ pwd</span><br><span class="line">/bitnami/kafka/data/orders-<span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>段内的文件类型：<br>以下是对 Kafka 中这些文件的详细解释：</p>
<ol>
<li><p>00000000000000000000.index<br>● 功能：这是一个稀疏索引文件，与对应的 00000000000000000000.log 文件配合使用。<br>● 工作原理：它不是为分区内的每一条消息都创建索引，而是按照一定的间隔为消息创建索引。该文件存储了消息在 .log 文件中的偏移量（offset）以及该偏移量消息在 .log 文件中的物理位置信息。当需要查找某条消息时，Kafka 首先在 .index 文件中通过二分查找找到小于或等于目标偏移量的最大索引项，然后根据索引项中的物理位置，到 .log 文件中从这个位置开始顺序查找，直到找到目标消息。这样可以在一定程度上提高查找消息的效率，同时避免为每条消息都创建索引而导致的文件过大问题。<br><img src="/images/kafka/20221109-2.png" alt="image-20221102-1"><br>示例：其中以索引文件中元数据 3,497 为例，依次在数据文件中表示第 3 个 message (在全局 partiton 表示第 368772 个 message)、以及该消息的物理偏移地址为497。</p>
</li>
<li><p>00000000000000000000.log<br>● 功能：这是存储实际消息的文件，是分区内消息的主要存储位置。<br>● 工作原理：当生产者发送消息到 Kafka 分区时，消息会按照一定的顺序存储在这个 .log 文件中。消费者在读取消息时，会从该文件中获取所需的消息内容。根据存储策略，消息会不断追加到该文件中，直到该文件达到一定大小或满足其他条件（如存储时长），此时会创建新的 .log 文件来存储后续的消息。</p>
</li>
<li><p>00000000000000000000.timeindex<br>● 功能：该文件可能是一个时间索引文件，用于根据消息的时间戳来查找消息。<br>● 工作原理：它可以帮助用户或系统在需要查找特定时间范围内的消息时，根据时间戳快速定位消息所在的位置。它存储了时间戳和相应的消息偏移量或物理位置的对应关系，以便更方便地从 .log 文件中找出特定时间点或时间段内发送的消息，这对于需要按照时间维度来处理消息的场景非常有用，例如监控系统中查找某段时间内的日志记录。</p>
</li>
<li><p>leader-epoch-checkpoint<br>● 功能：该文件主要用于记录分区的领导者（leader）的纪元信息和相应的起始偏移量，以保证数据一致性和故障恢复时的正确处理。<br>● 工作原理：在 Kafka 集群中，分区会有一个领导者负责处理该分区的读写操作。当领导者发生变化时，这个文件会记录下不同领导者的纪元（epoch）以及在该领导者开始负责时的起始偏移量。这样，在发生故障恢复或副本同步时，副本可以根据该文件的信息确保自己的同步进度正确，避免数据不一致或重复消费的问题。例如，当旧的领导者故障，新的领导者上任，会更新该文件，副本根据新领导者的纪元信息进行数据同步。</p>
</li>
<li><p>partition.metadata<br>● 功能：存储了分区的一些元数据信息。</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>生产者批次设计</title>
    <url>/2022/11/10/kafka/%E7%94%9F%E4%BA%A7%E8%80%85%E6%89%B9%E6%AC%A1%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<p><img src="/images/kafka/20221110-1.png" alt="image-20221102-1"></p>
<h3 id="批次的基本概念"><a href="#批次的基本概念" class="headerlink" title="批次的基本概念"></a>批次的基本概念</h3><p>● 是一组待发送的消息集合，这些消息通常会被一起发送到 Kafka 服务器，以减少网络开销。<br>● 批次在生产者内部创建和管理，用于将多个单独的消息打包，形成一个更大的消息单元，以便一次性发送。<br>● 生产者会为批次分配一定的内存空间，当批次被发送出去后，其占用的内存将被释放，以便为后续批次使用。</p>
<h3 id="批次的创建和管理"><a href="#批次的创建和管理" class="headerlink" title="批次的创建和管理"></a>批次的创建和管理</h3><h4 id="触发条件："><a href="#触发条件：" class="headerlink" title="触发条件："></a>触发条件：</h4><p>● batch.size：<br>  ○ 这是一个配置参数，指定了一个批次所能容纳的最大字节数。当一个批次中的消息字节数累计达到 batch.size 时，该批次将被发送。<br>  ○ 例如，若 batch.size 被设置为 16384 字节，当一批次中消息的字节数达到或超过这个值时，生产者将把该批次发送到 Kafka 服务器。<br>● linger.ms：<br>  ○ 另一个配置参数，指定了一个批次的最长等待时间（以毫秒为单位）。<br>  ○ 即使批次未满，如果从第一个消息加入该批次开始，经过 linger.ms 的时间后，该批次也会被发送。<br>  ○ 例如，设置 linger.ms 为 100 毫秒，意味着一个批次会等待 100 毫秒，若在此期间未达到 batch.size，但时间到了，该批次也会被发送。</p>
<h4 id="分区和批次的关系："><a href="#分区和批次的关系：" class="headerlink" title="分区和批次的关系："></a>分区和批次的关系：</h4><p>● 对于每个主题的每个分区，生产者会创建和管理相应的批次。<br>● 当消息被发送时，首先根据消息的 Key（若有）使用分区器确定其所属分区，然后将消息添加到该分区对应的批次中。<br>● 不同分区的批次是独立的，它们会根据各自的 batch.size 和 linger.ms 条件来触发发送操作。</p>
<h3 id="3-批次的内部结构"><a href="#3-批次的内部结构" class="headerlink" title="3. 批次的内部结构"></a>3. 批次的内部结构</h3><p>● 消息存储：<br>  ○ 一个批次内部会存储多个消息记录，这些记录包含消息的 Key、Value、时间戳等信息。<br>  ○ 存储时，消息通常以一种紧凑的形式排列，以减少空间占用。<br>  ○ 消息在批次中的存储可能会使用缓冲区，以提高存储和发送的效率。</p>
<h4 id="消息结构"><a href="#消息结构" class="headerlink" title="消息结构"></a>消息结构</h4><h4 id="批次（B"><a href="#批次（B" class="headerlink" title="批次（B"></a>批次（B</h4><p>批次是 Kafka 中最小的可压缩单元，包含多条记录。每个批次有如下字段：<br>● baseOffset: 批次中第一条消息的偏移量。<br>● batchLength: 批次的长度（字节数）。<br>● partitionLeaderEpoch: 分区领导者纪元，用于保证消费者的消费进度与领导者变更同步。<br>● magic: 版本号，标识使用的批次格式版本。当前版本为 2。<br>● crc: 循环冗余校验码，用于验证批次的完整性。<br>● attributes: 包含压缩类型、时间戳类型等标志位的属性字段。<br>● lastOffsetDelta: 批次中最后一条消息相对于 baseOffset 的增量值。<br>● baseTimestamp: 批次中第一条消息的时间戳。<br>● maxTimestamp: 批次中的最大时间戳。<br>● producerId: 生产者 ID，用于幂等性和事务支持。<br>● producerEpoch: 生产者纪元，与生产者 ID 一起使用来确保生产者的唯一性。<br>● baseSequence: 生产者序列号，用于幂等性。<br>● records: []记录列表，包含实际的消息数据。</p>
<h4 id="记录（Record）"><a href="#记录（Record）" class="headerlink" title="记录（Record）"></a>记录（Record）</h4><p>每条记录由以下部分组成：<br>● length: 记录的长度（变长整数）。<br>● attributes: 属性字段，目前未使用。<br>● timestampDelta: 时间戳增量（变长整数），相对于批次的 baseTimestamp。<br>● offsetDelta: 偏移量增量（变长整数），相对于批次的 baseOffset。<br>● keyLength: 键的长度（变长整数）。<br>● key: 消息键（字节数组）。<br>● valueLen: 消息体长度（变长整数）。<br>● value: 消息体（字节数组）。<br>● Headers: 消息头列表，可以携带额外的元数据。</p>
<h4 id="记录头（Header）"><a href="#记录头（Header）" class="headerlink" title="记录头（Header）"></a>记录头（Header）</h4><p>每个消息头包括：<br>● headerKeyLength: 头键的长度（变长整数）。<br>● headerKey: 头键（字符串）。<br>● headerValueLength: 头值的长度（变长整数）。<br>● Value: 头值（字节数组）。<br>变长整数（varint）和变长长整数（varlong）是特殊的编码方式，旨在节省空间，只有当数值较大时才会占用更多字节。这使得 Kafka 能够有效地存储和传输消息，即使它们非常小。</p>
]]></content>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>生产者同步与异步发送消息</title>
    <url>/2022/11/08/kafka/%E7%94%9F%E4%BA%A7%E8%80%85%E5%90%8C%E6%AD%A5%E4%B8%8E%E5%BC%82%E6%AD%A5%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF/</url>
    <content><![CDATA[<h2 id="一、同步发送"><a href="#一、同步发送" class="headerlink" title="一、同步发送"></a>一、同步发送</h2><p>基本原理<br>当生产者使用同步方式发送消息时，它会等待Kafka集群的响应，直到消息被成功写入目标分区（topic中的分区）或者发送过程中出现不可恢复的错误。在代码实现中，通常会使用send()方法发送消息，并且通过get()方法获取发送结果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderSyncProducer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(OrderSyncProducer.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> (Producer&lt;String, Order&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;&gt;(kaProperties)) &#123;</span><br><span class="line">                Order order = <span class="keyword">new</span> Order(<span class="string">&quot;O-8817-88172&quot;</span>, System.currentTimeMillis(), <span class="string">&quot;Laptop&quot;</span>, <span class="number">1</span>, <span class="number">999.99</span>);</span><br><span class="line">                ProducerRecord&lt;String, Order&gt; producerRecord = <span class="keyword">new</span> ProducerRecord&lt;&gt;(<span class="string">&quot;orders&quot;</span>, order.getOrderId(), order);</span><br><span class="line">                RecordMetadata result = producer.send(producerRecord).get();</span><br><span class="line">                log.info(<span class="string">&quot;topic=&#123;&#125;, partition=&#123;&#125;, offset = &#123;&#125;, timestamp = &#123;&#125;&quot;</span>, result.topic(), result.partition(), result.offset(), result.timestamp());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;Error sending message&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>优点<br>● 可靠性高：能够确保消息被成功写入Kafka集群后才继续执行后续操作。这对于一些对数据准确性要求极高的场景非常重要，比如金融交易数据的发送，每一笔交易消息都必须被正确记录到Kafka中，否则可能会导致严重的后果。<br>● 顺序性保证：在单线程环境下，同步发送可以很好地保证消息发送的顺序与发送代码中定义的顺序一致。例如，如果有一系列按时间顺序生成的订单消息，同步发送可以确保这些订单消息按照生成的顺序依次写入Kafka分区。<br>缺点<br>● 性能较低：因为每发送一条消息都要等待响应，所以生产者的吞吐量会受到限制。尤其是在网络延迟较高或者Kafka集群负载较大的情况下，等待响应的时间会很长，导致整体的消息发送效率低下。<br>● 容易造成阻塞：如果Kafka集群出现问题或者网络故障，同步发送可能会导致生产者线程长时间阻塞，进而影响整个应用程序的性能和稳定性。</p>
<h2 id="二、异步发送"><a href="#二、异步发送" class="headerlink" title="二、异步发送"></a>二、异步发送</h2><p>基本原理<br>异步发送允许生产者在发送消息后不需要等待Kafka集群的响应就可以继续执行其他操作。生产者将消息发送到一个内部的缓冲队列中，然后由后台线程负责从缓冲队列中取出消息并发送到Kafka集群。当消息成功发送或者发送失败时，可以通过回调函数（callback）来处理相应的结果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderAsyncProducer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(OrderAsyncProducer.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">try</span> (Producer&lt;String, Order&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;&gt;(kaProperties)) &#123;</span><br><span class="line">            Order order = <span class="keyword">new</span> Order(<span class="string">&quot;O-8817-88172&quot;</span>, System.currentTimeMillis(), <span class="string">&quot;Laptop&quot;</span>, <span class="number">1</span>, <span class="number">999.99</span>);</span><br><span class="line">            ProducerRecord&lt;String, Order&gt; producerRecord = <span class="keyword">new</span> ProducerRecord&lt;&gt;(<span class="string">&quot;orders&quot;</span>, order.getOrderId(), order);</span><br><span class="line"></span><br><span class="line">            producer.send(producerRecord, <span class="keyword">new</span> Callback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompletion</span><span class="params">(RecordMetadata metadata, Exception exception)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (exception == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        log.info(<span class="string">&quot;topic=&#123;&#125;, partition=&#123;&#125;, offset = &#123;&#125;, timestamp = &#123;&#125;&quot;</span>, metadata.topic(), metadata.partition(), metadata.offset(), metadata.timestamp());</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        log.error(<span class="string">&quot;Error sending message&quot;</span>, exception);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;Error sending message&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>优点<br>● 高性能：由于不需要等待每条消息的发送响应，生产者可以持续地将消息放入缓冲队列，大大提高了消息发送的吞吐量。这在需要处理大量消息的场景中非常有用，比如日志收集系统，每秒可能会产生数以万计的日志消息，异步发送可以快速地将这些消息发送到Kafka集群。<br>● 非阻塞：不会因为等待Kafka集群的响应而阻塞生产者线程，使得生产者能够同时处理其他任务，如消息的生成、数据的处理等，提高了整个应用程序的响应能力。<br>缺点<br>● 可靠性相对较低：虽然通过回调函数可以处理发送结果，但是如果在消息还未发送完成（在缓冲队列中或者正在发送途中）时，生产者进程意外终止，可能会导致部分消息丢失。</p>
]]></content>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>RocketMQ有哪些优势</title>
    <url>/2022/01/12/RocketMQ/RocketMQ%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E5%8A%BF/</url>
    <content><![CDATA[<h3 id="消息队列Message-Queue-MQ）"><a href="#消息队列Message-Queue-MQ）" class="headerlink" title="消息队列Message Queue(MQ）"></a>消息队列Message Queue(MQ）</h3><p>消息队列中间件是分布式系统中重要的组件，主要解决应用耦合，异步消息，流量削锋等问题。实现高性能，高可用，可伸缩和最终一致性架构。是大型分布式系统不可缺少的中间件。<br>目前在生产环境，使用较多的消息队列有ActiveMQ，RabbitMQ，ZeroMQ，Kafka，MetaMQ，RocketMQ等。</p>
<h3 id="消息队列能做什么事情？"><a href="#消息队列能做什么事情？" class="headerlink" title="消息队列能做什么事情？"></a>消息队列能做什么事情？</h3><p>● 异构系统间调用解耦</p>
<p><img src="/images/RocketMQ/20220112-1.png" alt="image-20220112-1"></p>
<p>● 基于”订阅发布“的1对多的数据分发</p>
<p><img src="/images/RocketMQ/20220112-2.png" alt="image-20220112-2"></p>
<p>● 同步转异步的消息处理</p>
<p><img src="/images/RocketMQ/20220112-3.png" alt="image-20220112-3"></p>
<p>● 削峰、限流、日志处理</p>
<p><img src="/images/RocketMQ/20220112-4.png" alt="image-20220112-4"></p>
<h3 id="在什么情况下会选择使用RocketMQ"><a href="#在什么情况下会选择使用RocketMQ" class="headerlink" title="在什么情况下会选择使用RocketMQ"></a>在什么情况下会选择使用RocketMQ</h3><p>比较多款产品：Apache ActiveMQ、Kafka、RabbitMQ、RocketMQ</p>
<p>● ActiveMQ：<a href="http://activemq.apache.org/">http://activemq.apache.org/</a><br>Apache出品，历史悠久，支持多种语言的客户端和协议，支持多种语言Java, .NET, C++ 等，基于JMS Provider的实现<br>使用场景：啥都会点，但好像啥都没做好，不再推荐使用</p>
<p>● Kafka：<a href="http://kafka.apache.org/">http://kafka.apache.org/</a><br>是由Apache软件基金会开发的一个开源流处理平台，由Scala和Java编写。Kafka是一种高吞吐量的分布式发布订阅消息系统，它可以处理大规模的网站中的所有动作流数据(网页浏览，搜索和其他用户的行动)，副本集机制，实现数据冗余，保障数据尽量不丢失；支持多个生产者和消费者<br>适用场景：瞬时大流量应用，对消息延迟不敏感的应用场景</p>
<p>● RabbitMQ：<a href="http://www.rabbitmq.com/">http://www.rabbitmq.com/</a><br>是一个开源的AMQP实现，服务器端用Erlang语言编写，支持多种客户端，如：Python、Ruby、.NET、Java、JMS、C、用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不错<br>适用场景：企业级应用，尤其是对数据可靠性要求高、对并发和延迟不敏感的用户。</p>
<p>● RocketMQ：<a href="http://rocketmq.apache.org/">http://rocketmq.apache.org/</a><br>阿里开源的一款的消息中间件, 纯Java开发，具有高吞吐量、高可用性、适合大规模分布式系统应用的特点, 性能强劲(零拷贝技术)，支持海量堆积,支持指定次数和时间间隔的失败消息重发,支持consumer端tag过滤、延迟消息等，在阿里内部进行大规模使用，适合在电商，互联网金融等领域使用<br>适用场景：低延迟应用，瞬时大流量处理效率不如Kafka</p>
]]></content>
      <tags>
        <tag>RocketMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RocketMQ的几个重要概念</title>
    <url>/2022/01/12/RocketMQ/RocketMQ%E7%9A%84%E5%87%A0%E4%B8%AA%E9%87%8D%E8%A6%81%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h3 id="RocketMQ的前世今生"><a href="#RocketMQ的前世今生" class="headerlink" title="RocketMQ的前世今生"></a>RocketMQ的前世今生</h3><p>和大部分组件产生的原因类似，阿里巴巴内部为了适应淘宝B2C的更快、更复杂的业务，2001年启动了“五彩石项目”，阿里巴巴的第一代消息队列服务Notify就是在这个背景下产生的。<br>2010年，阿里巴巴内部的ActiveMQ仍然作为核心技术被广泛用于各个业务线，而顺序消息、海量消息堆积、完全自主控制消息队列服务，也是阿里巴巴同时期急需的。在这种背景下，2011年，MetaQ诞生。<br>2011年，LinkedIn将Kafka开源。2012年，阿里巴巴参考Kafka的设计，基于对MetaQ的理解和实际使用，研发了一套通用消息队列引擎，也就是 RocketMQ。自此才有了第一代真正的RocketMQ，2016年阿里云上线云RocketMQ消息队列服务。<br>2016年11月，阿里巴巴将RocketMQ捐献给Apache基金会。<br>Apache社区有一个很重要的理念：社区大于代码。虽然RocketMQ已经开源3年，在国内小有名气，而且在阿里巴巴被广泛应用并有较好的效果，但是依然不能达到Apache优秀项目的标准。<br>在RocketMQ被捐献后，通过一系列的修改、评审、调整，悄悄升级至4.0版本，正式进入孵化阶段。<br>2017年09月25日，RocketMQ成功“毕业”（Apache社区项目孵化成功即为毕业），成为Apache顶级项目，它是国内首个互联网中间件在Apache 的顶级项目，也是继ActiveMQ、Kafka后Apache家族中全新的一代消息队列引擎。</p>
<p><img src="/images/RocketMQ/20220112-5.png" alt="image-20220112-5"></p>
<p>RocketMQ有很多优秀的特性，在可用性方面，RocketMQ强调集群无单点，任意一点高可用，客户端具备负载均衡能力，可以轻松实现水平扩容；在性能方面，在天猫双11大促背后的亿级消息处理就是通过RocketMQ提供的保障；在API方面，提供了丰富的功能，可以实现异步消息、同步消息、顺序消息、事务消息等丰富的功能，能满足大多数应用场景；在可靠性方面，提供了消息持久化、失败重试机制、消息查询追溯的功能，进一步为可靠性提供保障。</p>
<h3 id="几个非常重要的概念"><a href="#几个非常重要的概念" class="headerlink" title="几个非常重要的概念"></a>几个非常重要的概念</h3><p>了解Rocket的诸多特性后，咱们来理解RocketMQ几个重要的概念：</p>
<p><img src="/images/RocketMQ/20220112-6.png" alt="image-20220112-6"></p>
<p>● 生产者组Producer Group：一个逻辑概念，在使用生产者实例的时候需要指定一个组名。一个生产者组可以生产多个Topic的消息。<br>● 生产者实例Producer：一个生产者组部署了多个进程，每个进程都可以称为一个生产者实例。<br>● 主题Topic：一个Topic代表消息的大类，比如“财政数据”Topic、“商城订单”Topic，一个Topic下可以拥有多个队列Queue<br>● 标签Tag：二级分类，对topic的进一步细化,用于区分同一个主题下的不同业务的消息，例如：“财政数据”的Tag可以有“计划”、“指标”、“支付”，“商城订单”的Tag可以有“线上订单”、“线下订单”…。<br>● 消息Message：具体的数据消息，每个message必须指定Topic<br>● 队列Queue：Queue就是消息队列的物理通信通道，消息采用FIFO（先进先出）模式传输,负责向消费者Push（推送）数据，或者由消费者直接Pull（拉取）<br>● 消费者组Consumer Group：一个逻辑概念，在使用消费者时需要指定一个组名。一个消费者组可以订阅多个Topic。<br>● 消费者实例Consumer：一个消费者组程序部署了多个进程，每个进程都可以称为一个消费者实例。</p>
]]></content>
      <tags>
        <tag>RocketMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RocketMQ部署</title>
    <url>/2022/01/13/RocketMQ/RocketMQ%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h3 id="RocketMQ生产拓扑结构"><a href="#RocketMQ生产拓扑结构" class="headerlink" title="RocketMQ生产拓扑结构"></a>RocketMQ生产拓扑结构</h3><p><img src="/images/RocketMQ/20220113-1.png" alt="image-20220113-1"></p>
<p>● Console管理平台：管理RocketMQ生产者组、Topic、消费者组和RocketMQ元数据的平台。管理平台可以自研，也可以基于社区提供的RocketMQ Console二次开发而来，或者直接使用社区提供的RocketMQ Console。<br>● Namesrv集群：一个无状态的元数据管理，Namesrv相当于RocketMQ的注册中心，提供节点发现。<br>● Broker集群：消息中间商或消息代理。主要用于保存消息，处理生产者、消费者的各种请求的代理。包含Master和Slave两种角色，与MySQL中的主从角色类似。<br>● 生产者集群：消息发送方，通常由一个或多个生产者实例组成。<br>● 消费者集群：消息接收方，通常由一个或多个消费者实例组成。</p>
<h3 id="RocketMQ的部署模式"><a href="#RocketMQ的部署模式" class="headerlink" title="RocketMQ的部署模式"></a>RocketMQ的部署模式</h3><p>● Namesrv部署<br>推荐一个集群并部署2～3个Namesrv节点。<br>● Broker集群部署<br>    1. 单 Master。“集群”中只有一个节点，宕机后不可用。通常用于个人入门学习，比如测试发送消息代码、测试消费消息代码等，建议在生产环境中不要使用这种部署方式。<br>    2. 单 Master，单 Salve。单主从模式，Master 宕机后集群不可写入消息，但可以读取消息。通常用于个人深入学习，比如研究源码、设计原理等，建议在生产环境中不要使用这种部署方式。<br>    3. 多Master，无Salve。该种部署方式性能最好，并且当单个Master节点宕机时，不影响正常使用。<br>    4. 多Master、多Slave，异步复制。在第三种方式上增加了Slave，当一个Master节点宕机时，该Master不能写入消息，消费可以在其对应的Slave上进行。新消息的生产、消费不受影响。添加Salve后，消费者可以从对应的Slave中读取已发送到宕机Master中的消息。生产环境中可以使用这种部署方式。<br>    5. 多 Master、多Slave，同步复制。这种部署方式完全解决了第四种部署方式的弊端，虽然由于Master-Salve同步复制导致发送消息耗时增加，集群性能大大下降，但是这仍然是最可靠的部署方式。生产环境中可以使用这种部署方式。</p>
<h3 id="RocketMQ单Master部署"><a href="#RocketMQ单Master部署" class="headerlink" title="RocketMQ单Master部署"></a>RocketMQ单Master部署</h3><p>● 部署NameServer</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 修改IP地址到103</span></span><br><span class="line">cd /etc/sysconfig/network-scripts </span><br><span class="line">sed -i &#x27;s/dhcp/static/g&#x27; ifcfg-ens33 </span><br><span class="line">sudo cat &gt;&gt; ifcfg-ens33 &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">IPADDR=192.168.31.103 </span><br><span class="line">GATEWAY=192.168.31.1 </span><br><span class="line">NETMASK=255.255.255.0 </span><br><span class="line">DNS1=114.114.114.114 </span><br><span class="line">DNS2=8.8.8.8 </span><br><span class="line">EOF </span><br><span class="line">service network restart </span><br><span class="line"><span class="meta">#</span><span class="bash"> YUM安装OpenJDK 1.8</span></span><br><span class="line">yum -y install java-1.8.0-openjdk-devel.x86_64 </span><br><span class="line">sudo cat &gt;&gt; /etc/profile &lt;&lt;-&#x27;EOF&#x27; </span><br><span class="line">export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk </span><br><span class="line">export JRE_HOME=$JAVA_HOME/jre </span><br><span class="line">export CLASSPATH=$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH </span><br><span class="line">export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH </span><br><span class="line">EOF </span><br><span class="line">source /etc/profile </span><br><span class="line">echo $JAVA_HOME </span><br><span class="line"></span><br><span class="line">unzip rocketmq-all-4.9.2-bin-release.zip </span><br><span class="line">cd /usr/local/rocketmq-4.9.2 </span><br><span class="line">sed -i &#x27;s/-Xms4g -Xmx4g -XX:MetaspaceSize=128m/-Xms1g -Xmx1g -</span><br><span class="line">XX:MetaspaceSize=128m/g&#x27; ./bin/runserver.sh </span><br><span class="line">firewall-cmd --zone=public --add-port=9876/tcp --permanent </span><br><span class="line">firewall-cmd  --reload </span><br><span class="line"><span class="meta">#</span><span class="bash"> sh ./bin/mqnamesrv</span> </span><br><span class="line">nohup sh ./bin/mqnamesrv &gt; nqnamesrv.log &amp; </span><br></pre></td></tr></table></figure>

<p>● 部署Master</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/sysconfig/network-scripts </span><br><span class="line">sed -i &#x27;s/dhcp/static/g&#x27; ifcfg-ens33 </span><br><span class="line">sudo cat &gt;&gt; ifcfg-ens33 &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">IPADDR=192.168.31.105 </span><br><span class="line">GATEWAY=192.168.31.1 </span><br><span class="line">NETMASK=255.255.255.0 </span><br><span class="line">DNS1=114.114.114.114 </span><br><span class="line">DNS2=8.8.8.8 </span><br><span class="line">EOF </span><br><span class="line">service network restart </span><br><span class="line"></span><br><span class="line">yum -y install java-1.8.0-openjdk-devel.x86_64 </span><br><span class="line">sudo cat &gt;&gt; /etc/profile &lt;&lt;-&#x27;EOF&#x27; </span><br><span class="line">export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk </span><br><span class="line">export JRE_HOME=$JAVA_HOME/jre </span><br><span class="line">export CLASSPATH=$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH</span><br><span class="line">export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH </span><br><span class="line">EOF </span><br><span class="line">source /etc/profile </span><br><span class="line">echo $JAVA_HOME</span><br><span class="line"></span><br><span class="line">unzip rocketmq-all-4.9.2-bin-release.zip </span><br><span class="line">cd /usr/local/rocketmq-4.9.2 </span><br><span class="line">sed -i &#x27;s/-Xms8g -Xmx8g/-Xms1g -Xmx1g/g&#x27; ./bin/runbroker.sh </span><br><span class="line">cat &gt; single-master.properties &lt;&lt;-&#x27;EOF&#x27; </span><br><span class="line"><span class="meta">#</span><span class="bash">集群名称，同一个集群下的broker要求统一</span> </span><br><span class="line">brokerClusterName=DefaultCluster </span><br><span class="line"><span class="meta">#</span><span class="bash">broker名称</span> </span><br><span class="line">brokerName=broker-a </span><br><span class="line"><span class="meta">#</span><span class="bash">brokerId=0代表主节点，大于零代表从节点</span> </span><br><span class="line">brokerId=0 </span><br><span class="line"><span class="meta">#</span><span class="bash">删除日志文件时间点，默认凌晨 4 点</span> </span><br><span class="line">deleteWhen=04 </span><br><span class="line"><span class="meta">#</span><span class="bash">日志文件保留时间，默认 48 小时</span> </span><br><span class="line">fileReservedTime=48 </span><br><span class="line"><span class="meta">#</span><span class="bash">Broker 的角色</span> </span><br><span class="line"><span class="meta">#</span><span class="bash">- ASYNC_MASTER 异步复制Master</span> </span><br><span class="line"><span class="meta">#</span><span class="bash">- SYNC_MASTER 同步双写Master</span> </span><br><span class="line">brokerRole=SYNC_MASTER </span><br><span class="line"><span class="meta">#</span><span class="bash">刷盘方式</span> </span><br><span class="line"><span class="meta">#</span><span class="bash">- ASYNC_FLUSH 异步刷盘，性能好宕机会丢数</span> </span><br><span class="line"><span class="meta">#</span><span class="bash">- SYNC_FLUSH 同步刷盘，性能较差不会丢数</span> </span><br><span class="line">flushDiskType=SYNC_FLUSH </span><br><span class="line"><span class="meta">#</span><span class="bash">末尾追加，NameServer节点列表，使用分号分割</span> </span><br><span class="line">namesrvAddr=192.168.31.103:9876</span><br><span class="line">autoCreateTopicEnable=true </span><br><span class="line">EOF </span><br><span class="line">firewall-cmd --zone=public --add-port=10911/tcp --permanent </span><br><span class="line">firewall-cmd  --reload </span><br><span class="line"><span class="meta">#</span><span class="bash"> sh ./bin/mqbroker -c ./single-master.properties</span> </span><br><span class="line">nohup sh ./bin/mqbroker -c ./single-master.properties &gt; broker.log &amp; </span><br><span class="line">cd /usr/local/rocketmq-4.9.2/bin </span><br><span class="line">sh mqadmin clusterList -n 192.168.31.103:9876 </span><br><span class="line">cd /usr/local/rocketmq-4.9.2/bin </span><br><span class="line">export NAMESRV_ADDR=192.168.31.103:9876 </span><br><span class="line">sh tools.sh org.apache.rocketmq.example.quickstart.Producer </span><br><span class="line">cd /usr/local/rocketmq-4.9.2/bin </span><br><span class="line">export NAMESRV_ADDR=192.168.31.103:9876 </span><br><span class="line">sh tools.sh org.apache.rocketmq.example.quickstart.Consumer </span><br></pre></td></tr></table></figure>

<h3 id="部署RocketMQ-Console-Dashboard监控"><a href="#部署RocketMQ-Console-Dashboard监控" class="headerlink" title="部署RocketMQ (Console)Dashboard监控"></a>部署RocketMQ (Console)Dashboard监控</h3><p>Github官网首页<br><a href="https://github.com/apache/rocketmq-dashboard">https://github.com/apache/rocketmq-dashboard</a><br>Dashboard中文文档<br><a href="https://github.com/apache/rocketmq-dashboard/blob/master/docs/1_0_0/UserGuide_CN.md">https://github.com/apache/rocketmq-dashboard/blob/master/docs/1_0_0/UserGuide_CN.md</a><br>下载Dashboard Jar包<br><a href="https://developer.aliyun.com/mvn/search">https://developer.aliyun.com/mvn/search</a> 搜索 rocketmq-dashboard</p>
<p>RocketMQ启动方式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装JDK8</span> </span><br><span class="line">yum -y install java-1.8.0-openjdk-devel.x86_64 </span><br><span class="line">sudo cat &gt;&gt; /etc/profile &lt;&lt;-&#x27;EOF&#x27; </span><br><span class="line">export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk </span><br><span class="line">export JRE_HOME=$JAVA_HOME/jre </span><br><span class="line">export CLASSPATH=$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH </span><br><span class="line">export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH </span><br><span class="line">EOF </span><br><span class="line">source /etc/profile </span><br><span class="line">echo $JAVA_HOME </span><br><span class="line"><span class="meta">#</span><span class="bash">开放端口8080</span> </span><br><span class="line">firewall-cmd --zone=public --add-port=8080/tcp --permanent </span><br><span class="line">firewall-cmd  --reload </span><br><span class="line"><span class="meta">#</span><span class="bash">下载启动dashboard</span> </span><br><span class="line">wget  --no-check-certificate https://manongbiji.oss-cn-beijing.aliyuncs.com/ittailkshow/rocketmq/download/rocketmq-dashboard-1.0.0.jar </span><br><span class="line"><span class="meta">#</span><span class="bash"> java -jar rocketmq-dashboard-1.0.0.jar</span> </span><br><span class="line">nohup java -jar rocketmq-dashboard-1.0.0.jar &gt; dashboard.log &amp; </span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>RocketMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RocketMQ生产者投递消息同步复制和异步复制</title>
    <url>/2022/01/14/RocketMQ/RocketMQ%E7%94%9F%E4%BA%A7%E8%80%85%E6%8A%95%E9%80%92%E6%B6%88%E6%81%AF%E5%90%8C%E6%AD%A5%E5%A4%8D%E5%88%B6%E5%92%8C%E5%BC%82%E6%AD%A5%E5%A4%8D%E5%88%B6/</url>
    <content><![CDATA[<h3 id="Java应用接入RocketMQ生产消息"><a href="#Java应用接入RocketMQ生产消息" class="headerlink" title="Java应用接入RocketMQ生产消息"></a>Java应用接入RocketMQ生产消息</h3><p>● pom依赖</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;repositories&gt; </span><br><span class="line">    &lt;repository&gt; </span><br><span class="line">        &lt;id&gt;aliyun&lt;/id&gt; </span><br><span class="line">        &lt;name&gt;aliyun&lt;/name&gt; </span><br><span class="line">        &lt;url&gt;https:<span class="comment">//maven.aliyun.com/repository/public&lt;/url&gt; </span></span><br><span class="line">    &lt;/repository&gt; </span><br><span class="line">&lt;/repositories&gt; </span><br><span class="line">&lt;pluginRepositories&gt; </span><br><span class="line">    &lt;pluginRepository&gt; </span><br><span class="line">        &lt;id&gt;aliyun&lt;/id&gt; </span><br><span class="line">        &lt;name&gt;aliyun&lt;/name&gt; </span><br><span class="line">        &lt;url&gt;https:<span class="comment">//maven.aliyun.com/repository/public&lt;/url&gt; </span></span><br><span class="line">    &lt;/pluginRepository&gt; </span><br><span class="line">&lt;/pluginRepositories&gt; </span><br><span class="line">&lt;dependency&gt; </span><br><span class="line">    &lt;groupId&gt;org.apache.rocketmq&lt;/groupId&gt; </span><br><span class="line">    &lt;artifactId&gt;rocketmq-client&lt;/artifactId&gt; </span><br><span class="line">    &lt;version&gt;4.9.2&lt;/version&gt; </span><br><span class="line">&lt;/dependency&gt; </span><br></pre></td></tr></table></figure>
<p>● 生产者投递消息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MQClientException, RemotingException, InterruptedException, MQBrokerException </span>&#123; </span><br><span class="line">    <span class="comment">//创建DefaultMQProducer消息生产者对象 </span></span><br><span class="line">    DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">&quot;pg1&quot;</span>); </span><br><span class="line">    <span class="comment">//设置NameServer </span></span><br><span class="line">    producer.setNamesrvAddr(<span class="string">&quot;192.168.31.103:9876&quot;</span>); </span><br><span class="line">    <span class="comment">//设置NameServer节点地址，多个节点间用分号分割 </span></span><br><span class="line">    <span class="comment">//producer.setNamesrvAddr(&quot;192.168.31.103:9876&quot;);</span></span><br><span class="line">    <span class="keyword">try</span>&#123; </span><br><span class="line">        <span class="comment">//与NameServer建立长连接 </span></span><br><span class="line">        producer.start(); </span><br><span class="line">        <span class="comment">//发送一百条数据 </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt; <span class="number">100</span> ; i++) &#123; </span><br><span class="line">            <span class="comment">//数据正文 </span></span><br><span class="line">            String data = <span class="string">&quot;&#123;\&quot;title\&quot;:\&quot;X市2021年度第四季度税务汇总数据\&quot;&#125;&quot;</span>; </span><br><span class="line">            <span class="comment">/*创建消息 </span></span><br><span class="line"><span class="comment">              Message消息三个参数 </span></span><br><span class="line"><span class="comment">              topic：代表消息主题，自定义为tax-data-topic说明是税务数据tags代表标志，用于消费者接收数据时进行数据筛选。</span></span><br><span class="line"><span class="comment">			  2021S1：代表2021年第一季度数据</span></span><br><span class="line"><span class="comment">			  body：代表消息内容 </span></span><br><span class="line"><span class="comment">            */</span> </span><br><span class="line">            Message message = <span class="keyword">new</span> Message(<span class="string">&quot;TAX&quot;</span>, <span class="string">&quot;2021S4&quot;</span>, data.getBytes()); </span><br><span class="line">            <span class="comment">//发送消息，获取发送结果 </span></span><br><span class="line">            SendResult result = <span class="keyword">null</span>; </span><br><span class="line">            result = producer.send(message); </span><br><span class="line">            <span class="comment">//将发送结果对象打印在控制台 </span></span><br><span class="line">            System.out.println(<span class="string">&quot;消息已发送：MsgId:&quot;</span> + result.getMsgId() + <span class="string">&quot;，发送状态:&quot;</span> + result.getSendStatus()); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;  <span class="keyword">finally</span> &#123; </span><br><span class="line">        <span class="keyword">try</span> &#123; </span><br><span class="line">            producer.shutdown(); </span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>● 执行结果，同步复制下，数据持久化到Master主队列，由于没有从节点复制失败</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">消息已发送：MsgId:C0A81F6D310418B4AAC26F9FD63F0061，发送状态:SLAVE_NOT_AVAILABLE </span><br><span class="line">消息已发送：MsgId:C0A81F6D310418B4AAC26F9FD6430062，发送状态:SLAVE_NOT_AVAILABLE </span><br><span class="line">消息已发送：MsgId:C0A81F6D310418B4AAC26F9FD6460063，发送状态:SLAVE_NOT_AVAILABLE </span><br></pre></td></tr></table></figure>

<h3 id="同步复制与异步复制的区别"><a href="#同步复制与异步复制的区别" class="headerlink" title="同步复制与异步复制的区别"></a>同步复制与异步复制的区别</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">关闭Broker</span> </span><br><span class="line">sh /usr/local/rocketmq-4.9.2/bin/mqshutdown broker </span><br><span class="line"><span class="meta">#</span><span class="bash">重新生成配置文件，改为异步复制</span> </span><br><span class="line">cat &gt; single-master.properties &lt;&lt;-&#x27;EOF&#x27; </span><br><span class="line"><span class="meta">#</span><span class="bash">集群名称，同一个集群下的broker要求统一</span> </span><br><span class="line">brokerClusterName=DefaultCluster </span><br><span class="line"><span class="meta">#</span><span class="bash">broker名称</span> </span><br><span class="line">brokerName=broker-a </span><br><span class="line"><span class="meta">#</span><span class="bash">brokerId=0代表主节点，大于零代表从节点</span> </span><br><span class="line">brokerId=0 </span><br><span class="line"><span class="meta">#</span><span class="bash">删除日志文件时间点，默认凌晨 4 点</span> </span><br><span class="line">deleteWhen=04 </span><br><span class="line"><span class="meta">#</span><span class="bash">日志文件保留时间，默认 48 小时 fileReservedTime=48</span> </span><br><span class="line"><span class="meta">#</span><span class="bash">Broker 复制策略</span> </span><br><span class="line"><span class="meta">#</span><span class="bash">- ASYNC_MASTER 异步复制Master</span> </span><br><span class="line"><span class="meta">#</span><span class="bash">- SYNC_MASTER 同步双写Master</span> </span><br><span class="line">brokerRole=ASYNC_MASTER </span><br><span class="line"><span class="meta">#</span><span class="bash">刷盘方式</span> </span><br><span class="line"><span class="meta">#</span><span class="bash">- ASYNC_FLUSH 异步刷盘，性能好宕机会丢数</span> </span><br><span class="line"><span class="meta">#</span><span class="bash">- SYNC_FLUSH 同步刷盘，性能较差不会丢数</span> </span><br><span class="line">flushDiskType=SYNC_FLUSH </span><br><span class="line"><span class="meta">#</span><span class="bash">末尾追加，NameServer节点列表，使用分号分割</span> </span><br><span class="line">namesrvAddr=192.168.31.103:9876 </span><br><span class="line">autoCreateTopicEnable=true </span><br><span class="line">EOF </span><br><span class="line"><span class="meta">#</span><span class="bash">防火墙放行</span> </span><br><span class="line">firewall-cmd --zone=public --add-port=10911/tcp --permanent </span><br><span class="line">firewall-cmd  --reload </span><br><span class="line"><span class="meta">#</span><span class="bash">启动broker服务</span> </span><br><span class="line">nohup sh ./bin/mqbroker -c ./single-master.properties &gt; broker.log &amp; </span><br></pre></td></tr></table></figure>

<p>● 改为异步复制后，发送结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">消息已发送：MsgId:C0A81F6D264418B4AAC26FA3EF500060，发送状态:SEND_OK </span><br><span class="line">消息已发送：MsgId:C0A81F6D264418B4AAC26FA3EF530061，发送状态:SEND_OK </span><br><span class="line">消息已发送：MsgId:C0A81F6D264418B4AAC26FA3EF550062，发送状态:SEND_OK </span><br><span class="line">消息已发送：MsgId:C0A81F6D264418B4AAC26FA3EF580063，发送状态:SEND_OK</span><br></pre></td></tr></table></figure>

<p>● 同步复制</p>
<p><img src="/images/RocketMQ/20220114-1.png" alt="image-20220114-1"></p>
<p>● 异步复制</p>
<p><img src="/images/RocketMQ/20220114-2.png" alt="image-20220114-2"></p>
<h3 id="Java应用接入RocketMQ消费数据"><a href="#Java应用接入RocketMQ消费数据" class="headerlink" title="Java应用接入RocketMQ消费数据"></a>Java应用接入RocketMQ消费数据</h3><p>● pom依赖</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;repositories&gt; </span><br><span class="line">    &lt;repository&gt; </span><br><span class="line">        &lt;id&gt;aliyun&lt;/id&gt; </span><br><span class="line">        &lt;name&gt;aliyun&lt;/name&gt; </span><br><span class="line">        &lt;url&gt;https:<span class="comment">//maven.aliyun.com/repository/public&lt;/url&gt; </span></span><br><span class="line">    &lt;/repository&gt; </span><br><span class="line">&lt;/repositories&gt; </span><br><span class="line">&lt;pluginRepositories&gt; </span><br><span class="line">    &lt;pluginRepository&gt; </span><br><span class="line">        &lt;id&gt;aliyun&lt;/id&gt; </span><br><span class="line">        &lt;name&gt;aliyun&lt;/name&gt; </span><br><span class="line">        &lt;url&gt;https:<span class="comment">//maven.aliyun.com/repository/public&lt;/url&gt; </span></span><br><span class="line">    &lt;/pluginRepository&gt; </span><br><span class="line">&lt;/pluginRepositories&gt;</span><br><span class="line">&lt;dependency&gt; </span><br><span class="line">    &lt;groupId&gt;org.apache.rocketmq&lt;/groupId&gt; </span><br><span class="line">    &lt;artifactId&gt;rocketmq-client&lt;/artifactId&gt; </span><br><span class="line">    &lt;version&gt;4.9.2&lt;/version&gt; </span><br><span class="line">&lt;/dependency&gt; </span><br></pre></td></tr></table></figure>
<p>● 消费者消费消息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建消费者对象 </span></span><br><span class="line">DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">&quot;cg1&quot;</span>); </span><br><span class="line"><span class="keyword">try</span> &#123; </span><br><span class="line">    <span class="comment">//设置NameServer节点 </span></span><br><span class="line">    consumer.setNamesrvAddr(<span class="string">&quot;192.168.31.103:9876&quot;</span>); </span><br><span class="line">    <span class="comment">/*订阅主题， </span></span><br><span class="line"><span class="comment">    consumer.subscribe包含两个参数： </span></span><br><span class="line"><span class="comment">    topic: 说明消费者从Broker订阅哪一个主题，这一项要与Provider保持一致。 </span></span><br><span class="line"><span class="comment">    subExpression: 子表达式用于筛选tags。 </span></span><br><span class="line"><span class="comment">        同一个主题下可以包含很多不同的tags，subExpression用于筛选符合条件的tags进行接收。</span></span><br><span class="line"><span class="comment">        例如：设置为*，则代表接收所有tags数据。 </span></span><br><span class="line"><span class="comment">        例如：设置为2020S4，则Broker中只有tags=2020S4的消息会被接收，而2020S2就会被排除在外。</span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    consumer.subscribe(<span class="string">&quot;tax-data&quot;</span>, <span class="string">&quot;*&quot;</span>); </span><br><span class="line">    <span class="comment">//创建监听，当有新的消息监听程序会及时捕捉并加以处理。     </span></span><br><span class="line">	consumer.registerMessageListener(<span class="keyword">new</span> MessageListenerConcurrently() &#123; </span><br><span class="line">        <span class="function"><span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title">consumeMessage</span><span class="params">( </span></span></span><br><span class="line"><span class="function"><span class="params">             List&lt;MessageExt&gt; msgs, ConsumeConcurrentlyContext context)</span> </span>&#123; </span><br><span class="line">                <span class="comment">//批量数据处理 </span></span><br><span class="line">                <span class="keyword">for</span> (MessageExt msg : msgs) &#123; </span><br><span class="line">                    System.out.println(<span class="string">&quot;消费者获取数据:&quot;</span> + msg.getMsgId() + <span class="string">&quot;==&gt;&quot;</span> + <span class="keyword">new</span> String(msg.getBody())); </span><br><span class="line">                &#125; </span><br><span class="line">                <span class="comment">//返回数据已接收标识 </span></span><br><span class="line">                <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125;); </span><br><span class="line">    <span class="comment">//启动消费者，与Broker建立长连接，开始监听。 </span></span><br><span class="line">    consumer.start(); </span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123; </span><br><span class="line">    e.printStackTrace(); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>RocketMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RocketMQ生产者启动流程与消息发送流程</title>
    <url>/2022/01/15/RocketMQ/RocketMQ%E7%94%9F%E4%BA%A7%E8%80%85%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E4%B8%8E%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="生产者概述"><a href="#生产者概述" class="headerlink" title="生产者概述"></a>生产者概述</h3><p>发送消息的一方被称为生产者，它在整个RocketMQ的生产和消费体系中扮演的角色。</p>
<p><img src="/images/RocketMQ/20220115-1.png" alt="image-20220115-1"></p>
<p>● 生产者组：一个逻辑概念，在使用生产者实例的时候需要指定一个组名。一个生产者组可以生产多个Topic的消息。<br>● 生产者实例：一个生产者组部署了多个进程，每个进程都可以称为一个生产者实例。<br>● Topic：主题名字，一个Topic由若干Queue组成。<br>● RocketMQ 客户端中的生产者有两个独立实现类：<br>    - org.apache.rocketmq.client.producer.DefaultMQProducer<br>    - org.apache.rocketmq.client.producer.TransactionMQProducer<br>● 前者用于生产普通消息、顺序消息、单向消息、批量消息、延迟消息，后者主要用于生产事务消息。</p>
<h3 id="消息的结构"><a href="#消息的结构" class="headerlink" title="消息的结构"></a>消息的结构</h3><p><img src="/images/RocketMQ/20220115-2.png" alt="image-20220115-2"></p>
<p>● Topic：主题名字，可以通过RocketMQ Console创建。<br>● Flag：目前没用。<br>● Properties：消息扩展信息，Tag、keys、延迟级别都保存在这里。<br>● Body：消息体，字节数组。需要注意生产者使用什么编码，消费者也必须使用相同编码解码，否则会产生乱码。<br>● setKeys（）：设置消息的key，Key用于唯一标识这个消息，相当于消息id，多个key可以用MessageConst.KEYSEPARATOR（空格）分隔或者直用另一个重载方法。 如果Broker中messageIndexEnable=true则会根据key创建消息的Hash索引，帮助用户进行快速查询。<br>● setTags（）：消息过滤的标记，用户可以订阅某个Topic的某些Tag，这样Broker只会把订阅了topic-tag的消息发送给消费者。<br>● setDelayTimeLevel（）：设置延迟级别，延迟多久消费者可以消费。<br>● putUserProperty（）：如果还有其他扩展信息，可以存放在这里。内部是一个Map，重复调用会覆盖旧值。</p>
<h3 id="生产者启动流程"><a href="#生产者启动流程" class="headerlink" title="生产者启动流程"></a>生产者启动流程</h3><p><img src="/images/RocketMQ/20220115-3.png" alt="image-20220115-3"></p>
<p>● 涉及的类<br>      - DefaultMQProducer：默认生产者实现类<br>    - DefaultMQProducerImpl：默认生产者的具体实现类，被DefaultMQProducer引用<br>    - MQClientInstance：MQ客户端实例，MQClientInstance包含了生产者与消费者需要的所有底层功能。</p>
<p>● 关键启动流程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 调用producer.start()开始启动生产者实例，实例状态为CREATE_JUST，生产者可用状态为“失败”</span><br><span class="line"><span class="comment">//ProducerSample01 </span></span><br><span class="line">DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">&quot;pg1&quot;</span>); </span><br><span class="line">producer.setNamesrvAddr(<span class="string">&quot;192.168.31.103:9876&quot;</span>); </span><br><span class="line"><span class="keyword">try</span> &#123; </span><br><span class="line">    producer.start(); </span><br><span class="line">    ... </span><br><span class="line">&#125; </span><br><span class="line">... </span><br><span class="line"><span class="number">2.</span> 校验生产者实例设置的各种参数。比如生产者组名是否为空、是否满足命名规则、长度是否满足等。</span><br><span class="line"><span class="number">3.</span> 执行changeInstanceNameToPID（）方法。校验instance name，如果是默认名字则将其修改为进程id</span><br><span class="line"><span class="comment">//DefaultMQProducerImpl </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeInstanceNameToPID</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.instanceName.equals(<span class="string">&quot;DEFAULT&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.instanceName = UtilAll.getPid() + <span class="string">&quot;#&quot;</span> + System.nanoTime(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="number">4.</span> 创建MQClientInstance实例并初始化，按MQClientInstance负责NameSrv通信获取Broker配置、启动各种服务模块、开启各种定时任务</span><br><span class="line"><span class="number">5.</span> MQClientInstance初始化完毕，生产者启动完毕</span><br></pre></td></tr></table></figure>

<h3 id="消息发送流程"><a href="#消息发送流程" class="headerlink" title="消息发送流程"></a>消息发送流程</h3><p><img src="/images/RocketMQ/20220115-4.png" alt="image-20220115-4"></p>
<p>● RocketMQ客户端的消息发送通常分为以下3层：<br>    - 业务层：通常指直接调用RocketMQ Client发送API的业务代码。<br>    - 消息处理层：指RocketMQ Client获取业务发送的消息对象后，一系列的参数检查、消息发送准备、参数包装等操作。<br>    - 通信层：指RocketMQ基于Netty封装的一个RPC通信服务，RocketMQ的各个组件之间的通信全部使用该通信层。</p>
<p>● 消息发送步骤</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 调用defaultMQProducer.send()方法准备发送消息。</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt; <span class="number">10000</span> ; i++) &#123; </span><br><span class="line">    String data = <span class="string">&quot;&#123;\&quot;title\&quot;:\&quot;汇总数据\&quot;&#125;&quot;</span>; </span><br><span class="line">    Message message = <span class="keyword">new</span> Message(<span class="string">&quot;tax-data&quot;</span>, <span class="string">&quot;2021S4&quot;</span>, data.getBytes()); </span><br><span class="line">    SendResult result = producer.send(message); </span><br><span class="line">    System.out.println(<span class="string">&quot;消息已发送：MsgId:&quot;</span> + result.getMsgId() + <span class="string">&quot;，发送状态:&quot;</span> + result.getSendStatus()); </span><br><span class="line">&#125; </span><br><span class="line"><span class="number">2.</span> 通过设置的发送超时时间，默认<span class="number">3</span>秒<span class="number">3.</span> 调用 defaultMQProducerImpl.sendDefaultImpl() 设置发送方式，可选值ASYNC（异步）| ONEWAY（单向）| SYNC（同步）</span><br><span class="line"><span class="number">4.</span> defaultMQProducerImpl.sendKernelImpl()用于控制发送过程</span><br><span class="line">	前置检查</span><br><span class="line">	选择Queue进行发送</span><br><span class="line">	可靠发送</span><br><span class="line">	发送结果处理</span><br><span class="line"><span class="number">5.</span> 根据前面设置的CommunicationMode（通信模式）,MQClientAPIImpl.sendMessage()调用remotingClient对象不同的方法完成通</span><br><span class="line">信。</span><br><span class="line"><span class="keyword">switch</span> (communicationMode) &#123; </span><br><span class="line">    <span class="keyword">case</span> ONEWAY: </span><br><span class="line">        <span class="comment">//单向通道方法 </span></span><br><span class="line">        <span class="keyword">this</span>.remotingClient.invokeOneway(addr, request, timeoutMillis); </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>; </span><br><span class="line">    <span class="keyword">case</span> ASYNC: </span><br><span class="line">        <span class="keyword">final</span> AtomicInteger times = <span class="keyword">new</span> AtomicInteger(); </span><br><span class="line">        <span class="keyword">long</span> costTimeAsync = System.currentTimeMillis() - beginStartTime; </span><br><span class="line">        <span class="keyword">if</span> (timeoutMillis &lt; costTimeAsync) &#123; </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RemotingTooMuchRequestException(<span class="string">&quot;sendMessage call timeout&quot;</span>); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">//异步传输 </span></span><br><span class="line">        <span class="keyword">this</span>.sendMessageAsync(addr, brokerName, msg, timeoutMillis - costTimeAsync, request, sendCallback, topicPublishInfo, instance, retryTimesWhenSendFailed, times, context, producer); </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>; </span><br><span class="line">    <span class="keyword">case</span> SYNC: </span><br><span class="line">        <span class="keyword">long</span> costTimeSync = System.currentTimeMillis() - beginStartTime; </span><br><span class="line">        <span class="keyword">if</span> (timeoutMillis &lt; costTimeSync) &#123; </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RemotingTooMuchRequestException(<span class="string">&quot;sendMessage call timeout&quot;</span>); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">//同步调用 </span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.sendMessageSync(addr, brokerName, msg, timeoutMillis - costTimeSync, request); </span><br><span class="line">    <span class="keyword">default</span>: </span><br><span class="line">        <span class="keyword">assert</span> <span class="keyword">false</span>; </span><br><span class="line">        <span class="keyword">break</span>; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>● 上述三个方法最终都是通过remotingClient提供的invokeXXX方法完成与Broker的通信，底层基于Netty框架实现异步网络传输。<br>    - remotingClient.invokeSync // 异步<br>    - remotingClient.invokeAsync // 同步<br>    - remotingClient.invokeOneway // 单向</p>
]]></content>
      <tags>
        <tag>RocketMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RocketMQ五种消息类型</title>
    <url>/2022/01/16/RocketMQ/RocketMQ%E4%BA%94%E7%A7%8D%E6%B6%88%E6%81%AF%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h3 id="RocketMQ支持五种消息类型"><a href="#RocketMQ支持五种消息类型" class="headerlink" title="RocketMQ支持五种消息类型"></a>RocketMQ支持五种消息类型</h3><p>● 普通消息：普通消息也称为并发消息，和传统的队列相比，并发消息没有顺序，但是生产消费都是并行进行的，单机性能可达十万级别的TPS。<br>● 分区有序消息：与Kafka中的分区类似，把一个Topic消息分为多个分区“保存”和消费，在一个分区内的消息就是传统的队列，遵循FIFO（先进先出）原则。<br>● 全局有序消息：如果把一个Topic的分区数设置为1，那么该Topic中的消息就是单分区，所有消息都遵循FIFO（先进先出）的原则。<br>● 延迟消息：消息发送后，消费者要在一定时间后，或者指定某个时间点才可以消费。在没有延迟消息时，基本的做法是基于定时计划任务调度，定时发送消息。在 RocketMQ中只需要在发送消息时设置延迟级别即可实现。<br>● 事务消息：主要涉及分布式事务，即需要保证在多个操作同时成功或者同时失败时，消费者才能消费消息。RocketMQ通过发送Half消息、处理本地事务、提交（Commit）消息或者回滚（Rollback）消息优雅地实现分布式事务。</p>
<p><img src="/images/RocketMQ/20220116-1.png" alt="image-20220116-1"></p>
<h3 id="Broker、分区、队列的关系"><a href="#Broker、分区、队列的关系" class="headerlink" title="Broker、分区、队列的关系"></a>Broker、分区、队列的关系</h3><p><img src="/images/RocketMQ/20220116-2.png" alt="image-20220116-2"></p>
<h3 id="RocketMQ发送之普通消息"><a href="#RocketMQ发送之普通消息" class="headerlink" title="RocketMQ发送之普通消息"></a>RocketMQ发送之普通消息</h3><p><img src="/images/RocketMQ/20220116-3.png" alt="image-20220116-3"></p>
<p>● NameServer：192.168.31.103<br>● Master：192.168.31.105<br>● Slave：192.168.31.111</p>
<h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><p>1. Master与Slave启动向NameServer注册<br>2. 生产者Producer发送数据前从NameServer获取Master的IP、端口等通信参数<br>3. 生产者Producer向Master发送消息<br>4. Master向Slave进行消息同步</p>
<h3 id="代码案例"><a href="#代码案例" class="headerlink" title="代码案例"></a>代码案例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//普通消息类型 </span></span><br><span class="line"><span class="meta">@Slf4j</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageType1</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">        <span class="comment">//DefaultMQProducer用于发送非事务消息 </span></span><br><span class="line">        DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">&quot;ProducerGroupName&quot;</span>); </span><br><span class="line">        <span class="comment">//注册NameServer地址 </span></span><br><span class="line">        producer.setNamesrvAddr(<span class="string">&quot;192.168.31.103:9876&quot;</span>); </span><br><span class="line">        <span class="comment">//异步发送失败后Producer自动重试2次 </span></span><br><span class="line">        producer.setRetryTimesWhenSendAsyncFailed(<span class="number">2</span>); </span><br><span class="line">        <span class="keyword">try</span> &#123; </span><br><span class="line">            <span class="comment">//启动生产者实例 </span></span><br><span class="line">            producer.start(); </span><br><span class="line">            <span class="comment">//消息数据 </span></span><br><span class="line">            String data = <span class="string">&quot;&#123;\&quot;title\&quot;:\&quot;汇总数据\&quot;&#125;&quot;</span>; </span><br><span class="line">            <span class="comment">//消息主题             </span></span><br><span class="line">			Message message = <span class="keyword">new</span> Message(<span class="string">&quot;tax-data&quot;</span>, <span class="string">&quot;2021S4&quot;</span>, data.getBytes()); </span><br><span class="line">            <span class="comment">//发送结果 </span></span><br><span class="line">            SendResult result = producer.send(message); </span><br><span class="line">            log.info(<span class="string">&quot;Broker响应：&quot;</span> + result); </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123; </span><br><span class="line">            e.printStackTrace(); </span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123; </span><br><span class="line">            <span class="keyword">try</span> &#123; </span><br><span class="line">                <span class="comment">//关闭连接 </span></span><br><span class="line">                producer.shutdown(); </span><br><span class="line">                log.info(<span class="string">&quot;连接已关闭&quot;</span>); </span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123; </span><br><span class="line">                e.printStackTrace(); </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">23</span>:<span class="number">00</span>:<span class="number">48.741</span> [main] INFO com.lixiang.rocketmq.mtype.MessageType1 - Broker响应：</span><br><span class="line">SendResult [ </span><br><span class="line">    sendStatus=SEND_OK,  </span><br><span class="line">    msgId=7F000001347018B4AAC20A1687DC0000,  </span><br><span class="line">    offsetMsgId=C0A81F6900002A9F00000000000A21CB,  </span><br><span class="line">    messageQueue=MessageQueue [topic=tax-data, brokerName=broker-a, queueId=<span class="number">3</span>],  </span><br><span class="line">    queueOffset=<span class="number">2</span> </span><br><span class="line">] </span><br></pre></td></tr></table></figure>
<p>● sendStatus：发送状态，SEND_OK代表成功<br>● msgId：消息由RocketMQ分配的全局唯一Id，由producer客户端生成，调用方法MessageClientIDSetter.createUniqID()生成全局唯一的Id<br>● offsetMsgId：Broker服务端将消息追加到内存后会返回其物理偏移量，即在commitlog文件中的偏移量，然后会生成一个Id<br>● messageQueue：消息队列内容<br>● topic：主题名称<br>● brokerName：broker服务器名字，在RocketMQ xxx.propertites配置文件中brokerName项定义<br>● queueId：queueId队列Id，默认会初始化4个（0-3）<br>● queueOffset：queueId对应队列逻辑上的位置（偏移量）</p>
]]></content>
      <tags>
        <tag>RocketMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RocketMQ有序消息</title>
    <url>/2022/01/16/RocketMQ/RocketMQ%E6%9C%89%E5%BA%8F%E6%B6%88%E6%81%AF/</url>
    <content><![CDATA[<h3 id="RocketMQ发送消息之有序消息"><a href="#RocketMQ发送消息之有序消息" class="headerlink" title="RocketMQ发送消息之有序消息"></a>RocketMQ发送消息之有序消息</h3><p>如果某一笔业务分为多条普通消息同时发送，消费者无法保证按按生产者预期的顺序进行消费，进而导致代码逻辑错误。</p>
<p><img src="/images/RocketMQ/20220116-4.png" alt="image-20220116-4"></p>
<h3 id="分区有序消息"><a href="#分区有序消息" class="headerlink" title="分区有序消息"></a>分区有序消息</h3><p>● 分区有序消息：与Kafka中的分区类似，把一个Topic消息分为多个分区“保存”和消费，在一个分区内的消息就是传统的队列，遵循FIFO（先进先出）原则。<br>● 全局有序消息：如果把一个Topic的分区数设置为1，那么该Topic中的消息就是单分区，所有消息都遵循FIFO（先进先出）的原则。</p>
<p><img src="/images/RocketMQ/20220116-5.png" alt="image-20220116-5"></p>
<h3 id="部署拓扑"><a href="#部署拓扑" class="headerlink" title="部署拓扑"></a>部署拓扑</h3><p><img src="/images/RocketMQ/20220116-6.png" alt="image-20220116-6"></p>
<h3 id="代码案例"><a href="#代码案例" class="headerlink" title="代码案例"></a>代码案例</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt; </span><br><span class="line">    &lt;groupId&gt;org.apache.rocketmq&lt;/groupId&gt; </span><br><span class="line">    &lt;artifactId&gt;rocketmq-client&lt;/artifactId&gt; </span><br><span class="line">    &lt;version&gt;4.9.2&lt;/version&gt; </span><br><span class="line">&lt;/dependency&gt; </span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//发送分区顺序消息 </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageType2</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">        DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">&quot;ProducerGroupName&quot;</span>); </span><br><span class="line">        producer.setNamesrvAddr(<span class="string">&quot;192.168.31.103:9876&quot;</span>); </span><br><span class="line">        producer.setRetryTimesWhenSendAsyncFailed(<span class="number">2</span>); </span><br><span class="line">        <span class="keyword">try</span> &#123; </span><br><span class="line">            producer.start(); </span><br><span class="line">            Integer id = <span class="number">4465</span>; </span><br><span class="line">            String data = <span class="string">&quot;&#123;\&quot;id\&quot;:&quot;</span> + id+<span class="string">&quot; , + \&quot;title\&quot;:\&quot;X市2021年度第四季度税务汇总数据\&quot;&#125;&quot;</span>; </span><br><span class="line">            Message message = <span class="keyword">new</span> Message(<span class="string">&quot;tax-data&quot;</span>, <span class="string">&quot;2021S4&quot;</span>,id.toString(), data.getBytes(RemotingHelper.DEFAULT_CHARSET)); </span><br><span class="line">            <span class="comment">//分区有序消息最大的区别便是调用send方法是，需要实现MessageQueueSelector接口，确定使用哪个队列投递消息</span></span><br><span class="line">            SendResult result = producer.send(message, <span class="keyword">new</span> MessageQueueSelector() &#123; </span><br><span class="line">                <span class="meta">@Override</span> </span><br><span class="line">                <span class="function"><span class="keyword">public</span> MessageQueue <span class="title">select</span><span class="params">(List&lt;MessageQueue&gt; mqs, Message msg, Object arg)</span> </span>&#123; </span><br><span class="line">                    log.info(<span class="string">&quot;当前队列数量：&quot;</span> + mqs.size() + <span class="string">&quot;,明细：&quot;</span> + mqs.toString()); </span><br><span class="line">                    log.info(<span class="string">&quot;Message对象：&quot;</span> + msg.toString()); </span><br><span class="line">                    <span class="keyword">int</span> dataId = Integer.parseInt(msg.getKeys()); </span><br><span class="line">                    <span class="keyword">int</span> index = dataId % mqs.size(); </span><br><span class="line">                    MessageQueue messageQueue = mqs.get(index); </span><br><span class="line">                    log.info(<span class="string">&quot;分区队列:&quot;</span> + messageQueue); </span><br><span class="line">                    <span class="keyword">return</span> messageQueue;                 &#125; </span><br><span class="line">            &#125;,<span class="keyword">null</span>); </span><br><span class="line">            log.info(<span class="string">&quot;消息已发送：MsgId:&quot;</span> + result.getMsgId() + <span class="string">&quot;，发送状态:&quot;</span> + result.getSendStatus()); </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123; </span><br><span class="line">            e.printStackTrace(); </span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123; </span><br><span class="line">            <span class="keyword">try</span> &#123; </span><br><span class="line">                producer.shutdown(); </span><br><span class="line">                System.out.println(<span class="string">&quot;连接已关闭&quot;</span>); </span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123; </span><br><span class="line">                e.printStackTrace(); </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">15</span>:<span class="number">04</span>:<span class="number">49.407</span> [main] INFO com.lixiang.rocketmq.mtype.MessageType2 - 当前队列数量：<span class="number">4</span>,明细：[MessageQueue [topic=tax-data, brokerName=broker-a, queueId=<span class="number">0</span>], MessageQueue [topic=tax-data, brokerName=broker-a, queueId=<span class="number">1</span>], MessageQueue [topic=tax-data, brokerName=broker-a, queueId=<span class="number">2</span>], MessageQueue [topic=tax-data, brokerName=broker-a, queueId=<span class="number">3</span>]] </span><br><span class="line"><span class="number">15</span>:<span class="number">04</span>:<span class="number">49.409</span> [main] INFO com.lixiang.rocketmq.mtype.MessageType2 - Message对象：Message&#123;topic=<span class="string">&#x27;tax-data&#x27;</span>, flag=<span class="number">0</span>, properties=&#123;KEYS=<span class="number">4465</span>, WAIT=<span class="keyword">true</span>, TAGS=2021S4&#125;, body=[<span class="number">123</span>, <span class="number">34</span>, <span class="number">105</span>, <span class="number">100</span>, <span class="number">34</span>, <span class="number">58</span>, <span class="number">52</span>, <span class="number">52</span>, <span class="number">54</span>, <span class="number">53</span>, <span class="number">32</span>, <span class="number">44</span>, <span class="number">32</span>, <span class="number">43</span>, <span class="number">32</span>, <span class="number">34</span>, <span class="number">116</span>, <span class="number">105</span>, <span class="number">116</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">34</span>, <span class="number">58</span>, <span class="number">34</span>, <span class="number">88</span>, -<span class="number">27</span>, -<span class="number">72</span>, -<span class="number">126</span>, <span class="number">50</span>, <span class="number">48</span>, <span class="number">50</span>, <span class="number">49</span>, -<span class="number">27</span>, -<span class="number">71</span>, -<span class="number">76</span>, -<span class="number">27</span>, -<span class="number">70</span>, -<span class="number">90</span>, -<span class="number">25</span>, -<span class="number">84</span>, -<span class="number">84</span>, -<span class="number">27</span>, -<span class="number">101</span>, -<span class="number">101</span>, -<span class="number">27</span>, -<span class="number">83</span>, -<span class="number">93</span>, -<span class="number">27</span>, -<span class="number">70</span>, -<span class="number">90</span>, -<span class="number">25</span>, -<span class="number">88</span>, -<span class="number">114</span>, -<span class="number">27</span>, -<span class="number">118</span>, -<span class="number">95</span>, -<span class="number">26</span>, -<span class="number">79</span>, -<span class="number">121</span>, -<span class="number">26</span>, -<span class="number">128</span>, -<span class="number">69</span>, -<span class="number">26</span>, -<span class="number">107</span>, -<span class="number">80</span>, -<span class="number">26</span>, -<span class="number">115</span>, -<span class="number">82</span>, <span class="number">34</span>, <span class="number">125</span>], transactionId=<span class="string">&#x27;null&#x27;</span>&#125; </span><br><span class="line"><span class="number">15</span>:<span class="number">04</span>:<span class="number">49.409</span> [main] INFO com.lixiang.rocketmq.mtype.MessageType2 - 分区队列:MessageQueue [topic=tax-data, brokerName=broker-a, queueId=<span class="number">1</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">04</span>:<span class="number">49.712</span> [main] INFO com.lixiang.rocketmq.mtype.MessageType2 - 消息已发送：MsgId:7F0000013C4018B4AAC20D891D290000，发送状态:SEND_OK</span><br></pre></td></tr></table></figure>

<h3 id="全局有序消息-单broker"><a href="#全局有序消息-单broker" class="headerlink" title="全局有序消息(单broker)"></a>全局有序消息(单broker)</h3><p>在实现MessageQueueSelector接口时，固定选择某个队列就代表全局有序。注意：这里的全局有序代表broker中全局有序。如果消息被分发到不同的broker中，不保证有序，当然这种使用方法是错误的。</p>
<h3 id="代码案例-1"><a href="#代码案例-1" class="headerlink" title="代码案例"></a>代码案例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SendResult result = producer.send(message, <span class="keyword">new</span> MessageQueueSelector() &#123; </span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageQueue <span class="title">select</span><span class="params">(List&lt;MessageQueue&gt; mqs, Message msg, Object arg)</span> </span>&#123; </span><br><span class="line">        MessageQueue messageQueue = mqs.get(<span class="number">0</span>); </span><br><span class="line">        <span class="keyword">return</span> messageQueue; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;, id);</span><br></pre></td></tr></table></figure>

<h3 id="输出结果-1"><a href="#输出结果-1" class="headerlink" title="输出结果"></a>输出结果</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">15</span>:08:<span class="number">18.295</span> [main] INFO com.lixiang.rocketmq.mtype.MessageType2 - 当前队列数量：<span class="number">4</span>,明细：[MessageQueue [topic=tax-data, brokerName=broker-a, queueId=<span class="number">0</span>], MessageQueue [topic=tax-data, brokerName=broker-a, queueId=<span class="number">1</span>], MessageQueue [topic=tax-data, brokerName=broker-a, queueId=<span class="number">2</span>], MessageQueue [topic=tax-data, brokerName=broker-a, queueId=<span class="number">3</span>]] </span><br><span class="line"><span class="number">15</span>:08:<span class="number">18.297</span> [main] INFO com.lixiang.rocketmq.mtype.MessageType2 - Message对象：Message&#123;topic=<span class="string">&#x27;tax-data&#x27;</span>, flag=<span class="number">0</span>, properties=&#123;KEYS=<span class="number">4465</span>, WAIT=<span class="keyword">true</span>, TAGS=2021S4&#125;, body=[<span class="number">123</span>, <span class="number">34</span>, <span class="number">105</span>, <span class="number">100</span>, <span class="number">34</span>, <span class="number">58</span>, <span class="number">52</span>, <span class="number">52</span>, <span class="number">54</span>, <span class="number">53</span>, <span class="number">32</span>, <span class="number">44</span>, <span class="number">32</span>, <span class="number">43</span>, <span class="number">32</span>, <span class="number">34</span>, <span class="number">116</span>, <span class="number">105</span>, <span class="number">116</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">34</span>, <span class="number">58</span>, <span class="number">34</span>, <span class="number">88</span>, -<span class="number">27</span>, -<span class="number">72</span>, -<span class="number">126</span>, <span class="number">50</span>, <span class="number">48</span>, <span class="number">50</span>, <span class="number">49</span>, -<span class="number">27</span>, -<span class="number">71</span>, -<span class="number">76</span>, -<span class="number">27</span>, -<span class="number">70</span>, -<span class="number">90</span>, -<span class="number">25</span>, -<span class="number">84</span>, -<span class="number">84</span>, </span><br><span class="line">-<span class="number">27</span>, -<span class="number">101</span>, -<span class="number">101</span>, -<span class="number">27</span>, -<span class="number">83</span>, -<span class="number">93</span>, -<span class="number">27</span>, -<span class="number">70</span>, -<span class="number">90</span>, -<span class="number">25</span>, -<span class="number">88</span>, -<span class="number">114</span>, -<span class="number">27</span>, -<span class="number">118</span>, -<span class="number">95</span>, -<span class="number">26</span>, -<span class="number">79</span>, -<span class="number">121</span>, -<span class="number">26</span>, -<span class="number">128</span>, -<span class="number">69</span>, -<span class="number">26</span>, -<span class="number">107</span>, -<span class="number">80</span>, -<span class="number">26</span>, -<span class="number">115</span>, -<span class="number">82</span>, <span class="number">34</span>, <span class="number">125</span>], transactionId=<span class="string">&#x27;null&#x27;</span>&#125; </span><br><span class="line"><span class="number">15</span>:08:<span class="number">18.297</span> [main] INFO com.lixiang.rocketmq.mtype.MessageType2 - 分区队列:MessageQueue [topic=tax-data, brokerName=broker-a, queueId=<span class="number">0</span>] </span><br><span class="line"><span class="number">15</span>:08:<span class="number">18.602</span> [main] INFO com.lixiang.rocketmq.mtype.MessageType2 - 消息已发送：MsgId:7F00000134C418B4AAC20D8C4D220000，发送状态:SEND_OK </span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>RocketMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RocketMQ延迟消息</title>
    <url>/2022/01/17/RocketMQ/RocketMQ%E5%BB%B6%E8%BF%9F%E6%B6%88%E6%81%AF/</url>
    <content><![CDATA[<h3 id="延迟消息"><a href="#延迟消息" class="headerlink" title="延迟消息"></a>延迟消息</h3><p>延迟消息是指消息发送后，消费者要在一定时间后，或者指定某个时间点才可以消费。在没有延迟消息时，基本的做法是基于定时计划任务调度，定时发送消息。在 RocketMQ中只需要在发送消息时设置延迟级别即可实现。</p>
<p><img src="/images/RocketMQ/20220117-1.png" alt="image-20220117-1"></p>
<p>Broker在启动时，内部会创建一个内部主题：SCHEDULE_TOPIC_XXXX，根据延迟level的个数，创建对应数量的队列，也就是说18个level对应了18个队列。注意，这并不是说这个内部主题只会有18个队列，因为Broker通常是集群模式部署的，因此每个节点都有18个队列。</p>
<p><img src="/images/RocketMQ/20220117-2.png" alt="image-20220117-2"></p>
<p>● 修改消息Topic名称和队列信息RocketMQ Broker端在存储生产者写入的消息时，首先都会将其写入到CommitLog中。之后将Topic的名称修改为SCHEDULE_TOPIC_XXXX，并根据延迟级别确定要投递到哪个队列下。<br>● 转发消息到延迟主题的CosumeQueue中CommitLog中的消息转发到CosumeQueue中是异步进行的。在转发过程中，会对延迟消息进行特殊处理，主要是计算这条延迟消息需要在什么时候进行投递。<br>● 延迟服务消费SCHEDULE_TOPIC_XXXX消息Broker内部有一个ScheduleMessageService类，其充当延迟服务，消费SCHEDULE_TOPIC_XXXX中的消息，并投递到目标Topic中。ScheduleMessageService在启动时，其会创建一个定时器Timer，并根据延迟级别的个数，启动对应数量的TimerTask，每个TimerTask负责一个延迟级别的消费与投递。<br>● 将信息重新存储到CommitLog中在将消息到期后，需要投递到目标Topic。由于在第一步已经记录了原来的Topic和队列信息，因此这里重新设置，再存储到CommitLog即可。此外，由于之前Message Tag HashCode字段存储的是消息的投递时间，这里需要重新计算tag的哈希值后再存储<br>● 将消息投递到目标Topic中这一步与第二步类似，不过由于消息的Topic名称已经改为了目标Topic。因此消息会直接投递到目标Topic的ConsumeQueue中，之后消费者即消费到这条消息。<br>● 消费者消费目标topic中的数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageType3</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">        DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">&quot;ProducerGroupName&quot;</span>); </span><br><span class="line">        producer.setNamesrvAddr(<span class="string">&quot;192.168.31.103:9876&quot;</span>); </span><br><span class="line">        producer.setRetryTimesWhenSendAsyncFailed(<span class="number">2</span>); </span><br><span class="line">        <span class="keyword">try</span> &#123; </span><br><span class="line">            producer.start(); </span><br><span class="line">            <span class="keyword">long</span> id = <span class="number">4466l</span>; </span><br><span class="line">            String data = <span class="string">&quot;&#123;\&quot;id\&quot;:&quot;</span> + id+<span class="string">&quot; , + \&quot;title\&quot;:\&quot;X市2021年度第四季度税务汇总数据\&quot;&#125;&quot;</span>; </span><br><span class="line">            Message message = <span class="keyword">new</span> Message(<span class="string">&quot;tax-data&quot;</span>, <span class="string">&quot;2021S4&quot;</span>, data.getBytes(RemotingHelper.DEFAULT_CHARSET)); </span><br><span class="line">            <span class="comment">// 1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h</span></span><br><span class="line">            message.setDelayTimeLevel(<span class="number">5</span>); </span><br><span class="line">            SendResult result = producer.send(message); </span><br><span class="line">            System.out.println(<span class="string">&quot;消息已发送：MsgId:&quot;</span> + result.getMsgId() + <span class="string">&quot;，发送状态:&quot;</span> + result.getSendStatus()); </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123; </span><br><span class="line">            e.printStackTrace(); </span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123; </span><br><span class="line">            <span class="keyword">try</span> &#123; </span><br><span class="line">                producer.shutdown(); </span><br><span class="line">                System.out.println(<span class="string">&quot;连接已关闭&quot;</span>); </span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123; </span><br><span class="line">                e.printStackTrace(); </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="修改延时配置"><a href="#修改延时配置" class="headerlink" title="修改延时配置"></a>修改延时配置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">single-master.properties</span><br><span class="line"># 集群名称，同一个集群下的broker要求统一 </span><br><span class="line">brokerClusterName=DefaultCluster </span><br><span class="line"># broker名称 </span><br><span class="line">brokerName=broker-a </span><br><span class="line">... </span><br><span class="line">messageDelayLevel=90s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h </span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>RocketMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RocketMQ事务消息</title>
    <url>/2022/01/17/RocketMQ/RocketMQ%E4%BA%8B%E5%8A%A1%E6%B6%88%E6%81%AF/</url>
    <content><![CDATA[<h3 id="先写库还是先发消息"><a href="#先写库还是先发消息" class="headerlink" title="先写库还是先发消息"></a>先写库还是先发消息</h3><p>首先，咱们来看一下工作场景，订单ID1030被创建后要保存到数据库，同时该1030订单通过MQ投递给其他系统进行消费。如果要保证订单数据入库与消息投递状态要保证最终一致，要怎么做？这里有两种常见做法：</p>
<p>● 第一种，先写库，再发送数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//伪代码 </span></span><br><span class="line"><span class="comment">//插入1030号订单 </span></span><br><span class="line">orderDao.insert(<span class="number">1030</span>,order); </span><br><span class="line"><span class="comment">//向1030号订单新增3条订单明细，10081-10083， </span></span><br><span class="line">orderDetailDao.insert(<span class="number">10081</span>,<span class="number">1030</span>,orderDetail1); </span><br><span class="line">orderDetailDao.insert(<span class="number">10082</span>,<span class="number">1030</span>,orderDetail2); </span><br><span class="line">orderDetailDao.insert(<span class="number">10083</span>,<span class="number">1030</span>,orderDetail3); </span><br><span class="line"><span class="comment">//向MQ发送数据，如果数据发送失败 </span></span><br><span class="line">SendResult result = producer.send(orderMessage) </span><br><span class="line"><span class="keyword">if</span> (result.getState().equals(<span class="string">&quot;SEND_OK&quot;</span>))) &#123; </span><br><span class="line">    connection.commit(); </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    connection.rollback(); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<ol>
<li>如果生产者发送消息时，因为网络原因导致10秒消息才返回SendResult结果，这就意味这10秒内数据库事务无法提交，大量并发下，数据库连接资源会在这10秒内迅速耗尽，后续请求进入连接池等待状态，最终导致系统停止响应。</li>
<li>事务还没有提交，消息就已经被消费者消费了，消费者做数据检查时会报错，导致需要等到下次重试才能被消费者消费成功，大量出现这种消息，可能造成消息积压。</li>
</ol>
<p>● 第二种，先发消息，再写库</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//伪代码 </span></span><br><span class="line"><span class="comment">//向MQ发送数据，如果数据发送失败 </span></span><br><span class="line">SendResult result = producer.send(orderMessage) </span><br><span class="line"><span class="keyword">if</span>(result.getState().equals(<span class="string">&quot;SEND_OK&quot;</span>)))&#123; </span><br><span class="line">    <span class="comment">//插入1030号订单 </span></span><br><span class="line">    orderDao.insert(<span class="number">1030</span>,order); </span><br><span class="line">    <span class="comment">//向1030号订单新增3条订单明细，10081-10083， </span></span><br><span class="line">    orderDetailDao.insert(<span class="number">10081</span>,<span class="number">1030</span>,orderDetail1); </span><br><span class="line">    orderDetailDao.insert(<span class="number">10082</span>,<span class="number">1030</span>,orderDetail2); </span><br><span class="line">   orderDetailDao.insert(<span class="number">10083</span>,<span class="number">1030</span>,orderDetail3); </span><br><span class="line">   connection.commit; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>问题更严重，因为消息已经被发送了，消费者可以立即消费，比如下游消费者为1030订单自动设置了“快递信息”，可是如果后续orderDao向数据库插入数据产生异常导致业务失败。我们还需要再次发送“取消1030订单”的消息把下游1030订单分配的“快递信息”给撤销，这些都是在业务层面上的额外处理，这无疑提高了对程序员的要求与处理的难度。</p>
<h3 id="RocketMQ事务消息"><a href="#RocketMQ事务消息" class="headerlink" title="RocketMQ事务消息"></a>RocketMQ事务消息</h3><p>● 架构拓扑</p>
<p><img src="/images/RocketMQ/20220117-3.png" alt="image-20220117-3"></p>
<p>● 代码案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageType4</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MQClientException, InterruptedException, UnsupportedEncodingException </span>&#123; </span><br><span class="line">         </span><br><span class="line">        <span class="comment">//事务消息一定要使用TransactionMQProducer事务生产者创建 </span></span><br><span class="line">        TransactionMQProducer producer = <span class="keyword">new</span> </span><br><span class="line">		TransactionMQProducer(<span class="string">&quot;transaction_producer_group&quot;</span>); </span><br><span class="line">        <span class="comment">//从NameServer获取配置数据 </span></span><br><span class="line">        producer.setNamesrvAddr(<span class="string">&quot;192.168.31.103:9876&quot;</span>); </span><br><span class="line">         </span><br><span class="line">        <span class="comment">//CachedThreadPool线程池用于回查本地事务状态 </span></span><br><span class="line">        ExecutorService cachedThreadPool = Executors.newCachedThreadPool(<span class="keyword">new</span> ThreadFactory() &#123; </span><br><span class="line">            <span class="meta">@Override</span> </span><br><span class="line">            <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123; </span><br><span class="line">                Thread thread = <span class="keyword">new</span> Thread(r); </span><br><span class="line">                thread.setName(<span class="string">&quot;check-transaction-thread&quot;</span>); </span><br><span class="line">                <span class="keyword">return</span> thread; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125;); </span><br><span class="line">        <span class="comment">//将生产者与线程池绑定 </span></span><br><span class="line">        producer.setExecutorService(cachedThreadPool); </span><br><span class="line">        <span class="comment">//绑定事务监听器，用于执行代码 </span></span><br><span class="line">        TransactionListener transactionListener = <span class="keyword">new</span> OrderTransactionListenerImpl(); </span><br><span class="line">        producer.setTransactionListener(transactionListener); </span><br><span class="line">        <span class="comment">//启动生产者 </span></span><br><span class="line">        producer.start(); </span><br><span class="line">         </span><br><span class="line">        <span class="comment">//创建消息对象         </span></span><br><span class="line">		Message msg = <span class="keyword">new</span> Message(<span class="string">&quot;order&quot;</span>,<span class="string">&quot;order-1030&quot;</span>, <span class="string">&quot;1030&quot;</span>, <span class="string">&quot;1030订单与明细的完整JSON数据（略）&quot;</span>.getBytes()); </span><br><span class="line">        <span class="comment">//一定要调用sendMessageInTransaction发送事务消息 </span></span><br><span class="line">        <span class="comment">//参数1：消息对象 </span></span><br><span class="line">        <span class="comment">//参数2：其他参数，目前用不到 </span></span><br><span class="line">        producer.sendMessageInTransaction(msg, <span class="keyword">null</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// TransactionListenerImpl-处理本地事务业务代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderTransactionListenerImpl</span> <span class="keyword">implements</span> <span class="title">TransactionListener</span> </span>&#123;   </span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="comment">//执行本地事务代码 </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalTransactionState <span class="title">executeLocalTransaction</span><span class="params">(Message msg, Object arg)</span> </span>&#123; </span><br><span class="line">        log.info(<span class="string">&quot;正在执行本地事务,订单编号:&quot;</span> + msg.getKeys()); </span><br><span class="line">        <span class="comment">/* 伪代码 </span></span><br><span class="line"><span class="comment">        try&#123; </span></span><br><span class="line"><span class="comment">            //插入1030号订单 </span></span><br><span class="line"><span class="comment">            orderDao.insert(1030,order); </span></span><br><span class="line"><span class="comment">            //向1030号订单新增3条订单明细，10081-10083， </span></span><br><span class="line"><span class="comment">            orderDetailDao.insert(10081,1030,orderDetail1); </span></span><br><span class="line"><span class="comment">            orderDetailDao.insert(10082,1030,orderDetail2); </span></span><br><span class="line"><span class="comment">            orderDetailDao.insert(10083,1030,orderDetail3); </span></span><br><span class="line"><span class="comment">            connection.commit(); </span></span><br><span class="line"><span class="comment">            //返回Commit，消费者可以消费1030订单消息 </span></span><br><span class="line"><span class="comment">            return LocalTransactionState.COMMIT_MESSAGE; </span></span><br><span class="line"><span class="comment">        &#125;catch(Exception e)&#123; </span></span><br><span class="line"><span class="comment">            //返回Rollback，Broker直接将数据删除，消费者不能收到1030订单消息 </span></span><br><span class="line"><span class="comment">            connection.rollback(); </span></span><br><span class="line"><span class="comment">            return LocalTransactionState.ROLLBACK_MESSAGE; </span></span><br><span class="line"><span class="comment">        &#125; </span></span><br><span class="line"><span class="comment">        */</span> </span><br><span class="line">        log.info(<span class="string">&quot;模拟网络中断，Broker并未收到生产者本地事务状态回执，返回UNKNOW&quot;</span>); </span><br><span class="line">        <span class="keyword">return</span> LocalTransactionState.UNKNOW; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="comment">//会查本地事务处理状态 </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalTransactionState <span class="title">checkLocalTransaction</span><span class="params">(MessageExt msg)</span> </span>&#123; </span><br><span class="line">        String keys = msg.getKeys(); </span><br><span class="line">        log.info(<span class="string">&quot;触发回查，正在检查&quot;</span> + keys + <span class="string">&quot;订单状态&quot;</span>); </span><br><span class="line">        <span class="comment">/* 伪代码 </span></span><br><span class="line"><span class="comment">        Order order = orderDao.selectById(1030); </span></span><br><span class="line"><span class="comment">        if (order != null) &#123; </span></span><br><span class="line"><span class="comment">            //查询到记录，代表数据库已处理成功，回查返回Commit，消费者可以消费1030订单消息            </span></span><br><span class="line"><span class="comment">			return LocalTransactionState.COMMIT_MESSAGE; </span></span><br><span class="line"><span class="comment">        &#125; else &#123; </span></span><br><span class="line"><span class="comment">            //未查询到记录，代表数据库处理失败，回查返回Rollback，Broker直接将数据删除，消费者不能收到1030订单消息 </span></span><br><span class="line"><span class="comment">            return LocalTransactionState.ROLLBACK_MESSAGE; </span></span><br><span class="line"><span class="comment">        &#125; </span></span><br><span class="line"><span class="comment">        */</span> </span><br><span class="line">        log.info(<span class="string">&quot;回查结果，&quot;</span> + keys + <span class="string">&quot;订单已入库，发送Commit指令&quot;</span>); </span><br><span class="line">        <span class="keyword">return</span> LocalTransactionState.COMMIT_MESSAGE; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="RocketMQ事务执行过程"><a href="#RocketMQ事务执行过程" class="headerlink" title="RocketMQ事务执行过程"></a>RocketMQ事务执行过程</h3><p>● producer.sendMessageInTransaction(msg, null); 执行成功<br>此时1030订单消息已被发送到MQ服务器（Broker），不过该消息在Broker此时状态为“half-message”，相当于存储在MQ中的“临时消息”，此状态下消息无法被投递给消费者。</p>
<p><img src="/images/RocketMQ/20220117-4.png" alt="image-20220117-4"></p>
<p>● 生产者发送消息成功后自动触发<br>OrderTransactionListenerImpl.executeLocalTransaction()执行本地事务。<br>当消息发送成功，紧接着生产者向本地数据库写数据，数据库写入后提交commit，同时executeLocalTransaction方法返回COMMIT_MESSAGE，生产者会再次向MQ服务器发送一个commit提交消息，此前在Broker中保存1030订单消息状态就从“half-message”变为”已提交”，broker将消息发给下游的消费者处理。</p>
<p><img src="/images/RocketMQ/20220117-5.png" alt="image-20220117-5"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> LocalTransactionState <span class="title">executeLocalTransaction</span><span class="params">(Message msg, Object arg)</span> </span>&#123; </span><br><span class="line">    <span class="comment">/* 伪代码 </span></span><br><span class="line"><span class="comment">    try&#123; </span></span><br><span class="line"><span class="comment">        orderDao.insert(1030,order); </span></span><br><span class="line"><span class="comment">        //向1030号订单新增3条订单明细，10081-10083， </span></span><br><span class="line"><span class="comment">        orderDetailDao.insert(10081,1030,orderDetail1); </span></span><br><span class="line"><span class="comment">        orderDetailDao.insert(10082,1030,orderDetail2); </span></span><br><span class="line"><span class="comment">        orderDetailDao.insert(10083,1030,orderDetail3); </span></span><br><span class="line"><span class="comment">        connection.commit(); </span></span><br><span class="line"><span class="comment">        //返回Commit，消费者可以消费1030订单消息 </span></span><br><span class="line"><span class="comment">        return LocalTransactionState.COMMIT_MESSAGE; </span></span><br><span class="line"><span class="comment">    &#125;catch(Exception e)&#123;...&#125; </span></span><br><span class="line"><span class="comment">&#125; </span></span><br></pre></td></tr></table></figure>

<p>● 异常流程1：producer.sendMessageInTransaction(msg, null); 执行失败，抛出异常<br>此时没有任何消息被发出，本地事务也不会执行，除了报错外不会产生任何不一致。</p>
<p><img src="/images/RocketMQ/20220117-6.png" alt="image-20220117-6"></p>
<p>● 异常流程2：producer.sendMessageInTransaction(msg, null); 执行成功，本地事务执行失败</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> LocalTransactionState <span class="title">executeLocalTransaction</span><span class="params">(Message msg, Object arg)</span> </span>&#123; </span><br><span class="line">    <span class="comment">/* 伪代码 </span></span><br><span class="line"><span class="comment">    try&#123; </span></span><br><span class="line"><span class="comment">        //插入1030号订单 </span></span><br><span class="line"><span class="comment">        orderDao.insert(1030,order); </span></span><br><span class="line"><span class="comment">        //插入失败 </span></span><br><span class="line"><span class="comment">        orderDetailDao.insert(10081,1030,orderDetail1); </span></span><br><span class="line"><span class="comment">        ... </span></span><br><span class="line"><span class="comment">    &#125;catch(Exception e)&#123; </span></span><br><span class="line"><span class="comment">        //返回Rollback，Broker直接将数据删除，消费者不能收到1030订单消息 </span></span><br><span class="line"><span class="comment">        connection.rollback(); </span></span><br><span class="line"><span class="comment">        return LocalTransactionState.ROLLBACK_MESSAGE; </span></span><br><span class="line"><span class="comment">    &#125; </span></span><br><span class="line"><span class="comment">&#125; </span></span><br></pre></td></tr></table></figure>
<p>此时本地事务执行rollback回滚，数据库数据被撤销，同时executeLocalTransaction方法返回ROLLBACK_MESSAGE代表回滚，生产者会再次向MQ服务器发送一个rollback回滚消息，此前在Broker中保存1030订单消息就会被直接删除，不会发送给消费者，本地事务也可以保证与MQ消息一致。</p>
<p><img src="/images/RocketMQ/20220117-7.png" alt="image-20220117-7"></p>
<p>● 异常流程3：producer.sendMessageInTransaction(msg, null); 执行成功，本地事务执行成功，但给Broker返回Commit消息时断网了，导致broker无法收到提交指令。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> LocalTransactionState <span class="title">executeLocalTransaction</span><span class="params">(Message msg, Object arg)</span> </span>&#123; </span><br><span class="line">    <span class="comment">/* 伪代码 </span></span><br><span class="line"><span class="comment">    try&#123; </span></span><br><span class="line"><span class="comment">        orderDao.insert(1030,order); </span></span><br><span class="line"><span class="comment">        //向1030号订单新增3条订单明细，10081-10083， </span></span><br><span class="line"><span class="comment">        orderDetailDao.insert(10081,1030,orderDetail1); </span></span><br><span class="line"><span class="comment">        orderDetailDao.insert(10082,1030,orderDetail2); </span></span><br><span class="line"><span class="comment">        orderDetailDao.insert(10083,1030,orderDetail3); </span></span><br><span class="line"><span class="comment">        connection.commit(); </span></span><br><span class="line"><span class="comment">        //返回Commit时网络中断 </span></span><br><span class="line"><span class="comment">        return LocalTransactionState.COMMIT_MESSAGE;     &#125;catch(Exception e)&#123;...&#125; </span></span><br><span class="line"><span class="comment">&#125; </span></span><br></pre></td></tr></table></figure>
<p>此时本地数据库订单数据已入库，但MQ因为断网无法收到生产者的发来的“commit”消息，1030订单数据一直处于“half message”的状态，消息无法被投递到消费者，本地事务与MQ消息的一致性被破坏。</p>
<p><img src="/images/RocketMQ/20220117-8.png" alt="image-20220117-8"></p>
<p>RocketMQ为了解决这个问题，设计了回查机制，对于broker中的half message，每过一小段时间就自动尝试与生产者通信，试图调用通OrderTransactionListenerImpl.checkLocalTransaction()方法确认之前的本地事务是否成功。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//会查本地事务处理状态 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> LocalTransactionState <span class="title">checkLocalTransaction</span><span class="params">(MessageExt msg)</span> </span>&#123; </span><br><span class="line">    String keys = msg.getKeys(); </span><br><span class="line">    log.info(<span class="string">&quot;触发回查，正在检查&quot;</span> + keys + <span class="string">&quot;订单状态&quot;</span>); </span><br><span class="line">    <span class="comment">/* 伪代码 </span></span><br><span class="line"><span class="comment">    Order order = orderDao.selectById(1030); </span></span><br><span class="line"><span class="comment">    if (order != null) &#123; </span></span><br><span class="line"><span class="comment">        // 查询到记录，代表数据库已处理成功，回查返回Commit，消费者可以消费1030订单消息 </span></span><br><span class="line"><span class="comment">        return LocalTransactionState.COMMIT_MESSAGE; </span></span><br><span class="line"><span class="comment">    &#125; else &#123; </span></span><br><span class="line"><span class="comment">        // 未查询到记录，代表数据库处理失败，回查返回Rollback，Broker直接将数据删除，消费者不能收到1030订单消息 </span></span><br><span class="line"><span class="comment">        return LocalTransactionState.ROLLBACK_MESSAGE; </span></span><br><span class="line"><span class="comment">    &#125; </span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    log.info(<span class="string">&quot;回查结果，&quot;</span> + keys + <span class="string">&quot;订单已入库，发送Commit指令&quot;</span>); </span><br><span class="line">    <span class="keyword">return</span> LocalTransactionState.COMMIT_MESSAGE; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>由MQ服务器主动发起，生产者调用OrderTransactionListenerImpl.checkLocalTransaction()检查之前数据库事务是否完成。</p>
<p><img src="/images/RocketMQ/20220117-9.png" alt="image-20220117-9"></p>
<p>checkLocalTransaction()查询到订单数据，说明之前的数据库事务已经完成，返回COMMIT_MESSAGE，这样Broker中的1030订单消息就可以被发送给消费者进行处理。</p>
<p><img src="/images/RocketMQ/20220117-10.png" alt="image-20220117-10"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">运行结果：</span><br><span class="line"><span class="number">22</span>:<span class="number">31</span>:<span class="number">35.670</span> [main] INFO com.lixiang.rocketmq.mtype.OrderTransactionListenerImpl - 正在执行本地事务,订单编号:<span class="number">1030</span> </span><br><span class="line"><span class="number">22</span>:<span class="number">31</span>:<span class="number">35.672</span> [main] INFO com.lixiang.rocketmq.mtype.OrderTransactionListenerImpl - 模拟网络中断，Broker并未收到生产者本地事务状态回执，返回UNKNOW </span><br><span class="line"><span class="number">22</span>:<span class="number">31</span>:<span class="number">45.995</span> [check-transaction-thread] INFO com.lixiang.rocketmq.mtype.OrderTransactionListenerImpl - 触发回查，正在检查<span class="number">1030</span>订单状态</span><br><span class="line"><span class="number">22</span>:<span class="number">31</span>:<span class="number">45.996</span> [check-transaction-thread] INFO com.lixiang.rocketmq.mtype.OrderTransactionListenerImpl - 回查结果，<span class="number">1030</span>订单已入库，发送Commit指令 </span><br></pre></td></tr></table></figure>

<p>checkLocalTransaction()未查询到订单数据，说明之前的数据库事务没有处理成功，返回ROLLBACK_MESSAGE，这样Broker中的1030订单消息就会被删除。</p>
<p><img src="/images/RocketMQ/20220117-11.png" alt="image-20220117-11"></p>
<h3 id="RocketMQ事务消息执行执行流程"><a href="#RocketMQ事务消息执行执行流程" class="headerlink" title="RocketMQ事务消息执行执行流程"></a>RocketMQ事务消息执行执行流程</h3><p><img src="/images/RocketMQ/20220117-12.png" alt="image-20220117-12"></p>
]]></content>
      <tags>
        <tag>RocketMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis6.x新特性</title>
    <url>/2021/05/12/Redis/Redis6%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h3 id="多线程IO"><a href="#多线程IO" class="headerlink" title="多线程IO"></a>多线程IO</h3><p>redis 6.x提供了多线程的支持，redis 6 以前的版本，严格来说也是多线程，只不过执行用户命令的请求时单线程模型，还有一些线程用来执行后台任务， 比如unlink删除 大key，rdb持久化等。<br>redis 6.x提供了多线程的读写IO，但是最终执行用户命令的线程依然是单线程的，这样就没有多线程数据的竞争关系，依然很高效。</p>
<h3 id="客户端缓存"><a href="#客户端缓存" class="headerlink" title="客户端缓存"></a>客户端缓存</h3><p>redis 6 提供了服务端追踪key的变化，客户端缓存数据的特性,可以减少网络通信次数</p>
<h3 id="RESP3协议"><a href="#RESP3协议" class="headerlink" title="RESP3协议"></a>RESP3协议</h3><p>RESP（Redis Serialization Protocol）是 Redis 服务端与客户端之间通信的协议。Redis 5 使用的是 RESP2，而 Redis 6 开始在兼容 RESP2 的基础上，开始支持 RESP3。<br>推出RESP3的目的：<br>    - 希望能为客户端提供更多的语义化响应，以开发使用旧协议难以实现的功能<br>    - 实现 Client-side-caching（客户端缓存）功能</p>
<h3 id="提升了RDB日志加载速度"><a href="#提升了RDB日志加载速度" class="headerlink" title="提升了RDB日志加载速度"></a>提升了RDB日志加载速度</h3><p>根据文件的实际组成（较大或较小的值），可以预期20/30%的改进。当有很多客户机连接时，信息也更快了，这是一个老问题，现在终于解决了。</p>
<h3 id="Redis集群代理模块Redis-Cluster-proxy"><a href="#Redis集群代理模块Redis-Cluster-proxy" class="headerlink" title="Redis集群代理模块Redis Cluster proxy"></a>Redis集群代理模块Redis Cluster proxy</h3><p>在Redis集群中，客户端会非常分散，现在为此引入了一个集群代理，可以为客户端抽象 Redis 群集，使其像正在与单个实例进行对话一样。同时在简单且客户端仅使用简单命令和功能时执行多路复用。</p>
<p><img src="/images/redis/20210512-1.png" alt="image-20210512-1"></p>
<h3 id="ACL权限控制"><a href="#ACL权限控制" class="headerlink" title="ACL权限控制"></a>ACL权限控制</h3><p>Redis6版本推出了ACL(Access Control List)访问控制权限的功能，基于此功能，我们可以设置多个用户，并且给每个用户单独设置命令权限和数据权限.</p>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis持久化</title>
    <url>/2021/05/13/Redis/Redis%E6%8C%81%E4%B9%85%E5%8C%96/</url>
    <content><![CDATA[<h3 id="为什么要持久化"><a href="#为什么要持久化" class="headerlink" title="为什么要持久化"></a>为什么要持久化</h3><p>Redis是一个内存数据库，如果没有配置持久化，redis重启后数据就全丢失因此开启redis的持久化功能，将数据保存到磁盘上，当redis重启后，可以从磁盘中恢复数据。<br>两种持久化方式<br>    - RDB (Redis DataBase) 全量二进制备份<br>    - AOF (append only file）增量日志</p>
<h3 id="RDB持久化介绍"><a href="#RDB持久化介绍" class="headerlink" title="RDB持久化介绍"></a>RDB持久化介绍</h3><p>在指定的时间间隔内将内存中的数据集快照写入磁盘，默认的文件名为dump.rdb<br>● RDB快照的应用场景</p>
<ul>
<li>save<br>会阻塞当前Redis服务器，执行save命令期间，Redis不能处理其他命令，直到RDB过程完成为止</li>
<li>bgsave<br>fork创建子进程，RDB持久化过程由子进程负责，会在后台异步进行快照操作，快照同时还可以响应客户端请求</li>
<li>自动化触发<br>配置文件来完成，配置触发Redis的RDB持久化条件比如”save m n”。表示m秒内数据集存在n次修改时，自动触发bgsave</li>
<li>主从架构<br>从服务器同步数据的时候，会发送sync执行同步操作，master主服务器就会执行bgsave</li>
</ul>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>● RDB文件紧凑，全量备份，适合用于进行备份和灾难恢复<br>● 在恢复大数据集时的速度比 AOF 的恢复速度要快<br>● 生成的是一个紧凑压缩的二进制文件</p>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>● 每次快照是一次全量备份，fork子进程进行后台操作，子进程存在开销<br>● 在快照持久化期间修改的数据不会被保存，可能丢失数据</p>
<p>###关于RDB的关键配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Redis.conf</span><br><span class="line"><span class="meta">#</span><span class="bash">持久化文件名称</span> </span><br><span class="line">dbfilename lixiang.rdb #持久化文件存储路径 </span><br><span class="line">dir /usr/local/redis/data </span><br><span class="line"><span class="meta">#</span><span class="bash">持久化策略, M秒内有个n个key改动，执行快照</span> </span><br><span class="line">save 3600 1   </span><br><span class="line">save 300 100 </span><br><span class="line">save 60 10000 </span><br><span class="line"><span class="meta">#</span><span class="bash">导出rdb数据库文件压缩字符串和对象,默认是yes，会浪费CPU但是节省空间</span> </span><br><span class="line">rdbcompression yes </span><br><span class="line"><span class="meta">#</span><span class="bash"> 导入时是否检查</span> </span><br><span class="line">rdbchecksum yes </span><br></pre></td></tr></table></figure>

<h3 id="AOF-Append-Only-File-持久化介绍"><a href="#AOF-Append-Only-File-持久化介绍" class="headerlink" title="AOF(Append Only File)持久化介绍"></a>AOF(Append Only File)持久化介绍</h3><p>追加文件的方式，文件容易被人读懂以独立日志的方式记录每次写命令， 重启时再重新执行AOF文件中的命令达到恢复数据的目的写入过程宕机，也不影响之前的数据，可以通过 redis-check-aof检查修复问题</p>
<h3 id="核心原理"><a href="#核心原理" class="headerlink" title="核心原理"></a>核心原理</h3><p>Redis每次写入命令会追加到aof_buf（缓冲区）<br>新增x1:v1 <br>新增x2:v2 <br>删除x2 <br>新增x3:v3 <br>覆盖x4:v4 <br>AOF缓冲区根据对应的策略向硬盘做同步操作<br>高频AOF会带来影响，特别是每次刷盘</p>
<h3 id="同步方式"><a href="#同步方式" class="headerlink" title="同步方式"></a>同步方式</h3><p>提供了3种同步方式，在性能和安全性方面做出平衡<br>● appendfsync always<br>每次有数据修改发生时都会写入AOF文件，消耗性能多<br>● appendfsync everysec<br>每秒钟同步一次，该策略为AOF的缺省策略。<br>● appendfsync no<br>不主从同步，由操作系统自动调度刷磁盘，性能是最好的，但是最不安全</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">appendonly yes </span><br><span class="line">appendfilename &quot;appendonly.aof&quot; </span><br><span class="line">appendfsync everysec </span><br></pre></td></tr></table></figure>

<h3 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a>AOF重写</h3><p>● 好处</p>
<ul>
<li>AOF文件越来越大，需要定期对AOF文件进行重写达到压缩</li>
<li>旧的AOF文件含有无效命令会被忽略，保留最新的数据命令</li>
<li>多条写命令可以合并为一个</li>
<li>AOF重写降低了文件占用空间</li>
<li>更小的AOF文件可以更快地被Redis加载</li>
</ul>
<p>示例:<br>新增x1:v1<br>覆盖x1:v2<br>覆盖x1:v3<br>覆盖x1:v4<br>删除x1<br>新增x1:v5<br>Rewrite以后<br>新增x4:v5</p>
<h3 id="重写触发配置"><a href="#重写触发配置" class="headerlink" title="重写触发配置"></a>重写触发配置</h3><p>● 手动触发：bgrewriteaof <br>● 自动触发：<br>    - auto-aof-rewrite-percentage 100<br>    - Redis记住上次重写时AOF日志的大小,比如上一次重写后50mb,当增长率达到100%,也就是AOF文件达到50+50=100mb后,就会自动触发rewrite.60mb = 120mb<br>    - auto-aof-rewrite-min-size 50mb<br>    - 设置触发Rewrite的最小尺寸</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 是否开启aof</span> </span><br><span class="line">appendonly yes </span><br><span class="line"><span class="meta">#</span><span class="bash"> 文件名称</span> </span><br><span class="line">appendfilename &quot;appendonly.aof&quot; </span><br><span class="line"><span class="meta">#</span><span class="bash"> 同步方式,每秒同步</span> </span><br><span class="line">appendfsync everysec </span><br><span class="line"><span class="meta">#</span><span class="bash"> aof重写期间是否同步</span> </span><br><span class="line">no-appendfsync-on-rewrite no </span><br><span class="line"><span class="meta">#</span><span class="bash"> 重写触发配置</span> </span><br><span class="line">auto-aof-rewrite-percentage 100 </span><br><span class="line">auto-aof-rewrite-min-size 50mb </span><br><span class="line"><span class="meta">#</span><span class="bash"> 加载aof时如果有错如何处理</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> yes表示如果aof尾部文件出问题，写<span class="built_in">log</span>记录并继续执行。no表示提示写入等待修复后写入</span> </span><br><span class="line">aof-load-truncated yes </span><br></pre></td></tr></table></figure>

<h3 id="Redis提供了不同的持久性选项"><a href="#Redis提供了不同的持久性选项" class="headerlink" title="Redis提供了不同的持久性选项"></a>Redis提供了不同的持久性选项</h3><p>RDB持久化以指定的时间间隔执行数据集的时间点快照。<br>AOF持久化记录服务器接收的每个写入操作，将在服务器启动时再次读取，重建原始数据集。使用与Redis协议本身相同的格式以仅追加方式记录命令，当文件太大时，Redis能够重写</p>
<h3 id="RDB的优缺点"><a href="#RDB的优缺点" class="headerlink" title="RDB的优缺点"></a>RDB的优缺点</h3><p>● 优点</p>
<ul>
<li>RDB最大限度地提高了Redis的性能，父进程不需要参与磁盘I/O</li>
<li>RDB文件紧凑，全量备份，适合用于进行备份和灾难恢复</li>
<li>在恢复大数据集时的速度比 AOF 的恢复速度要快</li>
<li>生成的是一个紧凑压缩的二进制文件<br>● 缺点</li>
<li>如果您需要在Redis停止工作时（例如断电后）将数据丢失的可能性降至最低，则RDB并不好</li>
<li>RDB经常需要fork才能使用子进程持久存储在磁盘上。如果数据集很大，Fork可能会非常耗时</li>
</ul>
<h3 id="AOF的优缺点"><a href="#AOF的优缺点" class="headerlink" title="AOF的优缺点"></a>AOF的优缺点</h3><p>● 优点</p>
<ul>
<li>数据更加安全</li>
<li>当Redis AOF文件太大时，Redis能够在后台自动重写AOF</li>
<li>AOF以易于理解和解析的格式，一个接一个地包含所有操作的日志<br>● 缺点</li>
<li>AOF文件通常比同一数据集的等效RDB文件大</li>
<li>根据确切的fsync策略，恢复的时候AOF可能比RDB慢</li>
</ul>
<h3 id="生产环境应该怎么做"><a href="#生产环境应该怎么做" class="headerlink" title="生产环境应该怎么做"></a>生产环境应该怎么做</h3><p>● AOF通常作为RDB的补充使用<br>● 如果Redis中的数据并不是特别敏感或者可以通过其它方式重写生成数据,集群中可以关闭AOF持久化，靠集群的备份方式保证可用性<br>● 自己制定策略定期检查Redis的情况，然后可以手动触发备份、重写数据</p>
<h3 id="Redis4-0后开始的rewrite支持混合模式"><a href="#Redis4-0后开始的rewrite支持混合模式" class="headerlink" title="Redis4.0后开始的rewrite支持混合模式"></a>Redis4.0后开始的rewrite支持混合模式</h3><p>就是RDB和AOF一起用<br>直接将rdb持久化的方式来操作将二进制内容覆盖到aof文件中,rdb是二进制，所以很小，有写入的话还是继续append追加到文件原始命令，等下次文件过大的时候再次rewrite</p>
<p>默认是开启状态<br>AOF日志↓↓↓↓ <br>新增x1:v1 <br>覆盖x1:v2 <br>覆盖x1:v3 <br>覆盖x1:v4 <br>删除x1 <br>新增x1:v5 <br>新增x2:v6 <br>混合模式Rewrite以后<br>RDB部分(二进制压缩表达): <br>x1:v5 <br>x2:v6 <br>========================= <br>AOF日志:↓↓↓ <br>新增x3:v7 </p>
<p>● 好处</p>
<ul>
<li>混合持久化结合了RDB持久化和AOF持久化的优点,采取了rdb的文件小易于灾难恢复，同时结合AOF，增量的数据以AOF方式保存了，数据更少的丢失坏处</li>
<li>前部分是RDB格式，是二进制，所以阅读性较差<br>● 数据恢复</li>
<li>先看是否存在aof文件，若存在则先按照aof文件恢复，aof比rdb全，且aof文件也rewrite成rdb二进制格式</li>
<li>若aof不存在，则才会查找rdb是否存在</li>
</ul>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>消息队列与RabbitMQ</title>
    <url>/2021/07/01/RabbitMQ/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E4%B8%8ERabbitMQ/</url>
    <content><![CDATA[<h3 id="消息队列简介"><a href="#消息队列简介" class="headerlink" title="消息队列简介"></a>消息队列简介</h3><p>消息队列（Message Queue，简称MQ）是一种用于在分布式系统中传递消息的中间件技术。它通过异步通信的方式，将消息的生产者和消费者解耦，使得系统之间的交互更加灵活和高效。消息队列的核心思想是：生产者将消息发送到队列中，消费者从队列中获取并处理消息，而无需直接与对方进行实时交互。</p>
<p><img src="/images/RabbitMQ/20210701-1.png" alt="image-20210701-1"></p>
<p>消息队列的特点</p>
<ol>
<li>异步通信：生产者和消费者不需要同时在线，消息可以被暂时存储。</li>
<li>解耦：生产者和消费者之间没有直接依赖关系，降低了系统的耦合性。</li>
<li>削峰填谷：在高并发场景下，消息队列可以缓冲请求，避免系统过载。</li>
<li>可靠性：支持消息持久化、重试机制等，确保消息不会丢失。</li>
<li>扩展性：可以通过增加消费者来提高系统的处理能力。</li>
</ol>
<p>消息队列的应用场景</p>
<ol>
<li>异步处理<br>例如用户注册后发送欢迎邮件或短信，这些操作不需要实时完成，可以通过消息队列异步处理。</li>
<li>应用解耦<br>不同服务之间通过消息队列进行通信，减少直接调用的依赖。</li>
<li>流量削峰<br>在秒杀、抢购等高并发场景中，消息队列可以平滑处理瞬间涌入的大量请求。</li>
<li>日志处理<br>收集系统日志并发送到消息队列，后续由消费者进行分析和存储。</li>
<li>分布式事务<br>在分布式系统中，通过消息队列实现最终一致性。</li>
</ol>
<h3 id="RabbitMQ关键概念"><a href="#RabbitMQ关键概念" class="headerlink" title="RabbitMQ关键概念"></a>RabbitMQ关键概念</h3><p>RabbitMQ是开源消息队列中间件，遵循AMQP协议。它功能强大,支持多种消息模式，如点对点、发布-订阅等。具备高可用、可扩展特性，在分布式系统中实现高效异步通信，广泛用于Web应用、微服务等场景。<br><a href="https://www.rabbitmq.com/">https://www.rabbitmq.com/</a><br>RabbitMQ的关键概念<br>RabbitMQ 是一个开源的消息代理（Message Broker），它实现了高级消息队列协议（AMQP）。以下是 RabbitMQ 的关键概念：</p>
<ol>
<li>Producer（生产者）<br>生产者是发送消息的应用程序。它将消息发送到 RabbitMQ 的交换器（Exchange）。</li>
<li>Consumer（消费者）<br>消费者是接收消息的应用程序。它从队列中获取消息并进行处理。</li>
<li>Queue（队列）<br>队列是存储消息的缓冲区。消息被生产者发送到交换器后，最终会被路由到一个或多个队列中。</li>
<li>Exchange（交换器）<br>交换器负责接收生产者发送的消息，并根据绑定规则将消息路由到一个或多个队列。常见的交换器类型包括：<br>○ Direct Exchange：根据路由键（Routing Key）精确匹配。<br>○ Fanout Exchange：广播消息到所有绑定的队列。<br>○ Topic Exchange：根据模式匹配路由键。<br>○ Headers Exchange：根据消息头属性进行匹配。</li>
<li>Binding（绑定）<br>绑定是交换器和队列之间的连接规则。它定义了消息如何从交换器路由到队列。</li>
<li>Routing Key（路由键）<br>路由键是生产者发送消息时附带的一个键值，交换器根据路由键和绑定规则决定消息的去向。</li>
<li>Message（消息）<br>消息是生产者发送的数据单元，包含有效载荷（Payload）和可选的元数据（如路由键、消息头等）。</li>
<li>Broker（代理）<br>RabbitMQ 本身就是一个消息代理，负责接收、存储和分发消息。</li>
<li>Virtual Host（虚拟主机）<br>虚拟主机是对 RabbitMQ 的逻辑隔离，允许在同一物理实例上运行多个独立的消息环境。</li>
</ol>
<p>执行流程图</p>
<p><img src="/images/RabbitMQ/20210701-2.png" alt="image-20210701-2"></p>
<p>流程说明</p>
<ol>
<li>Producer 发送消息<br>生产者将消息发送到 RabbitMQ 的交换器（Exchange），并附带一个路由键（Routing Key）。</li>
<li>Exchange 路由消息<br>交换器根据路由键和绑定规则（Binding Rules）决定消息的去向。</li>
<li>消息进入 Queue<br>消息被路由到一个或多个队列（Queue）中。</li>
<li>Consumer 消费消息<br>消费者从队列中获取消息并进行处理。</li>
<li>RabbitMQ Broker 的作用<br>RabbitMQ 作为消息代理，负责管理交换器、队列和绑定规则，并确保消息的可靠传递。</li>
</ol>
]]></content>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ4革命性变化</title>
    <url>/2021/07/01/RabbitMQ/RabbitMQ4%E9%9D%A9%E5%91%BD%E6%80%A7%E5%8F%98%E5%8C%96/</url>
    <content><![CDATA[<h3 id="RabbitMQ4"><a href="#RabbitMQ4" class="headerlink" title="RabbitMQ4"></a>RabbitMQ4</h3><p><a href="https://www.rabbitmq.com/docs/whats-new">https://www.rabbitmq.com/docs/whats-new</a></p>
<p><img src="/images/RabbitMQ/20210701-3.png" alt="image-20210701-3"></p>
<h3 id="引入RabbitMQ-4：关键更新与性能提升"><a href="#引入RabbitMQ-4：关键更新与性能提升" class="headerlink" title="引入RabbitMQ 4：关键更新与性能提升"></a>引入RabbitMQ 4：关键更新与性能提升</h3><p><img src="/images/RabbitMQ/20210701-4.png" alt="image-20210701-4"></p>
<p>RabbitMQ作为一款广泛应用于分布式系统中的消息中间件，自发布以来便以其高性能、可靠性和灵活性而闻名。随着技术的不断演进和业务需求的日益复杂化，RabbitMQ团队推出了其最新版本——RabbitMQ 4。这一版本不仅延续了以往的核心优势，还在多个方面进行了显著的改进，以更好地满足现代企业对消息传递系统的需求。<br>RabbitMQ 4的发布标志着该平台在功能扩展和性能优化方面的又一次飞跃。从架构层面来看，新版本引入了多项关键技术，如Quorum队列和Streams，这些特性极大地提升了系统的可靠性、可扩展性和吞吐能力。此外，针对开发者体验的优化也成为了此次更新的重要亮点之一，包括更友好的API设计和更丰富的管理工具支持。无论是处理大规模数据流，还是构建高可用的消息传递基础设施，RabbitMQ 4都展现出了强大的适应性。</p>
<h3 id="Quorum队列：增强消息传递的可靠性与一致性"><a href="#Quorum队列：增强消息传递的可靠性与一致性" class="headerlink" title="Quorum队列：增强消息传递的可靠性与一致性"></a>Quorum队列：增强消息传递的可靠性与一致性</h3><p><img src="/images/RabbitMQ/20210701-5.png" alt="image-20210701-5"></p>
<p>RabbitMQ 4引入了Quorum队列（Quorum Queues），这是一种全新的队列类型，旨在解决传统经典队列在高并发和分布式环境中的局限性。与经典队列不同，Quorum队列采用基于Raft共识算法的设计，能够在分布式节点之间实现强一致性和高可用性。这种特性使其特别适用于对消息可靠性要求极高的场景，例如金融交易系统或订单处理平台。<br>Quorum队列的核心工作原理在于其分布式存储机制。每个队列的数据会被复制到多个节点上，形成一个逻辑上的“仲裁组”（Quorum Group）。当生产者向队列发送消息时，消息需要被大多数节点确认后才会被视为成功写入。这种机制确保了即使部分节点发生故障，队列仍能保持可用性，并且不会丢失任何已提交的消息。相比之下，经典队列虽然提供了快速的本地存储，但在节点故障或网络分区的情况下容易出现消息丢失或不一致的问题。<br>Quorum队列的优势主要体现在以下几个方面。首先，它提供了更高的容错能力。由于数据被分布在多个节点上，单个节点的失效不会影响整个队列的运行。其次，Quorum队列支持自动化的领导者选举机制，能够在主节点崩溃时迅速切换到备用节点，从而减少服务中断时间。最后，Quorum队列的强一致性保证了生产者和消费者之间的数据同步，避免了因消息乱序或重复而导致的业务逻辑错误。<br>然而，Quorum队列也有一定的局限性。由于其基于Raft算法的设计，写入操作需要经过多数节点的确认，因此在高吞吐量场景下可能会引入额外的延迟。此外，维护多个副本会增加存储成本和网络开销，这在资源受限的环境中可能成为一个挑战。尽管如此，Quorum队列仍然是对经典队列的一种重要补充，尤其适合那些优先考虑消息可靠性和系统稳定性的应用。</p>
<h3 id="与经典队列区别"><a href="#与经典队列区别" class="headerlink" title="与经典队列区别"></a>与经典队列区别</h3><p><a href="https://www.rabbitmq.com/docs/quorum-queues#feature-comparison">https://www.rabbitmq.com/docs/quorum-queues#feature-comparison</a></p>
<p><img src="/images/RabbitMQ/20210701-6.png" alt="image-20210701-6"></p>
<h3 id="Streams：高效处理大规模数据流的核心特性"><a href="#Streams：高效处理大规模数据流的核心特性" class="headerlink" title="Streams：高效处理大规模数据流的核心特性"></a>Streams：高效处理大规模数据流的核心特性</h3><p><img src="/images/RabbitMQ/20210701-7.png" alt="image-20210701-7"></p>
<p>RabbitMQ 4还引入了一种全新的队列类型——Streams（流队列），专为支持高吞吐量的大规模数据流传输而设计。与传统的Quorum队列相比，Streams采用了完全不同的架构和设计理念，其目标是提供一种更适合持续数据处理场景的消息传递解决方案。<br>Streams的工作机制基于日志结构（Log-based Structure），类似于Kafka等分布式流处理平台的设计理念。在这种模式下，所有消息按顺序追加到一个不可变的日志中，消费者可以根据自己的进度独立读取消息，而无需与其他消费者共享状态。这种设计使得Streams能够轻松支持多个消费者组（Consumer Groups）同时订阅同一个队列，每个组都可以独立处理数据，而不会相互干扰。此外，Streams还支持无限追加数据的能力，这意味着队列可以持续增长，而不会受到固定容量的限制。<br>与Quorum队列相比，Streams在性能和扩展性方面表现出明显的优势。首先，由于其日志结构的设计，Streams的写入操作具有极高的效率，因为消息只需追加到日志末尾即可完成写入，而不需要像Quorum队列那样进行复杂的跨节点共识协商。这使得Streams在高吞吐量场景下表现尤为出色，例如实时数据分析、事件驱动架构或物联网设备数据采集等场景。其次，Streams的消费模式更加灵活，允许消费者以异步的方式按需读取数据，而不必担心消息的丢失或重复问题。<br>然而，Streams也并非适用于所有场景。由于其日志结构的特点，Streams并不提供强一致性保证，而是采用“至少一次交付”（At-Least-Once Delivery）语义。这意味着在某些极端情况下，消费者可能会接收到重复的消息，这对于需要精确一次处理（Exactly-Once Processing）的应用来说可能是一个限制。此外，Streams的设计更适合处理持续流入的数据流，而对于需要随机访问或频繁更新消息内容的场景，则可能不如Quorum队列合适。<br>总的来说，Streams通过其高效的日志结构和灵活的消费模式，为RabbitMQ 4带来了强大的流处理能力。它与Quorum队列形成了良好的互补关系，使RabbitMQ能够在不同的业务需求下提供多样化的解决方案。</p>
<h3 id="应用场景与实际案例：Quorum队列与Streams的实践价值"><a href="#应用场景与实际案例：Quorum队列与Streams的实践价值" class="headerlink" title="应用场景与实际案例：Quorum队列与Streams的实践价值"></a>应用场景与实际案例：Quorum队列与Streams的实践价值</h3><p>为了更好地理解Quorum队列和Streams在实际业务场景中的应用价值，我们可以结合几个具体案例来分析它们如何满足不同企业的需求。这些案例涵盖了从金融交易到物联网数据处理的多种领域，展示了RabbitMQ 4新特性的广泛适用性。</p>
<ol>
<li>金融交易系统中的Quorum队列<br>在某大型银行的支付网关系统中，消息传递的可靠性至关重要。传统经典队列在高并发场景下偶尔会出现消息丢失的问题，这可能导致交易失败或数据不一致。通过引入Quorum队列，该银行实现了更高的消息可靠性和系统稳定性。Quorum队列的强一致性保证了每笔交易都能被准确记录并分发到下游处理模块，即使在节点故障或网络分区的情况下也不会丢失任何交易数据。此外，Quorum队列的自动领导者选举机制显著减少了系统恢复时间，确保支付网关能够快速恢复正常运行。</li>
<li>实时广告投放平台中的Streams<br>一家在线广告技术公司使用RabbitMQ 4的Streams来处理每天数亿条的用户行为数据。这些数据包括用户的点击、浏览和购买行为，需要实时分析以优化广告投放策略。Streams的高吞吐量和日志结构设计非常适合这种持续流入的数据流场景。该公司通过Streams实现了低延迟的数据传输，并利用多消费者组的功能，将数据分别分发给不同的分析模块，例如用户画像生成、实时竞价引擎和效果监控系统。相比于传统的Quorum队列，Streams的写入效率更高，且能够轻松扩展以应对流量高峰。</li>
<li>物联网设备数据采集中的混合使用<br>某智能家居厂商部署了数千台物联网设备，用于收集家庭环境数据（如温度、湿度和空气质量）。这些设备产生的数据量巨大且具有连续性，但同时也需要确保关键控制命令的可靠性。为此，该厂商在RabbitMQ 4中同时使用了Quorum队列和Streams。对于传感器数据的上传，他们选择了Streams，以充分利用其高吞吐量和无限追加能力；而对于设备控制指令的下发，则采用了Quorum队列，以确保命令的强一致性和可靠性。这种混合使用方式既满足了大数据处理的需求，又保障了关键业务操作的安全性。</li>
<li>电子商务订单处理系统中的容错能力<br>一家电商平台的订单处理系统需要处理来自全球用户的大量订单请求。在高峰期，订单消息的积压和节点故障曾导致系统性能下降甚至短暂不可用。通过部署Quorum队列，该平台显著提升了系统的容错能力。即使某个数据中心发生故障，订单消息仍然可以通过其他节点继续处理，而不会造成数据丢失或服务中断。此外，Quorum队列的分布式存储机制帮助平台降低了单一节点的压力，从而提高了整体系统的稳定性。</li>
</ol>
]]></content>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ与AMQP</title>
    <url>/2021/07/01/RabbitMQ/RabbitMQ%E4%B8%8EAMQP/</url>
    <content><![CDATA[<h3 id="AMQP是什么"><a href="#AMQP是什么" class="headerlink" title="AMQP是什么"></a>AMQP是什么</h3><p>AMQP（Advanced Message Queuing Protocol，高级消息队列协议）是一个开放标准的应用层协议，用于在分布式系统中实现消息中间件通信。它定义了消息的格式、传输规则以及消息代理（Broker）的行为，确保不同厂商的消息系统可以互操作。</p>
<h3 id="AMQP-与-RabbitMQ-的关系"><a href="#AMQP-与-RabbitMQ-的关系" class="headerlink" title="AMQP 与 RabbitMQ 的关系"></a>AMQP 与 RabbitMQ 的关系</h3><p>● RabbitMQ 是一个开源的消息代理软件，实现了 AMQP 0.9.1 协议，并扩展支持其他协议（如 MQTT、STOMP）。<br>● RabbitMQ 是最早广泛支持 AMQP 的消息队列系统之一，因此常被视为 AMQP 的参考实现。<br>● 虽然 RabbitMQ 3.x 基于 AMQP 0.9.1，4.x全面支持 AMQP 1.0（但非默认）。</p>
<h3 id="AMQP-0-9-与-1-0-的主要变化"><a href="#AMQP-0-9-与-1-0-的主要变化" class="headerlink" title="AMQP 0.9 与 1.0 的主要变化"></a>AMQP 0.9 与 1.0 的主要变化</h3><p>AMQP 1.0 是 OASIS 标准化的版本，与 0.9.1 有显著差异，几乎不兼容：</p>
<p><img src="/images/RabbitMQ/20210701-8.png" alt="image-20210701-8"></p>
<h3 id="关键区别示例："><a href="#关键区别示例：" class="headerlink" title="关键区别示例："></a>关键区别示例：</h3><ol>
<li>Exchange/Queue 模型：<br>○ AMQP 0.9.1 要求消息必须通过 Exchange 路由到 Queue。<br>○ AMQP 1.0 取消了这一限制，消息可以直接发送到任意端点（Node）。</li>
<li>协议兼容性：<br>○ RabbitMQ 默认支持 0.9.1，需通过插件启用 1.0。<br>○ ActiveMQ Artemis 等代理原生支持 AMQP 1.0。<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>● AMQP 0.9.1 更贴近传统消息队列（如 RabbitMQ 的实现），适合需要复杂路由的场景。<br>● AMQP 1.0 更通用，适合跨平台、跨协议集成，但失去了部分 0.9.1 的高级特性（如内置 Exchange 类型）。</li>
</ol>
]]></content>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ六种队列模式</title>
    <url>/2021/07/02/RabbitMQ/RabbitMQ%E5%85%AD%E7%A7%8D%E9%98%9F%E5%88%97%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p><img src="/images/RabbitMQ/20210702-1.png" alt="image-20210702-1"></p>
<ol>
<li><p>简单队列模式（Simple Queue）<br>● 特点：单生产者 → 单队列 → 单消费者，直接绑定默认交换机。<br>● 流程：生产者发送消息到指定队列，消费者监听该队列消费。<br>● 场景：基础入门场景，如单任务处理。<br>● 缺点：不支持多消费者负载均衡，队列需提前创建。</p>
</li>
<li><p>工作队列模式（Work Queue / Task Queue）<br>● 特点：单生产者 → 单队列 → 多消费者竞争消费，默认轮询分发（公平分发需配置prefetch）。<br>● 核心机制：消费者通过basic.qos设置预取数量，避免消息堆积不均。<br>● 场景：异步任务处理（如邮件发送、文件处理），横向扩展消费者提升吞吐量。</p>
</li>
<li><p>发布订阅模式（Publish/Subscribe）<br>● 特点：生产者 → Fanout交换机 → 绑定多个队列 → 每个队列独立消费者。<br>● 路由规则：Fanout交换机会将消息广播到所有绑定的队列，无视路由键。<br>● 场景：事件广播（如系统通知、日志采集到多终端）。</p>
</li>
<li><p>路由模式（Routing）<br>● 特点：生产者 → Direct交换机 → 根据精确路由键匹配队列。<br>● 绑定方式：队列绑定交换机时指定路由键（如error、info）。<br>● 场景：按消息类型分类处理（如将错误日志单独存储，普通日志丢弃）。</p>
</li>
<li><p>主题模式（Topics）<br>● 特点：生产者 → Topic交换机 → 基于通配符路由键（<em>匹配单词，#匹配多级）灵活过滤。<br>● 示例：路由键stock.usd.nyse可匹配</em>.usd.*或stock.#。<br>● 场景：复杂消息分类（如根据不同维度处理订单：支付成功、物流状态等）</p>
</li>
<li><p>RPC 模式（Remote Procedure Call）<br>● 特点：双向通信，通过临时回调队列实现请求-响应机制。<br>● 流程：<br>a. 客户端发送请求消息，附带reply_to（回调队列）和correlation_id（请求标识）。<br>b. 服务端处理请求后，将结果发送到指定回调队列。<br>c. 客户端监听回调队列，通过correlation_id匹配响应。<br>● 场景：分布式系统间的同步调用（如订单支付状态查询）。</p>
</li>
</ol>
<h3 id="模式选择指南"><a href="#模式选择指南" class="headerlink" title="模式选择指南"></a>模式选择指南</h3><p>● 简单任务分发：工作队列模式（多消费者负载均衡）。<br>● 事件广播：发布订阅模式（Fanout交换机）。<br>● 按类型过滤：路由模式（Direct交换机）或主题模式（Topic交换机，更灵活）。<br>● 同步调用需求：RPC模式（注意性能开销）。</p>
<h3 id="RabbitMQ的工作队列模式"><a href="#RabbitMQ的工作队列模式" class="headerlink" title="RabbitMQ的工作队列模式"></a>RabbitMQ的工作队列模式</h3><p>工作队列模式（Work Queue Pattern），也称为任务队列模式，是RabbitMQ中最常见的消息传递模式之一。在这种模式下，生产者将任务发送到队列中，而多个消费者从队列中获取任务并处理。每个任务只会被一个消费者处理，从而实现任务的负载均衡。</p>
<p>● 核心特点</p>
<ol>
<li>任务分发：任务由生产者发送到队列中，多个消费者竞争从队列中获取任务。</li>
<li>公平分发：默认情况下，RabbitMQ会以轮询的方式将消息分发给消费者。</li>
<li>任务确认机制：消费者在完成任务后需要向RabbitMQ发送确认（ACK），以确保任务不会丢失。</li>
<li>持久化支持：可以配置消息和队列的持久化，防止因服务重启导致任务丢失。</li>
</ol>
<p>● 应用场景</p>
<ol>
<li>任务分发：适用于需要将大量任务分发给多个工作节点进行处理的场景，例如批量数据处理、日志分析等。</li>
<li>负载均衡：通过多个消费者处理任务，避免单个消费者过载。</li>
<li>异步任务处理：将耗时任务放入队列中，由后台消费者异步处理，提升系统响应速度。</li>
<li>可靠性保障：通过消息确认机制和持久化配置，确保任务不会因系统故障而丢失。</li>
</ol>
<h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p><img src="/images/RabbitMQ/20210702-2.png" alt="image-20210702-2"></p>
<h3 id="流程说明"><a href="#流程说明" class="headerlink" title="流程说明"></a>流程说明</h3><ol>
<li>生产者将任务发送到任务队列中。</li>
<li>任务队列中的任务会被分发给多个消费者（Consumer1、Consumer2、Consumer3）。</li>
<li>每个消费者从队列中获取任务并进行处理。</li>
<li>消费者完成任务后，向RabbitMQ发送确认消息（ACK）。</li>
<li>RabbitMQ收到确认后，将任务从队列中移除。</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>工作队列模式是一种简单而强大的消息传递模式，能够有效解决任务分发和负载均衡问题。通过合理配置消息确认和持久化机制，可以确保系统的可靠性和稳定性。上述流程图清晰地展示了工作队列模式的核心流程，便于理解和实现。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="line">         xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.lixiang&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;ex00100&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;maven.compiler.source&gt;21&lt;/maven.compiler.source&gt;</span><br><span class="line">        &lt;maven.compiler.target&gt;21&lt;/maven.compiler.target&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!-- 添加RabbitMQ Java客户端 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.rabbitmq&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;amqp-client&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.20.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- 新增Lombok依赖 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.18.30&lt;/version&gt;</span><br><span class="line">            &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;gson&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.10&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.4.14&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.0.12&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitConstant</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_SMS = <span class="string">&quot;sms&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> lombok.SneakyThrows;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RabbitUtils 类用于创建和管理 RabbitMQ 的连接。</span></span><br><span class="line"><span class="comment"> * 该类使用静态代码块初始化连接工厂，并提供一个静态方法来获取 RabbitMQ 连接。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态的 ConnectionFactory 实例，用于创建 RabbitMQ 连接。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 设置 RabbitMQ 服务器的主机地址</span></span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;192.168.31.230&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置 RabbitMQ 服务器的端口号，5672 是 RabbitMQ 的默认端口号</span></span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        <span class="comment">// 设置连接 RabbitMQ 服务器的用户名</span></span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置连接 RabbitMQ 服务器的密码</span></span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置连接 RabbitMQ 服务器的虚拟主机</span></span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;my_vhost&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 RabbitMQ 的连接。</span></span><br><span class="line"><span class="comment">     * 该方法使用静态初始化的 ConnectionFactory 创建一个新的连接。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 一个 RabbitMQ 的连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 如果在创建连接过程中发生错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用 ConnectionFactory 创建一个新的连接</span></span><br><span class="line">        Connection conn = connectionFactory.newConnection();</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SMS</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String mobile;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.entity.SMS;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitConstant;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitUtils;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * OrderSystem 类用于模拟订单系统，将 SMS 消息发送到 RabbitMQ 队列。</span></span><br><span class="line"><span class="comment"> * 该类创建与 RabbitMQ 的连接，声明队列，并将 SMS 消息转换为 JSON 格式后发送到队列。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderSystem</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">/* </span></span><br><span class="line"><span class="comment">         * ### 1. 连接（Connection）</span></span><br><span class="line"><span class="comment">        Connection 代表了应用程序与RabbitMQ服务器之间的物理TCP连接。当你使用 RabbitUtils.getConnection() 方法时，实际上是在建立一个到RabbitMQ服务器的网络连接。这个连接是一个相对较重的资源，因为它涉及到网络套接字的创建、TCP握手等操作。在一个应用程序中，通常只需要创建一个 Connection 实例，并且在整个应用程序的生命周期内复用它。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        ### 2. 通道（Channel）</span></span><br><span class="line"><span class="comment">        Channel 是建立在 Connection 之上的轻量级抽象。它可以看作是一个虚拟连接，允许应用程序在同一个 Connection 上进行多个独立的操作。每个 Channel 都有自己独立的ID和状态，并且可以独立地进行消息的发送和接收。由于创建和销毁 Channel 的开销相对较小，因此在需要进行大量并发操作时，可以创建多个 Channel 来提高效率。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">try</span> (Connection connection = RabbitUtils.getConnection();</span><br><span class="line">                Channel channel = connection.createChannel();) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 声明消息队列（参数说明：队列名称，持久化，排他性，自动删除，其他参数）</span></span><br><span class="line">            <span class="comment">// durable=true 表示队列持久化（服务重启后队列不会消失）</span></span><br><span class="line">            <span class="comment">// exclusive=false 表示非排他队列（允许多消费者连接）</span></span><br><span class="line">            <span class="comment">// autoDelete=false 表示不会自动删除（没有消费者也不会删除队列）</span></span><br><span class="line">            channel.queueDeclare(RabbitConstant.QUEUE_SMS, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 循环发送 100 到 200 条 SMS 消息</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">100</span>; i &lt;= <span class="number">200</span>; i++) &#123;</span><br><span class="line">                <span class="comment">// 创建一个 SMS 对象</span></span><br><span class="line">                SMS sms = <span class="keyword">new</span> SMS(<span class="string">&quot;乘客&quot;</span> + i, <span class="string">&quot;13900000&quot;</span> + i, <span class="string">&quot;您的车票已预订成功&quot;</span>);</span><br><span class="line">                <span class="comment">// 将 SMS 对象转换为 JSON 字符串</span></span><br><span class="line">                String jsonSMS = <span class="keyword">new</span> Gson().toJson(sms);</span><br><span class="line">                <span class="comment">// 发送 JSON 格式的 SMS 消息到 RabbitMQ 队列</span></span><br><span class="line">                channel.basicPublish(<span class="string">&quot;&quot;</span>, RabbitConstant.QUEUE_SMS, <span class="keyword">null</span>, jsonSMS.getBytes());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 记录日志，表示订单信息已成功投递到 Broker</span></span><br><span class="line">            log.info(<span class="string">&quot;订单信息已投递至Broker&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitConstant;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitUtils;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SMSSender 类用于从 RabbitMQ 队列中消费短信消息，并模拟短信发送操作。</span></span><br><span class="line"><span class="comment"> * 该类通过 RabbitMQ 客户端连接到指定队列，接收消息并进行处理。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsSender</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 通过 RabbitUtils 工具类获取与 RabbitMQ 的连接</span></span><br><span class="line">        Connection connection = RabbitUtils.getConnection();</span><br><span class="line">        <span class="comment">// 创建一个新的通道</span></span><br><span class="line">        <span class="keyword">final</span> Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明一个队列，如果队列不存在则创建</span></span><br><span class="line">        channel.queueDeclare(RabbitConstant.QUEUE_SMS, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 设置 QoS，确保每次只处理一条消息，避免消费者过载</span></span><br><span class="line">        channel.basicQos(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 开始消费队列中的消息</span></span><br><span class="line">        channel.basicConsume(RabbitConstant.QUEUE_SMS, <span class="keyword">false</span>, <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 处理接收到的消息。</span></span><br><span class="line"><span class="comment">             * 当从队列中接收到消息时，将消息转换为字符串并记录日志，模拟短信发送操作，</span></span><br><span class="line"><span class="comment">             * 然后手动确认消息已处理。</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> consumerTag 消费者标签，用于标识消费者。</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> envelope    消息信封，包含消息的元数据。</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> properties  消息的属性。</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> body        消息的字节数组内容。</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@throws</span> IOException 如果在处理消息过程中发生 I/O 错误。</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">// 将接收到的字节数组消息转换为字符串</span></span><br><span class="line">                String jsonSMS = <span class="keyword">new</span> String(body);</span><br><span class="line">                <span class="comment">// 记录日志，表示短信发送成功</span></span><br><span class="line">                log.info(<span class="string">&quot;SMSSender-短信发送成功:&#123;&#125;&quot;</span>, jsonSMS);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 模拟短信发送的耗时操作</span></span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="comment">// 打印异常堆栈信息</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 手动确认消息已处理，通知 RabbitMQ 可以从队列中移除该消息</span></span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ发布订阅模式(广播)</title>
    <url>/2021/07/02/RabbitMQ/RabbitMQ%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="RabbitMQ-发布订阅（Fanout）模式介绍"><a href="#RabbitMQ-发布订阅（Fanout）模式介绍" class="headerlink" title="RabbitMQ 发布订阅（Fanout）模式介绍"></a>RabbitMQ 发布订阅（Fanout）模式介绍</h3><p>发布订阅（Fanout）模式是RabbitMQ中的一种消息传递模式，属于交换机（Exchange）类型之一。在这种模式下，生产者将消息发送到一个Fanout类型的交换机，交换机会将消息广播到所有绑定到该交换机的队列中，而无需关心路由键（Routing Key）。每个消费者都可以从自己的队列中接收消息。<br>这种模式的特点是消息广播，即所有绑定到交换机的队列都会收到相同的消息副本。</p>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ol>
<li>日志系统：<br>生产者生成日志消息，不同的消费者（如日志存储服务、监控服务等）可以同时接收这些日志消息并进行处理。</li>
<li>实时通知系统：<br>例如，用户在某个平台发布动态后，需要将动态推送给所有关注者。Fanout模式可以确保所有关注者的队列都能接收到消息。</li>
<li>广播消息：<br>需要将某些全局配置更新或事件通知广播到所有相关服务时，Fanout模式非常适合。</li>
</ol>
<h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p><img src="/images/RabbitMQ/20210702-3.png" alt="image-20210702-3"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Fanout模式的核心在于广播机制，适用于需要将消息同时分发给多个消费者的场景。通过RabbitMQ的交换机和队列机制，可以轻松实现高效的消息广播功能。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> lombok.SneakyThrows;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RabbitUtils 类用于创建和管理 RabbitMQ 的连接。</span></span><br><span class="line"><span class="comment"> * 该类使用静态代码块初始化连接工厂，并提供一个静态方法来获取 RabbitMQ 连接。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态的 ConnectionFactory 实例，用于创建 RabbitMQ 连接。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 设置 RabbitMQ 服务器的主机地址</span></span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;192.168.31.230&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置 RabbitMQ 服务器的端口号，5672 是 RabbitMQ 的默认端口号</span></span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        <span class="comment">// 设置连接 RabbitMQ 服务器的用户名</span></span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置连接 RabbitMQ 服务器的密码</span></span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置连接 RabbitMQ 服务器的虚拟主机</span></span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;my_vhost&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 RabbitMQ 的连接。</span></span><br><span class="line"><span class="comment">     * 该方法使用静态初始化的 ConnectionFactory 创建一个新的连接。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 一个 RabbitMQ 的连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 如果在创建连接过程中发生错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用 ConnectionFactory 创建一个新的连接</span></span><br><span class="line">        Connection conn = connectionFactory.newConnection();</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitConstant</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_BAIDU = <span class="string">&quot;baidu&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_SINA = <span class="string">&quot;sina&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_WEATHER_FANOUT = <span class="string">&quot;weather.fanout&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitConstant;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitUtils;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.SneakyThrows;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherBureau</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Connection connection = RabbitUtils.getConnection();</span><br><span class="line">                Channel channel = connection.createChannel();) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 声明一个交换机，使用 RabbitMQ 通道的 exchangeDeclare 方法。</span></span><br><span class="line">            <span class="comment">// 参数解释：</span></span><br><span class="line">            <span class="comment">// 1. RabbitConstant.EXCHANGE_WEATHER：交换机的名称，由常量类 RabbitConstant 定义，用于后续消息的发布和路由。</span></span><br><span class="line">            <span class="comment">// 2. &quot;fanout&quot;：交换机的类型，这里是扇形（fanout）类型，这种类型会将接收到的消息广播到所有与之绑定的队列中。</span></span><br><span class="line">            <span class="comment">// 3. true：表示该交换机是持久化的，即 RabbitMQ 服务器重启后，交换机不会丢失。</span></span><br><span class="line">            channel.exchangeDeclare(RabbitConstant.EXCHANGE_WEATHER_FANOUT, <span class="string">&quot;fanout&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 声明一个队列，使用 RabbitMQ 通道的 queueDeclare 方法。</span></span><br><span class="line">            <span class="comment">// 参数解释：</span></span><br><span class="line">            <span class="comment">// 1. RabbitConstant.QUEUE_BAIDU：队列的名称，由常量类 RabbitConstant 定义，用于存储接收到的消息。</span></span><br><span class="line">            <span class="comment">// 2. true：表示该队列是持久化的，即 RabbitMQ 服务器重启后，队列不会丢失，队列中的消息也会保留。</span></span><br><span class="line">            <span class="comment">// 3. false：表示该队列不是排他性的，即多个连接可以同时访问该队列。</span></span><br><span class="line">            <span class="comment">// 4. false：表示该队列在不再使用时不会自动删除。</span></span><br><span class="line">            <span class="comment">// 5. null：表示不使用额外的队列参数。</span></span><br><span class="line">            channel.queueDeclare(RabbitConstant.QUEUE_BAIDU, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将队列绑定到交换机上，使用 RabbitMQ 通道的 queueBind 方法。</span></span><br><span class="line">            <span class="comment">// 参数解释：</span></span><br><span class="line">            <span class="comment">// 1. RabbitConstant.QUEUE_BAIDU：要绑定的队列名称，由常量类 RabbitConstant 定义。</span></span><br><span class="line">            <span class="comment">// 2. RabbitConstant.EXCHANGE_WEATHER：要绑定到的交换机名称，由常量类 RabbitConstant 定义。</span></span><br><span class="line">            <span class="comment">// 3. &quot;&quot;：绑定键，在扇形交换机中，绑定键会被忽略，因为扇形交换机会将消息广播到所有绑定的队列。</span></span><br><span class="line">            channel.queueBind(RabbitConstant.QUEUE_BAIDU, RabbitConstant.EXCHANGE_WEATHER_FANOUT, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">            channel.queueDeclare(RabbitConstant.QUEUE_SINA, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">            channel.queueBind(RabbitConstant.QUEUE_SINA, RabbitConstant.EXCHANGE_WEATHER_FANOUT, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">            Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">            String[] cities = &#123; <span class="string">&quot;Beijing&quot;</span>, <span class="string">&quot;New York&quot;</span>, <span class="string">&quot;Tokyo&quot;</span>, <span class="string">&quot;Paris&quot;</span>, <span class="string">&quot;London&quot;</span> &#125;;</span><br><span class="line">            String[] countries = &#123; <span class="string">&quot;China&quot;</span>, <span class="string">&quot;USA&quot;</span>, <span class="string">&quot;Japan&quot;</span>, <span class="string">&quot;France&quot;</span>, <span class="string">&quot;UK&quot;</span> &#125;;</span><br><span class="line">            String[] weathers = &#123; <span class="string">&quot;Sunny&quot;</span>, <span class="string">&quot;Rainy&quot;</span>, <span class="string">&quot;Cloudy&quot;</span>, <span class="string">&quot;Snowy&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                String weather = weathers[random.nextInt(weathers.length)];</span><br><span class="line">                <span class="comment">// 根据天气类型生成合理温度</span></span><br><span class="line">                <span class="keyword">int</span> maxTemp, minTemp;</span><br><span class="line">                <span class="keyword">switch</span> (weather) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;Sunny&quot;</span>:</span><br><span class="line">                        maxTemp = random.nextInt(<span class="number">11</span>) + <span class="number">25</span>; <span class="comment">// 25-35℃</span></span><br><span class="line">                        minTemp = maxTemp - <span class="number">10</span>; <span class="comment">// 日温差约10℃</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;Rainy&quot;</span>:</span><br><span class="line">                        maxTemp = random.nextInt(<span class="number">6</span>) + <span class="number">20</span>; <span class="comment">// 20-25℃</span></span><br><span class="line">                        minTemp = random.nextInt(<span class="number">10</span>) + <span class="number">10</span>; <span class="comment">// 10-20℃</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;Cloudy&quot;</span>:</span><br><span class="line">                        maxTemp = random.nextInt(<span class="number">9</span>) + <span class="number">20</span>; <span class="comment">// 20-28℃</span></span><br><span class="line">                        minTemp = random.nextInt(<span class="number">8</span>) + <span class="number">15</span>; <span class="comment">// 15-22℃</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>: <span class="comment">// Snowy</span></span><br><span class="line">                        maxTemp = random.nextInt(<span class="number">6</span>) - <span class="number">5</span>; <span class="comment">// -5~0℃</span></span><br><span class="line">                        minTemp = random.nextInt(<span class="number">6</span>) - <span class="number">10</span>; <span class="comment">// -10~-5℃</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> idx = random.nextInt(countries.length);</span><br><span class="line">                String json = String.format(</span><br><span class="line">                        <span class="string">&quot;&#123;\&quot;date\&quot;:\&quot;%s\&quot;, \&quot;country\&quot;:\&quot;%s\&quot;, \&quot;city\&quot;:\&quot;%s\&quot;, \&quot;weather\&quot;:\&quot;%s\&quot;, &quot;</span> +</span><br><span class="line">                                <span class="string">&quot;\&quot;minTemp\&quot;:%d, \&quot;maxTemp\&quot;:%d&#125;&quot;</span>,</span><br><span class="line">                        LocalDate.now(),</span><br><span class="line">                        countries[idx],</span><br><span class="line">                        cities[idx],</span><br><span class="line">                        weather,</span><br><span class="line">                        minTemp,</span><br><span class="line">                        maxTemp);</span><br><span class="line">                log.info(<span class="string">&quot;天气信息：&#123;&#125;&quot;</span>, json);</span><br><span class="line">                <span class="comment">// 调用 RabbitMQ 通道的 basicPublish 方法，将生成的天气预报 JSON 数据发送到指定的交换机。</span></span><br><span class="line">                <span class="comment">// 参数解释：</span></span><br><span class="line">                <span class="comment">// 1. RabbitConstant.EXCHANGE_WEATHER：指定要将消息发布到的交换机名称，由常量类 RabbitConstant 定义。</span></span><br><span class="line">                <span class="comment">// 2. &quot;&quot;：路由键，发布订阅模式不需要。</span></span><br><span class="line">                <span class="comment">// 3. null：消息的属性，传入 null 表示使用默认的消息属性。</span></span><br><span class="line">                <span class="comment">// 4. json.getBytes()：要发送的消息内容，将之前生成的 JSON 字符串转换为字节数组。</span></span><br><span class="line">                channel.basicPublish(RabbitConstant.EXCHANGE_WEATHER_FANOUT, <span class="string">&quot;&quot;</span>, <span class="keyword">null</span>, json.getBytes());</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitConstant;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitUtils;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sina</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Connection connection = RabbitUtils.getConnection();</span><br><span class="line">        <span class="keyword">final</span> Channel channel = connection.createChannel();</span><br><span class="line">        channel.basicQos(<span class="number">1</span>);</span><br><span class="line">        channel.basicConsume(RabbitConstant.QUEUE_SINA, <span class="keyword">false</span>, <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                log.info(<span class="string">&quot;新浪收到气象信息：&#123;&#125;&quot;</span>, <span class="keyword">new</span> String(body));</span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitConstant;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitUtils;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Baidu</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Connection connection = RabbitUtils.getConnection();</span><br><span class="line">        <span class="keyword">final</span> Channel channel = connection.createChannel();</span><br><span class="line">        channel.basicQos(<span class="number">1</span>);</span><br><span class="line">        channel.basicConsume(RabbitConstant.QUEUE_BAIDU, <span class="keyword">false</span>, <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                log.info(<span class="string">&quot;百度收到气象信息：&#123;&#125;&quot;</span>, <span class="keyword">new</span> String(body));</span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ路由模式与主题模式</title>
    <url>/2021/07/03/RabbitMQ/RabbitMQ%E8%B7%AF%E7%94%B1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E4%B8%BB%E9%A2%98%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="RabbitMQ-路由模式（Direct）介绍"><a href="#RabbitMQ-路由模式（Direct）介绍" class="headerlink" title="RabbitMQ 路由模式（Direct）介绍"></a>RabbitMQ 路由模式（Direct）介绍</h3><p>Direct模式是RabbitMQ中交换机（Exchange）的一种工作模式，通过精确匹配路由键（Routing Key）和绑定键（Binding Key），将消息路由到对应的队列。适用于需要根据特定规则精确分发消息的场景。</p>
<h3 id="核心原理"><a href="#核心原理" class="headerlink" title="核心原理"></a>核心原理</h3><ol>
<li>生产者发送消息时指定一个路由键。</li>
<li>Direct Exchange 将消息转发给所有绑定键（Binding Key）与路由键完全匹配的队列。</li>
<li>消费者监听特定队列，处理匹配的消息。</li>
</ol>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ol>
<li>日志分级处理<br>不同级别的日志（如 error、info）分发到不同队列，由消费者独立处理。</li>
<li>订单类型路由<br>根据订单类型（如 digital、physical）将消息路由到对应的业务处理服务。</li>
<li>消息分类通知<br>例如，将sms、email消息分发到不同的通知通道。</li>
</ol>
<p><img src="/images/RabbitMQ/20210703-1.png" alt="image-20210703-1"></p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>● 精确匹配：路由键和绑定键需完全一致。<br>● 多队列绑定：若多个队列绑定相同键（如两个队列均绑定error），消息会同时分发到这些队列（类似广播）。<br>● 性能：Direct模式效率高，适合需要精确控制的场景，但不支持通配符（需使用Topic模式）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitConstant;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitUtils;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.SneakyThrows;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherProducer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Connection connection = RabbitUtils.getConnection();</span><br><span class="line">                Channel channel = connection.createChannel();) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 声明一个直连交换机。</span></span><br><span class="line"><span class="comment">             * </span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> exchange 交换机的名称，使用常量类 RabbitConstant 中定义的 EXCHANGE_WEATHER_DIRECT。</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> type 交换机的类型，这里指定为 &quot;direct&quot;，表示直连交换机，根据路由键精确匹配队列。</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> durable 是否持久化，设置为 true 表示该交换机在 RabbitMQ 服务器重启后不会丢失。</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.exchangeDeclare(RabbitConstant.EXCHANGE_WEATHER_DIRECT, <span class="string">&quot;direct&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 声明一个队列，使用 RabbitMQ 通道的 queueDeclare 方法。</span></span><br><span class="line">            channel.queueDeclare(RabbitConstant.QUEUE_BAIDU, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 将队列绑定到交换机，并指定路由键。</span></span><br><span class="line"><span class="comment">             * </span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> queue 要绑定的队列名称，这里使用常量类 RabbitConstant 中定义的 QUEUE_BAIDU 队列。</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> exchange 要绑定到的交换机名称，这里使用常量类 RabbitConstant 中定义的 EXCHANGE_WEATHER_DIRECT 交换机。</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> routingKey 绑定的路由键，用于指定消息的路由规则，这里设置为 &quot;baidu&quot;。</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.queueBind(RabbitConstant.QUEUE_BAIDU, RabbitConstant.EXCHANGE_WEATHER_DIRECT, <span class="string">&quot;baidu&quot;</span>);</span><br><span class="line">            channel.queueBind(RabbitConstant.QUEUE_BAIDU, RabbitConstant.EXCHANGE_WEATHER_DIRECT, <span class="string">&quot;duxiaoman&quot;</span>);</span><br><span class="line"></span><br><span class="line">            channel.queueDeclare(RabbitConstant.QUEUE_SINA, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">            channel.queueBind(RabbitConstant.QUEUE_SINA, RabbitConstant.EXCHANGE_WEATHER_DIRECT, <span class="string">&quot;sina&quot;</span>);</span><br><span class="line">            channel.queueBind(RabbitConstant.QUEUE_SINA, RabbitConstant.EXCHANGE_WEATHER_DIRECT, <span class="string">&quot;weibo&quot;</span>);</span><br><span class="line"></span><br><span class="line">            Random random = <span class="keyword">new</span> Random();</span><br><span class="line">            String[] cities = &#123; <span class="string">&quot;Beijing&quot;</span>, <span class="string">&quot;New York&quot;</span>, <span class="string">&quot;Tokyo&quot;</span>, <span class="string">&quot;Paris&quot;</span>, <span class="string">&quot;London&quot;</span> &#125;;</span><br><span class="line">            String[] countries = &#123; <span class="string">&quot;China&quot;</span>, <span class="string">&quot;USA&quot;</span>, <span class="string">&quot;Japan&quot;</span>, <span class="string">&quot;France&quot;</span>, <span class="string">&quot;UK&quot;</span> &#125;;</span><br><span class="line">            String[] weathers = &#123; <span class="string">&quot;Sunny&quot;</span>, <span class="string">&quot;Rainy&quot;</span>, <span class="string">&quot;Cloudy&quot;</span>, <span class="string">&quot;Snowy&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                String weather = weathers[random.nextInt(weathers.length)];</span><br><span class="line">                <span class="comment">// 根据天气类型生成合理温度</span></span><br><span class="line">                <span class="keyword">int</span> maxTemp, minTemp;</span><br><span class="line">                <span class="keyword">switch</span> (weather) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;Sunny&quot;</span>:</span><br><span class="line">                        maxTemp = random.nextInt(<span class="number">11</span>) + <span class="number">25</span>; <span class="comment">// 25-35℃</span></span><br><span class="line">                        minTemp = maxTemp - <span class="number">10</span>; <span class="comment">// 日温差约10℃</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;Rainy&quot;</span>:</span><br><span class="line">                        maxTemp = random.nextInt(<span class="number">6</span>) + <span class="number">20</span>; <span class="comment">// 20-25℃</span></span><br><span class="line">                        minTemp = random.nextInt(<span class="number">10</span>) + <span class="number">10</span>; <span class="comment">// 10-20℃</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;Cloudy&quot;</span>:</span><br><span class="line">                        maxTemp = random.nextInt(<span class="number">9</span>) + <span class="number">20</span>; <span class="comment">// 20-28℃</span></span><br><span class="line">                        minTemp = random.nextInt(<span class="number">8</span>) + <span class="number">15</span>; <span class="comment">// 15-22℃</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>: <span class="comment">// Snowy</span></span><br><span class="line">                        maxTemp = random.nextInt(<span class="number">6</span>) - <span class="number">5</span>; <span class="comment">// -5~0℃</span></span><br><span class="line">                        minTemp = random.nextInt(<span class="number">6</span>) - <span class="number">10</span>; <span class="comment">// -10~-5℃</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> idx = random.nextInt(countries.length);</span><br><span class="line">                String json = String.format(</span><br><span class="line">                        <span class="string">&quot;&#123;\&quot;date\&quot;:\&quot;%s\&quot;, \&quot;country\&quot;:\&quot;%s\&quot;, \&quot;city\&quot;:\&quot;%s\&quot;, \&quot;weather\&quot;:\&quot;%s\&quot;, &quot;</span> +</span><br><span class="line">                                <span class="string">&quot;\&quot;minTemp\&quot;:%d, \&quot;maxTemp\&quot;:%d&#125;&quot;</span>,</span><br><span class="line">                        LocalDate.now(),</span><br><span class="line">                        countries[idx],</span><br><span class="line">                        cities[idx],</span><br><span class="line">                        weather,</span><br><span class="line">                        minTemp,</span><br><span class="line">                        maxTemp);</span><br><span class="line">                String key = random.nextBoolean()?<span class="string">&quot;baidu&quot;</span>: <span class="string">&quot;sina&quot;</span>;</span><br><span class="line">                log.info(<span class="string">&quot;路由键:&#123;&#125;,天气信息：&#123;&#125;&quot;</span>,key, json);</span><br><span class="line">                <span class="comment">// 调用 RabbitMQ 通道的 basicPublish 方法，将生成的天气预报 JSON 数据发送到指定的交换机。</span></span><br><span class="line">                <span class="comment">// 参数解释：</span></span><br><span class="line">                <span class="comment">// 1. RabbitConstant.EXCHANGE_WEATHER：指定要将消息发布到的交换机名称，由常量类 RabbitConstant 定义。</span></span><br><span class="line">                <span class="comment">// 2. &quot;&quot;：路由键，发布订阅模式不需要。</span></span><br><span class="line">                <span class="comment">// 3. null：消息的属性，传入 null 表示使用默认的消息属性。</span></span><br><span class="line">                <span class="comment">// 4. json.getBytes()：要发送的消息内容，将之前生成的 JSON 字符串转换为字节数组。</span></span><br><span class="line">                channel.basicPublish(RabbitConstant.EXCHANGE_WEATHER_DIRECT, key, <span class="keyword">null</span>, json.getBytes());</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitConstant;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitUtils;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Baidu</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Connection connection = RabbitUtils.getConnection();</span><br><span class="line">        <span class="keyword">final</span> Channel channel = connection.createChannel();</span><br><span class="line">        channel.basicQos(<span class="number">1</span>);</span><br><span class="line">        channel.basicConsume(RabbitConstant.QUEUE_BAIDU, <span class="keyword">false</span>, <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                log.info(<span class="string">&quot;百度收到气象信息：&#123;&#125;&quot;</span>, <span class="keyword">new</span> String(body));</span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitConstant;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitUtils;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sina</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Connection connection = RabbitUtils.getConnection();</span><br><span class="line">        <span class="keyword">final</span> Channel channel = connection.createChannel();</span><br><span class="line">        channel.basicQos(<span class="number">1</span>);</span><br><span class="line">        channel.basicConsume(RabbitConstant.QUEUE_SINA, <span class="keyword">false</span>, <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                log.info(<span class="string">&quot;新浪收到气象信息：&#123;&#125;&quot;</span>, <span class="keyword">new</span> String(body));</span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="RabbitMQ主题模式（TOPIC）"><a href="#RabbitMQ主题模式（TOPIC）" class="headerlink" title="RabbitMQ主题模式（TOPIC）"></a>RabbitMQ主题模式（TOPIC）</h3><p>RabbitMQ 的主题模式（Topic Exchange）是一种支持基于消息路由键（Routing Key）进行灵活匹配的消息分发模式。它允许生产者发送带有特定路由键的消息，消费者通过绑定键（Binding Key）订阅符合规则的消息。<br>在主题模式中，路由键和绑定键可以包含多个单词，以点号（.）分隔，例如stock.usd.nyse或weather.europe.london。此外，绑定键支持两种通配符：<br>● *：匹配一个单词。<br>● #：匹配零个或多个单词。<br>工作原理</p>
<ol>
<li>生产者发送消息时，指定一个路由键。</li>
<li>消息被发送到 Topic Exchange。</li>
<li>Topic Exchange 根据绑定键的规则将消息路由到符合条件的队列。<br>○ 如果绑定键与路由键完全匹配，则消息会被路由到对应的队列。<br>○ 如果绑定键包含通配符，则会根据通配符规则进行匹配。</li>
</ol>
<p><img src="/images/RabbitMQ/20210703-2.png" alt="image-20210703-2"></p>
<p><img src="/images/RabbitMQ/20210703-3.png" alt="image-20210703-3"></p>
<p><img src="/images/RabbitMQ/20210703-4.png" alt="image-20210703-4"></p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>假设有一个Topic Exchange，以下是绑定键和路由键的例子：<br>● 绑定键：*.orange.*<br>  ○ 匹配路由键：quick.orange.rabbit、lazy.orange.elephant<br>  ○ 不匹配路由键：orange、quick.orange.male.rabbit<br>● 绑定键：lazy.#<br>  ○ 匹配路由键：lazy.orange.elephant、lazy.brown.fox、lazy<br>  ○ 不匹配路由键：quick.orange.rabbit</p>
<h3 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h3><p>主题模式适用于需要对消息进行多维度分类和灵活订阅的场景。以下是一些典型的应用场景：</p>
<ol>
<li>日志系统：<br>○ 路由键可以表示日志的来源和级别，例如 app.error、db.warning。<br>○ 消费者可以根据不同的需求订阅特定类型的日志，例如 *.error 订阅所有错误日志。</li>
<li>事件驱动架构：<br>○ 在微服务架构中，不同服务之间通过消息通信。<br>○ 主题模式允许服务根据事件类型和子类型灵活订阅感兴趣的消息，例如 order.created、payment.failed。</li>
<li>物联网（IoT）数据处理：<br>○ 设备上报的数据可以用路由键标识设备类型和位置，例如 sensor.temp.zone1。<br>○ 数据处理模块可以根据绑定键订阅特定区域或特定类型的传感器数据。</li>
</ol>
<h3 id="主题模式（TOPIC）与直接模式（DIRECT）的区别"><a href="#主题模式（TOPIC）与直接模式（DIRECT）的区别" class="headerlink" title="主题模式（TOPIC）与直接模式（DIRECT）的区别"></a>主题模式（TOPIC）与直接模式（DIRECT）的区别</h3><p><img src="/images/RabbitMQ/20210703-5.png" alt="image-20210703-5"></p>
<h3 id="具体对比"><a href="#具体对比" class="headerlink" title="具体对比"></a>具体对比</h3><ol>
<li>灵活性：<br>○ DIRECT 模式要求路由键和绑定键完全匹配，适用于消息分类较为固定的场景。<br>○ TOPIC 模式支持通配符，允许更灵活的消息订阅，适合需要动态分类和多维度过滤的场景。</li>
<li>性能：<br>○ DIRECT 模式的匹配逻辑简单，性能较高。<br>○ TOPIC 模式需要解析通配符规则，可能带来一定的性能开销，但通常在现代硬件上影响较小。</li>
<li>使用场景选择：<br>○ 如果消息分类明确且固定（例如订单状态更新），建议使用 DIRECT 模式。<br>○ 如果需要支持多条件组合订阅（例如日志系统或事件驱动架构），建议使用 TOPIC 模式。</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>RabbitMQ 的主题模式（TOPIC）是一种强大的消息路由机制，通过支持通配符的方式提供了极大的灵活性，适合需要多维度分类和动态订阅的场景。而直接模式（DIRECT）则更加简单高效，适用于分类明确且固定的场景。在实际应用中，应根据业务需求选择合适的模式，从而实现高效的系统设计。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitConstant;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitUtils;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.SneakyThrows;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherProducer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Connection connection = RabbitUtils.getConnection();</span><br><span class="line">                Channel channel = connection.createChannel();) &#123;</span><br><span class="line"></span><br><span class="line">            channel.exchangeDeclare(RabbitConstant.EXCHANGE_WEATHER_TOPIC, <span class="string">&quot;topic&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">            channel.queueDeclare(RabbitConstant.QUEUE_BEIJING, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">            channel.queueBind(RabbitConstant.QUEUE_BEIJING, RabbitConstant.EXCHANGE_WEATHER_TOPIC, <span class="string">&quot;city.Beijing.#&quot;</span>);</span><br><span class="line"></span><br><span class="line">            channel.queueDeclare(RabbitConstant.QUEUE_PARIS, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">            channel.queueBind(RabbitConstant.QUEUE_PARIS, RabbitConstant.EXCHANGE_WEATHER_TOPIC, <span class="string">&quot;city.Paris.*&quot;</span>);</span><br><span class="line"></span><br><span class="line">            Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">            String[] cities = &#123; <span class="string">&quot;Beijing&quot;</span>, <span class="string">&quot;New York&quot;</span>, <span class="string">&quot;Tokyo&quot;</span>, <span class="string">&quot;Paris&quot;</span>, <span class="string">&quot;London&quot;</span> &#125;;</span><br><span class="line">            String[] countries = &#123; <span class="string">&quot;China&quot;</span>, <span class="string">&quot;USA&quot;</span>, <span class="string">&quot;Japan&quot;</span>, <span class="string">&quot;France&quot;</span>, <span class="string">&quot;UK&quot;</span> &#125;;</span><br><span class="line">            String[] weathers = &#123; <span class="string">&quot;Sunny&quot;</span>, <span class="string">&quot;Rainy&quot;</span>, <span class="string">&quot;Cloudy&quot;</span>, <span class="string">&quot;Snowy&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                String weather = weathers[random.nextInt(weathers.length)];</span><br><span class="line">                <span class="keyword">int</span> maxTemp, minTemp;</span><br><span class="line">                <span class="keyword">switch</span> (weather) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;Sunny&quot;</span>:</span><br><span class="line">                        maxTemp = random.nextInt(<span class="number">11</span>) + <span class="number">25</span>; <span class="comment">// 25-35℃</span></span><br><span class="line">                        minTemp = maxTemp - <span class="number">10</span>; <span class="comment">// 日温差约10℃</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;Rainy&quot;</span>:</span><br><span class="line">                        maxTemp = random.nextInt(<span class="number">6</span>) + <span class="number">20</span>; <span class="comment">// 20-25℃</span></span><br><span class="line">                        minTemp = random.nextInt(<span class="number">10</span>) + <span class="number">10</span>; <span class="comment">// 10-20℃</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;Cloudy&quot;</span>:</span><br><span class="line">                        maxTemp = random.nextInt(<span class="number">9</span>) + <span class="number">20</span>; <span class="comment">// 20-28℃</span></span><br><span class="line">                        minTemp = random.nextInt(<span class="number">8</span>) + <span class="number">15</span>; <span class="comment">// 15-22℃</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>: <span class="comment">// Snowy</span></span><br><span class="line">                        maxTemp = random.nextInt(<span class="number">6</span>) - <span class="number">5</span>; <span class="comment">// -5~0℃</span></span><br><span class="line">                        minTemp = random.nextInt(<span class="number">6</span>) - <span class="number">10</span>; <span class="comment">// -10~-5℃</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> idx = random.nextInt(countries.length);</span><br><span class="line">                String json = String.format(</span><br><span class="line">                        <span class="string">&quot;&#123;\&quot;date\&quot;:\&quot;%s\&quot;, \&quot;country\&quot;:\&quot;%s\&quot;, \&quot;city\&quot;:\&quot;%s\&quot;, \&quot;weather\&quot;:\&quot;%s\&quot;, &quot;</span> +</span><br><span class="line">                                <span class="string">&quot;\&quot;minTemp\&quot;:%d, \&quot;maxTemp\&quot;:%d&#125;&quot;</span>,</span><br><span class="line">                        LocalDate.now(),</span><br><span class="line">                        countries[idx],</span><br><span class="line">                        cities[idx],</span><br><span class="line">                        weather,</span><br><span class="line">                        minTemp,</span><br><span class="line">                        maxTemp);</span><br><span class="line">                String routingKey = <span class="string">&quot;city.&quot;</span> + cities[idx] + <span class="string">&quot;.weather&quot;</span>;</span><br><span class="line">                log.info(<span class="string">&quot;路由键：&#123;&#125;，天气信息：&#123;&#125;&quot;</span>, routingKey, json);</span><br><span class="line"></span><br><span class="line">                channel.basicPublish(RabbitConstant.EXCHANGE_WEATHER_TOPIC, routingKey, <span class="keyword">null</span>, json.getBytes());</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitConstant;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitUtils;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeijingConsumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Connection connection = RabbitUtils.getConnection();</span><br><span class="line">        <span class="keyword">final</span> Channel channel = connection.createChannel();</span><br><span class="line">        channel.basicQos(<span class="number">1</span>);</span><br><span class="line">        channel.basicConsume(RabbitConstant.QUEUE_BEIJING, <span class="keyword">false</span>, <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                log.info(<span class="string">&quot;收到北京气象信息：&#123;&#125;&quot;</span>, <span class="keyword">new</span> String(body));</span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitConstant;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitUtils;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParisConsumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Connection connection = RabbitUtils.getConnection();</span><br><span class="line">        <span class="keyword">final</span> Channel channel = connection.createChannel();</span><br><span class="line">        channel.basicQos(<span class="number">1</span>);</span><br><span class="line">        channel.basicConsume(RabbitConstant.QUEUE_PARIS, <span class="keyword">false</span>, <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                log.info(<span class="string">&quot;收到巴黎气象信息：&#123;&#125;&quot;</span>, <span class="keyword">new</span> String(body));</span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ Producer Confirm与Return机制</title>
    <url>/2021/07/03/RabbitMQ/RabbitMQ%20Producer%20Confirm%E4%B8%8EReturn%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<p>RabbitMQ的Confirm（发布确认）机制和Return（消息退回）机制是保障消息可靠投递的两个重要机制，它们分别作用于消息传输的不同阶段，共同提升消息系统的可靠性。</p>
<p><img src="/images/RabbitMQ/20210703-6.png" alt="image-20210703-6"></p>
<h3 id="一、Confirm机制（发布确认）"><a href="#一、Confirm机制（发布确认）" class="headerlink" title="一、Confirm机制（发布确认）"></a>一、Confirm机制（发布确认）</h3><p>作用阶段：生产者发送消息到Exchange（交换机）的过程。<br>核心目标：确保消息被Broker（RabbitMQ服务端）成功接收。 </p>
<h3 id="工作原理："><a href="#工作原理：" class="headerlink" title="工作原理："></a>工作原理：</h3><ol>
<li>开启Confirm模式：生产者通过设置信道（Channel）为Confirm模式，进入消息确认状态。</li>
<li>消息发送与异步确认：<br>○ 生产者发送消息到Exchange后，RabbitMQ会异步返回一个确认信号（Basic.Ack），表示消息已被Broker接收。<br>○ 若消息因路由失败（如Exchange不存在）或Broker内部错误未能处理，可能返回Basic.Nack（否定确认）或超时无响应。</li>
<li>确认类型：<br>○ 单条确认：每发送一条消息，等待一个确认结果。<br>○ 批量确认：累积多条消息后一次性确认，牺牲部分实时性以提升吞吐量。<br>○ 异步监听：通过回调函数处理确认结果，避免阻塞生产者线程。</li>
</ol>
<h3 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h3><p>● 防止消息在传输过程中丢失（如网络故障或Broker宕机）。<br>● 需确保消息至少到达Exchange的场景（如金融交易、订单提交）。</p>
<h3 id="二、Return机制（消息退回）"><a href="#二、Return机制（消息退回）" class="headerlink" title="二、Return机制（消息退回）"></a>二、Return机制（消息退回）</h3><p>作用阶段：消息从Exchange路由到队列的过程。<br>核心目标：处理无法路由到任何队列的消息。</p>
<h3 id="工作原理：-1"><a href="#工作原理：-1" class="headerlink" title="工作原理："></a>工作原理：</h3><ol>
<li>启用退回机制：发送消息时需设置mandatory=true，告知Broker在路由失败时退回消息。</li>
<li>路由失败处理：<br>○ 当Exchange无法根据路由键（Routing Key）和绑定规则找到匹配的队列时，触发Return机制。<br>○ Broker通过Basic.Return命令将消息退回给生产者，附带失败原因（如NO_ROUTE）。</li>
<li>生产者处理：需监听Return回调，对退回消息进行日志记录、重定向或告警。</li>
</ol>
<h3 id="应用场景：-1"><a href="#应用场景：-1" class="headerlink" title="应用场景："></a>应用场景：</h3><p>● 动态路由场景中防止消息静默丢失（如配置错误的路由键）。<br>● 需要严格监控路由状态的系统（如告警通知、审计日志）。</p>
<h3 id="三、关键区别与协作"><a href="#三、关键区别与协作" class="headerlink" title="三、关键区别与协作"></a>三、关键区别与协作</h3><p><img src="/images/RabbitMQ/20210703-7.png" alt="image-20210703-7"></p>
<h3 id="协作价值："><a href="#协作价值：" class="headerlink" title="协作价值："></a>协作价值：</h3><p>● Confirm失败：消息未到达Exchange（如Broker宕机），需生产者重发。<br>● Return触发：消息已到达Exchange但路由失败，需修复绑定关系或处理死信。<br>两者结合可覆盖消息从生产到消费的全链路可靠性，避免消息在传输和路由环节丢失。</p>
<h3 id="四、最佳实践建议"><a href="#四、最佳实践建议" class="headerlink" title="四、最佳实践建议"></a>四、最佳实践建议</h3><ol>
<li>Confirm机制：<br>○ 异步监听确认结果，结合持久化（Persistent Messages）防止Broker重启丢数据。<br>○ 设计重试策略（如指数退避）处理Nack或超时场景。</li>
<li>Return机制：<br>○ 始终设置mandatory=true，避免消息静默丢弃。<br>○ 实现退回消息的监控和告警，及时发现路由配置错误。<br>通过合理配置Confirm与Return，可以构建高可靠的异步消息系统，平衡性能与数据一致性需求。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitConstant;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitUtils;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.SneakyThrows;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherProducer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="keyword">static</span> String[] cities = &#123; <span class="string">&quot;Beijing&quot;</span>, <span class="string">&quot;New York&quot;</span>, <span class="string">&quot;Tokyo&quot;</span>, <span class="string">&quot;Paris&quot;</span>, <span class="string">&quot;London&quot;</span> &#125;;</span><br><span class="line">    <span class="keyword">static</span> String[] countries = &#123; <span class="string">&quot;China&quot;</span>, <span class="string">&quot;USA&quot;</span>, <span class="string">&quot;Japan&quot;</span>, <span class="string">&quot;France&quot;</span>, <span class="string">&quot;UK&quot;</span> &#125;;</span><br><span class="line">    <span class="keyword">static</span> String[] weathers = &#123; <span class="string">&quot;Sunny&quot;</span>, <span class="string">&quot;Rainy&quot;</span>, <span class="string">&quot;Cloudy&quot;</span>, <span class="string">&quot;Snowy&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">createJSON</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line">        String weather = weathers[random.nextInt(weathers.length)];</span><br><span class="line">        <span class="keyword">int</span> maxTemp, minTemp;</span><br><span class="line">        <span class="keyword">switch</span> (weather) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Sunny&quot;</span>:</span><br><span class="line">                maxTemp = random.nextInt(<span class="number">11</span>) + <span class="number">25</span>; <span class="comment">// 25-35℃</span></span><br><span class="line">                minTemp = maxTemp - <span class="number">10</span>; <span class="comment">// 日温差约10℃</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Rainy&quot;</span>:</span><br><span class="line">                maxTemp = random.nextInt(<span class="number">6</span>) + <span class="number">20</span>; <span class="comment">// 20-25℃</span></span><br><span class="line">                minTemp = random.nextInt(<span class="number">10</span>) + <span class="number">10</span>; <span class="comment">// 10-20℃</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Cloudy&quot;</span>:</span><br><span class="line">                maxTemp = random.nextInt(<span class="number">9</span>) + <span class="number">20</span>; <span class="comment">// 20-28℃</span></span><br><span class="line">                minTemp = random.nextInt(<span class="number">8</span>) + <span class="number">15</span>; <span class="comment">// 15-22℃</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>: <span class="comment">// Snowy</span></span><br><span class="line">                maxTemp = random.nextInt(<span class="number">6</span>) - <span class="number">5</span>; <span class="comment">// -5~0℃</span></span><br><span class="line">                minTemp = random.nextInt(<span class="number">6</span>) - <span class="number">10</span>; <span class="comment">// -10~-5℃</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String json = String.format(</span><br><span class="line">                <span class="string">&quot;&#123;\&quot;date\&quot;:\&quot;%s\&quot;, \&quot;country\&quot;:\&quot;%s\&quot;, \&quot;city\&quot;:\&quot;%s\&quot;, \&quot;weather\&quot;:\&quot;%s\&quot;, &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\&quot;minTemp\&quot;:%d, \&quot;maxTemp\&quot;:%d&#125;&quot;</span>,</span><br><span class="line">                LocalDate.now(),</span><br><span class="line">                countries[idx],</span><br><span class="line">                cities[idx],</span><br><span class="line">                weather,</span><br><span class="line">                minTemp,</span><br><span class="line">                maxTemp);</span><br><span class="line">        <span class="keyword">return</span> json;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Connection connection = RabbitUtils.getConnection();</span><br><span class="line">                Channel channel = connection.createChannel();) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 启用Confirm模式</span></span><br><span class="line">            channel.confirmSelect();</span><br><span class="line">            <span class="comment">// 添加Confirm监听器</span></span><br><span class="line">            channel.addConfirmListener((deliveryTag, multiple) -&gt; &#123;</span><br><span class="line">                log.info(<span class="string">&quot;消息确认成功，编号：&#123;&#125;，是否批量：&#123;&#125;&quot;</span>, deliveryTag, multiple);</span><br><span class="line">            &#125;, (deliveryTag, multiple) -&gt; &#123;</span><br><span class="line">                log.error(<span class="string">&quot;消息确认失败，编号：&#123;&#125;，是否批量：&#123;&#125;&quot;</span>, deliveryTag, multiple);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 添加Return监听器</span></span><br><span class="line">            channel.addReturnListener((returnMessage) -&gt; &#123;</span><br><span class="line">                log.warn(<span class="string">&quot;消息无法路由! 应答码:&#123;&#125; 原因:&#123;&#125; 路由键:&#123;&#125;&quot;</span>,</span><br><span class="line">                        returnMessage.getReplyCode(),</span><br><span class="line">                        returnMessage.getReplyText(),</span><br><span class="line">                        returnMessage.getRoutingKey());</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            channel.exchangeDeclare(RabbitConstant.EXCHANGE_WEATHER_TOPIC, <span class="string">&quot;topic&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">            channel.queueDeclare(RabbitConstant.QUEUE_BEIJING, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">            channel.queueBind(RabbitConstant.QUEUE_BEIJING, RabbitConstant.EXCHANGE_WEATHER_TOPIC, <span class="string">&quot;city.Beijing.#&quot;</span>);</span><br><span class="line">            channel.queueDeclare(RabbitConstant.QUEUE_PARIS, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">            channel.queueBind(RabbitConstant.QUEUE_PARIS, RabbitConstant.EXCHANGE_WEATHER_TOPIC, <span class="string">&quot;city.Paris.*&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> idx = random.nextInt(countries.length);</span><br><span class="line">                String routingKey = <span class="string">&quot;city.&quot;</span> + cities[idx] + <span class="string">&quot;.weather&quot;</span>;</span><br><span class="line">                String json = createJSON(idx);</span><br><span class="line">                log.info(<span class="string">&quot;路由键：&#123;&#125;，天气信息：&#123;&#125;&quot;</span>, routingKey, json);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 修改发布消息的代码，添加mandatory参数</span></span><br><span class="line">                channel.basicPublish(RabbitConstant.EXCHANGE_WEATHER_TOPIC,</span><br><span class="line">                        routingKey,</span><br><span class="line">                        <span class="comment">/* </span></span><br><span class="line"><span class="comment">                         当 mandatory = true 时，如果消息无法路由到任何队列，消息会通过 `addReturnListener` 监听器返回</span></span><br><span class="line"><span class="comment">                         当 mandatory = false 时（默认值），无法路由的消息会被直接丢弃</span></span><br><span class="line"><span class="comment">                         */</span></span><br><span class="line">                        <span class="keyword">true</span>, </span><br><span class="line">                        <span class="keyword">null</span>,</span><br><span class="line">                        json.getBytes());</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitConstant;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitUtils;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParisConsumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Connection connection = RabbitUtils.getConnection();</span><br><span class="line">        <span class="keyword">final</span> Channel channel = connection.createChannel();</span><br><span class="line">        channel.basicQos(<span class="number">1</span>);</span><br><span class="line">        channel.basicConsume(RabbitConstant.QUEUE_PARIS, <span class="keyword">false</span>, <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                log.info(<span class="string">&quot;收到巴黎气象信息：&#123;&#125;&quot;</span>, <span class="keyword">new</span> String(body));</span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitConstant;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitUtils;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeijingConsumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Connection connection = RabbitUtils.getConnection();</span><br><span class="line">        <span class="keyword">final</span> Channel channel = connection.createChannel();</span><br><span class="line">        channel.basicQos(<span class="number">1</span>);</span><br><span class="line">        channel.basicConsume(RabbitConstant.QUEUE_BEIJING, <span class="keyword">false</span>, <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                log.info(<span class="string">&quot;收到北京气象信息：&#123;&#125;&quot;</span>, <span class="keyword">new</span> String(body));</span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ备用交换机(Alternate Exchange)</title>
    <url>/2021/07/08/RabbitMQ/RabbitMQ%E5%A4%87%E7%94%A8%E4%BA%A4%E6%8D%A2%E6%9C%BA(Alternate%20Exchange)/</url>
    <content><![CDATA[<h3 id="RabbitMQ备用交换机-Alternate-Exchange-机制详解"><a href="#RabbitMQ备用交换机-Alternate-Exchange-机制详解" class="headerlink" title="RabbitMQ备用交换机(Alternate Exchange)机制详解"></a>RabbitMQ备用交换机(Alternate Exchange)机制详解</h3><p><img src="/images/RabbitMQ/20210708-1.png" alt="image-20210708-1"></p>
<h3 id="什么是备用交换机？"><a href="#什么是备用交换机？" class="headerlink" title="什么是备用交换机？"></a>什么是备用交换机？</h3><p>备用交换机(Alternate Exchange)是RabbitMQ提供的一种优雅的消息处理机制，用于解决消息无法路由时的处理问题。当生产者发送的消息无法被路由到任何队列时，这些消息会被自动转发到预先配置的备用交换机，而不是被直接丢弃。</p>
<h3 id="为什么需要备用交换机？"><a href="#为什么需要备用交换机？" class="headerlink" title="为什么需要备用交换机？"></a>为什么需要备用交换机？</h3><p>在RabbitMQ中，当消息无法路由到任何队列时，默认行为是直接丢弃这些消息。这可能导致以下问题：</p>
<ol>
<li>重要消息丢失：无法路由的消息可能包含重要业务数据</li>
<li>问题排查困难：无法知道哪些消息被丢弃了</li>
<li>缺乏处理机制：无法对无法路由的消息进行后续处理<br>备用交换机机制为解决这些问题提供了标准化的解决方案。</li>
</ol>
<h3 id="备用交换机的工作原理"><a href="#备用交换机的工作原理" class="headerlink" title="备用交换机的工作原理"></a>备用交换机的工作原理</h3><ol>
<li>配置阶段：在声明主交换机时，通过alternate-exchange参数指定一个备用交换机</li>
<li>消息路由阶段：当消息无法被主交换机的路由规则匹配到任何队列时</li>
<li>转发阶段：RabbitMQ自动将消息转发到备用交换机</li>
<li>最终处理：备用交换机将消息路由到绑定它的队列中</li>
</ol>
<h3 id="备用交换机的典型应用场景"><a href="#备用交换机的典型应用场景" class="headerlink" title="备用交换机的典型应用场景"></a>备用交换机的典型应用场景</h3><ol>
<li>死信处理：收集所有无法路由的消息进行统一处理</li>
<li>日志记录：记录所有无法路由的消息用于审计</li>
<li>异常通知：当消息无法路由时触发告警机制</li>
<li>消息重试：将无法路由的消息暂存后重新投递</li>
</ol>
<h3 id="备用交换机的设计建议"><a href="#备用交换机的设计建议" class="headerlink" title="备用交换机的设计建议"></a>备用交换机的设计建议</h3><ol>
<li>交换机类型选择：通常使用fanout类型，确保所有绑定队列都能收到消息</li>
<li>队列命名：使用清晰表明用途的名称，如unroutable.messages</li>
<li>消息处理：在备用队列的消费者中添加适当的处理逻辑</li>
<li>监控告警：对备用队列的消息量设置监控阈值</li>
</ol>
<h3 id="备用交换机与Return机制的对比"><a href="#备用交换机与Return机制的对比" class="headerlink" title="备用交换机与Return机制的对比"></a>备用交换机与Return机制的对比</h3><ol>
<li>Return机制：需要生产者设置mandatory=true并实现ReturnListener，适合需要即时反馈的场景</li>
<li>备用交换机：在服务端自动处理，无需生产者额外配置，适合长期稳定的无法路由消息处理</li>
</ol>
<h3 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h3><ol>
<li>为每个主交换机配置专用的备用交换机</li>
<li>在备用队列的消费者中添加详细的日志记录</li>
<li>定期分析无法路由消息的原因，优化路由规则</li>
<li>对备用队列设置TTL或最大长度限制，防止堆积<br>通过合理使用备用交换机机制，可以大大提高RabbitMQ消息系统的可靠性和可维护性。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitConstant</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_BEIJING = <span class="string">&quot;beijing&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_PARIS = <span class="string">&quot;paris&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_WEATHER_UNROUTABLE = <span class="string">&quot;weather.unroutable&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_WEATHER_TOPIC = <span class="string">&quot;weather.topic.1&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_WEATHER_ALTERNATE = <span class="string">&quot;weather.alternate&quot;</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> lombok.SneakyThrows;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RabbitUtils 类用于创建和管理 RabbitMQ 的连接。</span></span><br><span class="line"><span class="comment"> * 该类使用静态代码块初始化连接工厂，并提供一个静态方法来获取 RabbitMQ 连接。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态的 ConnectionFactory 实例，用于创建 RabbitMQ 连接。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 设置 RabbitMQ 服务器的主机地址</span></span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;192.168.31.230&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置 RabbitMQ 服务器的端口号，5672 是 RabbitMQ 的默认端口号</span></span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        <span class="comment">// 设置连接 RabbitMQ 服务器的用户名</span></span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置连接 RabbitMQ 服务器的密码</span></span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置连接 RabbitMQ 服务器的虚拟主机</span></span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;my_vhost&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 RabbitMQ 的连接。</span></span><br><span class="line"><span class="comment">     * 该方法使用静态初始化的 ConnectionFactory 创建一个新的连接。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 一个 RabbitMQ 的连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 如果在创建连接过程中发生错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用 ConnectionFactory 创建一个新的连接</span></span><br><span class="line">        Connection conn = connectionFactory.newConnection();</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitConstant;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitUtils;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.SneakyThrows;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherProducer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="keyword">static</span> String[] cities = &#123; <span class="string">&quot;Beijing&quot;</span>, <span class="string">&quot;New York&quot;</span>, <span class="string">&quot;Tokyo&quot;</span>, <span class="string">&quot;Paris&quot;</span>, <span class="string">&quot;London&quot;</span> &#125;;</span><br><span class="line">    <span class="keyword">static</span> String[] countries = &#123; <span class="string">&quot;China&quot;</span>, <span class="string">&quot;USA&quot;</span>, <span class="string">&quot;Japan&quot;</span>, <span class="string">&quot;France&quot;</span>, <span class="string">&quot;UK&quot;</span> &#125;;</span><br><span class="line">    <span class="keyword">static</span> String[] weathers = &#123; <span class="string">&quot;Sunny&quot;</span>, <span class="string">&quot;Rainy&quot;</span>, <span class="string">&quot;Cloudy&quot;</span>, <span class="string">&quot;Snowy&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">createJSON</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line">        String weather = weathers[random.nextInt(weathers.length)];</span><br><span class="line">        <span class="keyword">int</span> maxTemp, minTemp;</span><br><span class="line">        <span class="keyword">switch</span> (weather) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Sunny&quot;</span>:</span><br><span class="line">                maxTemp = random.nextInt(<span class="number">11</span>) + <span class="number">25</span>; <span class="comment">// 25-35℃</span></span><br><span class="line">                minTemp = maxTemp - <span class="number">10</span>; <span class="comment">// 日温差约10℃</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Rainy&quot;</span>:</span><br><span class="line">                maxTemp = random.nextInt(<span class="number">6</span>) + <span class="number">20</span>; <span class="comment">// 20-25℃</span></span><br><span class="line">                minTemp = random.nextInt(<span class="number">10</span>) + <span class="number">10</span>; <span class="comment">// 10-20℃</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Cloudy&quot;</span>:</span><br><span class="line">                maxTemp = random.nextInt(<span class="number">9</span>) + <span class="number">20</span>; <span class="comment">// 20-28℃</span></span><br><span class="line">                minTemp = random.nextInt(<span class="number">8</span>) + <span class="number">15</span>; <span class="comment">// 15-22℃</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>: <span class="comment">// Snowy</span></span><br><span class="line">                maxTemp = random.nextInt(<span class="number">6</span>) - <span class="number">5</span>; <span class="comment">// -5~0℃</span></span><br><span class="line">                minTemp = random.nextInt(<span class="number">6</span>) - <span class="number">10</span>; <span class="comment">// -10~-5℃</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String json = String.format(</span><br><span class="line">                <span class="string">&quot;&#123;\&quot;date\&quot;:\&quot;%s\&quot;, \&quot;country\&quot;:\&quot;%s\&quot;, \&quot;city\&quot;:\&quot;%s\&quot;, \&quot;weather\&quot;:\&quot;%s\&quot;, &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\&quot;minTemp\&quot;:%d, \&quot;maxTemp\&quot;:%d&#125;&quot;</span>,</span><br><span class="line">                LocalDate.now(),</span><br><span class="line">                countries[idx],</span><br><span class="line">                cities[idx],</span><br><span class="line">                weather,</span><br><span class="line">                minTemp,</span><br><span class="line">                maxTemp);</span><br><span class="line">        <span class="keyword">return</span> json;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Connection connection = RabbitUtils.getConnection();</span><br><span class="line">                Channel channel = connection.createChannel();) &#123;</span><br><span class="line">            <span class="comment">// 声明备用交换机和队列</span></span><br><span class="line">            channel.exchangeDeclare(RabbitConstant.EXCHANGE_WEATHER_ALTERNATE, <span class="string">&quot;fanout&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">            channel.queueDeclare(RabbitConstant.QUEUE_WEATHER_UNROUTABLE, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">            channel.queueBind(RabbitConstant.QUEUE_WEATHER_UNROUTABLE,</span><br><span class="line">                    RabbitConstant.EXCHANGE_WEATHER_ALTERNATE, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 声明主交换机时添加alternate-exchange参数</span></span><br><span class="line">            Map&lt;String, Object&gt; exArgs = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            exArgs.put(<span class="string">&quot;alternate-exchange&quot;</span>, RabbitConstant.EXCHANGE_WEATHER_ALTERNATE);</span><br><span class="line"></span><br><span class="line">            channel.exchangeDeclare(RabbitConstant.EXCHANGE_WEATHER_TOPIC, <span class="string">&quot;topic&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, exArgs);</span><br><span class="line">            channel.queueDeclare(RabbitConstant.QUEUE_BEIJING, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">            </span><br><span class="line">            channel.queueBind(RabbitConstant.QUEUE_BEIJING, RabbitConstant.EXCHANGE_WEATHER_TOPIC, <span class="string">&quot;city.Beijing.#&quot;</span>);</span><br><span class="line">            channel.queueDeclare(RabbitConstant.QUEUE_PARIS, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">            channel.queueBind(RabbitConstant.QUEUE_PARIS, RabbitConstant.EXCHANGE_WEATHER_TOPIC, <span class="string">&quot;city.Paris.*&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> idx = random.nextInt(countries.length);</span><br><span class="line">                String routingKey = <span class="string">&quot;city.&quot;</span> + cities[idx] + <span class="string">&quot;.weather&quot;</span>;</span><br><span class="line">                String json = createJSON(idx);</span><br><span class="line">                log.info(<span class="string">&quot;路由键：&#123;&#125;，天气信息：&#123;&#125;&quot;</span>, routingKey, json);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 修改发布消息的代码，添加mandatory参数</span></span><br><span class="line">                channel.basicPublish(RabbitConstant.EXCHANGE_WEATHER_TOPIC,</span><br><span class="line">                        routingKey,</span><br><span class="line">                        <span class="comment">/*</span></span><br><span class="line"><span class="comment">                         * 当 mandatory = true 时，如果消息无法路由到任何队列，消息会通过 `addReturnListener` 监听器返回</span></span><br><span class="line"><span class="comment">                         * 当 mandatory = false 时（默认值），无法路由的消息会被直接丢弃</span></span><br><span class="line"><span class="comment">                         */</span></span><br><span class="line">                        <span class="keyword">true</span>,</span><br><span class="line">                        <span class="keyword">null</span>,</span><br><span class="line">                        json.getBytes());</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitConstant;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitUtils;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeijingConsumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Connection connection = RabbitUtils.getConnection();</span><br><span class="line">        <span class="keyword">final</span> Channel channel = connection.createChannel();</span><br><span class="line">        channel.basicQos(<span class="number">1</span>);</span><br><span class="line">        channel.basicConsume(RabbitConstant.QUEUE_BEIJING, <span class="keyword">false</span>, <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                log.info(<span class="string">&quot;收到北京气象信息：&#123;&#125;&quot;</span>, <span class="keyword">new</span> String(body));</span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitConstant;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitUtils;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParisConsumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Connection connection = RabbitUtils.getConnection();</span><br><span class="line">        <span class="keyword">final</span> Channel channel = connection.createChannel();</span><br><span class="line">        channel.basicQos(<span class="number">1</span>);</span><br><span class="line">        channel.basicConsume(RabbitConstant.QUEUE_PARIS, <span class="keyword">false</span>, <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                log.info(<span class="string">&quot;收到巴黎气象信息：&#123;&#125;&quot;</span>, <span class="keyword">new</span> String(body));</span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitConstant;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitUtils;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnroutableConsumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Connection connection = RabbitUtils.getConnection();</span><br><span class="line">        <span class="keyword">final</span> Channel channel = connection.createChannel();</span><br><span class="line">        channel.basicQos(<span class="number">1</span>);</span><br><span class="line">        channel.basicConsume(RabbitConstant.QUEUE_WEATHER_UNROUTABLE, <span class="keyword">false</span>, <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                log.info(<span class="string">&quot;收到未路由信息：&#123;&#125;&quot;</span>, <span class="keyword">new</span> String(body));</span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ RPC模式</title>
    <url>/2021/07/08/RabbitMQ/RabbitMQ%20RPC%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="RabbitMQ-的-RPC-模式介绍"><a href="#RabbitMQ-的-RPC-模式介绍" class="headerlink" title="RabbitMQ 的 RPC 模式介绍"></a>RabbitMQ 的 RPC 模式介绍</h3><p>RPC（Remote Procedure Call，远程过程调用）是一种常见的通信模式，允许客户端通过网络调用远程服务器上的方法或服务，就像调用本地函数一样。RabbitMQ提供了对 RPC 模式的原生支持，使得开发者可以通过消息队列实现高效的分布式系统。<br>在RabbitMQ的RPC模式中，客户端发送一个请求消息到服务器，服务器处理请求后返回响应消息给客户端。这种模式的核心思想是通过消息队列实现异步的远程调用，并确保请求和响应能够正确匹配。</p>
<p><img src="/images/RabbitMQ/20210708-2.png" alt="image-20210708-2"></p>
<h3 id="RPC模式的工作流程"><a href="#RPC模式的工作流程" class="headerlink" title="RPC模式的工作流程"></a>RPC模式的工作流程</h3><ol>
<li>客户端发送请求：<br>○ 客户端创建一个临时的专属队列（通常称为“回调队列”），用于接收服务器的响应。<br>○ 客户端将请求消息发送到一个指定的队列（通常是服务器监听的队列），并在消息中附带回调队列的名称以及一个唯一标识符（如 correlation_id），以便后续匹配响应。</li>
<li>服务器处理请求：<br>○ 服务器从请求队列中消费消息，执行相应的业务逻辑。<br>○ 处理完成后，服务器将结果封装为响应消息，并将其发送到客户端指定的回调队列中。响应消息中会包含与请求相同的 correlation_id，以确保客户端能够正确匹配请求和响应。</li>
<li>客户端接收响应：<br>○ 客户端从回调队列中消费响应消息，并根据 correlation_id 找到对应的请求。<br>○ 客户端处理响应数据，完成整个 RPC 调用。</li>
</ol>
<h3 id="关键概念"><a href="#关键概念" class="headerlink" title="关键概念"></a>关键概念</h3><p>● 回调队列（Callback Queue）：<br>客户端创建的临时队列，用于接收服务器的响应消息。每个客户端通常都有自己的回调队列，以避免消息混淆。<br>● Correlation ID：<br>每个请求消息都附带一个唯一的标识符（correlation_id），用于在客户端匹配请求和响应。<br>● 消息确认机制：<br>RabbitMQ 提供了消息确认机制（ACK/NACK），确保消息不会丢失。例如，服务器可以确认已成功处理请求，客户端可以确认已成功接收到响应。</p>
<h3 id="RPC模式的应用场景"><a href="#RPC模式的应用场景" class="headerlink" title="RPC模式的应用场景"></a>RPC模式的应用场景</h3><ol>
<li>微服务架构：<br>在微服务架构中，不同服务之间需要通过网络进行通信。RPC模式可以帮助服务之间高效地传递请求和响应，而无需直接暴露服务的内部细节。</li>
<li>分布式计算：<br>当需要将计算任务分发到多个节点时，RPC模式可以用来协调任务分发和结果收集。</li>
<li>API 网关：<br>API 网关可以通过 RPC模式与后端服务通信，从而实现负载均衡、请求路由和响应聚合。</li>
<li>实时数据处理：<br>在需要实时处理用户请求的场景中（如在线游戏、聊天应用等），RPC模式可以快速响应用户的操作请求。</li>
<li>异步任务调度：<br>当某些任务需要异步执行时，RPC模式可以用来提交任务并获取最终结果。例如，文件上传后的处理、图片压缩等。</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>RabbitMQ的RPC模式是一种强大的通信机制，特别适用于分布式系统中的远程调用。它通过消息队列实现了请求和响应的解耦，提供了高可靠性和灵活性。然而，在使用RPC模式时需要注意以下几点：<br>● 性能开销： 由于涉及消息的序列化、网络传输和反序列化，RPC模式可能会引入一定的延迟。<br>● 错误处理： 需要设计完善的错误处理机制，以应对网络故障、超时等问题。<br>● 安全性： 在生产环境中，建议使用 TLS 加密通信，确保消息的安全性。<br>通过合理设计和优化，RabbitMQ 的 RPC 模式可以成为构建高效分布式系统的有力工具。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitUtils;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.SneakyThrows;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RPCClient 类用于实现基于 RabbitMQ 的远程过程调用（RPC）客户端。</span></span><br><span class="line"><span class="comment"> * 该类实现了 AutoCloseable 接口，确保资源可以正确关闭。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RPCClient</span> <span class="keyword">implements</span> <span class="title">AutoCloseable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求队列的名称</span></span><br><span class="line">    <span class="keyword">private</span> String requestQueueName = <span class="string">&quot;rpc_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向 RPC 服务端发送请求并等待响应。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 要发送的请求消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 服务端返回的响应消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException          如果在与 RabbitMQ 通信时发生 I/O 错误</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException 如果在等待响应时线程被中断</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">     <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(String message)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">            <span class="comment">// 从工具类获取 RabbitMQ 连接</span></span><br><span class="line">                Connection connection = RabbitUtils.getConnection();</span><br><span class="line">                <span class="comment">// 创建一个新的通道</span></span><br><span class="line">                Channel channel = connection.createChannel();) &#123;</span><br><span class="line">            <span class="comment">// 声明请求队列，如果队列不存在则创建</span></span><br><span class="line">            channel.queueDeclare(requestQueueName, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">// 生成一个唯一的关联 ID，用于匹配请求和响应</span></span><br><span class="line">            <span class="keyword">final</span> String corrId = UUID.randomUUID().toString();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 声明一个临时的回复队列，并获取其名称</span></span><br><span class="line">            String replyQueueName = channel.queueDeclare().getQueue();</span><br><span class="line">            log.info(<span class="string">&quot;replyQueueName:&#123;&#125;,correlationId:&#123;&#125;&quot;</span>, replyQueueName,corrId);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 构建 AMQP 消息属性，设置关联 ID 和回复队列</span></span><br><span class="line">            AMQP.BasicProperties props = <span class="keyword">new</span> AMQP.BasicProperties.Builder()</span><br><span class="line">                    .correlationId(corrId)</span><br><span class="line">                    <span class="comment">// 设置回复队列，服务端将响应发送到该队列</span></span><br><span class="line">                    .replyTo(replyQueueName)</span><br><span class="line">                    .build();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 发布请求消息到请求队列</span></span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>, requestQueueName, props, message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 创建一个阻塞队列，用于存储响应消息</span></span><br><span class="line">            <span class="keyword">final</span> BlockingQueue&lt;String&gt; response = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 开始消费回复队列中的消息，此方法会返回一个消费者标签。</span></span><br><span class="line"><span class="comment">             * </span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> replyQueueName 要消费的回复队列的名称</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> true           表示自动确认消息，即消费者接收到消息后，RabbitMQ 会自动将消息标记为已消费</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> (consumerTag, delivery) -&gt; &#123;...&#125;  消息消费的回调函数，当接收到消息时会执行此函数</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> consumerTag -&gt; &#123;...&#125;  消费者取消时的回调函数，这里为空实现</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span> 消费者标签，用于后续取消消费等操作</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            String ctag = channel.basicConsume(replyQueueName, <span class="keyword">true</span>, (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">                <span class="comment">// 检查响应消息的关联 ID 是否与请求的关联 ID 匹配</span></span><br><span class="line">                <span class="keyword">if</span> (delivery.getProperties().getCorrelationId().equals(corrId)) &#123;</span><br><span class="line">                    <span class="comment">// 将响应消息添加到阻塞队列中，方便后续取出处理</span></span><br><span class="line">                    response.offer(<span class="keyword">new</span> String(delivery.getBody(), StandardCharsets.UTF_8));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, consumerTag -&gt; &#123;</span><br><span class="line">                <span class="comment">// 消费者取消时的回调，这里为空实现</span></span><br><span class="line">            &#125;);</span><br><span class="line">            log.info(<span class="string">&quot;ctag:&#123;&#125;&quot;</span>, ctag);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 从阻塞队列中获取响应消息，如果队列为空则阻塞等待</span></span><br><span class="line">            String result = response.take();</span><br><span class="line">            <span class="comment">// 取消对回复队列的消费，不再对回复队列进行监听</span></span><br><span class="line">            channel.basicCancel(ctag);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 程序入口，用于测试 RPCClient 类。</span></span><br><span class="line"><span class="comment">     * 发送一系列斐波那契数列请求并打印响应。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> argv 命令行参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (RPCClient fibonacciRpc = <span class="keyword">new</span> RPCClient()) &#123;</span><br><span class="line">            <span class="comment">// 循环发送 32 个请求</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">                <span class="comment">// 将整数转换为字符串</span></span><br><span class="line">                String i_str = Integer.toString(i);</span><br><span class="line">                <span class="comment">// 打印请求信息</span></span><br><span class="line">                System.out.println(<span class="string">&quot; [x] Requesting fib(&quot;</span> + i_str + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">                <span class="comment">// 调用 call 方法发送请求并获取响应</span></span><br><span class="line">                String response = fibonacciRpc.call(i_str);</span><br><span class="line">                <span class="comment">// 打印响应信息</span></span><br><span class="line">                System.out.println(<span class="string">&quot; [.] Got &#x27;&quot;</span> + response + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭资源的方法，当前未实现。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 如果关闭资源时发生错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        log.info(<span class="string">&quot;close()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitUtils;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RPCServer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String RPC_QUEUE_NAME = <span class="string">&quot;rpc_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (Connection connection = RabbitUtils.getConnection();</span><br><span class="line">                Channel channel = connection.createChannel()) &#123;</span><br><span class="line">            channel.queueDeclare(RPC_QUEUE_NAME, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">            channel.basicQos(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot; [x] Awaiting RPC requests&quot;</span>);</span><br><span class="line"></span><br><span class="line">            Object monitor = <span class="keyword">new</span> Object();</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 定义一个 DeliverCallback 回调函数，用于处理从队列中接收到的消息。</span></span><br><span class="line"><span class="comment">             * 当 RabbitMQ 服务器将消息传递给消费者时，会调用这个回调函数。</span></span><br><span class="line"><span class="comment">             * </span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> consumerTag 消费者的标签，用于标识这个消费者。</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> delivery 包含接收到的消息的详细信息，如消息体、属性等。</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            DeliverCallback deliverCallback = (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">                <span class="comment">// 构建一个 AMQP 消息属性对象，用于在回复消息时携带必要的信息</span></span><br><span class="line">                <span class="comment">// 使用 AMQP.BasicProperties.Builder 来创建属性对象</span></span><br><span class="line">                AMQP.BasicProperties replyProps = <span class="keyword">new</span> AMQP.BasicProperties.Builder()</span><br><span class="line">                        <span class="comment">// 设置关联 ID，该 ID 与接收到的消息的关联 ID 相同</span></span><br><span class="line">                        <span class="comment">// 关联 ID 用于将请求消息和响应消息进行关联，确保客户端能正确匹配响应</span></span><br><span class="line">                        .correlationId(delivery.getProperties().getCorrelationId())</span><br><span class="line">                        <span class="comment">// 构建最终的 AMQP 消息属性对象</span></span><br><span class="line">                        .build();</span><br><span class="line"></span><br><span class="line">                String response = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    String message = <span class="keyword">new</span> String(delivery.getBody(), StandardCharsets.UTF_8);</span><br><span class="line">                    <span class="keyword">int</span> n = Integer.parseInt(message);</span><br><span class="line"></span><br><span class="line">                    System.out.println(<span class="string">&quot; [.] fib(&quot;</span> + message + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">                    response += fib(n);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot; [.] &quot;</span> + e.toString());</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 向客户端发送响应消息。</span></span><br><span class="line"><span class="comment">                     * exchange 参数为空字符串，表示使用默认的交换器。</span></span><br><span class="line"><span class="comment">                     * delivery.getProperties().getReplyTo() 为客户端指定的回复队列名称，响应消息将被发送到该队列。</span></span><br><span class="line"><span class="comment">                     * replyProps 是之前构建好的包含关联 ID 的消息属性，用于客户端匹配请求和响应。</span></span><br><span class="line"><span class="comment">                     * response.getBytes(StandardCharsets.UTF_8) 将响应字符串转换为 UTF-8 编码的字节数组进行发送。</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    channel.basicPublish(<span class="string">&quot;&quot;</span>, delivery.getProperties().getReplyTo(), replyProps,</span><br><span class="line">                            response.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 向 RabbitMQ 服务器确认已成功处理消息。</span></span><br><span class="line"><span class="comment">                     * delivery.getEnvelope().getDeliveryTag() 是消息的唯一标识，用于指定要确认的消息。</span></span><br><span class="line"><span class="comment">                     * 第二个参数为 false 表示只确认当前消息，而不是批量确认。</span></span><br><span class="line"><span class="comment">                     * 确认消息后，RabbitMQ 服务器会将该消息从队列中移除。</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    channel.basicAck(delivery.getEnvelope().getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">                    <span class="comment">// RabbitMq consumer worker thread notifies the RPC server owner thread</span></span><br><span class="line">                    <span class="keyword">synchronized</span> (monitor) &#123;</span><br><span class="line">                        monitor.notify();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            channel.basicConsume(RPC_QUEUE_NAME, <span class="keyword">false</span>, deliverCallback, (consumerTag -&gt; &#123;</span><br><span class="line">            &#125;));</span><br><span class="line">            <span class="comment">// Wait and be prepared to consume the message from RPC client.</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (monitor) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        monitor.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ消费者优先级与优先级队列</title>
    <url>/2021/07/09/RabbitMQ/RabbitMQ%E6%B6%88%E8%B4%B9%E8%80%85%E4%BC%98%E5%85%88%E7%BA%A7%E4%B8%8E%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<h3 id="什么是消费者优先级"><a href="#什么是消费者优先级" class="headerlink" title="什么是消费者优先级"></a>什么是消费者优先级</h3><p>消费者优先级是RabbitMQ提供的一种机制，它允许为不同的消费者设置不同的优先级，从而影响消息的分发顺序。当多个消费者同时监听同一个队列时，高优先级的消费者会比低优先级的消费者获得更多的消息。</p>
<h3 id="基本概念："><a href="#基本概念：" class="headerlink" title="基本概念："></a>基本概念：</h3><p>● 高优先级消费者：优先接收消息，只有在高优先级消费者无法处理时（如达到预取限制或繁忙状态），消息才会被分发给低优先级消费者<br>● 公平分发：在相同优先级的消费者之间，RabbitMQ仍然采用轮询（round-robin）的方式公平分发消息<br>● 优先级范围：通常支持0-255的优先级值，数字越大表示优先级越高</p>
<h3 id="如何实现消费者优先级？"><a href="#如何实现消费者优先级？" class="headerlink" title="如何实现消费者优先级？"></a>如何实现消费者优先级？</h3><p> 声明消费者时设置优先级</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Channel channel = ...;</span><br><span class="line">Consumer consumer = ...;</span><br><span class="line">Map&lt;String, Object&gt; args = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">args.put(<span class="string">&quot;x-priority&quot;</span>, <span class="number">10</span>); <span class="comment">// 设置优先级为10</span></span><br><span class="line">channel.basicConsume(<span class="string">&quot;queue_name&quot;</span>, <span class="keyword">false</span>, args, consumer);</span><br></pre></td></tr></table></figure>

<h3 id="消费者优先级的工作原理"><a href="#消费者优先级的工作原理" class="headerlink" title="消费者优先级的工作原理"></a>消费者优先级的工作原理</h3><p>RabbitMQ实现消费者优先级的核心机制：</p>
<ol>
<li>活跃消费者列表：RabbitMQ维护一个按优先级排序的消费者列表</li>
<li>消息分发算法：<br>○ 首先尝试将消息分发给最高优先级的可用消费者<br>○ 如果高优先级消费者达到预取限制（prefetch limit）或处于繁忙状态，则尝试下一优先级<br>○ 相同优先级的消费者之间使用轮询策略</li>
<li>优先级动态调整：消费者优先级可以在运行时动态修改</li>
</ol>
<h3 id="最佳实践与注意事项"><a href="#最佳实践与注意事项" class="headerlink" title="最佳实践与注意事项"></a>最佳实践与注意事项</h3><ol>
<li>合理设置优先级范围：建议使用适度的优先级值（如1-10），避免过度细分</li>
<li>预取计数配置：高优先级消费者可设置较大的prefetch count以提高吞吐量<br>channel.basicQos(20); // 高优先级消费者预取20条</li>
<li>监控消费者分布：使用RabbitMQ管理插件监控消息分发情况<br>rabbitmqctl list_consumers</li>
<li>与消息优先级配合使用：可以同时使用消息优先级和消费者优先级实现更精细控制</li>
<li>避免饥饿现象：确保低优先级消费者仍能获得部分消息，防止完全被阻塞</li>
</ol>
<h3 id="性能考量"><a href="#性能考量" class="headerlink" title="性能考量"></a>性能考量</h3><ol>
<li>内存开销：优先级实现需要额外的内存维护消费者列表，但影响通常很小</li>
<li>CPU开销：优先级排序在消息分发时进行，对性能影响可以忽略</li>
<li>网络利用率：合理设置优先级可以优化网络资源使用，让重要消息优先传输</li>
</ol>
<h3 id="与其他RabbitMQ特性的交互"><a href="#与其他RabbitMQ特性的交互" class="headerlink" title="与其他RabbitMQ特性的交互"></a>与其他RabbitMQ特性的交互</h3><ol>
<li>消息优先级：消费者优先级和消息优先级是两个独立但互补的特性</li>
<li>死信队列：被拒绝或过期的消息不受消费者优先级影响</li>
<li>TTL设置：消息过期检查优先于消费者优先级</li>
<li>集群环境：优先级机制在集群中的所有节点上保持一致</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitConstant</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_SMS = <span class="string">&quot;sms.quorum&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.entity.SMS;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitConstant;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitUtils;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * OrderSystem 类用于模拟订单系统，将 SMS 消息发送到 RabbitMQ 队列。</span></span><br><span class="line"><span class="comment"> * 该类创建与 RabbitMQ 的连接，声明队列，并将 SMS 消息转换为 JSON 格式后发送到队列。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderSystem</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">/* </span></span><br><span class="line"><span class="comment">         * ### 1. 连接（Connection）</span></span><br><span class="line"><span class="comment">        Connection 代表了应用程序与RabbitMQ服务器之间的物理TCP连接。当你使用 RabbitUtils.getConnection() 方法时，实际上是在建立一个到RabbitMQ服务器的网络连接。这个连接是一个相对较重的资源，因为它涉及到网络套接字的创建、TCP握手等操作。在一个应用程序中，通常只需要创建一个 Connection 实例，并且在整个应用程序的生命周期内复用它。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        ### 2. 通道（Channel）</span></span><br><span class="line"><span class="comment">        Channel 是建立在 Connection 之上的轻量级抽象。它可以看作是一个虚拟连接，允许应用程序在同一个 Connection 上进行多个独立的操作。每个 Channel 都有自己独立的ID和状态，并且可以独立地进行消息的发送和接收。由于创建和销毁 Channel 的开销相对较小，因此在需要进行大量并发操作时，可以创建多个 Channel 来提高效率。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">try</span> (Connection connection = RabbitUtils.getConnection();</span><br><span class="line">                Channel channel = connection.createChannel();) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 声明消息队列（参数说明：队列名称，持久化，排他性，自动删除，其他参数）</span></span><br><span class="line">            <span class="comment">// durable=true 表示队列持久化（服务重启后队列不会消失）</span></span><br><span class="line">            <span class="comment">// exclusive=false 表示非排他队列（允许多消费者连接）</span></span><br><span class="line">            <span class="comment">// autoDelete=false 表示不会自动删除（没有消费者也不会删除队列）</span></span><br><span class="line">            channel.queueDeclare(RabbitConstant.QUEUE_SMS, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 循环发送 100 到 200 条 SMS 消息</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">100</span>; i &lt;= <span class="number">200</span>; i++) &#123;</span><br><span class="line">                <span class="comment">// 创建一个 SMS 对象</span></span><br><span class="line">                SMS sms = <span class="keyword">new</span> SMS(<span class="string">&quot;乘客&quot;</span> + i, <span class="string">&quot;13900000&quot;</span> + i, <span class="string">&quot;您的车票已预订成功&quot;</span>);</span><br><span class="line">                <span class="comment">// 将 SMS 对象转换为 JSON 字符串</span></span><br><span class="line">                String jsonSMS = <span class="keyword">new</span> Gson().toJson(sms);</span><br><span class="line">                <span class="comment">// 发送 JSON 格式的 SMS 消息到 RabbitMQ 队列</span></span><br><span class="line">                channel.basicPublish(<span class="string">&quot;&quot;</span>, RabbitConstant.QUEUE_SMS, <span class="keyword">null</span>, jsonSMS.getBytes());</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 记录日志，表示订单信息已成功投递到 Broker</span></span><br><span class="line">            log.info(<span class="string">&quot;订单信息已投递至Broker&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitConstant;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitUtils;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsSenderHigh</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Connection connection = RabbitUtils.getConnection();</span><br><span class="line">        <span class="keyword">final</span> Channel channel = connection.createChannel();</span><br><span class="line">        </span><br><span class="line">        channel.basicQos(<span class="number">5</span>);</span><br><span class="line">        channel.queueDeclare(RabbitConstant.QUEUE_SMS, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建消费者参数Map，用于设置消费者属性</span></span><br><span class="line">        Map&lt;String, Object&gt; cuArgs = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 设置消费者优先级为10（数值越大优先级越高）</span></span><br><span class="line">        cuArgs.put(<span class="string">&quot;x-priority&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="comment">// 开始消费队列消息，参数说明：</span></span><br><span class="line">        <span class="comment">// RabbitConstant.QUEUE_SMS - 要消费的队列名称</span></span><br><span class="line">        <span class="comment">// false - 关闭自动确认，需要手动调用basicAck</span></span><br><span class="line">        <span class="comment">// cuArgs - 消费者参数配置</span></span><br><span class="line">        <span class="comment">// new DefaultConsumer... - 消息处理回调函数</span></span><br><span class="line">        channel.basicConsume(RabbitConstant.QUEUE_SMS, <span class="keyword">false</span>, cuArgs, <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                String jsonSMS = <span class="keyword">new</span> String(body);</span><br><span class="line">                log.info(<span class="string">&quot;SMSSender-短信发送成功:&#123;&#125;&quot;</span>, jsonSMS);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitConstant;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitUtils;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsSenderLow</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Connection connection = RabbitUtils.getConnection();</span><br><span class="line">        <span class="keyword">final</span> Channel channel = connection.createChannel();</span><br><span class="line">        channel.basicQos(<span class="number">5</span>);</span><br><span class="line">        </span><br><span class="line">        channel.queueDeclare(RabbitConstant.QUEUE_SMS, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        </span><br><span class="line">        Map&lt;String, Object&gt; cuArgs = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        cuArgs.put(<span class="string">&quot;x-priority&quot;</span>, <span class="number">1</span>); </span><br><span class="line">        </span><br><span class="line">        channel.basicConsume(RabbitConstant.QUEUE_SMS, <span class="keyword">false</span>,cuArgs, <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                String jsonSMS = <span class="keyword">new</span> String(body);</span><br><span class="line">                log.info(<span class="string">&quot;SMSSender-短信发送成功:&#123;&#125;&quot;</span>, jsonSMS);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="RabbitMQ优先级队列"><a href="#RabbitMQ优先级队列" class="headerlink" title="RabbitMQ优先级队列"></a>RabbitMQ优先级队列</h3><p>RabbitMQ 提供了为经典队列添加“优先级”功能的支持。启用了这一特性的经典队列通常被定义为“优先级队列”。该系统允许设置的优先级范围是从1到255，但官方推荐使用1至5之间的值以优化性能。值得注意的是，较高的优先级设定会相应地增加对CPU和内存资源的需求，这是因为RabbitMQ需要针对每个指定的优先级（从1到队列配置中所设的最大值）维护独立的子队列。<br>要创建一个优先级队列，必须在队列声明时指定x-max-priority参数。此参数应设置为介于1与255之间的一个整数，用以表示该队列能够接受的消息最高优先级水平。以下示例展示了如何使用Java API完成这一配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Channel ch = ...;</span><br><span class="line">Map&lt;String, Object&gt; args = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">args.put(<span class="string">&quot;x-max-priority&quot;</span>, <span class="number">10</span>);</span><br><span class="line">ch.queueDeclare(<span class="string">&quot;my-priority-queue&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, args);</span><br></pre></td></tr></table></figure>

<p>生产者可以通过basic.properties中的priority字段来发布具有优先级的消息，其中数值越大代表消息的优先级越高。</p>
<h3 id="优先级队列的行为"><a href="#优先级队列的行为" class="headerlink" title="优先级队列的行为"></a>优先级队列的行为</h3><p>AMQP 0-9-1规范对于消息优先级的具体实现方式描述较为宽泛。该规范要求所有队列至少支持两个不同的优先级，并且最多可以支持至十个优先级层级。然而，对于那些未明确指定优先级属性的消息如何处理，规范中并未给出明确规定。<br>默认情况下，RabbitMQ的标准队列并不直接支持消息优先级功能。当创建支持优先级的队列时，可以根据具体需求设定最大允许的优先级值。在选择具体的优先级数目时，需要综合考量以下几个关键因素：<br>● 资源消耗：每个队列内的每一个优先级层次都会额外占用内存和磁盘空间，同时也会增加CPU使用率（尤其是在消息被消费的过程中）。因此，不推荐设置过多的优先级层次。<br>● 优先级范围：根据定义，消息优先级是一个无符号字节，这意味着其有效取值区间为0到255。<br>● 默认优先级：对于那些没有显式设置优先级属性的消息，默认将以优先级0进行处理。<br>● 超出限制的情况：任何超过队列所配置的最大优先级数的消息都将按照最高优先级来进行处理。</p>
<h3 id="最大优先级数与资源消耗的关系"><a href="#最大优先级数与资源消耗的关系" class="headerlink" title="最大优先级数与资源消耗的关系"></a>最大优先级数与资源消耗的关系</h3><p>基于上述考虑，建议将优先级的数量控制在一个相对较小的范围内，例如1到5之间。如果确实需要更多层级，则建议上限不超过1到10之间的单个位数。这是因为当前系统架构下，随着优先级数量的增长，会相应地启动更多的Erlang进程，这不仅会增加CPU资源的消耗，还可能对运行时的任务调度产生不利影响。</p>
<h3 id="消费者与优先级队列的协作机制"><a href="#消费者与优先级队列的协作机制" class="headerlink" title="消费者与优先级队列的协作机制"></a>消费者与优先级队列的协作机制</h3><p>当消费者连接到一个空的优先级队列时，随后发布的消息可能会被立即消费，而不必在队列中等待。这种情况下，优先级队列实际上并未执行任何消息排序功能，从而使得优先级机制未能发挥作用。<br>然而，在大多数实际应用场景中，推荐的做法是让消费者采用手动确认模式，并通过basic.qos（预取）方法来控制每次可接收的消息数量。这样做可以确保优先级机制的有效性。basic.qos参数是在消费者连接至队列时设定的，它定义了该消费者一次能够处理的最大消息数。<br>以下将详细探讨消费者与优先级队列之间的协作方式，并指出在某些情况下，即使是高优先级的消息也可能需要等待低优先级消息先被处理的现象。</p>
<h3 id="示例演示"><a href="#示例演示" class="headerlink" title="示例演示"></a>示例演示</h3><ol>
<li>一名新消费者以basic.qos=10作为连接参数加入了一个空的经典（非优先级）队列。</li>
<li>一旦有一条消息发布，则这条消息会被立即传递给消费者进行处理。</li>
<li>接着快速连续地发布了5条消息；由于当前只有1条未被确认的消息（少于qos设置值10），这些新增的消息也会立刻被发送给消费者。</li>
<li>如果紧接着再迅速发布10条消息，在已有条件下仅允许额外4条进入处理流程（因已达到qos上限10），剩余6条则需暂时停留在队列中处于就绪状态。</li>
<li>当消费者完成对前5条消息的确认后，原先等待中的6条消息中有5条会即刻被投递出去。</li>
</ol>
<h3 id="引入优先级后的场景"><a href="#引入优先级后的场景" class="headerlink" title="引入优先级后的场景"></a>引入优先级后的场景</h3><ol>
<li>同样按照上述示例，假设消费者以basic.qos=10的方式连接。</li>
<li>发布了10条属于较低优先级别的消息，并且这些消息立刻被分配给了消费者（此时已达到qos限制）。</li>
<li>如果在此之后又尝试发布一条最高优先级的消息，但由于当前预取量已达上限，这条高优先级消息只能等待直到有空间可用为止。</li>
</ol>
<h3 id="与其他特性的交互考量"><a href="#与其他特性的交互考量" class="headerlink" title="与其他特性的交互考量"></a>与其他特性的交互考量</h3><p>通常来说，优先级队列具备标准RabbitMQ队列的所有特性，但在设计时需要注意一些特殊交互情况：<br>● 对设置了TTL（Time To Live）属性的消息而言，它们总是从队列头部开始过期。这意味着即使指定了单个队列级别的TTL策略，低优先级的消息仍可能因为被高优先级消息阻挡而无法按时过期。尽管这些信息永远不会被投递给消费者，但它们仍然会计入队列统计之中。<br>● 当设置了最大长度(max-length)限制的队列达到其容量上限时，系统将从队首开始删除旧消息以便为新到来的数据腾出空间。在这种情形下，可能存在为了容纳新的低优先级消息而不得不丢弃部分现有高优先级记录的风险，这显然违背了预期目的。</p>
<h3 id="优先级队列的应用场景"><a href="#优先级队列的应用场景" class="headerlink" title="优先级队列的应用场景"></a>优先级队列的应用场景</h3><p>在专业环境中，RabbitMQ的优先级队列功能可以应用于多种场景，以确保关键消息能够得到及时处理。</p>
<ol>
<li>紧急任务调度：在需要对任务按紧急程度进行区分的情况下，如系统监控警报、故障恢复请求等，通过设置不同的优先级来保证高优先级的消息被优先消费。</li>
<li>客户服务支持：对于客服系统而言，可以根据客户的重要性和问题的严重性给求助信息分配不同的优先级，从而使得重要客户的询问或严重的投诉能够更快地获得响应。</li>
<li>金融交易处理：在金融市场中，某些类型的订单（比如大额交易）可能需要比普通订单更快速地被执行。利用优先级队列可以帮助实现这一目标。</li>
<li>资源分配优化：当面临有限计算资源时，可以通过为不同类型的任务设定不同级别的优先级，来优化资源使用效率，确保最重要或者最紧迫的任务首先完成。<br>总之，通过灵活配置RabbitMQ中的优先级队列，企业能够在多个领域内提升服务质量与效率，更好地满足业务需求。</li>
</ol>
<h3 id="代码案例"><a href="#代码案例" class="headerlink" title="代码案例"></a>代码案例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitConstant</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PRIORITY_EXCHANGE = <span class="string">&quot;priority.exchange&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PRIORITY_QUEUE = <span class="string">&quot;priority.queue&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PRIORITY_ROUTING_KEY = <span class="string">&quot;priority_routing_key&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.SneakyThrows;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;192.168.31.230&quot;</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;my_vhost&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection conn = connectionFactory.newConnection();</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Channel channel)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设置队列参数，启用优先级支持(最大优先级为5)</span></span><br><span class="line">        Map&lt;String, Object&gt; arguments = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        arguments.put(<span class="string">&quot;x-max-priority&quot;</span>, <span class="number">5</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 声明交换器(direct类型)</span></span><br><span class="line">        channel.exchangeDeclare(RabbitConstant.PRIORITY_EXCHANGE, <span class="string">&quot;direct&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 声明优先级队列</span></span><br><span class="line">        channel.queueDeclare(RabbitConstant.PRIORITY_QUEUE, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, arguments);</span><br><span class="line">        <span class="comment">// 绑定队列到交换器</span></span><br><span class="line">        channel.queueBind(RabbitConstant.PRIORITY_QUEUE, </span><br><span class="line">                         RabbitConstant.PRIORITY_EXCHANGE, </span><br><span class="line">                         RabbitConstant.PRIORITY_ROUTING_KEY);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitUtils;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitConstant;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.AMQP;</span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PriorityProducer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection conn = RabbitUtils.getConnection();</span><br><span class="line">        Channel channel = conn.createChannel();</span><br><span class="line">        RabbitUtils.init(channel);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 发送5条不同优先级的消息</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            String message = <span class="string">&quot;优先级为&quot;</span> + i + <span class="string">&quot;的消息&quot;</span>;</span><br><span class="line">            AMQP.BasicProperties props = <span class="keyword">new</span> AMQP.BasicProperties.Builder()</span><br><span class="line">                    .priority(i)  <span class="comment">// 设置优先级(1-5)</span></span><br><span class="line">                    .build();</span><br><span class="line">            </span><br><span class="line">            channel.basicPublish(RabbitConstant.PRIORITY_EXCHANGE, </span><br><span class="line">                               RabbitConstant.PRIORITY_ROUTING_KEY, </span><br><span class="line">                               props, </span><br><span class="line">                               message.getBytes());</span><br><span class="line">            log.info(<span class="string">&quot;已发送: &#123;&#125;&quot;</span> , message);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        channel.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitUtils;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitConstant;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PriorityConsumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection conn = RabbitUtils.getConnection();</span><br><span class="line">        Channel channel = conn.createChannel();</span><br><span class="line">        RabbitUtils.init(channel);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置每次只消费一条消息</span></span><br><span class="line">        channel.basicQos(<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, </span></span></span><br><span class="line"><span class="function"><span class="params">                                     AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> </span>&#123;</span><br><span class="line">                String message = <span class="keyword">new</span> String(body);</span><br><span class="line">                log.info(<span class="string">&quot;收到消息: &quot;</span> + message + <span class="string">&quot; | 优先级: &quot;</span> + properties.getPriority());</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 开始消费</span></span><br><span class="line">        channel.basicConsume(RabbitConstant.PRIORITY_QUEUE, <span class="keyword">false</span>, consumer);</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者已启动，等待接收消息...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ消费者预取机制与消息确认机制</title>
    <url>/2021/07/10/RabbitMQ/RabbitMQ%E6%B6%88%E8%B4%B9%E8%80%85%E9%A2%84%E5%8F%96%E6%9C%BA%E5%88%B6%E4%B8%8E%E6%B6%88%E6%81%AF%E7%A1%AE%E8%AE%A4%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h3 id="什么是消费者预取"><a href="#什么是消费者预取" class="headerlink" title="什么是消费者预取"></a>什么是消费者预取</h3><p>消费者预取是对AMQP协议中通道预取机制的扩展。简单来说，它控制着消费者一次能接收多少条未确认的消息。</p>
<p><img src="/images/RabbitMQ/20210710-1.png" alt="image-20210710-1"></p>
<h3 id="与AMQP标准的区别"><a href="#与AMQP标准的区别" class="headerlink" title="与AMQP标准的区别"></a>与AMQP标准的区别</h3><p>按照AMQP 0-9-1标准：<br>● 预取数量是在通道级别共享的（同一个通道上所有消费者共用这个数量）<br>但RabbitMQ做了改进：<br>● 预取数量是针对每个消费者单独计算的（每个消费者有自己的限额）<br>RabbitMQ这样做有两个原因：</p>
<ol>
<li>标准方式效率低 - 当单个通道从多个队列消费时，需要频繁协调</li>
<li>实际使用时，为每个消费者单独设置限额更符合直觉</li>
</ol>
<h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>单个消费者案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Channel channel = ...;</span><br><span class="line">Consumer consumer = ...;</span><br><span class="line">channel.basicQos(<span class="number">10</span>); <span class="comment">// 这个消费者最多同时处理10条未确认消息</span></span><br><span class="line">channel.basicConsume(<span class="string">&quot;my-queue&quot;</span>, <span class="keyword">false</span>, consumer);</span><br></pre></td></tr></table></figure>

<p>如果设置为0，表示不限制数量：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">channel.basicQos(<span class="number">0</span>); <span class="comment">// 这个消费者可以处理无限数量的消息</span></span><br></pre></td></tr></table></figure>

<h3 id="多个独立消费者"><a href="#多个独立消费者" class="headerlink" title="多个独立消费者"></a>多个独立消费者</h3><p>同一个通道上的两个消费者，各自有10条的限额：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Channel channel = ...;</span><br><span class="line">Consumer consumer1 = ...;</span><br><span class="line">Consumer consumer2 = ...;</span><br><span class="line">channel.basicQos(<span class="number">10</span>); <span class="comment">// 每个消费者限额10条</span></span><br><span class="line">channel.basicConsume(<span class="string">&quot;my-queue1&quot;</span>, <span class="keyword">false</span>, consumer1);</span><br><span class="line">channel.basicConsume(<span class="string">&quot;my-queue2&quot;</span>, <span class="keyword">false</span>, consumer2);</span><br></pre></td></tr></table></figure>

<h3 id="共享限额的消费者"><a href="#共享限额的消费者" class="headerlink" title="共享限额的消费者"></a>共享限额的消费者</h3><p>也可以设置两种限额：每个消费者的限额 + 整个通道的总限额</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">channel.basicQos(<span class="number">10</span>, <span class="keyword">false</span>); <span class="comment">// 每个消费者最多10条</span></span><br><span class="line">channel.basicQos(<span class="number">15</span>, <span class="keyword">true</span>);  <span class="comment">// 整个通道最多15条</span></span><br></pre></td></tr></table></figure>
<p>这样两个消费者合计最多15条未确认消息，且每个消费者不超过10条。不过这种模式性能会差一些。</p>
<h3 id="默认预取设置"><a href="#默认预取设置" class="headerlink" title="默认预取设置"></a>默认预取设置</h3><p>RabbitMQ允许配置默认的预取值（当消费者没有明确设置时使用）。可以在配置文件中设置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line"> &#123;rabbit, [</span><br><span class="line">       &#123;default_consumer_prefetch, &#123;<span class="keyword">false</span>,<span class="number">250</span>&#125;&#125;  <span class="comment">// 默认每个消费者250条</span></span><br><span class="line">     ]</span><br><span class="line"> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>RabbitMQ的预取机制比AMQP标准更灵活实用，可以：<br>● 为每个消费者单独设置处理上限<br>● 也可以设置通道级别的总上限<br>● 支持无限处理模式（设置为0时）<br>● 可以配置默认值简化代码</p>
<h3 id="Consumer消息确认机制"><a href="#Consumer消息确认机制" class="headerlink" title="Consumer消息确认机制"></a>Consumer消息确认机制</h3><p>在RabbitMQ中，消费者确认机制（Consumer Delivery Acknowledgements）是确保消息可靠传递的核心环节，它通过一套精细的控制机制来协调消息的安全处理与系统吞吐量之间的平衡。每个被投递的消息都会被分配一个唯一的交付标识符（Delivery Tag），这是一个单调递增的整数值，在通道（Channel）范围内有效，消费者通过此标识符对特定消息进行确认操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitConstant;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitUtils;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsSenderHigh</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Connection connection = RabbitUtils.getConnection();</span><br><span class="line">        <span class="keyword">final</span> Channel channel = connection.createChannel();</span><br><span class="line">        </span><br><span class="line">        channel.basicQos(<span class="number">5</span>);</span><br><span class="line">        channel.queueDeclare(RabbitConstant.QUEUE_SMS, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        channel.basicConsume(RabbitConstant.QUEUE_SMS, <span class="keyword">false</span>, <span class="keyword">null</span>, <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                String jsonSMS = <span class="keyword">new</span> String(body);</span><br><span class="line">                log.info(<span class="string">&quot;SMSSender-短信发送成功:&#123;&#125;&quot;</span>, jsonSMS);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Java客户端中，当消费者处理完消息后，可调用channel.basicAck(deliveryTag, false)进行单条消息确认，或使用channel.basicAck(deliveryTag, true)批量确认所有小于等于该标签的消息，这种批量确认机制能显著提升处理效率，尤其在消息密集场景下。<br>RabbitMQ提供两种消费者确认模式（Consumer Acknowledgement Modes）：手动模式（显式调用ACK/NACK）和自动模式（自动确认）。数据安全性要求高的场景必须采用手动模式，以避免消息在消费者崩溃时丢失。当消息处理失败时，可通过channel.basicNack(deliveryTag, false, true)进行否定确认，第三个参数控制是否重新入队（requeue），此时消息会回到队列头部，可能被原消费者重复获取。若希望将消息路由到死信队列（DLX），则需设置requeue=false并预先配置DLX策略。<br>消费者预取数量（Prefetch Count）的设置直接影响系统吞吐量与公平性。通过channel.basicQos(10)限制未确认消息的最大数量，可防止单个消费者独占队列导致负载不均，但过小的预取值会降低处理速度，而过大的预取值可能引发消费者内存溢出。当消费者异常断开时，所有未确认的消息会自动重新入队（Automatic Requeueing），这是通过RabbitMQ的连接心跳检测机制实现的。值得注意的是，重新入队的消息可能因网络延迟出现乱序情况，业务逻辑需考虑幂等性设计。</p>
]]></content>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ Quorum队列</title>
    <url>/2021/07/11/RabbitMQ/RabbitMQ%20Quorum%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<h3 id="Quorum队列：增强消息传递的可靠性与一致性"><a href="#Quorum队列：增强消息传递的可靠性与一致性" class="headerlink" title="Quorum队列：增强消息传递的可靠性与一致性"></a>Quorum队列：增强消息传递的可靠性与一致性</h3><p><img src="/images/RabbitMQ/20210711-1.png" alt="image-20210711-1"></p>
<p><img src="/images/RabbitMQ/20210711-2.png" alt="image-20210711-2"></p>
<p><img src="/images/RabbitMQ/20210711-3.png" alt="image-20210711-3"></p>
<p>RabbitMQ 4引入了Quorum队列（Quorum Queues），这是一种全新的队列类型，旨在解决传统经典队列在高并发和分布式环境中的局限性。与经典队列不同，Quorum队列采用基于Raft共识算法的设计，能够在分布式节点之间实现强一致性和高可用性。这种特性使其特别适用于对消息可靠性要求极高的场景，例如金融交易系统或订单处理平台。<br>Quorum队列的核心工作原理在于其分布式存储机制。每个队列的数据会被复制到多个节点上，形成一个逻辑上的“仲裁组”（Quorum Group）。当生产者向队列发送消息时，消息需要被大多数节点确认后才会被视为成功写入。这种机制确保了即使部分节点发生故障，队列仍能保持可用性，并且不会丢失任何已提交的消息。相比之下，经典队列虽然提供了快速的本地存储，但在节点故障或网络分区的情况下容易出现消息丢失或不一致的问题。<br>Quorum队列的优势主要体现在以下几个方面。首先，它提供了更高的容错能力。由于数据被分布在多个节点上，单个节点的失效不会影响整个队列的运行。其次，Quorum队列支持自动化的领导者选举机制，能够在主节点崩溃时迅速切换到备用节点，从而减少服务中断时间。最后，Quorum队列的强一致性保证了生产者和消费者之间的数据同步，避免了因消息乱序或重复而导致的业务逻辑错误。<br>然而，Quorum队列也有一定的局限性。由于其基于Raft算法的设计，写入操作需要经过多数节点的确认，因此在高吞吐量场景下可能会引入额外的延迟。此外，维护多个副本会增加存储成本和网络开销，这在资源受限的环境中可能成为一个挑战。尽管如此，Quorum队列仍然是对经典队列的一种重要补充，尤其适合那些优先考虑消息可靠性和系统稳定性的应用。</p>
<h3 id="与经典队列区别"><a href="#与经典队列区别" class="headerlink" title="与经典队列区别"></a>与经典队列区别</h3><p><a href="https://www.rabbitmq.com/docs/quorum-queues#feature-comparison">https://www.rabbitmq.com/docs/quorum-queues#feature-comparison</a></p>
<p><img src="/images/RabbitMQ/20210711-4.png" alt="image-20210711-4"></p>
<ol>
<li>声明与操作<br>○ 声明队列：声明仲裁队列时，需将x-queue-type参数设为quorum，默认最多有三个副本，分布在集群节点上，声明后可与其他队列一样绑定交换器。<br>○ 客户端操作：消费、确认、取消消费者、清除队列消息、删除队列等操作与经典队列类似，但声明和设置消费者QoS预取时有差异。</li>
<li>复制与管理<br>○ 复制因子与成员管理：默认初始复制因子为三，建议复制因子为奇数且不超过集群节点数的多数。可通过x-quorum-initial-group-size参数控制初始复制因子，通过命令行工具管理副本成员。<br>○ 队列领导者管理：每个仲裁队列有一个领导者副本，负责处理队列操作并复制到追随者副本。可通过多种方式设置初始领导者，还可使用rabbitmq-queues rebalance命令重新平衡领导者分布。<br>○ 连续成员协调（CMR）：是对副本管理的补充，可自动尝试将副本数量调整到目标值。可通过配置文件、策略或队列参数设置目标副本数量等相关参数，由特定事件触发，默认每60分钟检查一次。</li>
<li>行为与性能<br>○ 行为表现：依赖Raft协议确保数据一致性和安全性。领导者选举在集群形成或领导者不可用时进行，故障节点恢复或新副本加入时会进行同步。集群节点数量影响容错能力，建议在3 - 7个节点的集群中使用仲裁队列。<br>○ 性能特征：设计为用延迟换取吞吐量，在使用消费者确认和发布者确认的场景中，吞吐量优于经典镜像队列。受磁盘I/O影响大，消息越大、副本越多，吞吐量越低，建议使用高速磁盘和合理设置消费者预取值。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.entity.SMS;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitConstant;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitUtils;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * OrderSystem 类用于模拟订单系统，将 SMS 消息发送到 RabbitMQ 队列。</span></span><br><span class="line"><span class="comment"> * 该类创建与 RabbitMQ 的连接，声明队列，并将 SMS 消息转换为 JSON 格式后发送到队列。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderSystem</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (Connection connection = RabbitUtils.getConnection();</span><br><span class="line">                Channel channel = connection.createChannel();) &#123;</span><br><span class="line">            Map&lt;String, Object&gt; arguments = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            <span class="comment">// 设置队列类型为quorum(仲裁队列)，提供高可用性</span></span><br><span class="line">            arguments.put(<span class="string">&quot;x-queue-type&quot;</span>, <span class="string">&quot;quorum&quot;</span>);</span><br><span class="line">            <span class="comment">// 设置初始仲裁组大小为3，即3个副本</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">/* </span></span><br><span class="line"><span class="comment">            一个三节点集群将会有三个副本，每个节点上一个副本。而在七节点集群中，三个节点会各自持有一个副本，但另外四个节点不会托管新声明队列的任何副本。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            可以为仲裁队列配置复制因子（队列拥有的副本数量）。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            实际可用的最小因子值为三。强烈建议使用奇数作为因子值，这样可以计算出明确的节点多数（quorum）。例如，在两节点集群中就不存在&quot;多数&quot;节点。这将在下文的&quot;容错和最小在线副本数&quot;部分通过更多示例说明。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            对于大型集群或节点数为偶数的集群，这可能不太理想。要控制仲裁队列成员的数量，可以在声明队列时设置x-quorum-initial-group-size队列参数。提供的组大小参数应是一个大于零且小于或等于当前RabbitMQ集群大小的整数。仲裁队列将在声明时随机选择集群中的RabbitMQ节点子集来运行。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            如果仲裁队列是在所有集群节点加入集群之前声明的，并且初始副本数大于集群成员总数，则实际使用的有效值将等于集群节点总数。当更多节点加入集群时，副本数不会自动增加，但操作员可以手动增加。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            arguments.put(<span class="string">&quot;x-quorum-initial-group-size&quot;</span>, <span class="number">3</span>);</span><br><span class="line">            channel.queueDeclare(RabbitConstant.QUEUE_SMS_QUORUM, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, arguments);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">100</span>; i &lt; <span class="number">200</span>; i++) &#123;</span><br><span class="line">                SMS sms = <span class="keyword">new</span> SMS(<span class="string">&quot;乘客&quot;</span> + i, <span class="string">&quot;13900000&quot;</span> + i, <span class="string">&quot;您的车票已预订成功&quot;</span>);</span><br><span class="line">                String jsonSMS = <span class="keyword">new</span> Gson().toJson(sms);</span><br><span class="line">                channel.basicPublish(<span class="string">&quot;&quot;</span>, RabbitConstant.QUEUE_SMS_QUORUM, <span class="keyword">null</span>, jsonSMS.getBytes());</span><br><span class="line">            &#125;</span><br><span class="line">            log.info(<span class="string">&quot;订单信息已投递至Broker&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitConstant;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitUtils;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsSender</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Connection connection = RabbitUtils.getConnection();</span><br><span class="line">        <span class="keyword">final</span> Channel channel = connection.createChannel();</span><br><span class="line">        </span><br><span class="line">        channel.basicConsume(RabbitConstant.QUEUE_SMS_QUORUM, <span class="keyword">false</span>, <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                String jsonSMS = <span class="keyword">new</span> String(body);</span><br><span class="line">                log.info(<span class="string">&quot;SMSSender-短信发送成功:&#123;&#125;&quot;</span>, jsonSMS);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ队列与消息TTL</title>
    <url>/2021/07/11/RabbitMQ/RabbitMQ%E9%98%9F%E5%88%97%E4%B8%8E%E6%B6%88%E6%81%AFTTL/</url>
    <content><![CDATA[<h3 id="队列-TTL（Time-To-Live）"><a href="#队列-TTL（Time-To-Live）" class="headerlink" title="队列 TTL（Time To Live）"></a>队列 TTL（Time To Live）</h3><p>通过 RabbitMQ，用户能够为消息及队列配置TTL（Time To Live，生存时间）参数或策略。TTL定义了消息或队列在系统中的最大存活期限。<br>对于消息而言，其TTL决定了该消息在被消费之前可以在队列中保留的最大时长。一旦消息停留的时间超过了设定的TTL值，则该消息将被视为过期，并从队列中移除。“移除”意味着这条消息既不会被分发给任何订阅者，也无法通过调用basic.get方法直接从队列中获取。值得注意的是，消息TTL可以针对单个消息、特定队列或是整个队列组进行设置。<br>此外，TTL不仅限于应用于消息层面，还可以对整个队列生效。这一特性与自动删除属性相结合使用时尤为有用。特别是对于非持久化的经典队列来说，设置队列级别的TTL通常更加有意义；然而，需指出的是流式队列并不支持这种过期机制。当一个队列处于未被活跃使用的状态时（即没有消费者在线连接到该队列），它会在达到指定的TTL后自动删除。<br>TTL的行为可以通过可选的队列参数来调控，而最推荐的做法是通过策略来进行这些配置。同时，管理员也可以通过制定策略来强制执行某些TTL相关的规则。</p>
<h3 id="队列级别的消息-TTL"><a href="#队列级别的消息-TTL" class="headerlink" title="队列级别的消息 TTL"></a>队列级别的消息 TTL</h3><p>可通过策略设置 message-ttl 参数，或在声明队列时指定相同参数来为特定队列设置消息 TTL。<br>在队列中停留时间超过配置 TTL 的消息将被视为过期。注意，路由到多个队列的消息可能在每个队列中以不同时间过期（或完全不过期）。某队列中消息的过期不会影响其他队列中的同一消息。<br>服务器保证过期消息不会通过 basic.deliver 投递（给消费者），也不会在响应轮询消费者时发送（在 basic.get-ok 响应中）。<br>此外，服务器会尝试在消息基于 TTL 的过期时间到达时或之后尽快移除它们。<br>TTL 参数或策略的值必须是非负整数（≥0），以毫秒为单位描述 TTL 时长。例如，值 1000 表示消息在队列中存活 1 秒或直到被投递给消费者。该参数可以是 AMQP 0-9-1 类型的 short-short-int、short-int、long-int 或 long-long-int。</p>
<h3 id="使用策略为队列定义消息-TTL"><a href="#使用策略为队列定义消息-TTL" class="headerlink" title="使用策略为队列定义消息 TTL"></a>使用策略为队列定义消息 TTL</h3><p>以下 Java 示例创建一个消息最多保留 60 秒的队列：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Object&gt; args = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">args.put(<span class="string">&quot;x-message-ttl&quot;</span>, <span class="number">60000</span>);</span><br><span class="line">channel.queueDeclare(<span class="string">&quot;myqueue&quot;</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, args);</span><br></pre></td></tr></table></figure>

<p>可以对已包含消息的队列应用消息 TTL 策略，但需注意以下情况：<br>● 当消息被重新入队时（例如使用带 requeue 参数的 AMQP 方法，或因通道关闭），其原始过期时间会被保留。<br>● 将 TTL 设置为 0 会使消息在到达队列时立即过期，除非能立即投递给消费者。这提供了替代 RabbitMQ 服务器不支持的 immediate 发布标志的方案。与该标志不同，不会生成 basic.returns，如果设置了死信交换，消息会被死信化。</p>
<h3 id="发布者设置的逐条消息-TTL"><a href="#发布者设置的逐条消息-TTL" class="headerlink" title="发布者设置的逐条消息 TTL"></a>发布者设置的逐条消息 TTL</h3><p>在发布消息时，可以通过设置 expiration 属性来实现每条消息的生存时间（TTL）。expiration 字段应以毫秒为单位指定 TTL 的持续时间，这一要求与 x-message-ttl 参数的规定一致。需要注意的是，expiration 字段必须采用字符串形式提供，即代理仅接受该字段值作为数字的字符串表示。<br>如果同时设置了队列级别的 TTL 以及单个消息级别的 TTL，则实际生效的将是两者中较小的那个值。<br>以下 Java 示例使用 RabbitMQ 客户端发布一条最多保留 60 秒的消息：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] messageBodyBytes = <span class="string">&quot;Hello, world!&quot;</span>.getBytes();</span><br><span class="line">AMQP.BasicProperties properties = <span class="keyword">new</span> AMQP.BasicProperties.Builder()</span><br><span class="line">.expiration(<span class="string">&quot;60000&quot;</span>)</span><br><span class="line">.build();</span><br><span class="line">channel.basicPublish(<span class="string">&quot;my-exchange&quot;</span>, <span class="string">&quot;routing-key&quot;</span>, properties, messageBodyBytes);</span><br></pre></td></tr></table></figure>

<h3 id="逐条消息-TTL-与死信机制"><a href="#逐条消息-TTL-与死信机制" class="headerlink" title="逐条消息 TTL 与死信机制"></a>逐条消息 TTL 与死信机制</h3><p>仅当过期消息位于队列头部时，才会被实际删除（即标记为已删除）。消费者不会接收到这些过期的消息。需要注意的是，在消息过期与消费者接收之间可能存在一种自然的竞争状态，例如，一条消息可能在发送到套接字之后但在到达消费者之前就已经过期。<br>对于设置了逐条消息时间生存期（TTL）的情况，过期的消息可能会累积在尚未过期的消息之后，直到后者被消费或同样过期为止。因此，这些过期但未被清理的消息将继续占用系统资源，并且会被计入队列的统计信息中，比如队列中的总消息数量。<br>当对现有队列追溯性地应用逐条消息TTL策略时，建议保持消费者在线以加速过期消息的清除过程。<br>鉴于上述针对单个消息设置TTL的行为特点，在需要通过删除消息来释放存储空间等资源的情况下，推荐采用整个队列级别的TTL设置方法，或者考虑使用队列清空、队列删除等功能作为替代方案。</p>
<h3 id="队列-TTL"><a href="#队列-TTL" class="headerlink" title="队列 TTL"></a>队列 TTL</h3><p>时间至存活（TTL）特性不仅适用于队列中的消息，也适用于队列本身。这一机制能够与自动删除队列属性协同工作，从而实现更灵活的资源管理。<br>对于队列级别的 TTL（即过期设置），主要针对的是瞬态（非持久化）的经典队列类型；而流式队列则不支持此类过期功能。当一个队列处于未使用状态时，它将在预设的时间后被标记为可删除状态——这里“未使用”的定义是指该队列当前没有任何活跃消费者、最近没有被重新声明（重新声明操作会重置其生存期限），并且在过去的一个完整过期周期内没有执行过 basic.get 操作。这种配置特别适合于如远程过程调用(RPC)响应队列这样的场景，其中大量创建的队列可能最终并不需要实际处理任何消息。<br>系统确保在至少达到一次完整的设定过期时间之后，如果队列仍然保持未使用状态，则会被安全地移除。但是，请注意，虽然可以保证超过过期时限后队列将被安排删除，但并不能保证其会在恰好到达那个时刻立即被清除。<br>无论是通过 queue.declare 方法中指定 x-expires 参数还是通过设置 expires 策略来定义队列的过期行为，所给定的值都必须是以毫秒为单位的正整数（不同于消息级别 TTL 允许设置为 0 的情况）。例如，设定值为 1000 意味着如果该队列连续 1 秒钟未被访问，则满足了自动删除条件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Object&gt; args = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">args.put(<span class="string">&quot;x-expires&quot;</span>, <span class="number">1800000</span>);</span><br><span class="line">channel.queueDeclare(<span class="string">&quot;myqueue&quot;</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, args);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitConstant</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_SMS_TTL = <span class="string">&quot;sms.ttl&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.entity.SMS;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitConstant;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitUtils;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderSystem</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Connection connection = RabbitUtils.getConnection();</span><br><span class="line">                Channel channel = connection.createChannel();) &#123;</span><br><span class="line">            Map&lt;String, Object&gt; quArgs = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            quArgs.put(<span class="string">&quot;x-message-ttl&quot;</span>, <span class="number">10000</span>);</span><br><span class="line">            channel.queueDeclare(RabbitConstant.QUEUE_SMS_TTL, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, quArgs);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">100</span>; i &lt; <span class="number">200</span>; i++) &#123;</span><br><span class="line">                SMS sms = <span class="keyword">new</span> SMS(<span class="string">&quot;乘客&quot;</span> + i, <span class="string">&quot;13900000&quot;</span> + i, <span class="string">&quot;您的车票已预订成功&quot;</span>);</span><br><span class="line">                String jsonSMS = <span class="keyword">new</span> Gson().toJson(sms);</span><br><span class="line">                channel.basicPublish(<span class="string">&quot;&quot;</span>, RabbitConstant.QUEUE_SMS_TTL, <span class="keyword">null</span>, jsonSMS.getBytes());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            log.info(<span class="string">&quot;订单信息已投递至Broker&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitConstant;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitUtils;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsSender</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Connection connection = RabbitUtils.getConnection();</span><br><span class="line">        <span class="keyword">final</span> Channel channel = connection.createChannel();       </span><br><span class="line">        channel.basicQos(<span class="number">1</span>);</span><br><span class="line">        Map&lt;String, Object&gt; quArgs = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            quArgs.put(<span class="string">&quot;x-message-ttl&quot;</span>, <span class="number">10000</span>);</span><br><span class="line">            channel.queueDeclare(RabbitConstant.QUEUE_SMS_TTL, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, quArgs);</span><br><span class="line">            </span><br><span class="line">        channel.basicConsume(RabbitConstant.QUEUE_SMS_TTL, <span class="keyword">false</span>, <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                String jsonSMS = <span class="keyword">new</span> String(body);</span><br><span class="line">                log.info(<span class="string">&quot;SMSSender-短信发送成功:&#123;&#125;&quot;</span>, jsonSMS);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ死信队列DLX</title>
    <url>/2021/07/16/RabbitMQ/RabbitMQ%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97DLX/</url>
    <content><![CDATA[<h3 id="死信交换机（Dead-Letter-Exchange-DLX）"><a href="#死信交换机（Dead-Letter-Exchange-DLX）" class="headerlink" title="死信交换机（Dead Letter Exchange, DLX）"></a>死信交换机（Dead Letter Exchange, DLX）</h3><p>死信交换机是RabbitMQ中用于管理那些因各种原因未能成功消费的消息的一种机制。当消息无法被消费者正常处理时，这些消息可被标记为“死信”（Dead Letter），随后将被转发至一个预设的交换机——即所谓的死信交换机，而非直接丢弃或无限制地重试。死信交换机本质上是一个标准的交换机，可以配置为直连型（direct）、主题型（topic）、扇出型（fanout）或头部匹配型（headers），其运作方式与普通交换机相同。<br>消息被视为死信并被路由到死信交换机的情形包括但不限于以下几种情况：</p>
<ol>
<li>显式拒绝：若消费者通过basic.reject、basic.nack（针对AMQP 0-9-1协议版本）或是rejected outcome（对于AMQP 1.0协议版本）明确表示不接受某条消息，并且在调用上述方法时设置了requeue参数为false，则该消息将被视作死信。</li>
<li>消息存活时间超出：一旦消息设置了特定的生存期（TTL, Time-To-Live），并且在其所在队列中的停留时间超过了这个设定值，那么这条消息就会自动转变为死信状态。</li>
<li>队列容量溢出：如果某个队列定义了最大长度（x-max-length）或最大字节数量（x-max-length-bytes），而实际承载的消息数量或总大小超过了这些阈值，最早进入队列的消息可能会根据具体配置被移除或者转换成死信。</li>
<li>超过最大投递尝试次数：特别地，在仲裁队列（Quorum Queue）里，每当一条消息重新投送的次数达到了预先设定的最大尝试次数（delivery-limit），它同样会被认定为死信。<br>值得注意的是，如果整个队列因为所有消息均超过其TTL而被系统自动清除，则其中包含的所有消息都不会经历成为死信的过程。</li>
</ol>
<h3 id="配置死信交换机"><a href="#配置死信交换机" class="headerlink" title="配置死信交换机"></a>配置死信交换机</h3><p>死信交换机的配置可以通过队列参数（Queue Arguments）或服务器策略（Policy）来实现。如果同时采用这两种方法进行配置，队列参数的优先级高于服务器策略。<br>使用队列参数（Queue Arguments）进行配置时，在Java客户端中声明队列的过程中，可以通过设置x-dead-letter-exchange参数来指定死信交换机。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">channel.exchangeDeclare(<span class="string">&quot;dlx.exchange&quot;</span>, <span class="string">&quot;direct&quot;</span>); <span class="comment">// 声明死信交换机</span></span><br><span class="line"></span><br><span class="line">Map&lt;String, Object&gt; args = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">args.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>, <span class="string">&quot;dlx.exchange&quot;</span>); <span class="comment">// 设置死信交换机</span></span><br><span class="line">args.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>, <span class="string">&quot;error.key&quot;</span>); <span class="comment">// 可选：设置死信路由键</span></span><br><span class="line"></span><br><span class="line">channel.queueDeclare(<span class="string">&quot;my.queue&quot;</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, args); <span class="comment">// 创建队列并绑定死信交换机</span></span><br></pre></td></tr></table></figure>

<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>为了确保消息能够正确进入死信处理流程，死信交换机必须在任何消息被标记为死信前预先创建。若此条件未满足，相关消息将被系统自动且无声地丢弃。</p>
<h3 id="死信消息的路由机制"><a href="#死信消息的路由机制" class="headerlink" title="死信消息的路由机制"></a>死信消息的路由机制</h3><p>死信消息的具体路由方式由其所属队列的配置决定：<br>● 当队列已定义x-dead-letter-routing-key属性时，该消息将依据此键值被导向至指定的死信交换机。<br>● 若上述属性未设定，则采用消息初始发送时使用的路由键进行传递（尽管原始消息可能包含CC和BCC头部信息，但在转变为死信状态的过程中，BCC部分会被移除）。<br>示例说明:<br>● 假设一条消息最初通过foo作为路由键发布，并且所在队列没有特别设置死信路由键，则当它成为死信后，依旧会沿用foo作为路由键。<br>● 反之，如果队列中设置了x-dead-letter-routing-key: bar，则所有从该队列出站的死信都将使用bar作为新的路由键。</p>
<h3 id="死信循环问题"><a href="#死信循环问题" class="headerlink" title="死信循环问题"></a>死信循环问题</h3><p>当一个死信消息再次被分发回原队列时（例如因死信交换机缺乏明确的路由指示而导致消息经由默认交换机返回），RabbitMQ具备识别此类循环的能力，并采取措施终止循环，直接丢弃涉及的消息以避免无限重复的情况发生。</p>
<h3 id="安全考量"><a href="#安全考量" class="headerlink" title="安全考量"></a>安全考量</h3><p>鉴于死信处理本质上属于一种特殊形式的消息重发操作，因此存在一定的失败风险：<br>● 如果目标接收队列不可达（如由于仲裁队列未能达成必要的共识），那么尝试转发的死信将会被放弃，并生成相应的错误日志条目。<br>● 通常情况下，针对死信消息的重新投递过程并不激活发布者确认功能，这意味着在分布式环境中可能会出现数据丢失现象。然而，借助于仲裁队列的支持，可以实现至少一次交付保证，从而增强整个系统的可靠性。</p>
<h3 id="消息头字段更新"><a href="#消息头字段更新" class="headerlink" title="消息头字段更新"></a>消息头字段更新</h3><p>一旦某条消息转换成死信状态，其携带的信息头会发生如下变更：<br>● exchange字段值更新为代表当前所使用的死信交换机名称。<br>● 根据队列配置情况，routing-key有可能变更为预设的死信路由键。<br>● CC与BCC相关的元数据不再保留。<br>● 此外，每经历一次死信事件，都会在消息头中追加x-death (适用于AMQP 0.9.1协议) 或 x-opt-deaths (适用于AMQP 1.0协议) 字段，记录下包括但不限于触发死信的原因、次数以及涉及到的队列等详细信息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检查死信历史（AMQP 0.9.1）</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; deaths = (List&lt;Map&lt;String, Object&gt;&gt;) headers.get(<span class="string">&quot;x-death&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (deaths != <span class="keyword">null</span>) &#123;</span><br><span class="line">    Map&lt;String, Object&gt; lastDeath = deaths.get(<span class="number">0</span>);</span><br><span class="line">    String reason = (String) lastDeath.get(<span class="string">&quot;reason&quot;</span>); <span class="comment">// &quot;rejected&quot;, &quot;expired&quot;, etc.</span></span><br><span class="line">    String queue = (String) lastDeath.get(<span class="string">&quot;queue&quot;</span>);   <span class="comment">// 来源队列</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitConstant</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_SMS_DLX = <span class="string">&quot;sms.dlx&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_DLX = <span class="string">&quot;exchange.dlx&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_DLX = <span class="string">&quot;queue.dlx&quot;</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ROUTING_KEY_DLX = <span class="string">&quot;routing.key.dlx&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.SneakyThrows;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;192.168.31.230&quot;</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;my_vhost&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection conn = connectionFactory.newConnection();</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Channel channel)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明死信交换机，类型为direct，持久化</span></span><br><span class="line">        channel.exchangeDeclare(RabbitConstant.EXCHANGE_DLX, <span class="string">&quot;direct&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 声明死信队列，持久化，非独占，不自动删除</span></span><br><span class="line">        channel.queueDeclare(RabbitConstant.QUEUE_DLX, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 将死信队列绑定到死信交换机，使用指定的路由键</span></span><br><span class="line">        channel.queueBind(RabbitConstant.QUEUE_DLX, RabbitConstant.EXCHANGE_DLX, RabbitConstant.ROUTING_KEY_DLX);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建队列参数Map</span></span><br><span class="line">        Map&lt;String, Object&gt; quArgs = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 设置消息TTL(存活时间)为10秒(10000毫秒)</span></span><br><span class="line">        quArgs.put(<span class="string">&quot;x-message-ttl&quot;</span>, <span class="number">10000</span>);</span><br><span class="line">        <span class="comment">// 设置死信交换机</span></span><br><span class="line">        quArgs.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>, RabbitConstant.EXCHANGE_DLX);</span><br><span class="line">        <span class="comment">// 设置死信路由键</span></span><br><span class="line">        quArgs.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>, RabbitConstant.ROUTING_KEY_DLX);</span><br><span class="line">        <span class="comment">// 声明短信队列，使用上面设置的参数</span></span><br><span class="line">        channel.queueDeclare(RabbitConstant.QUEUE_SMS_DLX, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, quArgs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.entity.SMS;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitConstant;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitUtils;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderSystem</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Connection connection = RabbitUtils.getConnection();</span><br><span class="line">                Channel channel = connection.createChannel();) &#123;</span><br><span class="line">            </span><br><span class="line">            RabbitUtils.init(channel);  <span class="comment">// 使用工具类初始交换机、队列和绑定关系</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">100</span>; i &lt; <span class="number">200</span>; i++) &#123;</span><br><span class="line">                SMS sms = <span class="keyword">new</span> SMS(<span class="string">&quot;乘客&quot;</span> + i, <span class="string">&quot;13900000&quot;</span> + i, <span class="string">&quot;您的车票已预订成功&quot;</span>);</span><br><span class="line">                String jsonSMS = <span class="keyword">new</span> Gson().toJson(sms);</span><br><span class="line">                channel.basicPublish(<span class="string">&quot;&quot;</span>, RabbitConstant.QUEUE_SMS_DLX, <span class="keyword">null</span>, jsonSMS.getBytes());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            log.info(<span class="string">&quot;订单信息已投递至Broker&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitConstant;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitUtils;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.AMQP;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DefaultConsumer;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Envelope;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DlxConsumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Connection connection = RabbitUtils.getConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        </span><br><span class="line">        RabbitUtils.init(channel);  <span class="comment">// 使用工具类初始交换机、队列和绑定关系</span></span><br><span class="line"></span><br><span class="line">        channel.basicConsume(RabbitConstant.QUEUE_DLX, <span class="keyword">true</span>, <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, </span></span></span><br><span class="line"><span class="function"><span class="params">                    AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                String deadLetterMsg = <span class="keyword">new</span> String(body);</span><br><span class="line">                log.info(<span class="string">&quot;[死信消费者] 收到死信消息，使用其他渠道发送短信: &#123;&#125;&quot;</span>, deadLetterMsg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitConstant;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitUtils;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.AMQP;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DefaultConsumer;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Envelope;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsSender</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Connection connection = RabbitUtils.getConnection();</span><br><span class="line">        <span class="keyword">final</span> Channel channel = connection.createChannel();</span><br><span class="line">        </span><br><span class="line">        channel.basicQos(<span class="number">1</span>);</span><br><span class="line">        RabbitUtils.init(channel);  <span class="comment">// 使用工具类初始交换机、队列和绑定关系</span></span><br><span class="line">        </span><br><span class="line">        channel.basicConsume(RabbitConstant.QUEUE_SMS_DLX, <span class="keyword">false</span>, <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                String jsonSMS = <span class="keyword">new</span> String(body);</span><br><span class="line">                log.info(<span class="string">&quot;SMSSender-短信发送成功:&#123;&#125;&quot;</span>, jsonSMS);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ Streams流处理</title>
    <url>/2021/07/17/RabbitMQ/RabbitMQ%20Streams%E6%B5%81%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h3 id="RabbitMQ-Streams概述"><a href="#RabbitMQ-Streams概述" class="headerlink" title="RabbitMQ Streams概述"></a>RabbitMQ Streams概述</h3><p>RabbitMQ Streams是一种持久化且可复制的数据结构，旨在执行与传统队列相同的功能：即作为生产者发送的消息与消费者接收消息之间的缓冲区。尽管如此，Streams在消息的存储机制和消费模式上与传统队列存在显著差异：<br>● 非破坏性消费语义：Stream模仿了一个仅追加的日志模型，其中的消息可以被重复读取直至其自然过期。这一特性意味着所有通过Stream传输的信息都将保持持久性和跨节点复制状态。<br>● 灵活的消息访问：不同于队列中消息一旦被消费便会被移除的行为，在Stream中，一个或多个订阅者能够独立地多次访问同一条信息。<br>使用RabbitMQ Stream的方式有两种：一是通过标准的RabbitMQ客户端库；二是采用专为此设计的二进制协议插件及配套客户端。后者不仅全面支持Stream的所有高级功能，还确保了最佳的数据处理性能。</p>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>RabbitMQ Stream技术的发展初衷在于解决以下几种传统队列难以高效应对的问题场景：</p>
<ol>
<li>广泛分发（大规模扇出）：对于需要向众多订阅者广播同一消息的情况，现有方法要求为每位订阅者单独分配一个队列，这在面对大量受众时显得效率低下。而利用Stream，则可以让多位订阅者以不相互干扰的方式共享同一份数据源，无需额外设置多个队列。</li>
<li>历史消息重放：鉴于当前RabbitMQ中的队列类型都遵循“消耗即删除”的原则，因此无法实现对已消费消息的回溯查询。相比之下，Stream允许用户定位到日志中的任意点，并从该位置开始读取内容。</li>
<li>高性能吞吐量：没有一种现有的持久化队列解决方案能够在吞吐能力方面与基于日志架构的消息系统相匹敌。Stream正是针对这一点进行了专门优化。</li>
<li>大容量存储需求：多数RabbitMQ队列倾向于维持低占用状态，当面临海量未处理消息时，其性能往往会受到影响。Stream则采取了更为有效的策略来管理大量待处理项目，同时将内存使用率控制在较低水平。</li>
</ol>
<h3 id="创建RabbitMQ-Stream"><a href="#创建RabbitMQ-Stream" class="headerlink" title="创建RabbitMQ Stream"></a>创建RabbitMQ Stream</h3><p>要创建一个新的Stream，您需要将x-queue-type参数设置为stream，而非默认值classic。值得注意的是，此配置项必须在首次声明队列时由客户端明确指定，不能通过策略进行后期修改或设定。这是因为虽然策略可以动态调整，但队列类型一旦确定后便不可更改。下面是一个使用AMQP 0.9.1 Java客户端建立Stream的示例代码片段。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">Connection connection = factory.newConnection();</span><br><span class="line">Channel channel = connection.createChannel();</span><br><span class="line">channel.queueDeclare(</span><br><span class="line">  <span class="string">&quot;my-stream&quot;</span>,</span><br><span class="line">  <span class="keyword">true</span>,         <span class="comment">// 持久化</span></span><br><span class="line">  <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="comment">// 非独占，非自动删除</span></span><br><span class="line">  Collections.singletonMap(<span class="string">&quot;x-queue-type&quot;</span>, <span class="string">&quot;stream&quot;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>带有x-queue-type参数设置为stream的队列，将在每个配置的RabbitMQ节点上创建一个具有副本的流。鉴于流基于仲裁机制运行，强烈推荐使用奇数个节点组成的集群来确保系统的稳定性和数据的一致性。<br>尽管流本质上仍然是遵循AMQP 0.9.1协议定义的队列，这意味着它们可以像其他任何RabbitMQ队列一样，在创建后与任意交换器进行绑定操作。<br>此外，针对流型队列，还支持一系列额外的配置选项，这些选项既可以直接作为队列声明的一部分指定，也可以通过策略来设定：<br>● x-max-length-bytes：此参数用于限制流的最大存储容量（以字节为单位）。详情请参考保留策略文档。默认情况下不设上限。<br>● x-max-age：用来定义流中消息能够存在的最长时限。同样地，请查阅相关保留策略说明获取更多信息。默认值表示无时间限制。<br>● x-stream-max-segment-size-bytes：该属性决定了流在磁盘上的分割文件大小（单位：字节），其中流由多个固定大小的段组成。其标准设置为5亿字节。<br>● x-stream-filter-size-bytes：指定了用于过滤目的Bloom过滤器的尺寸（以字节计）。允许的有效范围是从16到255字节，而初始配置通常采用最小值16字节。<br>值得注意的是，尽管可以通过策略调整x-stream-max-segment-size-bytes和x-stream-filter-size-bytes这两个参数，但只有当相应策略在流首次声明时就已经存在的情况下才会生效。对于已有的流而言，即使更新了匹配策略中的上述参数设置，实际上也不会对现有流产生影响。因此，为了保证预期行为，建议直接通过队列声明过程中的参数来管理这些配置。<br>下面提供了一个Java语言编写的示例代码片段，演示了如何在应用层面上于流创建时指定这些特定参数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Object&gt; arguments = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">arguments.put(<span class="string">&quot;x-queue-type&quot;</span>, <span class="string">&quot;stream&quot;</span>);</span><br><span class="line"><span class="comment">// 最大流大小：20 GB</span></span><br><span class="line">arguments.put(<span class="string">&quot;x-max-length-bytes&quot;</span>, <span class="number">20_000_000_000</span>);</span><br><span class="line"><span class="comment">// 段文件大小：100 MB</span></span><br><span class="line">arguments.put(<span class="string">&quot;x-stream-max-segment-size-bytes&quot;</span>, <span class="number">100_000_000</span>);</span><br><span class="line"><span class="comment">// 流Bloom过滤器大小：32</span></span><br><span class="line">arguments.put(<span class="string">&quot;x-stream-filter-size-bytes&quot;</span>, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line">channel.queueDeclare(</span><br><span class="line">  <span class="string">&quot;my-stream&quot;</span>,</span><br><span class="line">  <span class="keyword">true</span>,         <span class="comment">// 持久化</span></span><br><span class="line">  <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="comment">// 非独占，非自动删除</span></span><br><span class="line">  arguments</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="客户端操作"><a href="#客户端操作" class="headerlink" title="客户端操作"></a>客户端操作</h3><p>消费<br>鉴于流机制不会删除任何消息，因此所有消费者皆可从日志中的任意位置开始读取或消费消息。此过程受控于x-stream-offset这一消费者参数。若未特别指定，则默认情况下，消费者将从其启动之后写入日志的下一个偏移量处开始读取。支持的参数值包括但不限于：<br>● first：指示从日志中最早可用的消息开始读取。<br>● last：意味着从最新写入的“消息块”开始读取；这里所谓的“块”，是指流中用于存储和传输的一组消息集合，其大小根据输入情况可能涵盖数条至数千条不等的消息。<br>● next：等同于未指定偏移量的情况。<br>● Offset：允许直接指定一个确切的数值偏移量。如果给定的偏移量在日志内不存在，则会自动调整到最接近的有效偏移量，即要么是日志起始处要么是末尾。<br>● Timestamp：通过提供具体的时间戳来确定起始读取位置。该时间戳会被映射到最邻近的实际存在之偏移量上；如若提供的时刻超出了现有记录范围，则同样会自动调整至日志首尾之一。对于采用AMQP 0.9.1协议的情况，所使用的时间戳为POSIX标准下的秒级精度时间（自1970年1月1日零时起算）。值得注意的是，在这种模式下，用户可能会接收到早于所设定时间点之前发布的消息。<br>● Interval：允许基于当前时间加上一段相对时间间隔来定位起始阅读点。此选项遵循与x-max-age保留策略相同的定义方式。<br>下面是一个利用first偏移量设置的具体示例代码片段：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">channel.basicQos(<span class="number">100</span>); <span class="comment">// 必须指定QoS</span></span><br><span class="line">channel.basicConsume(</span><br><span class="line">  <span class="string">&quot;my-stream&quot;</span>,</span><br><span class="line">  <span class="keyword">false</span>,</span><br><span class="line">  Collections.singletonMap(<span class="string">&quot;x-stream-offset&quot;</span>, <span class="string">&quot;first&quot;</span>), <span class="comment">// &quot;first&quot;偏移量规范</span></span><br><span class="line">  (consumerTag, message) -&gt; &#123;</span><br><span class="line">    <span class="comment">// 消息处理</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">   channel.basicAck(message.getEnvelope().getDeliveryTag(), <span class="keyword">false</span>); <span class="comment">// 需要确认</span></span><br><span class="line">  &#125;,</span><br><span class="line">  consumerTag -&gt; &#123; &#125;);</span><br></pre></td></tr></table></figure>

<p>以下代码片段展示如何指定特定偏移量进行消费：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">channel.basicQos(<span class="number">100</span>); <span class="comment">// 必须指定QoS</span></span><br><span class="line">channel.basicConsume(</span><br><span class="line">  <span class="string">&quot;my-stream&quot;</span>,</span><br><span class="line">  <span class="keyword">false</span>,</span><br><span class="line">  Collections.singletonMap(<span class="string">&quot;x-stream-offset&quot;</span>, <span class="number">5000</span>), <span class="comment">// 偏移量值</span></span><br><span class="line">  (consumerTag, message) -&gt; &#123;</span><br><span class="line">    <span class="comment">// 消息处理</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">   channel.basicAck(message.getEnvelope().getDeliveryTag(), <span class="keyword">false</span>); <span class="comment">// 需要确认</span></span><br><span class="line">  &#125;,</span><br><span class="line">  consumerTag -&gt; &#123; &#125;);</span><br></pre></td></tr></table></figure>

<p>以下代码片段展示如何指定特定时间戳进行消费：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一小时前</span></span><br><span class="line">Date timestamp = <span class="keyword">new</span> Date(System.currentTimeMillis() - <span class="number">60</span> * <span class="number">60</span> * <span class="number">1_000</span>)</span><br><span class="line">channel.basicQos(<span class="number">100</span>); <span class="comment">// 必须指定QoS</span></span><br><span class="line">channel.basicConsume(</span><br><span class="line">  <span class="string">&quot;my-stream&quot;</span>,</span><br><span class="line">  <span class="keyword">false</span>,</span><br><span class="line">  Collections.singletonMap(<span class="string">&quot;x-stream-offset&quot;</span>, timestamp), <span class="comment">// 时间戳偏移量</span></span><br><span class="line">  (consumerTag, message) -&gt; &#123;</span><br><span class="line">    <span class="comment">// 消息处理</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">   channel.basicAck(message.getEnvelope().getDeliveryTag(), <span class="keyword">false</span>); <span class="comment">// 需要确认</span></span><br><span class="line">  &#125;,</span><br><span class="line">  consumerTag -&gt; &#123; &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="其他流操作"><a href="#其他流操作" class="headerlink" title="其他流操作"></a>其他流操作</h3><p>以下操作可按照与经典队列及仲裁队列相似的方式执行，但其中部分操作具有特定于该类型队列的独特行为特征：<br>● 声明队列<br>● 删除队列<br>● 发布确认<br>● 消息消费（订阅）：此过程需设定服务质量(QoS)预取值。在此机制中，确认作为一种信用手段发挥作用，用以更新消费者的当前偏移位置。<br>● 为消费者指定QoS预取值<br>● 消费者确认（请遵守QoS预取限制）<br>● 取消消费者订阅<br>以上各项功能共同确保了消息传递系统的高效性和可靠性。</p>
<h3 id="流的单一活跃消费者特性"><a href="#流的单一活跃消费者特性" class="headerlink" title="流的单一活跃消费者特性"></a>流的单一活跃消费者特性</h3><p>单一活跃消费者特性是RabbitMQ自3.11版本起引入的一项功能，旨在支持独占性消费及确保消息流的连续处理。在多个共享同一消息流与名称的消费者实例中启用此特性的条件下，仅有一个实例能够处于活动状态并接收消息，其余实例则保持待机状态。<br>该功能主要带来两大优势：</p>
<ol>
<li>顺序消息处理：通过保证任何时候仅有单一消费者进行消息处理，从而实现对消息按序处理的需求。</li>
<li>消费过程的无缝切换：当当前活动中的消费者因故停止运行或发生故障时，系统将自动选择另一个备用消费者接管工作，以维持服务的持续性和稳定性。</li>
</ol>
<h3 id="超级流"><a href="#超级流" class="headerlink" title="超级流"></a>超级流</h3><p>超级流是一种通过将大规模的数据流分割为较小的子流来实现扩展的技术方案。这种机制与单一活跃消费者的模式相兼容，以确保各分区内消息传递的顺序性。自RabbitMQ 3.11版本起，该功能正式可用。<br>从结构上看，超级流是由一系列独立的传统流组成的逻辑单元。这种方法允许通过RabbitMQ流架构来拓展发布和消费能力：即把一个大的逻辑流拆分成多个分区流，并将这些分区分布在不同的集群节点上，从而达到负载均衡的效果。尽管如此，对于应用程序而言，整个超级流仍被视为一个统一的“大型”流，这主要归功于客户端库提供的抽象层支持。<br>在设计层面，超级流遵循了AMQP 0.9.1标准中的核心概念，包括交换器、队列以及它们之间的绑定关系。这意味着可以通过任一符合AMQP 0.9.1协议的库或管理插件来构建超级流的相关配置，具体操作包括定义Direct类型的交换器、“分区”形式的流及其间的关联规则。为了简化这一过程，推荐使用rabbitmq-streams add_super_stream命令行工具。例如，要创建一个名为invoices且包含3个分区的超级流，可执行如下指令：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">rabbitmq-streams add_super_stream invoices --partitions <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>更多关于此命令的帮助信息，可通过运行rabbitmq-streams add_super_stream –help获取。<br>需要注意的是，相较于单一流处理方式，采用超级流会引入额外的复杂度。因此，在实际部署时不应无条件地将其作为所有涉及流处理场景的标准选择。仅当确认现有的单一流架构已无法满足需求时，才建议转向超级流方案。<br>RabbitMQ流提供了服务器端过滤机制，从而避免了客户端接收并处理整个消息流的必要性。当消费应用程序仅需处理特定子集的消息（例如来自特定地理区域的信息）时，这种机制有助于显著减少网络带宽消耗。流过滤功能支持多种协议，包括Stream Protocol、AMQP 0.9.1以及STOMP。以下示例将以AMQP 0.9.1为基础进行说明。<br>为了使过滤生效，发布消息时必须附加相应的过滤值。此值通过x-stream-filter-value头部字段指定：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">channel.basicPublish(</span><br><span class="line">  <span class="string">&quot;&quot;</span>, <span class="comment">// 默认交换机</span></span><br><span class="line">  <span class="string">&quot;my-stream&quot;</span>,</span><br><span class="line">  <span class="keyword">new</span> AMQP.BasicProperties.Builder()</span><br><span class="line">    .headers(Collections.singletonMap(<span class="string">&quot;x-stream-filter-value&quot;</span>, <span class="string">&quot;california&quot;</span>)) <span class="comment">// 设置过滤值</span></span><br><span class="line">    .build(),</span><br><span class="line">  body</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>消费者若希望仅接收到与特定过滤条件匹配的消息，则需在订阅时指明x-stream-filter参数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">channel.basicQos(<span class="number">100</span>); <span class="comment">// 配置服务质量</span></span><br><span class="line">channel.basicConsume(</span><br><span class="line">  <span class="string">&quot;my-stream&quot;</span>,</span><br><span class="line">  <span class="keyword">false</span>,</span><br><span class="line">  Collections.singletonMap(<span class="string">&quot;x-stream-filter&quot;</span>, <span class="string">&quot;california&quot;</span>), <span class="comment">// 指定过滤器</span></span><br><span class="line">  (consumerTag, message) -&gt; &#123;</span><br><span class="line">    Map&lt;String, Object&gt; headers = message.getProperties().getHeaders();</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;california&quot;</span>.equals(headers.get(<span class="string">&quot;x-stream-filter-value&quot;</span>))) &#123; <span class="comment">// 客户端二次确认</span></span><br><span class="line">      <span class="comment">// 处理消息</span></span><br><span class="line">    &#125;</span><br><span class="line">    channel.basicAck(message.getEnvelope().getDeliveryTag(), <span class="keyword">false</span>); <span class="comment">// 确认消息已处理</span></span><br><span class="line">  &#125;,</span><br><span class="line">  consumerTag -&gt; &#123;&#125;);</span><br></pre></td></tr></table></figure>
<p>值得注意的是，尽管实现了服务器端过滤，但该过程本质上是基于概率实现的——即使用Bloom Filter等空间高效的数据结构来近似匹配。这意味着偶尔可能会出现误报情况，因此建议在客户端层面也实施一定的过滤逻辑以确保准确性。<br>关于过滤机制的一些额外注意事项如下：<br>● 同一流中可以同时存在带有和不带有过滤值的消息。<br>● 当消费者设置了过滤器后，默认情况下未标记过滤值的消息不会被传递给该消费者；不过，通过设置x-stream-match-unfiltered=true参数可以改变这一行为，允许接收所有未经过滤的消息。<br>● x-stream-filter消费者参数既接受单个字符串形式的过滤条件，也支持数组形式以适应多个不同过滤标准的需求。<br>特性对比：常规队列 vs. 流<br>从传统意义上讲，RabbitMQ流并非真正的队列，因此它们并不完全符合AMQP 0.9.1定义下的队列语义。鉴于其本质特征，某些适用于其他类型队列的功能对于流来说可能无法提供或永远不可能实现。然而，只要采用了消费者确认机制，原本设计用于常规队列的AMQP 0.9.1客户端库同样能够有效地利用流服务。此外，由于流采用非破坏性读取模式，这进一步限制了一些功能的适用性。</p>
<h3 id="数据保留"><a href="#数据保留" class="headerlink" title="数据保留"></a>数据保留</h3><p>流被设计为不可变的仅追加磁盘日志。这意味着，除非采取特定措施，否则日志将无限制地增长直至磁盘空间耗尽。为了避免这种情形，可以针对每个流配置数据保留策略，基于日志的数据总量或数据年龄自动清除最旧的日志记录。<br>对于流的保留设置，有两个主要参数可用来控制：<br>● max-age：定义了数据在被删除前能够存在的最长持续时间。支持的时间单位包括年(Y)、月(M)、天(D)、小时(h)、分钟(m)和秒(s)。例如，设置为7D表示数据保留期限为一周。<br>● max-length-bytes：设定了整个日志文件允许的最大尺寸（以字节计）。<br>需要注意的是，这些保留规则是基于日志段进行评估执行的，因此还有一个额外的因素会影响实际的数据保留行为——即单个日志段的大小。无论怎样，只要某段内含有至少一条消息，那么该段就将被保留下来。此外，在使用代理提供的偏移跟踪功能时，消费者的偏移信息会被视为非消息数据存储于流中。</p>
<h3 id="性能特性"><a href="#性能特性" class="headerlink" title="性能特性"></a>性能特性</h3><p>鉴于所有数据操作前都会先写入磁盘以确保持久性，推荐采用速度最快的存储介质来提升性能。由于涉及到大量的磁盘I/O活动，随着每条消息体积增大，整体吞吐量可能会有所下降。与仲裁队列类似，增加副本数量虽然提高了数据冗余度，但也导致了更低的吞吐率，因为这增加了复制过程中的工作负荷及达成一致性所需的资源消耗。</p>
<h3 id="流的行为"><a href="#流的行为" class="headerlink" title="流的行为"></a>流的行为</h3><p>每个流都配备了一个主写入者（称为领导者）以及零到多个跟随其后的副本。当创建新的流时，会随机挑选一组节点来承载这些副本，但始终包含客户端最初连接的那个节点。领导者的初始指定可以通过以下几种方式之一实现：<br>● 通过x-queue-leader-locator这一可选参数，<br>● 或者设置名为queue-leader-locator的策略键，<br>● 亦或是直接修改配置文件里的相应字段。<br>关于领导者的选择策略，有如下选项：<br>● client-local：默认选择与发起请求的客户端相连的节点作为领导者。<br>● balanced：如果系统内的总队列数少于1000，则选取当前拥有最少领导者角色的节点；反之则随机指派。<br>为了正常运作，流需要在其声明所在的节点集群内保持足够数量的健康成员在线。一旦负责管理某个流的领导者节点发生故障，将立即从现有的副本集合中选举出一个新的领导者继续提供服务。重新加入网络的副本会尝试追赶最新的状态，而不会影响现有领导者的正常运行。新加入的副本必须经历一个完整的同步过程才能开始参与服务。</p>
<h3 id="数据安全性"><a href="#数据安全性" class="headerlink" title="数据安全性"></a>数据安全性</h3><p>流通过跨多个节点复制数据的方式来保障信息的安全，并且只有当数据已经被成功复制到了预定数量的副本后才会向发布者返回确认信号。尽管如此，出于效率考虑，流并不会主动触发操作系统级别的刷新操作(fsync)，而是依赖于系统的后台调度机制。因此，在异常断电的情况下，个别节点上的数据可能存在丢失风险。对于那些对数据完整性要求极高的应用场景，建议采用仲裁队列，因为它会在数据被正式写入并刷新至物理存储设备之后才发出确认通知。</p>
<h3 id="可用性"><a href="#可用性" class="headerlink" title="可用性"></a>可用性</h3><p>一般来说，即使少数几个副本暂时离线，也不会显著影响整个流的服务可用性。根据具体的部署方案，RabbitMQ可能在恢复过程中自动重启某些节点，但这通常不会干扰到服务的整体连续性。例如，一个设置了三个副本的流能够在失去其中一个节点的情况下继续正常工作；同样地，五副本配置下可以容忍两处故障而不中断服务。然而，假如超过一半以上的节点永久失效，则需人工介入修复。</p>
<h3 id="资源占用情况"><a href="#资源占用情况" class="headerlink" title="资源占用情况"></a>资源占用情况</h3><p>相比于传统的仲裁队列，流在CPU和内存使用方面表现得更为高效。除了正在处理中的未完成写入之外，所有其他数据均保存于磁盘上。</p>
<h3 id="偏移量追踪"><a href="#偏移量追踪" class="headerlink" title="偏移量追踪"></a>偏移量追踪</h3><p>利用代理内置的偏移量追踪功能（目前仅限于配合流插件使用），消费者的状态信息将以非消息形式存放在流内部。每次更新偏移值都会造成少量额外的磁盘空间开销。</p>
<h3 id="消息编码限制"><a href="#消息编码限制" class="headerlink" title="消息编码限制"></a>消息编码限制</h3><p>流使用AMQP 1.0标准对消息进行编码。这意味着，当接收来自AMQP 0.9.1的消息时会发生格式转换。虽然大部分情况下这种转换是可以无缝完成的，但对于包含复杂结构如数组或表作为头信息的情况，则无法完全保留原有格式，因为AMQP 1.0的应用属性部分仅支持基本类型如字符串和数字。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitConstant</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_SMS_STREAM = <span class="string">&quot;sms.stream&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq.utils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> lombok.SneakyThrows;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;192.168.31.230&quot;</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;my_vhost&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection conn = connectionFactory.newConnection();</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Channel channel)</span></span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; quArgs = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            quArgs.put(<span class="string">&quot;x-queue-type&quot;</span>, <span class="string">&quot;stream&quot;</span>);</span><br><span class="line">            quArgs.put(<span class="string">&quot;x-max-length-bytes&quot;</span>, <span class="number">1000000000</span>); <span class="comment">// 1GB队列大小限制</span></span><br><span class="line">            quArgs.put(<span class="string">&quot;max-age&quot;</span>, <span class="string">&quot;7d&quot;</span>); <span class="comment">// 1GB每个段大小限制</span></span><br><span class="line">            channel.queueDeclare(RabbitConstant.QUEUE_SMS_STREAM, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, quArgs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.entity.SMS;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitConstant;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitUtils;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderSystem</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Connection connection = RabbitUtils.getConnection();</span><br><span class="line">            Channel channel = connection.createChannel();) &#123;</span><br><span class="line">            RabbitUtils.init(channel); </span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">100</span>; i &lt; <span class="number">200</span>; i++) &#123;</span><br><span class="line">                SMS sms = <span class="keyword">new</span> SMS(<span class="string">&quot;乘客&quot;</span> + i, <span class="string">&quot;13900000&quot;</span> + i, <span class="string">&quot;您的车票已预订成功&quot;</span>);</span><br><span class="line">                String jsonSMS = <span class="keyword">new</span> Gson().toJson(sms);</span><br><span class="line">                channel.basicPublish(<span class="string">&quot;&quot;</span>, RabbitConstant.QUEUE_SMS_STREAM, <span class="keyword">null</span>, jsonSMS.getBytes());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            log.info(<span class="string">&quot;订单信息已投递至Broker&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitConstant;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitUtils;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.AMQP;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DefaultConsumer;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Envelope;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsSender</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Connection connection = RabbitUtils.getConnection();</span><br><span class="line">        <span class="keyword">final</span> Channel channel = connection.createChannel();</span><br><span class="line">        channel.basicQos(<span class="number">1</span>);</span><br><span class="line">        RabbitUtils.init(channel);</span><br><span class="line">        channel.basicConsume(RabbitConstant.QUEUE_SMS_STREAM,</span><br><span class="line">                <span class="keyword">false</span>, Collections.singletonMap(<span class="string">&quot;x-stream-offset&quot;</span>, <span class="string">&quot;first&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                        String jsonSMS = <span class="keyword">new</span> String(body);</span><br><span class="line">                        log.info(<span class="string">&quot;SMSSender-短信发送成功:&#123;&#125;&quot;</span>, jsonSMS);</span><br><span class="line">                        channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ可靠性与数据安全</title>
    <url>/2021/07/18/RabbitMQ/RabbitMQ%E5%8F%AF%E9%9D%A0%E6%80%A7%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8/</url>
    <content><![CDATA[<h3 id="可能发生的故障"><a href="#可能发生的故障" class="headerlink" title="可能发生的故障"></a>可能发生的故障</h3><p>基于消息的系统本质上具有分布式特性，因此可能以多种方式（有时这些方式较为隐蔽）遭遇故障。</p>
<h3 id="网络相关问题"><a href="#网络相关问题" class="headerlink" title="网络相关问题"></a>网络相关问题</h3><p>最常见的故障类型之一是网络连接问题及拥塞。除了简单的中断外，防火墙也可能因判断某些连接为闲置状态而主动断开它们，且网络故障的识别通常会有一定的滞后性。</p>
<h3 id="服务器与客户端故障"><a href="#服务器与客户端故障" class="headerlink" title="服务器与客户端故障"></a>服务器与客户端故障</h3><p>除网络层面的问题外，无论是服务端还是客户端应用都有可能面临硬件故障或软件崩溃的风险。即使在客户端程序持续运行的情况下，逻辑错误也可能会导致通道异常或连接失效，此时需要客户端重新建立通道或连接，并执行相应的恢复操作。</p>
<h3 id="其他潜在问题"><a href="#其他潜在问题" class="headerlink" title="其他潜在问题"></a>其他潜在问题</h3><p>值得注意的是，上述列出的故障情形并非全面覆盖所有可能性。例如，遗漏故障（即未能在预期的时间范围内响应）、性能退化以及由恶意软件或存在缺陷的应用程序造成的资源耗尽等问题均未被提及。这些问题往往需要借助于监控工具、性能指标分析以及健康状况检查来识别和解决。</p>
<h3 id="连接中断处理"><a href="#连接中断处理" class="headerlink" title="连接中断处理"></a>连接中断处理</h3><p>当客户端与RabbitMQ节点之间的TCP连接中断时，必须重新建立与代理服务器的新连接。在此过程中，先前通过旧连接打开的所有通道将自动关闭，并需要重新创建。<br>通常情况下，一旦发生连接中断，客户端会通过抛出异常或其他等效的语言机制得到通知。多数现代客户端库已经内置了自动重连功能；但如果这种默认的行为不符合特定需求，开发者可以通过定义专门针对连接中断事件的处理器来自定义恢复流程。</p>
<h3 id="消息确认机制"><a href="#消息确认机制" class="headerlink" title="消息确认机制"></a>消息确认机制</h3><p>在连接出现故障的情况下，客户端与服务器之间传输的消息可能处于编码/解码阶段、TCP缓冲区中或正处于网络传输过程中。这种情况下，未完成传输的消息将丢失，并需要重新发送。消息确认机制旨在使服务端和客户端能够准确地了解何时应当发起重传。<br>确认机制可以双向应用：<br>● 消费者确认：消费者向服务器发送确认信号，表明已成功接收并处理了消息。<br>● 发布者确认：服务器向消息生产者返回确认，表示该消息已被正确处理完毕。<br>尽管TCP协议确保数据包能够送达目的地并通过重传机制来保障传输的可靠性，但这一过程主要发生在网络层面上。相比之下，消息确认机制则工作于应用层面，它不仅验证了消息已经被对方接收到，还意味着接收方已经完全接手并对该消息负责。因此，在实际操作中，只有当消费者完成了所有必要的业务逻辑（例如保存到数据库、转发给其他系统等）之后才应该发出确认信号。<br>一旦消息被确认，中间件就可以安全地将其从队列中移除。同样地，当中间件成功接管了一条新消息后也会立即向发送方反馈一个确认信息。<br>启用消息确认(Confirm)机制能够保证每条消息至少会被投递一次。若不采用此机制，则在消息发布及消费流程中可能会发生丢失现象，从而只能实现最多一次的投递保障。</p>
<h3 id="心跳检测用于维持TCP连接活跃度"><a href="#心跳检测用于维持TCP连接活跃度" class="headerlink" title="心跳检测用于维持TCP连接活跃度"></a>心跳检测用于维持TCP连接活跃度</h3><p>在某些特定类型的网络问题场景下，比如数据包丢失可能导致TCP连接看似正常但实际上已经中断（如Linux操作系统默认配置下的超时时间为大约11分钟）。AMQP 0-9-1标准提供了心跳功能，这有助于应用程序快速识别出失效的连接以及无响应的节点，并且还可以避免因长时间无活动而被网络设备关闭的“空闲”TCP连接。</p>
<h3 id="RabbitMQ中的数据安全保障"><a href="#RabbitMQ中的数据安全保障" class="headerlink" title="RabbitMQ中的数据安全保障"></a>RabbitMQ中的数据安全保障</h3><p>为了防止由于RabbitMQ服务端自身的问题导致的消息丢失（而非客户端应用引起），必须确保队列及其所包含的消息能够在面对节点重启、硬件故障等情况时依然保持其完整性和可用性。<br>部分RabbitMQ支持的协议允许应用程序对队列和消息的持久性进行控制。因此，对于关键数据，必须采用持久化队列，同时生产者需确保消息被标记为持久化的。</p>
<h3 id="集群与队列内容复制"><a href="#集群与队列内容复制" class="headerlink" title="集群与队列内容复制"></a>集群与队列内容复制</h3><p>通过构建节点集群来提供冗余机制，从而能够容忍单个节点的故障。在RabbitMQ集群中，所有配置项（如交换机、绑定关系、用户账户等）都会在整个集群范围内进行同步复制。<br>仲裁队列、流以及超级流（分区流）属于具有数据复制特性的结构。其中，一个特定节点负责托管主副本，而其他节点则维护跟随副本。一旦主副本发生故障，跟随副本之一将被选举成为新的主副本。通常情况下，队列状态的变化（例如入队操作、跟踪投递状态及确认过程）主要由主副本处理，但某些操作也可以由跟随副本来完成。<br>无论主副本位于哪个节点上，整个集群中的所有节点都能够访问并查看队列及其流的状态信息。当正在进行主副本选举时，针对仲裁队列的消息传递将会暂停，直到新的主副本被成功选出为止。此过程中客户端不会感知到任何变化。<br>独占队列仅与其创建时所关联的连接相关联，因此它们不会被复制，并且在该连接断开后或所在节点重启时会自动消失。<br>如果消费者连接到了一个出现故障的节点，则需要按照标准恢复流程来进行重新连接。而对于那些连接到非故障节点上的消费者，在新主副本确定之后，RabbitMQ系统将自动为其重新注册订阅关系，无需执行额外的操作如手动重连或重新订阅。</p>
<h3 id="生产者端的数据安全保障"><a href="#生产者端的数据安全保障" class="headerlink" title="生产者端的数据安全保障"></a>生产者端的数据安全保障</h3><p>当使用发布确认(Confirm)机制时，若生产者遇到通道或连接中断的情况，应当重新发送所有尚未接收到代理确认的消息。由于网络问题可能导致确认信号丢失，这可能会引起消息重复发送的问题。因此，建议消费端实现消息去重逻辑或具备幂等处理能力以应对这种情况。</p>
<h3 id="确保消息路由"><a href="#确保消息路由" class="headerlink" title="确保消息路由"></a>确保消息路由</h3><p>在某些应用场景中，可能需要保证消息能够被正确地路由至目标队列（尽管这不是强制要求——在发布/订阅模式下，如果没有订阅者存在，消息被丢弃是预期行为）。为了确保消息能够到达某个具体的已知队列，生产者可以直接声明该队列并直接向其发布消息。在涉及更复杂的路由规则时，如果希望验证至少有一个队列接收到了消息，可以设置mandatory标志位，这样当没有队列匹配时，服务器将以basic.return方法的形式返回给客户端一条包含错误代码和描述的信息。<br>此外值得注意的是，在向集群内节点发送消息的过程中，如果目标队列存在镜像副本，则节点间的网络故障可能会因为流量控制而导致一定的延迟。</p>
<h3 id="消费者侧的数据安全保障"><a href="#消费者侧的数据安全保障" class="headerlink" title="消费者侧的数据安全保障"></a>消费者侧的数据安全保障</h3><p>在网络或节点发生故障的情况下，消息可能会被重复投递。因此，建议将消费者设计为幂等操作以处理已接收过的消息，而不是通过显式去重机制来避免重复处理问题。<br>当一条消息在被某个消费者接收到之后又被重新放回队列（不论是自动还是手动），RabbitMQ会在下一次投递时设置redelivered标志，这表明该消息可能已经被先前的消费者处理过了。然而，如果初次投递因网络或应用程序层面的问题未能成功到达任何消费者，则不能保证redelivered标志能够准确反映实际情况。若某条消息没有设置redelivered标志，则可以确定这条消息尚未经过处理。鉴于此，在去重逻辑或者实现幂等性处理成本较高的情况下，开发者可以选择仅针对带有redelivered标志的消息执行特定的处理策略。</p>
<h3 id="无法处理的消息处置方案"><a href="#无法处理的消息处置方案" class="headerlink" title="无法处理的消息处置方案"></a>无法处理的消息处置方案</h3><p>如果消费者判断某一消息无法得到妥善处理，可以通过调用basic.reject或basic.nack方法拒绝接受该消息，并指示服务器将其重新入队或是直接丢弃（后者可能导致消息进入死信交换器）。</p>
<h3 id="消费者取消通知机制"><a href="#消费者取消通知机制" class="headerlink" title="消费者取消通知机制"></a>消费者取消通知机制</h3><p>每当一个消费者正在监听的队列被删除时，RabbitMQ平台会向该消费者发送通知。收到此类通知后，消费者应采取适当的恢复措施，比如转而监听其他队列或是在适当时候重新声明原有的队列。</p>
<h3 id="Federation与Shovel插件的应用"><a href="#Federation与Shovel插件的应用" class="headerlink" title="Federation与Shovel插件的应用"></a>Federation与Shovel插件的应用</h3><p>为了更好地应对不可靠网络环境（例如广域网连接），RabbitMQ提供了Federation和Shovel两种插件：<br>● Federation：允许跨集群自动分发链接，并且当下游节点出现故障时能够自动迁移这些链接。<br>● Shovel：支持配置多个端点，并总是尝试使用第一个可用的端点进行通信；一旦检测到失败则按照预设规则延迟后再次尝试连接。<br>这两种插件默认启用了确认机制，能够在遭遇网络中断后恢复并重新传输未完成的消息。在利用Federation或Shovel建立集群间连接时，需要确保系统具备从节点故障中恢复的能力，即使面对永久性的硬件故障也不例外。对于Federation而言，推荐配置多个上游URI地址或是采用高可用性的负载均衡解决方案；而对于Shovel来说，则应该指定多个源/目标端点作为备选方案。</p>
<h3 id="监控与健康检查的重要性"><a href="#监控与健康检查的重要性" class="headerlink" title="监控与健康检查的重要性"></a>监控与健康检查的重要性</h3><p>某些类型的故障可能不会立即显现出来（如由于缓慢的资源泄漏导致的问题）。通过像Prometheus这样的工具长期收集指标数据有助于发现潜在的行为异常模式。同时，定期执行健康检查也是必要的，尽管过于频繁或广泛的监控可能会引发误报。</p>
]]></content>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>构建RabbitMQ集群</title>
    <url>/2021/07/18/RabbitMQ/RabbitMQ%E9%9B%86%E7%BE%A4%E6%9E%84%E5%BB%BA/</url>
    <content><![CDATA[<h3 id="RabbitMQ集群"><a href="#RabbitMQ集群" class="headerlink" title="RabbitMQ集群"></a>RabbitMQ集群</h3><p>4369 端口</p>
<ul>
<li>功能：这个端口是epmd（Erlang Port Mapper Daemon）所使用的端口。 epmd是Erlang分布式系统的基础服务，它负责管理和维护Erlang节点的名称和端口映射关系。当RabbitMQ节点需要与其他节点进行通信时，会借助epmd来定位目标节点的具体位置。</li>
</ul>
<p>25672 端口</p>
<ul>
<li>功能：该端口是RabbitMQ节点之间进行内部通信的端口。RabbitMQ采用Erlang语言编写，利用Erlang的分布式特性来实现集群功能。 25672 端口用于在集群内的节点之间传输各种控制信息和数据，像队列同步、镜像队列的复制等操作都依赖这个端口。</li>
</ul>
<p>.erlang.cookie 文件是一个非常重要的安全凭证文件，它的主要作用是：</p>
<ul>
<li>集群节点认证：RabbitMQ节点之间通过比较这个cookie值来验证彼此的身份</li>
<li>安全机制 ：相当于集群节点间的共享密钥，只有cookie值相同的节点才能组成集群</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mkdir /home/rabbitmq-cluster</span><br><span class="line">cd /home/rabbitmq-cluster</span><br><span class="line">cat &gt; docker-compose.yaml &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">services:</span><br><span class="line">    rabbit1:</span><br><span class="line">        image: rabbitmq:<span class="number">4.0</span>-management</span><br><span class="line">        container_name: rabbit1</span><br><span class="line">        hostname: rabbit1</span><br><span class="line">        ports:</span><br><span class="line">            - <span class="string">&quot;25672:25672&quot;</span></span><br><span class="line">            - <span class="string">&quot;5672:5672&quot;</span></span><br><span class="line">            - <span class="string">&quot;15672:15672&quot;</span></span><br><span class="line">            - <span class="string">&quot;4369:4369&quot;</span></span><br><span class="line">        environment:</span><br><span class="line">            - RABBITMQ_NODENAME=rabbit1</span><br><span class="line">            - RABBITMQ_ERLANG_COOKIE=CURIOAPPLICATION</span><br><span class="line">            - RABBITMQ_DEFAULT_USER=admin</span><br><span class="line">            - RABBITMQ_DEFAULT_PASS=admin</span><br><span class="line">            - RABBITMQ_DEFAULT_VHOST=my_vhost</span><br><span class="line">        volumes:</span><br><span class="line">            - <span class="string">&quot;/var/lib/rabbitmq/.erlang.cookie:/root/.erlang.cookie&quot;</span>    </span><br><span class="line"></span><br><span class="line">    rabbit2:</span><br><span class="line">        image: rabbitmq:<span class="number">4.0</span>-management</span><br><span class="line">        container_name: rabbit2</span><br><span class="line">        hostname: rabbit2</span><br><span class="line">        environment:</span><br><span class="line">            - RABBITMQ_NODENAME=rabbit2</span><br><span class="line">            - RABBITMQ_ERLANG_COOKIE=CURIOAPPLICATION</span><br><span class="line">            - RABBITMQ_DEFAULT_VHOST=my_vhost</span><br><span class="line">        ports:</span><br><span class="line">            - <span class="string">&quot;5673:5672&quot;</span></span><br><span class="line">            - <span class="string">&quot;15673:15672&quot;</span></span><br><span class="line">        volumes:</span><br><span class="line">            - <span class="string">&quot;/var/lib/rabbitmq/.erlang.cookie:/root/.erlang.cookie&quot;</span></span><br><span class="line"></span><br><span class="line">    rabbit3:</span><br><span class="line">        image: rabbitmq:<span class="number">4.0</span>-management</span><br><span class="line">        container_name: rabbit3</span><br><span class="line">        hostname: rabbit3</span><br><span class="line">        environment:</span><br><span class="line">            - RABBITMQ_NODENAME=rabbit3</span><br><span class="line">            - RABBITMQ_ERLANG_COOKIE=CURIOAPPLICATION</span><br><span class="line">            - RABBITMQ_DEFAULT_VHOST=my_vhost</span><br><span class="line">        ports:</span><br><span class="line">            - <span class="string">&quot;5674:5672&quot;</span></span><br><span class="line">            - <span class="string">&quot;15674:15672&quot;</span></span><br><span class="line">        volumes:</span><br><span class="line">            - <span class="string">&quot;/var/lib/rabbitmq/.erlang.cookie:/root/.erlang.cookie&quot;</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<p>● rabbitmqctl：这是RabbitMQ提供的一个命令行工具，用于管理RabbitMQ节点和集群。<br>● join_cluster：是rabbitmqctl工具的一个子命令，其作用是将当前运行此命令的RabbitMQ节点加入到指定的集群中。<br>● rabbit1@rabbit1：这是目标集群中一个节点的名称。在RabbitMQ里，节点名称的格式为nodename@hostname，nodename是节点的名称，hostname是节点所在主机的名称。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[root@docker-vm rabbitmq-cluster]# docker exec -it rabbit1 /bin/bash</span><br><span class="line">root@rabbit1:/# rabbitmqctl stop_app</span><br><span class="line">rabbitmqctl reset</span><br><span class="line">rabbitmqctl join_cluster rabbit1<span class="meta">@rabbit1</span></span><br><span class="line">rabbitmqctl start_app</span><br><span class="line">Stopping rabbit application on node rabbit1<span class="meta">@rabbit1</span> ...</span><br><span class="line">Resetting node rabbit1<span class="meta">@rabbit1</span> ...</span><br><span class="line">Clustering node rabbit1<span class="meta">@rabbit1</span> with rabbit1<span class="meta">@rabbit1</span></span><br><span class="line">Error:</span><br><span class="line">Error: cannot cluster node with itself: rabbit1<span class="meta">@rabbit1</span></span><br><span class="line">Starting node rabbit1<span class="meta">@rabbit1</span> ...</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[root@docker-vm rabbitmq-cluster]# docker exec rabbit2 rabbitmqctl join_cluster rabbit1@rabbit1</span><br><span class="line">Clustering node rabbit2<span class="meta">@rabbit2</span> with rabbit1<span class="meta">@rabbit1</span></span><br><span class="line"></span><br><span class="line">[root@docker-vm rabbitmq-cluster]# docker exec rabbit3 rabbitmqctl join_cluster rabbit1@rabbit1</span><br><span class="line">Clustering node rabbit3<span class="meta">@rabbit3</span> with rabbit1<span class="meta">@rabbit1</span></span><br></pre></td></tr></table></figure>

<p><a href="http://192.168.31.230:15672/#/queues/%2F/sms.quorum">http://192.168.31.230:15672/#/queues/%2F/sms.quorum</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">arguments.put(<span class="string">&quot;x-quorum-initial-group-size&quot;</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p><img src="/images/RabbitMQ/20210718-1.png" alt="image-20210718-1"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">arguments.put(<span class="string">&quot;x-quorum-initial-group-size&quot;</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<p><img src="/images/RabbitMQ/20210718-2.png" alt="image-20210718-2"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.entity.SMS;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitConstant;</span><br><span class="line"><span class="keyword">import</span> com.lixiang.rabbitmq.utils.RabbitUtils;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * OrderSystem 类用于模拟订单系统，将 SMS 消息发送到 RabbitMQ 队列。</span></span><br><span class="line"><span class="comment"> * 该类创建与 RabbitMQ 的连接，声明队列，并将 SMS 消息转换为 JSON 格式后发送到队列。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderSystem</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (Connection connection = RabbitUtils.getConnection();</span><br><span class="line">                Channel channel = connection.createChannel();) &#123;</span><br><span class="line">            Map&lt;String, Object&gt; arguments = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            <span class="comment">// 设置队列类型为quorum(仲裁队列)，提供高可用性</span></span><br><span class="line">            arguments.put(<span class="string">&quot;x-queue-type&quot;</span>, <span class="string">&quot;quorum&quot;</span>);</span><br><span class="line">            <span class="comment">// 设置初始仲裁组大小为3，即3个副本</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">/* </span></span><br><span class="line"><span class="comment">            一个三节点集群将会有三个副本，每个节点上一个副本。而在七节点集群中，三个节点会各自持有一个副本，但另外四个节点不会托管新声明队列的任何副本。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            可以为仲裁队列配置复制因子（队列拥有的副本数量）。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            实际可用的最小因子值为三。强烈建议使用奇数作为因子值，这样可以计算出明确的节点多数（quorum）。例如，在两节点集群中就不存在&quot;多数&quot;节点。这将在下文的&quot;容错和最小在线副本数&quot;部分通过更多示例说明。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            对于大型集群或节点数为偶数的集群，这可能不太理想。要控制仲裁队列成员的数量，可以在声明队列时设置x-quorum-initial-group-size队列参数。提供的组大小参数应是一个大于零且小于或等于当前RabbitMQ集群大小的整数。仲裁队列将在声明时随机选择集群中的RabbitMQ节点子集来运行。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            如果仲裁队列是在所有集群节点加入集群之前声明的，并且初始副本数大于集群成员总数，则实际使用的有效值将等于集群节点总数。当更多节点加入集群时，副本数不会自动增加，但操作员可以手动增加。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            arguments.put(<span class="string">&quot;x-quorum-initial-group-size&quot;</span>, <span class="number">3</span>);</span><br><span class="line">            channel.queueDeclare(RabbitConstant.QUEUE_SMS_QUORUM, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, arguments);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">100</span>; i &lt; <span class="number">200</span>; i++) &#123;</span><br><span class="line">                SMS sms = <span class="keyword">new</span> SMS(<span class="string">&quot;乘客&quot;</span> + i, <span class="string">&quot;13900000&quot;</span> + i, <span class="string">&quot;您的车票已预订成功&quot;</span>);</span><br><span class="line">                String jsonSMS = <span class="keyword">new</span> Gson().toJson(sms);</span><br><span class="line">                channel.basicPublish(<span class="string">&quot;&quot;</span>, RabbitConstant.QUEUE_SMS_QUORUM, <span class="keyword">null</span>, jsonSMS.getBytes());</span><br><span class="line">            &#125;</span><br><span class="line">            log.info(<span class="string">&quot;订单信息已投递至Broker&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-rabbit的应用</title>
    <url>/2021/07/19/RabbitMQ/spring-rabbit%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h3 id="Spring-AMQP概述"><a href="#Spring-AMQP概述" class="headerlink" title="Spring AMQP概述"></a>Spring AMQP概述</h3><p>Spring AMQP是Spring框架对AMQP协议的支持项目，主要包含两个部分：</p>
<ol>
<li>spring-amqp：基础抽象</li>
<li>spring-rabbit：RabbitMQ实现<br>Spring AMQP提供了：<br>● 用于异步处理入站消息的监听器容器<br>● RabbitTemplate用于发送和接收消息<br>● 声明队列、交换机和绑定的支持</li>
</ol>
<h3 id="代码案例"><a href="#代码案例" class="headerlink" title="代码案例"></a>代码案例</h3><p>● pom.xml</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>● 配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  rabbitmq:</span><br><span class="line">    host: <span class="number">192.168</span><span class="number">.31</span><span class="number">.230</span></span><br><span class="line">    port: <span class="number">5672</span></span><br><span class="line">    virtual-host: v_myhost</span><br><span class="line">    username: admin</span><br><span class="line">    password: admin</span><br><span class="line">    listener:</span><br><span class="line">      simple:</span><br><span class="line">        acknowledge-mode: manual</span><br><span class="line">  application:</span><br><span class="line">    name: amqp</span><br></pre></td></tr></table></figure>

<p>● RabbitMQ配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">myQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(RabbitMQConstant.QUEUE_NAME, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Exchange <span class="title">myExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FanoutExchange(RabbitMQConstant.EXCHANGE_NAME, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">myBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(myQueue()).to((FanoutExchange) myExchange());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>● 消息生产者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQProducer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(</span><br><span class="line">            RabbitMQConstant.EXCHANGE_NAME,</span><br><span class="line">            <span class="string">&quot;&quot;</span>, <span class="comment">// FanoutExchange不需要路由键</span></span><br><span class="line">            message</span><br><span class="line">        );</span><br><span class="line">        log.info(<span class="string">&quot;消息发送成功: &#123;&#125;&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>● 消息消费者（手动确认）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConsumer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RabbitListener(queues = RabbitMQConstant.QUEUE_NAME)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMessage</span><span class="params">(String message, Message amqpMessage, Channel channel)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;收到消息: &#123;&#125;&quot;</span>, message);</span><br><span class="line">            <span class="comment">// 业务处理...</span></span><br><span class="line">            channel.basicAck(amqpMessage.getMessageProperties().getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            channel.basicNack(amqpMessage.getMessageProperties().getDeliveryTag(), <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ Khepri元数据存储</title>
    <url>/2021/07/19/RabbitMQ/RabbitMQ%20Khepri%E5%85%83%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/</url>
    <content><![CDATA[<h3 id="元数据存储的作用"><a href="#元数据存储的作用" class="headerlink" title="元数据存储的作用"></a>元数据存储的作用</h3><p>元数据存储是RabbitMQ记录除队列和流消息外所有信息的数据库，包括：<br>● 内部数据存储中的用户和权限（“内部”指代的是在RabbitMQ内部定义的用户，而非外部系统如LDAP定义的用户）<br>● 虚拟主机<br>● 拓扑结构：交换机、队列、绑定关系<br>● 运行时参数和策略</p>
<p><img src="/images/RabbitMQ/20210719-1.png" alt="image-20210719-1"></p>
<p>RabbitMQ支持两种不同的库来提供该数据库：  </p>
<ol>
<li>Mnesia  </li>
<li>Khepri<br>每次只能使用其中之一。以下是它们的详细介绍。  </li>
</ol>
<h3 id="Mnesia"><a href="#Mnesia" class="headerlink" title="Mnesia"></a>Mnesia</h3><p>Mnesia是最初的后端，也是RabbitMQ 3.13.x版本之前唯一使用的后端。该库是Erlang/OTP标准发行版的一部分。<br>它效率较高，支持事务和集群复制，提供备份和恢复的API，并且作为原生的Erlang/OTP库，能够完美集成到任何Erlang应用中。<br>Mnesia的弱点在于其故障恢复特性，尤其是在网络分区的情况下。其复制算法假设使用Mnesia的系统可以承受在网络分区的一侧丢弃所有数据，但这并不总是成立，也不符合许多技术运维团队的期望。<br>对于Mnesia，如果两个节点在一段时间内无法通信，且数据库在一侧被更新（例如声明了一个队列），则由RabbitMQ负责解决数据冲突。<br>为了解决这个问题，RabbitMQ引入了网络分区处理策略。但这些策略并非根本解决方案，且难以推理。</p>
<h3 id="Khepri"><a href="#Khepri" class="headerlink" title="Khepri"></a>Khepri</h3><p><img src="/images/RabbitMQ/20210719-2.png" alt="image-20210719-2"></p>
<p>Khepri是RabbitMQ 4.0.x开始全面支持的元数据存储。它由RabbitMQ团队开发，并大量复用了仲裁队列和流功能的工作成果。<br>实际上，这些组件均基于Raft共识算法。因此，在连接丢失的情况下，其行为有明确定义且更易于推理。由于所有组件和子系统使用相同的算法，其行为也保持一致。<br>最终目标是完全切换到Khepri并停止使用Mnesia。然而，Khepri的使用与Mnesia相比是一个重大变化（尽管它是内部组件），因为它会影响集群或网络出现问题时用户可见的多个部分行为。</p>
<p>提示<br>Khepri将在RabbitMQ 4.1.0中成为默认后端。<br>Mnesia仍将得到支持。现有的RabbitMQ部署在升级到4.1.x版本后将继续使用Mnesia，直到管理员显式启用Khepri。<br>Mnesia的支持将在未来版本（可能是4.2.0）中移除。因此，RabbitMQ团队鼓励用户使用Khepri测试其工作负载和应用，以使其真正成熟，成为RabbitMQ未来的默认（且唯一）元数据存储。</p>
<h3 id="重要提示"><a href="#重要提示" class="headerlink" title="重要提示"></a>重要提示</h3><p>尽管Khepri在RabbitMQ4.0.x中得到全面支持，但它没有Mnesia长达17年的广泛使用历史。我们鼓励所有RabbitMQ用户在在生产环境中采用Khepri之前对其进行全面测试。<br>从4.0.x升级到未来版本时，可以保持Khepri的启用状态。<br>特性标志子系统使用“稳定”和“实验性”来标识特性标志的成熟度。<br>实验性特性标志在两种情况下使用：  </p>
<ol>
<li>在开发早期引入变更以获取反馈。这些变更可能会被撤销，启用此类特性标志的RabbitMQ节点可能无法升级，且可能不提供支持。  </li>
<li>用于RabbitMQ团队已承诺并提供支持的功能，直到其准备就绪并默认启用，可能替代旧系统。<br>RabbitMQ 3.13.x中的Khepri属于第一类。但请放心，RabbitMQ 4.0及更高版本中的Khepri属于第二类，因此得到全面支持。 </li>
</ol>
<h3 id="在新节点上启用Khepri"><a href="#在新节点上启用Khepri" class="headerlink" title="在新节点上启用Khepri"></a>在新节点上启用Khepri</h3><p>● 使用CLI工具</p>
<ol>
<li>启动新的RabbitMQ节点（方法自选）。以下示例直接执行rabbitmq-server命令：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">rabbitmq-server</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>此时节点使用Mnesia作为元数据存储后端。<br>2. 启用khepri_db特性标志： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 启用Khepri</span><br><span class="line">rabbitmqctl enable_feature_flag --experimental khepri_db</span><br></pre></td></tr></table></figure>

<h3 id="使用管理UI"><a href="#使用管理UI" class="headerlink" title="使用管理UI"></a>使用管理UI</h3><ol>
<li>启动新的RabbitMQ节点（方法自选）。  </li>
<li>启用管理插件： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure></li>
<li>打开并登录管理UI。  </li>
<li>导航至“Admin &gt; Feature Flags”。  </li>
<li>勾选“I understand the risk”并点击“Enable”按钮。</li>
</ol>
<p><img src="/images/RabbitMQ/20210719-3.png" alt="image-20210719-3"></p>
<h3 id="集群与Khepri"><a href="#集群与Khepri" class="headerlink" title="集群与Khepri"></a>集群与Khepri</h3><p>当RabbitMQ节点集群化时，它们调用元数据存储后端创建或扩展集群。这对Mnesia和Khepri均适用。<br>因此，基于Khepri的RabbitMQ集群的形成或扩展方式与Mnesia相同。<br>● 何时启用Khepri<br>可在集群创建前后启用Khepri。<br>如果集群创建后启用Khepri，第一步是将集群视图从Mnesia同步到Khepri。<br>● 注意事项<br>由于使用Raft共识算法，所有涉及元数据存储更新的操作（有时甚至查询）需要多数节点可用。</p>
<p><img src="/images/RabbitMQ/20210719-4.png" alt="image-20210719-4"></p>
]]></content>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka消费者接入细节</title>
    <url>/2022/11/11/kafka/%E6%B6%88%E8%B4%B9%E8%80%85%E6%8E%A5%E5%85%A5%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="消费者接入代码实例"><a href="#消费者接入代码实例" class="headerlink" title="消费者接入代码实例"></a>消费者接入代码实例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerConfig;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecords;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.KafkaConsumer;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.common.serialization.StringDeserializer;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderConsumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Properties kaProperties = <span class="keyword">new</span> Properties();</span><br><span class="line">        kaProperties.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">&quot;192.168.31.230:9092&quot;</span>);</span><br><span class="line">        kaProperties.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());</span><br><span class="line">        kaProperties.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, JsonDeserializer.class.getName());</span><br><span class="line">        kaProperties.put(ConsumerConfig.GROUP_ID_CONFIG, <span class="string">&quot;order-group&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (KafkaConsumer&lt;String, Order&gt; consumer = <span class="keyword">new</span> KafkaConsumer&lt;&gt;(kaProperties)) &#123;</span><br><span class="line">            consumer.subscribe(Collections.singletonList(<span class="string">&quot;orders&quot;</span>));</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="comment">// 消费者从Kafka主题中拉取消息，等待时间为100毫秒，期间接收到新消息立即返回</span></span><br><span class="line">                ConsumerRecords&lt;String, Order&gt; records = consumer.poll(Duration.ofMillis(<span class="number">100</span>));</span><br><span class="line">                <span class="keyword">for</span> (ConsumerRecord&lt;String, Order&gt; record : records) &#123;</span><br><span class="line">                    log.info(<span class="string">&quot;topic=&#123;&#125;, partition=&#123;&#125;, offset=&#123;&#125;, key=&#123;&#125;, value=&#123;&#125;&quot;</span>, </span><br><span class="line">                             record.topic(), record.partition(), record.offset(), record.key(), record.value());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;Error consuming message&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="消费者poll拉取方法的设计细节"><a href="#消费者poll拉取方法的设计细节" class="headerlink" title="消费者poll拉取方法的设计细节"></a>消费者poll拉取方法的设计细节</h3><p><img src="/images/kafka/20221111-1.png" alt="image-20221111-1"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//max.poll.records</span></span><br><span class="line">kaProperties.put(ConsumerConfig.MAX_POLL_RECORDS_CONFIG, <span class="number">500</span>);</span><br><span class="line">...</span><br><span class="line">ConsumerRecords&lt;String, Order&gt; records = consumer.poll(Duration.ofMillis(<span class="number">100</span>));</span><br></pre></td></tr></table></figure>

<h3 id="消费者（Consumer）"><a href="#消费者（Consumer）" class="headerlink" title="消费者（Consumer）"></a>消费者（Consumer）</h3><p>● ConsumerNetworkClient：消费者网络客户端，负责与Kafka集群中的代理节点进行通信。它有几个重要的参数：<br>  ○ fetch.min.bytes：每批次最小抓取大小，默认1字节，即每次从代理节点抓取数据时，至少要抓取这么多字节的数据才会返回。<br>  ○ fetch.max.wait.ms：一批数据最小值未达到的超时时间，默认500ms，如果在这个时间内没有达到Fetch.min.bytes的要求，也会返回已抓取到的数据。<br>  ○ fetch.max.bytes：每批次最大抓取大小，默认50m，即每次抓取数据的最大字节数。<br>● completedFetches（queue）：一个完成抓取的队列，用于存储从代理节点成功抓取到的数据（completed Fetch）。</p>
<h3 id="流程说明"><a href="#流程说明" class="headerlink" title="流程说明"></a>流程说明</h3><ol>
<li>消费者通过ConsumerNetworkClient发送消费请求（sendFetches）到Kafka集群中的相应代理节点（根据要消费的主题和分区确定）。</li>
<li>代理节点处理请求后，将数据返回给消费者网络客户端。</li>
<li>消费者网络客户端将获取到的数据放入completedFetches队列中。</li>
<li>消费者从completedFetches队列中抓取数据（FetchedRecords），并进行反序列化（ parseRecord）等后续处理。</li>
</ol>
<h3 id="偏移量初始化"><a href="#偏移量初始化" class="headerlink" title="偏移量初始化"></a>偏移量初始化</h3><p>AUTO_OFFSET_RESET_CONFIG 是 Kafka 消费者配置中的一个重要选项，它决定了当消费者启动时，如果没有找到存储的偏移量（例如消费者首次启动或者之前存储的偏移量已过期），该如何确定初始的消费位置。通常有以下几个可能的设置值：<br>● “earliest”：从最早的可用（未提交）消息开始消费。<br>● “latest”：从最新的消息开始消费，也就是从分区中当前的末尾位置开始消费，只消费消费者启动后新产生的消息。<br>● “none”：当设置为 “none” 时，情况有所不同。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerConfig;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecords;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.KafkaConsumer;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.common.serialization.StringDeserializer;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderConsumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Properties kaProperties = <span class="keyword">new</span> Properties();</span><br><span class="line">        kaProperties.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">&quot;192.168.31.230:9092&quot;</span>);</span><br><span class="line">        kaProperties.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());</span><br><span class="line">        kaProperties.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, JsonDeserializer.class.getName());</span><br><span class="line">        kaProperties.put(ConsumerConfig.GROUP_ID_CONFIG, <span class="string">&quot;order-group&quot;</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            分区0：1|2|3|4|5</span></span><br><span class="line"><span class="comment">            分区1: 1|2|3</span></span><br><span class="line"><span class="comment">            auto.offset.reset</span></span><br><span class="line"><span class="comment">            如果 Kafka 中没有初始偏移量，或者服务器上当前偏移量不再存在时该怎么办：</span></span><br><span class="line"><span class="comment">            earliest：自动将偏移量重置为最早的未提交偏移量。</span></span><br><span class="line"><span class="comment">            latest：自动将偏移量重置为最新的偏移量。</span></span><br><span class="line"><span class="comment">            none：如果没有找到消费者组的先前偏移量，则向消费者抛出异常。</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"><span class="comment">//        kaProperties.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, &quot;earliest&quot;);</span></span><br><span class="line"><span class="comment">//        kaProperties.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, &quot;latest&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Kafka 将分区消费进度保存在一个特殊的内部主题中，即 __consumer_offsets 主题。</span></span><br><span class="line">        kaProperties.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, <span class="string">&quot;earliest&quot;</span>);</span><br><span class="line">        <span class="comment">//自动提交消费进度</span></span><br><span class="line">        kaProperties.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        <span class="comment">// 自动提交的时间间隔</span></span><br><span class="line">        kaProperties.put(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG, <span class="string">&quot;1000&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (KafkaConsumer&lt;String, Order&gt; consumer = <span class="keyword">new</span> KafkaConsumer&lt;&gt;(kaProperties)) &#123;</span><br><span class="line">            consumer.subscribe(Collections.singletonList(<span class="string">&quot;orders&quot;</span>));</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="comment">// 消费者从Kafka主题中拉取消息，等待时间为100毫秒，期间接收到新消息立即返回</span></span><br><span class="line">                ConsumerRecords&lt;String, Order&gt; records = consumer.poll(Duration.ofMillis(<span class="number">100</span>));</span><br><span class="line">                <span class="keyword">for</span> (ConsumerRecord&lt;String, Order&gt; record : records) &#123;</span><br><span class="line">                    log.info(<span class="string">&quot;topic=&#123;&#125;, partition=&#123;&#125;, offset=&#123;&#125;, key=&#123;&#125;, value=&#123;&#125;&quot;</span>, </span><br><span class="line">                             record.topic(), record.partition(), record.offset(), record.key(), record.value());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;Error consuming message&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="消费者自动提交与手动提交"><a href="#消费者自动提交与手动提交" class="headerlink" title="消费者自动提交与手动提交"></a>消费者自动提交与手动提交</h3><p>在Kafka中，消费者（Consumers）从主题（Topics）中读取消息。消费者提交（Commit）指的是消费者告知Kafka它已经成功处理了某个偏移量（Offset）之前的所有消息。<br>consumer_offsets是Kafka内部使用的一个特殊主题，它用于存储所有消费者组的提交偏移量信息。每当消费者提交了新的偏移量（无论是自动还是手动），这个信息就会被记录在 consumer_offsets主题中。Kafka使用该主题来跟踪每个消费者组内各个分区的消费进度，以便在消费者重启或重新平衡时能够从上次提交的位置继续消费消息。</p>
<p><img src="/images/kafka/20221111-2.png" alt="image-20221111-2"></p>
<h3 id="自动提交"><a href="#自动提交" class="headerlink" title="自动提交"></a>自动提交</h3><p>自动提交是指Kafka消费者配置为定期自动将已消费的消息偏移量提交给Kafka集群。这种模式简化了编程模型，因为开发者不需要显式地管理偏移量的提交。然而，这也意味着如果消费者在自动提交之后但在处理消息之前崩溃，那么在消费者重启后，它可能会丢失那些尚未处理但已被标记为已处理的消息。<br>● 优点：易于使用，不需要额外代码来处理偏移量。<br>● 缺点：可能导致消息丢失，并且难以精确控制何时提交偏移量。<br>配置参数：<br>● enable.auto.commit 设置为 true 时启用自动提交。<br>● auto.commit.interval.ms 定义了两次自动提交之间的间隔时间。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerConfig;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecords;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.KafkaConsumer;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.common.serialization.StringDeserializer;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderConsumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Properties kaProperties = <span class="keyword">new</span> Properties();</span><br><span class="line">        kaProperties.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">&quot;192.168.31.230:9092&quot;</span>);</span><br><span class="line">        kaProperties.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());</span><br><span class="line">        kaProperties.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, JsonDeserializer.class.getName());</span><br><span class="line">        kaProperties.put(ConsumerConfig.GROUP_ID_CONFIG, <span class="string">&quot;order-group&quot;</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            分区0：1|2|3|4|5</span></span><br><span class="line"><span class="comment">            分区1: 1|2|3</span></span><br><span class="line"><span class="comment">            auto.offset.reset</span></span><br><span class="line"><span class="comment">            如果 Kafka 中没有初始偏移量，或者服务器上当前偏移量不再存在时该怎么办：</span></span><br><span class="line"><span class="comment">            earliest：自动将偏移量重置为最早的未提交偏移量。</span></span><br><span class="line"><span class="comment">            latest：自动将偏移量重置为最新的偏移量。</span></span><br><span class="line"><span class="comment">            none：如果没有找到消费者组的先前偏移量，则向消费者抛出异常。</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"><span class="comment">//        kaProperties.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, &quot;earliest&quot;);</span></span><br><span class="line"><span class="comment">//        kaProperties.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, &quot;latest&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Kafka 将分区消费进度保存在一个特殊的内部主题中，即 __consumer_offsets 主题。</span></span><br><span class="line">        kaProperties.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, <span class="string">&quot;latest&quot;</span>);</span><br><span class="line">        <span class="comment">//自动提交消费进度</span></span><br><span class="line">        kaProperties.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        <span class="comment">// 自动提交的时间间隔</span></span><br><span class="line">        kaProperties.put(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG, <span class="string">&quot;1000&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (KafkaConsumer&lt;String, Order&gt; consumer = <span class="keyword">new</span> KafkaConsumer&lt;&gt;(kaProperties)) &#123;</span><br><span class="line">            consumer.subscribe(Collections.singletonList(<span class="string">&quot;orders112&quot;</span>));</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="comment">// 消费者从Kafka主题中拉取消息，等待时间为100毫秒，期间接收到新消息立即返回</span></span><br><span class="line">                ConsumerRecords&lt;String, Order&gt; records = consumer.poll(Duration.ofMillis(<span class="number">100</span>));</span><br><span class="line">                <span class="keyword">for</span> (ConsumerRecord&lt;String, Order&gt; record : records) &#123;</span><br><span class="line">                    log.info(<span class="string">&quot;topic=&#123;&#125;, partition=&#123;&#125;, offset=&#123;&#125;, key=&#123;&#125;, value=&#123;&#125;&quot;</span>, </span><br><span class="line">                             record.topic(), record.partition(), record.offset(), record.key(), record.value());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;Error consuming message&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="手动提交"><a href="#手动提交" class="headerlink" title="手动提交"></a>手动提交</h3><p>手动提交则要求消费者程序显式地调用提交方法（如 commitSync() 或 commitAsync()），以通知Kafka哪些消息已经被成功处理。这种方式提供了更精细的控制，可以确保只有在消息被成功处理后才提交偏移量，从而避免消息丢失。<br>● 优点：更好的控制，防止消息丢失。<br>● 缺点：增加了复杂性，需要开发者正确处理异常情况。<br>两种主要的手动提交方式：<br>● commitSync()：同步提交，会阻塞直到提交完成或发生错误。如果提交失败，它可以抛出异常，允许应用程序逻辑进行适当的恢复操作。<br>● commitAsync()：异步提交，不会等待提交完成。这对于性能优化很有用，但是如果没有相应的回调机制来处理可能的提交失败，则可能会导致问题。<br>选择自动提交还是手动提交取决于你的应用需求以及对消息处理保证级别的要求。如果你的应用不能容忍消息丢失并且需要精确一次的处理语义，那么通常应该选择手动提交并谨慎处理偏移量。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.common.TopicPartition;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.common.serialization.StringDeserializer;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderManualConsumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Properties kaProperties = <span class="keyword">new</span> Properties();</span><br><span class="line">        kaProperties.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">&quot;192.168.31.230:9092&quot;</span>);</span><br><span class="line">        kaProperties.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());</span><br><span class="line">        kaProperties.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, JsonDeserializer.class.getName());</span><br><span class="line">        kaProperties.put(ConsumerConfig.GROUP_ID_CONFIG, <span class="string">&quot;order-group&quot;</span>);</span><br><span class="line">        kaProperties.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, <span class="string">&quot;latest&quot;</span>);</span><br><span class="line">        kaProperties.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, <span class="string">&quot;false&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (KafkaConsumer&lt;String, Order&gt; consumer = <span class="keyword">new</span> KafkaConsumer&lt;&gt;(kaProperties)) &#123;</span><br><span class="line">            consumer.subscribe(Collections.singletonList(<span class="string">&quot;orders&quot;</span>));</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="comment">// 消费者从Kafka主题中拉取消息，等待时间为100毫秒，期间接收到新消息立即返回</span></span><br><span class="line">                ConsumerRecords&lt;String, Order&gt; records = consumer.poll(Duration.ofMillis(<span class="number">100</span>));</span><br><span class="line">                <span class="keyword">if</span>(records.count() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span> (ConsumerRecord&lt;String, Order&gt; record : records) &#123;</span><br><span class="line">                    log.info(<span class="string">&quot;topic=&#123;&#125;, partition=&#123;&#125;, offset=&#123;&#125;, key=&#123;&#125;, value=&#123;&#125;&quot;</span>,</span><br><span class="line">                             record.topic(), record.partition(), record.offset(), record.key(), record.value());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 手动同步方式提交偏移量</span></span><br><span class="line">                <span class="comment">// consumer.commitSync();</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 手动异步方式提交偏移量</span></span><br><span class="line">                consumer.commitAsync(<span class="keyword">new</span> OffsetCommitCallback() &#123;</span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                    用于提供对提交请求完成的异步处理。当发送到服务器的提交请求被确认时，将调用此方法。</span></span><br><span class="line"><span class="comment">                    参数：</span></span><br><span class="line"><span class="comment">                    offsets – 这个回调适用的偏移量及其关联的元数据的映射</span></span><br><span class="line"><span class="comment">                    exception – 在处理请求期间抛出的异常，如果提交成功则为 null</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">(Map&lt;TopicPartition, OffsetAndMetadata&gt; offsets, Exception exception)</span> </span>&#123;</span><br><span class="line">                        log.info(<span class="string">&quot;Committed offsets: &#123;&#125;&quot;</span>, offsets);</span><br><span class="line">                        <span class="keyword">if</span> (exception != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            log.error(<span class="string">&quot;Failed to commit offsets&quot;</span>, exception);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;Error consuming message&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka基于消费者组实现消息广播</title>
    <url>/2022/11/11/kafka/Kafka%E5%9F%BA%E4%BA%8E%E6%B6%88%E8%B4%B9%E8%80%85%E7%BB%84%E5%AE%9E%E7%8E%B0%E6%B6%88%E6%81%AF%E5%B9%BF%E6%92%AD/</url>
    <content><![CDATA[<h3 id="实现广播的方法：创建多个消费者组"><a href="#实现广播的方法：创建多个消费者组" class="headerlink" title="实现广播的方法：创建多个消费者组"></a>实现广播的方法：创建多个消费者组</h3><p>为了实现广播，需要为每个接收广播消息的实体创建一个独立的消费者组。例如，假设有一个主题topic1包含需要广播的消息，并且有3个不同的应用程序（或服务）需要接收这些消息。为每个应用程序创建一个消费者组，这样每个消费者组都可以独立地从topic1中消费消息，从而实现消息的广播。</p>
<p><img src="/images/kafka/20221111-3.png" alt="image-20221111-3"></p>
<h3 id="配置和注意事项"><a href="#配置和注意事项" class="headerlink" title="配置和注意事项"></a>配置和注意事项</h3><p>分区数量：<br>● 要确保分区数量足够多，以避免消费者组内的消费者闲置。<br>● 理想情况下，每个消费者组内的消费者应该能够分配到至少一个分区，否则会有消费者闲置，无法充分利用资源。<br>性能考虑：<br>● 创建多个消费者组会增加 Kafka 集群的负载，因为每个消费者组都需要进行消息拉取和处理。<br>● 要根据实际情况调整 poll 时间、消费者组的数量和分区数量，以达到性能和广播效果的平衡。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IoTEvent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer deviceId;</span><br><span class="line">    <span class="keyword">private</span> Long eventTimestamp;</span><br><span class="line">    <span class="keyword">private</span> String deviceType;</span><br><span class="line">    <span class="keyword">private</span> Integer eventValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> lombok.SneakyThrows;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IoTEventSerializer</span> <span class="keyword">implements</span> <span class="title">org</span>.<span class="title">apache</span>.<span class="title">kafka</span>.<span class="title">common</span>.<span class="title">serialization</span>.<span class="title">Serializer</span>&lt;<span class="title">IoTEvent</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] serialize(String topic, IoTEvent data) &#123;</span><br><span class="line">        <span class="keyword">return</span> objectMapper.writeValueAsBytes(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> lombok.SneakyThrows;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IoTEventDeserializer</span> <span class="keyword">implements</span> <span class="title">org</span>.<span class="title">apache</span>.<span class="title">kafka</span>.<span class="title">common</span>.<span class="title">serialization</span>.<span class="title">Deserializer</span>&lt;<span class="title">IoTEvent</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IoTEvent <span class="title">deserialize</span><span class="params">(String topic, <span class="keyword">byte</span>[] data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> objectMapper.readValue(data, IoTEvent.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.common.serialization.StringSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IoTEventProducer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Properties kaProperties = <span class="keyword">new</span> Properties();</span><br><span class="line">        kaProperties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">&quot;192.168.31.230:9092&quot;</span>);</span><br><span class="line">        kaProperties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());</span><br><span class="line">        kaProperties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, IoTEventSerializer.class.getName());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (Producer&lt;String, IoTEvent&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;&gt;(kaProperties)) &#123;</span><br><span class="line">            Random random = <span class="keyword">new</span> Random();</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                IoTEvent event = IoTEvent.builder()</span><br><span class="line">                        .deviceId(random.nextInt(<span class="number">10</span>))</span><br><span class="line">                        .eventTimestamp(System.currentTimeMillis())</span><br><span class="line">                        .deviceType(<span class="string">&quot;BOT&quot;</span>)</span><br><span class="line">                        .eventValue(random.nextInt(<span class="number">101</span>))</span><br><span class="line">                        .build();</span><br><span class="line">                ProducerRecord&lt;String, IoTEvent&gt; producerRecord = <span class="keyword">new</span> ProducerRecord&lt;&gt;(<span class="string">&quot;iot-events&quot;</span>, event.getDeviceId().toString(), event);</span><br><span class="line">                RecordMetadata result = producer.send(producerRecord).get();</span><br><span class="line">                log.info(<span class="string">&quot;topic=&#123;&#125;, partition=&#123;&#125;, offset = &#123;&#125;, timestamp = &#123;&#125;&quot;</span>, result.topic(), result.partition(), result.offset(), result.timestamp());</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>); <span class="comment">// Sleep for 1 second</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;Error sending message&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerConfig;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecords;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.KafkaConsumer;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.common.serialization.StringDeserializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Group1Consumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Properties kaProperties = <span class="keyword">new</span> Properties();</span><br><span class="line">        kaProperties.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">&quot;192.168.31.230:9092&quot;</span>);</span><br><span class="line">        kaProperties.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());</span><br><span class="line">        kaProperties.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, IoTEventDeserializer.class.getName());</span><br><span class="line">        kaProperties.put(ConsumerConfig.GROUP_ID_CONFIG, <span class="string">&quot;group-1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (KafkaConsumer&lt;String, IoTEvent&gt; consumer = <span class="keyword">new</span> KafkaConsumer&lt;&gt;(kaProperties)) &#123;</span><br><span class="line">            consumer.subscribe(Collections.singletonList(<span class="string">&quot;iot-events&quot;</span>));</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="comment">// 消费者从Kafka主题中拉取消息，等待时间为100毫秒，期间接收到新消息立即返回</span></span><br><span class="line">                ConsumerRecords&lt;String, IoTEvent&gt; records = consumer.poll(Duration.ofMillis(<span class="number">100</span>));</span><br><span class="line">                <span class="keyword">for</span> (ConsumerRecord&lt;String, IoTEvent&gt; record : records) &#123;</span><br><span class="line">                    log.info(<span class="string">&quot;topic=&#123;&#125;, partition=&#123;&#125;, offset=&#123;&#125;, key=&#123;&#125;, value=&#123;&#125;&quot;</span>, </span><br><span class="line">                             record.topic(), record.partition(), record.offset(), record.key(), record.value());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;Error consuming message&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerConfig;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecords;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.KafkaConsumer;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.common.serialization.StringDeserializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Group2Consumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Properties kaProperties = <span class="keyword">new</span> Properties();</span><br><span class="line">        kaProperties.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">&quot;192.168.31.230:9092&quot;</span>);</span><br><span class="line">        kaProperties.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());</span><br><span class="line">        kaProperties.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, IoTEventDeserializer.class.getName());</span><br><span class="line">        kaProperties.put(ConsumerConfig.GROUP_ID_CONFIG, <span class="string">&quot;group-2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (KafkaConsumer&lt;String, IoTEvent&gt; consumer = <span class="keyword">new</span> KafkaConsumer&lt;&gt;(kaProperties)) &#123;</span><br><span class="line">            consumer.subscribe(Collections.singletonList(<span class="string">&quot;iot-events&quot;</span>));</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="comment">// 消费者从Kafka主题中拉取消息，等待时间为100毫秒，期间接收到新消息立即返回</span></span><br><span class="line">                ConsumerRecords&lt;String, IoTEvent&gt; records = consumer.poll(Duration.ofMillis(<span class="number">100</span>));</span><br><span class="line">                <span class="keyword">for</span> (ConsumerRecord&lt;String, IoTEvent&gt; record : records) &#123;</span><br><span class="line">                    log.info(<span class="string">&quot;topic=&#123;&#125;, partition=&#123;&#125;, offset=&#123;&#125;, key=&#123;&#125;, value=&#123;&#125;&quot;</span>, </span><br><span class="line">                             record.topic(), record.partition(), record.offset(), record.key(), record.value());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;Error consuming message&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka基于偏移量和时间重放消息</title>
    <url>/2022/11/12/kafka/Kafka%E5%9F%BA%E4%BA%8E%E5%81%8F%E7%A7%BB%E9%87%8F%E5%92%8C%E6%97%B6%E9%97%B4%E9%87%8D%E6%94%BE%E6%B6%88%E6%81%AF/</url>
    <content><![CDATA[<h3 id="基于偏移量重放消息"><a href="#基于偏移量重放消息" class="headerlink" title="基于偏移量重放消息"></a>基于偏移量重放消息</h3><ol>
<li>数据重新处理<br>错误修复：处理消息时出错致数据不准确或丢失，可重放消息修复存储错误或逻辑错误。</li>
<li>功能测试和验证<br>新功能测试：使用历史消息测试新功能的准确性和性能。<br>性能测试：将偏移量设至高负载时段，评估系统优化或升级后的性能。</li>
<li>业务逻辑调整和审计<br>业务更新：业务逻辑变更，重放消息以符合新规则。<br>审计检查：设置偏移量，对特定时段消息重新处理，确保合规性。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerConfig;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecords;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.KafkaConsumer;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.common.TopicPartition;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.common.serialization.StringDeserializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OffsetSeekConsumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Properties kaProperties = <span class="keyword">new</span> Properties();</span><br><span class="line">        kaProperties.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">&quot;192.168.31.230:9092&quot;</span>);</span><br><span class="line">        kaProperties.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());</span><br><span class="line">        kaProperties.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, IoTEventDeserializer.class.getName());</span><br><span class="line">        kaProperties.put(ConsumerConfig.GROUP_ID_CONFIG, <span class="string">&quot;iot-events-group&quot;</span>);</span><br><span class="line">        <span class="comment">//自动提交消费进度</span></span><br><span class="line">        kaProperties.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        <span class="comment">// 自动提交的时间间隔</span></span><br><span class="line">        kaProperties.put(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG, <span class="string">&quot;1000&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (KafkaConsumer&lt;String, IoTEvent&gt; consumer = <span class="keyword">new</span> KafkaConsumer&lt;&gt;(kaProperties)) &#123;</span><br><span class="line"></span><br><span class="line">            consumer.subscribe(Collections.singletonList(<span class="string">&quot;iot-events&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取当前消费者分配的主题分区集合。</span></span><br><span class="line">            Set&lt;TopicPartition&gt; assignment = consumer.assignment();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 等待直到消费者被分配到主题分区。</span></span><br><span class="line">            <span class="comment">// 由于初始分配可能需要一些时间，因此使用一个 while 循环不断轮询，</span></span><br><span class="line">            <span class="comment">// 每次轮询间隔 100 毫秒，直到获取到分配的分区。</span></span><br><span class="line">            <span class="keyword">while</span> (assignment.isEmpty()) &#123;</span><br><span class="line">                <span class="comment">// 调用 poll 方法以确保消费者与 Kafka 集群保持连接，并等待分配。</span></span><br><span class="line">                consumer.poll(Duration.ofMillis(<span class="number">100</span>));</span><br><span class="line">                <span class="comment">// 更新分配的分区集合。</span></span><br><span class="line">                assignment = consumer.assignment();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 遍历所有分配的分区，并将每个分区的消费位置设置为偏移量 10。</span></span><br><span class="line">            <span class="keyword">for</span> (TopicPartition topicPartition : assignment) &#123;</span><br><span class="line">                <span class="comment">// 将指定分区的消费位置设置为偏移量 10。</span></span><br><span class="line">                <span class="comment">// 这意味着消费者将从每个分区的第 10 条消息开始读取。</span></span><br><span class="line">                consumer.seek(topicPartition, <span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                ConsumerRecords&lt;String, IoTEvent&gt; records = consumer.poll(Duration.ofMillis(<span class="number">100</span>));</span><br><span class="line">                <span class="keyword">for</span> (ConsumerRecord&lt;String, IoTEvent&gt; record : records) &#123;</span><br><span class="line">                    log.info(<span class="string">&quot;topic=&#123;&#125;, partition=&#123;&#125;, offset=&#123;&#125;, key=&#123;&#125;, value=&#123;&#125;&quot;</span>, </span><br><span class="line">                             record.topic(), record.partition(), record.offset(), record.key(), record.value());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;Error consuming message&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">16</span> <span class="number">11</span>:<span class="number">40</span>:<span class="number">57</span> [INFO] (KafkaMetricsCollector.java:<span class="number">270</span>) - initializing Kafka metrics collector</span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">16</span> <span class="number">11</span>:<span class="number">40</span>:<span class="number">57</span> [INFO] (AppInfoParser.java:<span class="number">125</span>) - Kafka version: <span class="number">3.9</span><span class="number">.0</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">16</span> <span class="number">11</span>:<span class="number">40</span>:<span class="number">57</span> [INFO] (AppInfoParser.java:<span class="number">126</span>) - Kafka commitId: 84caaa6e9da06435</span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">16</span> <span class="number">11</span>:<span class="number">40</span>:<span class="number">57</span> [INFO] (AppInfoParser.java:<span class="number">127</span>) - Kafka startTimeMs: <span class="number">1736998857485</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">16</span> <span class="number">11</span>:<span class="number">40</span>:<span class="number">57</span> [INFO] (ClassicKafkaConsumer.java:<span class="number">481</span>) - [Consumer clientId=consumer-iot-events-group-<span class="number">1</span>, groupId=iot-events-group] <span class="function">Subscribed to <span class="title">topic</span><span class="params">(s)</span>: iot-events</span></span><br><span class="line"><span class="function">2025-01-16 11:40:57 [INFO] <span class="params">(Metadata.java:<span class="number">365</span>)</span> - [Consumer clientId</span>=consumer-iot-events-group-<span class="number">1</span>, groupId=iot-events-group] Cluster ID: B4mRavu_Tm-rLq1koR7IgQ</span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">16</span> <span class="number">11</span>:<span class="number">40</span>:<span class="number">57</span> [INFO] (AbstractCoordinator.java:<span class="number">937</span>) - [Consumer clientId=consumer-iot-events-group-<span class="number">1</span>, groupId=iot-events-group] Discovered group coordinator kafka:<span class="number">9092</span> (id: <span class="number">2147482646</span> rack: <span class="keyword">null</span>)</span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">16</span> <span class="number">11</span>:<span class="number">40</span>:<span class="number">57</span> [INFO] (AbstractCoordinator.java:<span class="number">605</span>) - [Consumer clientId=consumer-iot-events-group-<span class="number">1</span>, groupId=iot-events-group] (Re-)joining group</span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">16</span> <span class="number">11</span>:<span class="number">40</span>:<span class="number">57</span> [INFO] (AbstractCoordinator.java:<span class="number">1103</span>) - [Consumer clientId=consumer-iot-events-group-<span class="number">1</span>, groupId=iot-events-group] Request joining group due to: need to re-join with the given member-id: consumer-iot-events-group-<span class="number">1</span>-2cf66a8d-cadf-<span class="number">462d</span>-b62a-05c54ba70f26</span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">16</span> <span class="number">11</span>:<span class="number">40</span>:<span class="number">57</span> [INFO] (AbstractCoordinator.java:<span class="number">605</span>) - [Consumer clientId=consumer-iot-events-group-<span class="number">1</span>, groupId=iot-events-group] (Re-)joining group</span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">16</span> <span class="number">11</span>:<span class="number">41</span>:<span class="number">40</span> [INFO] (AbstractCoordinator.java:<span class="number">666</span>) - [Consumer clientId=consumer-iot-events-group-<span class="number">1</span>, groupId=iot-events-group] Successfully joined group with generation Generation&#123;generationId=<span class="number">10</span>, memberId=<span class="string">&#x27;consumer-iot-events-group-1-2cf66a8d-cadf-462d-b62a-05c54ba70f26&#x27;</span>, protocol=<span class="string">&#x27;range&#x27;</span>&#125;</span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">16</span> <span class="number">11</span>:<span class="number">41</span>:<span class="number">40</span> [INFO] (ConsumerCoordinator.java:<span class="number">664</span>) - [Consumer clientId=consumer-iot-events-group-<span class="number">1</span>, groupId=iot-events-group] Finished assignment <span class="keyword">for</span> group at generation <span class="number">10</span>: &#123;consumer-iot-events-group-<span class="number">1</span>-2cf66a8d-cadf-<span class="number">462d</span>-b62a-05c54ba70f26=Assignment(partitions=[iot-events-<span class="number">0</span>])&#125;</span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">16</span> <span class="number">11</span>:<span class="number">41</span>:<span class="number">40</span> [INFO] (AbstractCoordinator.java:<span class="number">843</span>) - [Consumer clientId=consumer-iot-events-group-<span class="number">1</span>, groupId=iot-events-group] Successfully synced group in generation Generation&#123;generationId=<span class="number">10</span>, memberId=<span class="string">&#x27;consumer-iot-events-group-1-2cf66a8d-cadf-462d-b62a-05c54ba70f26&#x27;</span>, protocol=<span class="string">&#x27;range&#x27;</span>&#125;</span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">16</span> <span class="number">11</span>:<span class="number">41</span>:<span class="number">40</span> [INFO] (ConsumerCoordinator.java:<span class="number">324</span>) - [Consumer clientId=consumer-iot-events-group-<span class="number">1</span>, groupId=iot-events-group] <span class="function">Notifying assignor about the new <span class="title">Assignment</span><span class="params">(partitions=[iot-events-<span class="number">0</span>])</span></span></span><br><span class="line"><span class="function">2025-01-16 11:41:40 [INFO] <span class="params">(ConsumerRebalanceListenerInvoker.java:<span class="number">58</span>)</span> - [Consumer clientId</span>=consumer-iot-events-group-<span class="number">1</span>, groupId=iot-events-group] Adding newly assigned partitions: iot-events-<span class="number">0</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">16</span> <span class="number">11</span>:<span class="number">41</span>:<span class="number">40</span> [INFO] (ConsumerUtils.java:<span class="number">209</span>) - Setting offset <span class="keyword">for</span> partition iot-events-<span class="number">0</span> to the committed offset FetchPosition&#123;offset=<span class="number">791</span>, offsetEpoch=Optional[<span class="number">0</span>], currentLeader=LeaderAndEpoch&#123;leader=Optional[kafka:<span class="number">9092</span> (id: <span class="number">1001</span> rack: <span class="keyword">null</span>)], epoch=<span class="number">0</span>&#125;&#125;</span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">16</span> <span class="number">11</span>:<span class="number">41</span>:<span class="number">40</span> [INFO] (ClassicKafkaConsumer.java:<span class="number">764</span>) - [Consumer clientId=consumer-iot-events-group-<span class="number">1</span>, groupId=iot-events-group] Seeking to offset <span class="number">10</span> <span class="keyword">for</span> partition iot-events-<span class="number">0</span></span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">16</span> <span class="number">11</span>:<span class="number">41</span>:<span class="number">41</span> [INFO] (OffsetConsumer.java:<span class="number">54</span>) - topic=iot-events, partition=<span class="number">0</span>, offset=<span class="number">10</span>, key=<span class="number">3</span>, value=IoTEvent(deviceId=<span class="number">3</span>, eventTimestamp=<span class="number">1736997681860</span>, deviceType=BOT, eventValue=<span class="number">88</span>)</span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">16</span> <span class="number">11</span>:<span class="number">41</span>:<span class="number">41</span> [INFO] (OffsetConsumer.java:<span class="number">54</span>) - topic=iot-events, partition=<span class="number">0</span>, offset=<span class="number">11</span>, key=<span class="number">3</span>, value=IoTEvent(deviceId=<span class="number">3</span>, eventTimestamp=<span class="number">1736997682880</span>, deviceType=BOT, eventValue=<span class="number">62</span>)</span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">16</span> <span class="number">11</span>:<span class="number">41</span>:<span class="number">41</span> [INFO] (OffsetConsumer.java:<span class="number">54</span>) - topic=iot-events, partition=<span class="number">0</span>, offset=<span class="number">12</span>, key=<span class="number">1</span>, value=IoTEvent(deviceId=<span class="number">1</span>, eventTimestamp=<span class="number">1736997683885</span>, deviceType=BOT, eventValue=<span class="number">29</span>)</span><br><span class="line"><span class="number">2025</span>-<span class="number">01</span>-<span class="number">16</span> <span class="number">11</span>:<span class="number">41</span>:<span class="number">41</span> [INFO] (OffsetConsumer.java:<span class="number">54</span>) - topic=iot-events, partition=<span class="number">0</span>, offset=<span class="number">13</span>, key=<span class="number">5</span>, value=IoTEvent(deviceId=<span class="number">5</span>, eventTimestamp=<span class="number">1736997684894</span>, deviceType=BOT, eventValue=<span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<h3 id="基于时间重放消息"><a href="#基于时间重放消息" class="headerlink" title="基于时间重放消息"></a>基于时间重放消息</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.common.TopicPartition;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.common.serialization.StringDeserializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeSeekConsumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Properties kaProperties = <span class="keyword">new</span> Properties();</span><br><span class="line">        kaProperties.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">&quot;192.168.31.230:9092&quot;</span>);</span><br><span class="line">        kaProperties.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());</span><br><span class="line">        kaProperties.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, IoTEventDeserializer.class.getName());</span><br><span class="line">        kaProperties.put(ConsumerConfig.GROUP_ID_CONFIG, <span class="string">&quot;iot-events-group&quot;</span>);</span><br><span class="line">        <span class="comment">//自动提交消费进度</span></span><br><span class="line">        kaProperties.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        <span class="comment">// 自动提交的时间间隔</span></span><br><span class="line">        kaProperties.put(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG, <span class="string">&quot;1000&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (KafkaConsumer&lt;String, IoTEvent&gt; consumer = <span class="keyword">new</span> KafkaConsumer&lt;&gt;(kaProperties)) &#123;</span><br><span class="line"></span><br><span class="line">            consumer.subscribe(Collections.singletonList(<span class="string">&quot;iot-events&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取当前消费者分配的主题分区集合。</span></span><br><span class="line">            Set&lt;TopicPartition&gt; assignment = consumer.assignment();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 等待直到消费者被分配到主题分区。</span></span><br><span class="line">            <span class="comment">// 由于初始分配可能需要一些时间，因此使用一个 while 循环不断轮询，</span></span><br><span class="line">            <span class="comment">// 每次轮询间隔 100 毫秒，直到获取到分配的分区。</span></span><br><span class="line">            <span class="keyword">while</span> (assignment.isEmpty()) &#123;</span><br><span class="line">                <span class="comment">// 调用 poll 方法以确保消费者与 Kafka 集群保持连接，并等待分配。</span></span><br><span class="line">                consumer.poll(Duration.ofMillis(<span class="number">100</span>));</span><br><span class="line">                <span class="comment">// 更新分配的分区集合。</span></span><br><span class="line">                assignment = consumer.assignment();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 指定时间戳（例如，当前时间减去1小时）</span></span><br><span class="line">            <span class="keyword">long</span> timestamp = <span class="number">1736997681860l</span>;</span><br><span class="line">            <span class="comment">// 创建一个Map来存储每个分区的时间戳</span></span><br><span class="line">            Map&lt;TopicPartition, Long&gt; timestampsToSearch = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (TopicPartition topicPartition : assignment) &#123;</span><br><span class="line">                timestampsToSearch.put(topicPartition, timestamp);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取指定时间的偏移量</span></span><br><span class="line">            Map&lt;TopicPartition, OffsetAndTimestamp&gt; offsets = consumer.offsetsForTimes(timestampsToSearch);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 遍历所有分配的分区，并将每个分区的消费位置设置为指定时间的偏移量。</span></span><br><span class="line">            <span class="keyword">for</span> (TopicPartition topicPartition : assignment) &#123;</span><br><span class="line">                OffsetAndTimestamp offsetAndTimestamp = offsets.get(topicPartition);</span><br><span class="line">                <span class="keyword">if</span> (offsetAndTimestamp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 将指定分区的消费位置设置为指定时间的偏移量。</span></span><br><span class="line">                    consumer.seek(topicPartition, offsetAndTimestamp.offset());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 如果没有找到指定时间的偏移量，则从头开始消费</span></span><br><span class="line">                    consumer.seekToBeginning(Collections.singletonList(topicPartition));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                ConsumerRecords&lt;String, IoTEvent&gt; records = consumer.poll(Duration.ofMillis(<span class="number">100</span>));</span><br><span class="line">                <span class="keyword">for</span> (ConsumerRecord&lt;String, IoTEvent&gt; record : records) &#123;</span><br><span class="line">                    log.info(<span class="string">&quot;topic=&#123;&#125;, partition=&#123;&#125;, offset=&#123;&#125;, key=&#123;&#125;, value=&#123;&#125;&quot;</span>, </span><br><span class="line">                             record.topic(), record.partition(), record.offset(), record.key(), record.value());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;Error consuming message&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka新高可用架构KRaft</title>
    <url>/2022/11/13/kafka/Kafka%E6%96%B0%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84KRaft/</url>
    <content><![CDATA[<h3 id="控制平面"><a href="#控制平面" class="headerlink" title="控制平面"></a>控制平面</h3><p><img src="/images/kafka/20221112-1.png" alt="image-20221112-1"></p>
<h3 id="ZooKeeper模式"><a href="#ZooKeeper模式" class="headerlink" title="ZooKeeper模式"></a>ZooKeeper模式</h3><p><img src="/images/kafka/20221112-2.png" alt="image-20221112-2"></p>
<p>从历史上看，Kafka的控制平面是通过一个名为ZooKeeper的外部共识服务来管理的。其中一个代理被指定为控制器。控制器负责与ZooKeeper以及集群中的其他代理进行通信。集群的元数据持久化存储在ZooKeeper中。<br>以下是Zookeeper为Kafka保存的一些主要元数据：</p>
<ol>
<li>集群管理信息：包括集群中的所有broker信息，如它们的ID、地址、监听的端口以及它们的状态。</li>
<li>主题和分区信息：包括所有主题的列表、每个主题的分区数、每个分区的副本分布情况，以及哪些副本是首领（leader）副本。</li>
<li>配置信息：Kafka集群的配置信息，包括各种主题的配置，如副本因子、保留策略等。</li>
<li>消费者信息：消费者组的元数据，包括消费者组的成员信息、每个消费者消费的分区信息以及消费偏移量。</li>
<li>选举和领导者信息：用于在broker之间进行领导者选举的元数据，以确保集群的可用性和数据的一致性。</li>
<li>访问控制列表（ACLs）：存储了Kafka的访问控制列表，用于权限管理和安全控制。</li>
<li>动态配置：Kafka的动态配置变更也会存储在Zookeeper中，这些配置可以在不重启服务的情况下动态更新。</li>
</ol>
<h3 id="Controller控制器"><a href="#Controller控制器" class="headerlink" title="Controller控制器"></a>Controller控制器</h3><p>Kafka Controller是Apache Kafka集群中的关键组件，其主要作用是在集群的多个broker之间协调和管理操作。</p>
<ol>
<li>领导者选举（Leader Election）：在Kafka集群中，每个分区都有一个leader副本和若干个follower副本。Controller负责管理和协调这些副本之间的领导者选举过程。</li>
<li>管理分区和副本状态：当集群中的broker启动或关闭时，Controller负责管理分区的状态变更，以及相应副本的状态变更。</li>
<li>维护集群元数据：Controller负责维护集群的元数据信息，包括分区信息、副本位置信息等。</li>
<li>处理分区重分配：当执行分区重分配操作时，Controller负责协调和管理分区副本在broker之间的移动。</li>
<li>处理broker故障：当某个broker发生故障时，Controller负责检测到这一情况，并触发新的领导者选举过程，确保故障brokers上的分区可以快速恢复服务。</li>
<li>管理新创建的主题：当在Kafka集群中创建新主题时，Controller负责分配分区副本到各个broker，并初始化相关元数据。</li>
<li>处理集群扩展和收缩：当集群需要增加或移除broker时，Controller负责管理相关的元数据和状态变化。</li>
<li>同步操作日志：Controller会将操作日志记录到内部主题（consumer_offsets或controller_epoch）中，确保集群状态的一致性和持久性。<br>Kafka Controller通过这些功能确保了Kafka集群的高可用性和稳定性，使得Kafka能够高效地处理大规模数据流。</li>
</ol>
<h3 id="KRaft模式"><a href="#KRaft模式" class="headerlink" title="KRaft模式"></a>KRaft模式</h3><p><img src="/images/kafka/20221112-3.png" alt="image-20221112-3"></p>
<p>随着2022年10月Apache Kafka 3.3.1版本的发布，一种用于元数据管理的新共识协议——KRaft，已被标记为可用于生产环境。以Kraft模式运行Kafka不再需要为每个Kafka集群额外运行一个ZooKeeper集群。<br>在KRaft中，一部分代理被指定为控制器，这些控制器提供了以前由ZooKeeper提供的共识服务。现在，所有的集群元数据都存储在Kafka主题中，并在内部进行管理。</p>
<h3 id="KRaft模式的优势"><a href="#KRaft模式的优势" class="headerlink" title="KRaft模式的优势"></a>KRaft模式的优势</h3><p><img src="/images/kafka/20221112-4.png" alt="image-20221112-4"></p>
<p>新的KRaft模式有很多优势，这里我们将讨论其中的一些。<br>● 部署和管理更简单 —— 现在只需要安装和管理一个应用程序，Kafka的运维足迹大大减小。这也使得在边缘的小型设备上更易于使用Kafka。<br>● 可扩展性提高 —— 如图所示，KRaft的恢复时间比ZooKeeper快一个数量级。这使得我们能够在单个集群中高效地扩展到数百万个分区。而使用ZooKeeper时，有效限制在数万个分区。<br>● 元数据传播更高效 —— 基于日志的、事件驱动的元数据传播提高了Kafka许多核心功能的性能。</p>
<h3 id="KRaft集群节点角色"><a href="#KRaft集群节点角色" class="headerlink" title="KRaft集群节点角色"></a>KRaft集群节点角色</h3><p><img src="/images/kafka/20221112-5.png" alt="image-20221112-5"></p>
<p>在KRaft模式下，Kafka集群可以以专用模式或共享模式运行。在专用模式下，一些节点的process.roles配置将设置为controller，其余节点将其设置为broker。对于共享模式，一些节点的process.roles将设置为controller, broker，这些节点将承担双重职责。选择哪种模式取决于集群的规模。</p>
<h3 id="KRaft模式控制器"><a href="#KRaft模式控制器" class="headerlink" title="KRaft模式控制器"></a>KRaft模式控制器</h3><p><img src="/images/kafka/20221112-6.png" alt="image-20221112-6"></p>
<p>在KRaft模式的集群中，充当控制器的代理列在每个代理上设置的controller.quorum.voters配置属性中。这使得所有代理都能够与控制器进行通信。其中一个控制器代理将成为活动控制器，它将负责与其他代理通信以处理元数据的更改。<br>所有控制器代理都维护一个内存中的元数据缓存，该缓存会保持更新，以便在需要时任何控制器都可以接管成为活动控制器。这是KRaft的一个特性，使其比基于ZooKeeper的控制平面高效得多。</p>
<h3 id="KRaft集群元数据"><a href="#KRaft集群元数据" class="headerlink" title="KRaft集群元数据"></a>KRaft集群元数据</h3><p><img src="/images/kafka/20221112-7.png" alt="image-20221112-7"></p>
<p>KRaft基于Raft共识协议，该协议作为KIP - 500的一部分引入到Kafka中，其他相关的KIP中定义了更多详细信息。在KRaft模式下，反映所有控制器管理资源当前状态的集群元数据存储在一个名为__cluster_metadata的单分区Kafka主题中。KRaft使用这个主题在控制器和代理节点之间同步集群状态的更改。<br>活动控制器是这个内部元数据主题的单个分区的领导者。其他控制器是副本跟随者。代理是副本观察者。因此，控制器不是将元数据更改广播给其他控制器或代理，而是由它们各自去获取这些更改。这使得保持所有控制器和代理的同步非常高效，并且还缩短了代理和控制器的重启时间。</p>
<h3 id="KRaft元数据复制"><a href="#KRaft元数据复制" class="headerlink" title="KRaft元数据复制"></a>KRaft元数据复制</h3><p><img src="/images/kafka/20221112-8.png" alt="image-20221112-8"></p>
<p>由于集群元数据存储在Kafka主题中，该数据的复制与我们在数据平面复制模块中看到的非常相似。活动控制器是元数据主题的单个分区的领导者，它将接收所有写入操作。其他控制器是跟随者，将获取这些更改。我们仍然像数据平面一样使用偏移量和领导者epoch。然而，当需要选举领导者时，是通过法定人数（quorum）来完成的。另一个区别是，元数据记录在写入每个节点的本地日志时会立即刷新到磁盘。</p>
<h3 id="Controller-Leader选举过程"><a href="#Controller-Leader选举过程" class="headerlink" title="Controller Leader选举过程"></a>Controller Leader选举过程</h3><p>KRaft模式下Controller Leader选举的通俗版</p>
<ol>
<li>初始状态：大家都是小弟（Follower）<br>● 每个Broker（Kafka服务器）启动时，都是“小弟”（Follower），等着“大哥”（Leader）发号施令。<br>● 大哥会定期给小弟们发“心跳”（心跳包），告诉大家：“我还活着，继续听我的！”<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Broker <span class="number">1</span> (Follower)  </span><br><span class="line">Broker <span class="number">2</span> (Follower)  </span><br><span class="line">Broker <span class="number">3</span> (Follower)  </span><br></pre></td></tr></table></figure></li>
<li>大哥挂了，小弟们开始慌了<br>● 如果小弟们长时间没收到大哥的心跳，就会觉得：“大哥可能挂了！”<br>● 这时，小弟们会进入“竞选模式”（Candidate），准备选一个新大哥。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Broker <span class="number">1</span> (Candidate)  👀  </span><br><span class="line">Broker <span class="number">2</span> (Candidate)  👀  </span><br><span class="line">Broker <span class="number">3</span> (Candidate)  👀  </span><br></pre></td></tr></table></figure></li>
<li>拉票环节：谁能当大哥？<br>● 每个想当大哥的小弟会给自己加一个“竞选编号”（term），然后向其他小弟拉票：“选我当大哥吧！”<br>● 其他小弟会根据候选人的“资历”（日志是否够新）来决定是否投票。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Broker <span class="number">1</span> (Candidate) → 发投票请求  </span><br><span class="line">Broker <span class="number">2</span> (Candidate) → 发投票请求  </span><br><span class="line">Broker <span class="number">3</span> (Candidate) → 发投票请求  </span><br></pre></td></tr></table></figure></li>
<li>投票结果：谁票多谁当大哥<br>● 如果某个候选人拿到超过一半的票（多数票），就会成为新大哥（Leader）。<br>● 其他小弟会重新变回小弟（Follower），听新大哥的指挥。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Broker <span class="number">1</span> (Leader)  🎉  </span><br><span class="line">Broker <span class="number">2</span> (Follower)  </span><br><span class="line">Broker <span class="number">3</span> (Follower)  </span><br></pre></td></tr></table></figure></li>
<li>新大哥上任，开始干活<br>● 新大哥会定期给小弟们发心跳，告诉大家：“我是新大哥，听我的！”<br>● 新大哥还会检查小弟们的“工作进度”（日志同步），确保大家的数据一致。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Broker <span class="number">1</span> (Leader) → 发心跳  </span><br><span class="line">Broker <span class="number">2</span> (Follower) ← 收到心跳  </span><br><span class="line">Broker <span class="number">3</span> (Follower) ← 收到心跳  </span><br></pre></td></tr></table></figure></li>
<li>如果又有大哥挂了，重新选<br>● 如果新大哥也挂了，小弟们会再次进入竞选模式，重复上述过程。</li>
</ol>
<h3 id="关键点总结"><a href="#关键点总结" class="headerlink" title="关键点总结"></a>关键点总结</h3><ol>
<li>多数票原则：必须拿到超过一半的票才能当大哥。</li>
<li>日志一致性：只有“资历够深”（日志够新）的小弟才有资格竞选。</li>
<li>心跳机制：大哥靠心跳维持地位，小弟靠心跳确认大哥是否活着。</li>
</ol>
]]></content>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka消费者组与分区分配策略</title>
    <url>/2022/11/18/kafka/Kafka%E6%B6%88%E8%B4%B9%E8%80%85%E7%BB%84%E4%B8%8E%E5%88%86%E5%8C%BA%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5/</url>
    <content><![CDATA[<h3 id="消费者组（Consumer-Group）"><a href="#消费者组（Consumer-Group）" class="headerlink" title="消费者组（Consumer Group）"></a>消费者组（Consumer Group）</h3><p><img src="/images/kafka/20221118-1.png" alt="image-20221118-1"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">kaProperties.put(ConsumerConfig.GROUP_ID_CONFIG, <span class="string">&quot;order-group&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="/images/kafka/20221118-2.png" alt="image-20221118-2"></p>
<p>● 定义与概念：<br>  ○ 消费者组是Kafka中用于对消费者进行分组管理的机制。一个消费者组可以包含一个或多个消费者实例。同一消费者组中的消费者共同消费一个或多个主题中的消息，并且这些消费者之间会对主题的分区进行负载均衡。例如，在一个日志收集系统中，可能会有多个消费者组成一个消费者组来共同处理日志主题中的消息。<br>● 作用与优势：<br>  ○ 负载均衡：消费者组内的消费者能够自动分配主题分区，实现负载均衡，提高消费效率。比如，假设有一个主题有10个分区，消费者组中有5个消费者，那么每个消费者可能会分配到2个分区来进行消费，从而分担了消费任务。<br>  ○ 水平扩展：可以通过增加消费者组中的消费者数量来提高整体的消费能力。当消息吞吐量增加时，只需添加新的消费者到组中，Kafka会自动重新分配分区，使得新消费者也参与到消息处理中。<br>  ○ 容错性：如果消费者组中的一个消费者出现故障（如进程崩溃或网络问题），其负责的分区会被重新分配给组内其他消费者，确保消息的持续消费，避免消息丢失。<br>● 消费者组ID（Group ID）：<br>  ○ 每个消费者组都有一个唯一的标识符，即消费者组ID。它用于在Kafka集群中识别不同的消费者组。在配置消费者时，需要指定消费者组ID，并且同一消费者组内的消费者配置的消费者组ID必须相同。例如，在Java中使用Kafka消费者客户端时，通过ConsumerConfig.GROUP_ID_CONFIG属性来设置消费者组ID。</p>
<h3 id="组协调器（Group-Coordinator）"><a href="#组协调器（Group-Coordinator）" class="headerlink" title="组协调器（Group Coordinator）"></a>组协调器（Group Coordinator）</h3><p>● 功能概述：<br>  ○ 组协调器是Kafka服务端的一个组件，它主要负责管理消费者组的相关操作。包括消费者组的成员管理（如消费者加入、离开消费者组）、分区分配策略的执行、消费者心跳监测以及偏移量管理等诸多事务。<br>● 消费者加入与离开管理：<br>  ○ 当一个消费者启动并尝试加入一个消费者组时，它会与组协调器进行通信。组协调器会记录消费者组的成员信息，并根据分区分配策略为新加入的消费者分配分区。同样，当消费者正常或异常离开消费者组时（如消费者主动关闭或出现故障），组协调器会检测到消费者的离开，并重新分配该消费者所负责的分区给其他消费者。</p>
<p><img src="/images/kafka/20221118-3.png" alt="image-20221118-3"></p>
<p>● 心跳监测与消费者存活判断：<br>  ○ 消费者需要定期向组协调器发送心跳信号，以表明自己仍然存活。组协调器通过接收心跳信号来判断消费者是否还在正常工作。如果在一定时间内（由session.timeout.ms配置决定）没有收到消费者的心跳信号，组协调器会认为该消费者已经死亡，然后触发分区重新分配的操作。<br>● 偏移量管理：<br>  ○ 组协调器还参与消费者偏移量的管理。它负责存储和更新消费者组的偏移量信息。当消费者提交偏移量（可以是自动提交或手动提交）时，这些偏移量会被发送到组协调器，组协调器会将其存储在__consumer_offsets主题中。在消费者重新启动或分区重新分配后，组协调器会根据存储的偏移量信息，帮助消费者从正确的位置继续消费。</p>
<h3 id="分区的分配策略（Partition-Assignment-Strategy）"><a href="#分区的分配策略（Partition-Assignment-Strategy）" class="headerlink" title="分区的分配策略（Partition Assignment Strategy）"></a>分区的分配策略（Partition Assignment Strategy）</h3><p><img src="/images/kafka/20221118-4.png" alt="image-20221118-4"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">props.put(ConsumerConfig.PARTITION_ASSIGNMENT_STRATEGY_CONFIG, <span class="string">&quot;org.apache.kafka.clients.consumer.RangeAssignor&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>● Range策略：<br>  ○ 原理：对于每个主题，首先按照分区编号进行排序，然后将分区范围分配给消费者。假设一个主题有10个分区（编号为0 - 9），消费者组中有3个消费者。那么消费者1可能会被分配分区0 - 3，消费者2分配分区4 - 6，消费者3分配分区7 - 9。具体分配范围是根据分区总数和消费者数量通过一定的计算得出的。<br>  ○ 适用场景：适用于主题分区数量相对固定，消费者数量相对稳定的情况。如果分区数量或消费者数量频繁变化，可能会导致分区分配不均匀。例如，在一个数据采集系统中，主题的分区数量是预先确定的，消费者组中的消费者数量也很少变化，使用Range策略可以简单有效地分配分区。<br>● Round - Robin策略：<br>  ○ 原理：将所有主题的分区视为一个整体，按照轮询的方式依次分配给消费者。以同样有10个分区的主题和3个消费者为例，分区0会分配给消费者1，分区1分配给消费者2，分区2分配给消费者3，分区3又分配给消费者1，以此类推。这种策略能够更均匀地分配分区，尤其是在多个主题存在且分区数量不同的情况下。<br>  ○ 适用场景：适用于多个主题且分区数量不一致的情况，能够保证每个消费者分配到的分区数量相对均匀。比如在一个包含多个不同业务主题的消息系统中，各个主题的分区数量不同，Round - Robin策略可以确保消费者组中的消费者公平地分配到各个主题的分区。<br>● Sticky策略：<br>  ○ 原理：这是一种较新的分配策略，它在分配分区时，会尽量保持之前的分配状态，同时兼顾分区的均匀分配。当消费者加入或离开消费者组时，它会在不引起过多分区重新分配的情况下，使分区分配尽可能地保持稳定。例如，在消费者组中的某个消费者离开后，Sticky策略会尝试只重新分配该消费者负责的分区，而尽量不改变其他消费者的分区分配情况。<br>  ○ 适用场景：在消费者组动态变化（如消费者频繁加入或离开）的场景下非常有用。因为它可以减少分区重新分配的频率，从而降低对消息消费的影响。例如，在一个云服务环境下的消息处理系统中，消费者可能会因为资源的动态分配而频繁加入或离开消费者组，Sticky策略可以很好地应对这种情况。</p>
]]></content>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker快速部署KRaft集群</title>
    <url>/2022/11/18/kafka/Docker%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2KRaft%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<p><img src="/images/kafka/20221118-5.png" alt="image-20221118-5"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mkdir /home/kafka</span><br><span class="line">cd /home/kafka</span><br><span class="line">cat &gt; docker-compose.yaml &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line"># 定义一组服务，这些服务将在 Docker 中运行，用于搭建 Kafka 集群</span><br><span class="line">services:</span><br><span class="line">  # 定义第一个控制器服务，名为 controller-1</span><br><span class="line">  controller-<span class="number">1</span>:</span><br><span class="line">    # 指定使用的 Docker 镜像，这里使用 Apache Kafka 的最新版本</span><br><span class="line">    image: apache/kafka:<span class="number">3.9</span><span class="number">.0</span></span><br><span class="line">    # 为该容器指定一个名称，方便后续管理和识别</span><br><span class="line">    container_name: controller-<span class="number">1</span></span><br><span class="line">    # 配置容器的环境变量，这些变量将影响 Kafka 实例的行为</span><br><span class="line">    environment:</span><br><span class="line">      # 为该 Kafka 节点分配一个唯一的 ID，用于在集群中标识该节点</span><br><span class="line">      KAFKA_NODE_ID: <span class="number">1</span></span><br><span class="line">      # 指定该节点的角色为控制器，负责集群的元数据管理和协调</span><br><span class="line">      KAFKA_PROCESS_ROLES: controller</span><br><span class="line">      # 定义该节点监听的地址和端口，这里使用 CONTROLLER 协议监听 9093 端口</span><br><span class="line">      KAFKA_LISTENERS: CONTROLLER:<span class="comment">//:9093</span></span><br><span class="line">      # 指定用于内部 broker 之间通信的监听器名称</span><br><span class="line">      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT</span><br><span class="line">      # 指定用于控制器通信的监听器名称</span><br><span class="line">      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER</span><br><span class="line">      # 列出控制器集群中的所有投票节点及其地址和端口，用于选举和协调</span><br><span class="line">      KAFKA_CONTROLLER_QUORUM_VOTERS: <span class="number">1</span><span class="meta">@controller</span>-<span class="number">1</span>:<span class="number">9093</span>,<span class="number">2</span><span class="meta">@controller</span>-<span class="number">2</span>:<span class="number">9093</span>,<span class="number">3</span><span class="meta">@controller</span>-<span class="number">3</span>:<span class="number">9093</span></span><br><span class="line">      # 设置消费者组初始重平衡的延迟时间为 0 毫秒，减少重平衡等待时间</span><br><span class="line">      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  # 定义第二个控制器服务，名为 controller-2</span><br><span class="line">  controller-<span class="number">2</span>:</span><br><span class="line">    image: apache/kafka:<span class="number">3.9</span><span class="number">.0</span></span><br><span class="line">    container_name: controller-<span class="number">2</span></span><br><span class="line">    environment:</span><br><span class="line">      KAFKA_NODE_ID: <span class="number">2</span></span><br><span class="line">      KAFKA_PROCESS_ROLES: controller</span><br><span class="line">      KAFKA_LISTENERS: CONTROLLER:<span class="comment">//:9093</span></span><br><span class="line">      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT</span><br><span class="line">      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER</span><br><span class="line">      KAFKA_CONTROLLER_QUORUM_VOTERS: <span class="number">1</span><span class="meta">@controller</span>-<span class="number">1</span>:<span class="number">9093</span>,<span class="number">2</span><span class="meta">@controller</span>-<span class="number">2</span>:<span class="number">9093</span>,<span class="number">3</span><span class="meta">@controller</span>-<span class="number">3</span>:<span class="number">9093</span></span><br><span class="line">      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  # 定义第三个控制器服务，名为 controller-3</span><br><span class="line">  controller-<span class="number">3</span>:</span><br><span class="line">    image: apache/kafka:<span class="number">3.9</span><span class="number">.0</span></span><br><span class="line">    container_name: controller-<span class="number">3</span></span><br><span class="line">    environment:</span><br><span class="line">      KAFKA_NODE_ID: <span class="number">3</span></span><br><span class="line">      KAFKA_PROCESS_ROLES: controller</span><br><span class="line">      KAFKA_LISTENERS: CONTROLLER:<span class="comment">//:9093</span></span><br><span class="line">      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT</span><br><span class="line">      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER</span><br><span class="line">      KAFKA_CONTROLLER_QUORUM_VOTERS: <span class="number">1</span><span class="meta">@controller</span>-<span class="number">1</span>:<span class="number">9093</span>,<span class="number">2</span><span class="meta">@controller</span>-<span class="number">2</span>:<span class="number">9093</span>,<span class="number">3</span><span class="meta">@controller</span>-<span class="number">3</span>:<span class="number">9093</span></span><br><span class="line">      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  # 定义第一个 broker 服务，名为 broker-1</span><br><span class="line">  broker-<span class="number">1</span>:</span><br><span class="line">    image: apache/kafka:<span class="number">3.9</span><span class="number">.0</span></span><br><span class="line">    container_name: broker-<span class="number">1</span></span><br><span class="line">    # 将容器内部的 9092 端口映射到宿主机的 29092 端口，方便外部访问</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">29092</span>:<span class="number">9092</span></span><br><span class="line">    environment:</span><br><span class="line">      KAFKA_NODE_ID: <span class="number">4</span></span><br><span class="line">      # 指定该节点的角色为 broker，负责存储和处理消息</span><br><span class="line">      KAFKA_PROCESS_ROLES: broker</span><br><span class="line">      # 定义该节点监听的地址和端口，支持两种协议，分别用于内部和外部通信</span><br><span class="line">      KAFKA_LISTENERS: <span class="string">&#x27;PLAINTEXT://:19092,PLAINTEXT_HOST://:9092&#x27;</span></span><br><span class="line">      # 向外部客户端和其他 broker 广告该节点的地址和端口</span><br><span class="line">      KAFKA_ADVERTISED_LISTENERS: <span class="string">&#x27;PLAINTEXT://broker-1:19092,PLAINTEXT_HOST://192.168.31.230:29092&#x27;</span></span><br><span class="line">      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT</span><br><span class="line">      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER</span><br><span class="line">      # 定义不同监听器使用的安全协议</span><br><span class="line">      # `CONTROLLER:PLAINTEXT`: 指定控制器监听器使用明文传输（无加密）。</span><br><span class="line">      # `PLAINTEXT:PLAINTEXT`: 指定普通监听器也使用明文传输。</span><br><span class="line">      # `PLAINTEXT_HOST:PLAINTEXT`: 指定特定主机的监听器同样使用明文传输。</span><br><span class="line">      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT</span><br><span class="line">      KAFKA_CONTROLLER_QUORUM_VOTERS: <span class="number">1</span><span class="meta">@controller</span>-<span class="number">1</span>:<span class="number">9093</span>,<span class="number">2</span><span class="meta">@controller</span>-<span class="number">2</span>:<span class="number">9093</span>,<span class="number">3</span><span class="meta">@controller</span>-<span class="number">3</span>:<span class="number">9093</span></span><br><span class="line">      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: <span class="number">0</span></span><br><span class="line">    # 指定该服务依赖于 controller-1、controller-2 和 controller-3 服务，确保在启动前这些服务已启动</span><br><span class="line">    depends_on:</span><br><span class="line">      - controller-<span class="number">1</span></span><br><span class="line">      - controller-<span class="number">2</span></span><br><span class="line">      - controller-<span class="number">3</span></span><br><span class="line"></span><br><span class="line">  # 定义第二个 broker 服务，名为 broker-2</span><br><span class="line">  broker-<span class="number">2</span>:</span><br><span class="line">    image: apache/kafka:<span class="number">3.9</span><span class="number">.0</span></span><br><span class="line">    container_name: broker-<span class="number">2</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">39092</span>:<span class="number">9092</span></span><br><span class="line">    environment:</span><br><span class="line">      KAFKA_NODE_ID: <span class="number">5</span></span><br><span class="line">      KAFKA_PROCESS_ROLES: broker</span><br><span class="line">      KAFKA_LISTENERS: <span class="string">&#x27;PLAINTEXT://:19092,PLAINTEXT_HOST://:9092&#x27;</span></span><br><span class="line">      KAFKA_ADVERTISED_LISTENERS: <span class="string">&#x27;PLAINTEXT://broker-2:19092,PLAINTEXT_HOST://192.168.31.230:39092&#x27;</span></span><br><span class="line">      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT</span><br><span class="line">      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER</span><br><span class="line">      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT</span><br><span class="line">      KAFKA_CONTROLLER_QUORUM_VOTERS: <span class="number">1</span><span class="meta">@controller</span>-<span class="number">1</span>:<span class="number">9093</span>,<span class="number">2</span><span class="meta">@controller</span>-<span class="number">2</span>:<span class="number">9093</span>,<span class="number">3</span><span class="meta">@controller</span>-<span class="number">3</span>:<span class="number">9093</span></span><br><span class="line">      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: <span class="number">0</span></span><br><span class="line">    depends_on:</span><br><span class="line">      - controller-<span class="number">1</span></span><br><span class="line">      - controller-<span class="number">2</span></span><br><span class="line">      - controller-<span class="number">3</span></span><br><span class="line"></span><br><span class="line">  # 定义第三个 broker 服务，名为 broker-3</span><br><span class="line">  broker-<span class="number">3</span>:</span><br><span class="line">    image: apache/kafka:<span class="number">3.9</span><span class="number">.0</span></span><br><span class="line">    container_name: broker-<span class="number">3</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">49092</span>:<span class="number">9092</span></span><br><span class="line">    environment:</span><br><span class="line">      KAFKA_NODE_ID: <span class="number">6</span></span><br><span class="line">      KAFKA_PROCESS_ROLES: broker</span><br><span class="line">      KAFKA_LISTENERS: <span class="string">&#x27;PLAINTEXT://:19092,PLAINTEXT_HOST://:9092&#x27;</span></span><br><span class="line">      KAFKA_ADVERTISED_LISTENERS: <span class="string">&#x27;PLAINTEXT://broker-3:19092,PLAINTEXT_HOST://192.168.31.230:49092&#x27;</span></span><br><span class="line">      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT</span><br><span class="line">      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER</span><br><span class="line">      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT</span><br><span class="line">      KAFKA_CONTROLLER_QUORUM_VOTERS: <span class="number">1</span><span class="meta">@controller</span>-<span class="number">1</span>:<span class="number">9093</span>,<span class="number">2</span><span class="meta">@controller</span>-<span class="number">2</span>:<span class="number">9093</span>,<span class="number">3</span><span class="meta">@controller</span>-<span class="number">3</span>:<span class="number">9093</span></span><br><span class="line">      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: <span class="number">0</span></span><br><span class="line">    depends_on:</span><br><span class="line">      - controller-<span class="number">1</span></span><br><span class="line">      - controller-<span class="number">2</span></span><br><span class="line">      - controller-<span class="number">3</span></span><br><span class="line"></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<p><img src="/images/kafka/20221118-6.png" alt="image-20221118-6"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cat &gt; docker-compose.yaml &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  kafka-<span class="number">1</span>:</span><br><span class="line">    image: apache/kafka:<span class="number">3.9</span><span class="number">.0</span></span><br><span class="line">    container_name: kafka-<span class="number">1</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">29092</span>:<span class="number">9092</span></span><br><span class="line">    environment:</span><br><span class="line">      KAFKA_NODE_ID: <span class="number">1</span></span><br><span class="line">      KAFKA_PROCESS_ROLES: <span class="string">&quot;broker,controller&quot;</span></span><br><span class="line">      KAFKA_LISTENERS: <span class="string">&#x27;PLAINTEXT://:19092,PLAINTEXT_HOST://:9092,CONTROLLER://:9093&#x27;</span></span><br><span class="line">      KAFKA_ADVERTISED_LISTENERS: <span class="string">&#x27;PLAINTEXT://kafka-1:19092,PLAINTEXT_HOST://192.168.31.230:29092,CONTROLLER://kafka-1:9093&#x27;</span></span><br><span class="line">      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT</span><br><span class="line">      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER</span><br><span class="line">      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT</span><br><span class="line">      KAFKA_CONTROLLER_QUORUM_VOTERS: <span class="string">&#x27;1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093&#x27;</span></span><br><span class="line">      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  kafka-<span class="number">2</span>:</span><br><span class="line">    image: apache/kafka:<span class="number">3.9</span><span class="number">.0</span></span><br><span class="line">    container_name: kafka-<span class="number">2</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">39092</span>:<span class="number">9092</span></span><br><span class="line">    environment:</span><br><span class="line">      KAFKA_NODE_ID: <span class="number">2</span></span><br><span class="line">      KAFKA_PROCESS_ROLES: <span class="string">&quot;broker,controller&quot;</span></span><br><span class="line">      KAFKA_LISTENERS: <span class="string">&#x27;PLAINTEXT://:19092,PLAINTEXT_HOST://:9092,CONTROLLER://:9093&#x27;</span></span><br><span class="line">      KAFKA_ADVERTISED_LISTENERS: <span class="string">&#x27;PLAINTEXT://kafka-2:19092,PLAINTEXT_HOST://192.168.31.230:39092,CONTROLLER://kafka-2:9093&#x27;</span></span><br><span class="line">      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT</span><br><span class="line">      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER</span><br><span class="line">      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT</span><br><span class="line">      KAFKA_CONTROLLER_QUORUM_VOTERS: <span class="string">&#x27;1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093&#x27;</span></span><br><span class="line">      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  kafka-<span class="number">3</span>:</span><br><span class="line">    image: apache/kafka:<span class="number">3.9</span><span class="number">.0</span></span><br><span class="line">    container_name: kafka-<span class="number">3</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">49092</span>:<span class="number">9092</span></span><br><span class="line">    environment:</span><br><span class="line">      KAFKA_NODE_ID: <span class="number">3</span></span><br><span class="line">      KAFKA_PROCESS_ROLES: <span class="string">&quot;broker,controller&quot;</span></span><br><span class="line">      KAFKA_LISTENERS: <span class="string">&#x27;PLAINTEXT://:19092,PLAINTEXT_HOST://:9092,CONTROLLER://:9093&#x27;</span></span><br><span class="line">      KAFKA_ADVERTISED_LISTENERS: <span class="string">&#x27;PLAINTEXT://kafka-3:19092,PLAINTEXT_HOST://192.168.31.230:49092,CONTROLLER://kafka-3:9093&#x27;</span></span><br><span class="line">      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT</span><br><span class="line">      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER</span><br><span class="line">      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT</span><br><span class="line">      KAFKA_CONTROLLER_QUORUM_VOTERS: <span class="string">&#x27;1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093&#x27;</span></span><br><span class="line">      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: <span class="number">0</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.common.serialization.StringSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IoTEventProducer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Properties kaProperties = <span class="keyword">new</span> Properties();</span><br><span class="line">        kaProperties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">&quot;192.168.31.230:29092,192.168.31.230:39092,192.168.31.230:49092&quot;</span>);</span><br><span class="line">        kaProperties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());</span><br><span class="line">        kaProperties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, IoTEventSerializer.class.getName());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (Producer&lt;String, IoTEvent&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;&gt;(kaProperties)) &#123;</span><br><span class="line">            Random random = <span class="keyword">new</span> Random();</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                IoTEvent event = IoTEvent.builder()</span><br><span class="line">                        .deviceId(random.nextInt(<span class="number">10</span>))</span><br><span class="line">                        .eventTimestamp(System.currentTimeMillis())</span><br><span class="line">                        .deviceType(<span class="string">&quot;BOT&quot;</span>)</span><br><span class="line">                        .eventValue(random.nextInt(<span class="number">101</span>))</span><br><span class="line">                        .build();</span><br><span class="line">                ProducerRecord&lt;String, IoTEvent&gt; producerRecord = <span class="keyword">new</span> ProducerRecord&lt;&gt;(<span class="string">&quot;iot-events&quot;</span>, event.getDeviceId().toString(), event);</span><br><span class="line">                RecordMetadata result = producer.send(producerRecord).get();</span><br><span class="line">                log.info(<span class="string">&quot;topic=&#123;&#125;, partition=&#123;&#125;, offset = &#123;&#125;, timestamp = &#123;&#125;&quot;</span>, result.topic(), result.partition(), result.offset(), result.timestamp());</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>); <span class="comment">// Sleep for 1 second</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;Error sending message&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka副本管理与ISR机制解析</title>
    <url>/2022/11/19/kafka/Kafka%E5%89%AF%E6%9C%AC%E7%AE%A1%E7%90%86%E4%B8%8EISR%E6%9C%BA%E5%88%B6%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<p>Kafka中的主副本（Leader Replica）和备份副本（Follower Replica）的放置是由Kafka集群自动管理的，这个过程与Controller组件密切相关。Controller负责监控集群状态，包括副本的选举和分区的分配。当一个分区的主副本发生故障时，Controller会触发一个新的选举过程，从同一分区的备份副本中选择一个新的主副本。同时，Kafka会根据配置的副本因子（replication factor）和集群的拓扑结构，自动将副本分散到不同的节点上，以实现高可用性和数据冗余。这个过程确保了即使某些节点发生故障，数据仍然可以从其他节点上的副本中恢复，从而提高了系统的容错能力。简而言之，Kafka通过Controller组件和集群的自动管理机制，智能地决定主副本和备份副本的放置，以优化数据的可用性和可靠性。</p>
<p><img src="/images/kafka/20221119-1.png" alt="image-20221119-1"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cat &gt; docker-compose.yaml &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  kafka-<span class="number">1</span>:</span><br><span class="line">    image: apache/kafka:<span class="number">3.9</span><span class="number">.0</span></span><br><span class="line">    container_name: kafka-<span class="number">1</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">29092</span>:<span class="number">9092</span></span><br><span class="line">    environment:</span><br><span class="line">      KAFKA_NODE_ID: <span class="number">1</span></span><br><span class="line">      KAFKA_PROCESS_ROLES: <span class="string">&quot;broker,controller&quot;</span></span><br><span class="line">      KAFKA_LISTENERS: <span class="string">&#x27;PLAINTEXT://:19092,PLAINTEXT_HOST://:9092,CONTROLLER://:9093&#x27;</span></span><br><span class="line">      KAFKA_ADVERTISED_LISTENERS: <span class="string">&#x27;PLAINTEXT://kafka-1:19092,PLAINTEXT_HOST://192.168.31.230:29092,CONTROLLER://kafka-1:9093&#x27;</span></span><br><span class="line">      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT</span><br><span class="line">      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER</span><br><span class="line">      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT</span><br><span class="line">      KAFKA_CONTROLLER_QUORUM_VOTERS: <span class="string">&#x27;1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093&#x27;</span></span><br><span class="line">      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  kafka-<span class="number">2</span>:</span><br><span class="line">    image: apache/kafka:<span class="number">3.9</span><span class="number">.0</span></span><br><span class="line">    container_name: kafka-<span class="number">2</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">39092</span>:<span class="number">9092</span></span><br><span class="line">    environment:</span><br><span class="line">      KAFKA_NODE_ID: <span class="number">2</span></span><br><span class="line">      KAFKA_PROCESS_ROLES: <span class="string">&quot;broker,controller&quot;</span></span><br><span class="line">      KAFKA_LISTENERS: <span class="string">&#x27;PLAINTEXT://:19092,PLAINTEXT_HOST://:9092,CONTROLLER://:9093&#x27;</span></span><br><span class="line">      KAFKA_ADVERTISED_LISTENERS: <span class="string">&#x27;PLAINTEXT://kafka-2:19092,PLAINTEXT_HOST://192.168.31.230:39092,CONTROLLER://kafka-2:9093&#x27;</span></span><br><span class="line">      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT</span><br><span class="line">      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER</span><br><span class="line">      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT</span><br><span class="line">      KAFKA_CONTROLLER_QUORUM_VOTERS: <span class="string">&#x27;1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093&#x27;</span></span><br><span class="line">      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  kafka-<span class="number">3</span>:</span><br><span class="line">    image: apache/kafka:<span class="number">3.9</span><span class="number">.0</span></span><br><span class="line">    container_name: kafka-<span class="number">3</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">49092</span>:<span class="number">9092</span></span><br><span class="line">    environment:</span><br><span class="line">      KAFKA_NODE_ID: <span class="number">3</span></span><br><span class="line">      KAFKA_PROCESS_ROLES: <span class="string">&quot;broker,controller&quot;</span></span><br><span class="line">      KAFKA_LISTENERS: <span class="string">&#x27;PLAINTEXT://:19092,PLAINTEXT_HOST://:9092,CONTROLLER://:9093&#x27;</span></span><br><span class="line">      KAFKA_ADVERTISED_LISTENERS: <span class="string">&#x27;PLAINTEXT://kafka-3:19092,PLAINTEXT_HOST://192.168.31.230:49092,CONTROLLER://kafka-3:9093&#x27;</span></span><br><span class="line">      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT</span><br><span class="line">      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER</span><br><span class="line">      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT</span><br><span class="line">      KAFKA_CONTROLLER_QUORUM_VOTERS: <span class="string">&#x27;1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093&#x27;</span></span><br><span class="line">      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: <span class="number">0</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[root@docker-vm kafka]# docker exec -it kafka-1 /bin/bash</span><br><span class="line"></span><br><span class="line">707e5433e953:/$ /opt/kafka/bin/kafka-topics.sh  --create --bootstrap-server=localhost:<span class="number">9092</span> --topic=iot-events --partitions <span class="number">3</span> --replication-factor <span class="number">3</span></span><br><span class="line">Created topic iot-events.</span><br><span class="line"></span><br><span class="line">707e5433e953:/$ /opt/kafka/bin/kafka-topics.sh --bootstrap-server=localhost:<span class="number">9092</span> --describe --topic=iot-events</span><br><span class="line">Topic: iot-events	TopicId: 9FvGC6R0S3iQqFMq0Kt2UQ	PartitionCount: <span class="number">3</span>	ReplicationFactor: <span class="number">3</span>	Configs: </span><br><span class="line">	Topic: iot-events	Partition: <span class="number">0</span>	Leader: <span class="number">3</span>	Replicas: <span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>	Isr: <span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>	Elr: 	LastKnownElr: </span><br><span class="line">	Topic: iot-events	Partition: <span class="number">1</span>	Leader: <span class="number">1</span>	Replicas: <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>	Isr: <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>	Elr: 	LastKnownElr: </span><br><span class="line">	Topic: iot-events	Partition: <span class="number">2</span>	Leader: <span class="number">2</span>	Replicas: <span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>	Isr: <span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>	Elr: 	LastKnownElr: </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>领导者副本负责处理该分区的读写请求，其他副本会从领导者副本同步数据。</p>
<ul>
<li><strong>Replicas</strong>: 该分区的所有副本所在的Broker ID列表，这里是 <code>3,1,2</code>，表示该分区有3个副本，分别位于Broker 3、Broker 1和Broker 2上。</li>
<li><strong>Isr</strong>: 该分区的同步副本集（In-Sync Replicas），这里是 <code>3,1,2</code>，表示所有副本都与领导者副本保持同步。同步副本是指那些与领导者副本的消息偏移量差距在一定范围内的副本。</li>
<li><strong>Elr</strong>: 预期领导者副本（Expected Leader Replica），这里为空，表示没有相关信息。</li>
<li><strong>LastKnownElr</strong>: 最后已知的预期领导者副本，这里为空，表示没有相关信息。</li>
</ul>
<h3 id="ISR列表的依据"><a href="#ISR列表的依据" class="headerlink" title="ISR列表的依据"></a>ISR列表的依据</h3><p>在Kafka中，ISR（In-Sync Replicas，同步副本集合）列表的确定主要基于副本与领导者副本（Leader Replica）之间的同步状态，当副本不满足上述同步条件时，就可能会被从ISR列表中剔除，具体情况如下：</p>
<ol>
<li>复制延迟过长<br>如果一个副本由于性能问题、磁盘I/O瓶颈或网络问题等原因，无法及时从领导者副本复制消息，导致其与领导者副本的偏移量差距超过了Kafka配置的replica.lag.time.max.ms（默认值为10000毫秒，即10秒），那么这个副本就会被认为是滞后的，领导者副本会将其从ISR列表中剔除。<br>例如，由于某个副本所在的节点磁盘性能不佳，无法快速写入复制的消息，导致其复制进度远远落后于领导者副本，当超过了replica.lag.time.max.ms的时间限制后，该副本就会被移除出ISR列表。</li>
<li>心跳超时<br>如果一个副本在一定时间内没有向领导者副本发送心跳请求，领导者副本会认为该副本已经不可用。这个时间限制由replica.lag.time.max.ms参数控制。当副本超过这个时间没有发送心跳时，领导者副本会将其从ISR列表中剔除。<br>例如，由于网络故障导致某个副本无法与领导者副本进行通信，无法发送心跳请求，当超过replica.lag.time.max.ms的时间后，该副本就会被从ISR列表中移除。</li>
<li>副本崩溃或故障<br>如果副本所在的节点发生硬件故障、软件崩溃或其他异常情况，导致副本无法正常工作，那么该副本会停止复制消息并停止发送心跳请求，领导者副本会将其从ISR列表中剔除。<br>例如，副本所在的服务器突然断电，副本进程崩溃，无法继续复制消息和发送心跳，领导者副本会检测到这种情况并将该副本从ISR列表中移除。</li>
</ol>
]]></content>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka消息事务</title>
    <url>/2022/11/19/kafka/Kafka%E6%B6%88%E6%81%AF%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<h3 id="事务协调者"><a href="#事务协调者" class="headerlink" title="事务协调者"></a>事务协调者</h3><p>在Apache Kafka中，事务协调者（Transaction Coordinator）是Kafka Broker内置的一个组件。它负责管理生产者和消费者之间的事务性操作，确保消息生产和消费的原子性和一致性。<br>具体来说，事务协调者的主要职责包括：</p>
<ol>
<li>事务状态管理：跟踪每个事务的状态（例如，开启、准备提交、已提交、已中止等），并确保这些状态在Broker之间保持一致。</li>
<li>幂等性和恰好一次语义：通过与生产者协作，确保每条消息只能被写入一次，即使在网络故障或重试的情况下也不会重复写入。</li>
<li>跨分区事务支持：允许生产者在一个事务中向多个主题和分区发送消息，并保证这些操作要么全部成功，要么全部失败。</li>
<li>消费偏移量管理：在事务性消费场景下，协调者还负责管理消费者的偏移量提交，确保只有当所有相关操作都成功完成时才会更新偏移量。</li>
</ol>
<h3 id="处理步骤"><a href="#处理步骤" class="headerlink" title="处理步骤"></a>处理步骤</h3><p><img src="/images/kafka/20221119-2.png" alt="image-20221119-2"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.KafkaProducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.ProducerConfig;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.ProducerRecord;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.common.serialization.StringSerializer;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.common.errors.ProducerFencedException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionalProducer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">&quot;192.168.31.230:29092,192.168.31.230:39092,192.168.31.230:49092&quot;</span>);</span><br><span class="line">        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());</span><br><span class="line">        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启用事务配置</span></span><br><span class="line">        props.put(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG, <span class="string">&quot;true&quot;</span>);  <span class="comment">// 必须开启幂等性</span></span><br><span class="line">        props.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG, <span class="string">&quot;order-transaction-id-1&quot;</span>);  <span class="comment">// 唯一事务ID</span></span><br><span class="line"></span><br><span class="line">        KafkaProducer&lt;String, String&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;&gt;(props);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化事务</span></span><br><span class="line">        producer.initTransactions();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 开启事务</span></span><br><span class="line">            producer.beginTransaction();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 发送订单消息到 orders Topic</span></span><br><span class="line">            ProducerRecord&lt;String, String&gt; orderRecord = <span class="keyword">new</span> ProducerRecord&lt;&gt;(</span><br><span class="line">                <span class="string">&quot;orders&quot;</span>, <span class="string">&quot;order-123&quot;</span>, <span class="string">&quot;&#123;\&quot;user\&quot;:\&quot;Alice\&quot;, \&quot;amount\&quot;:100&#125;&quot;</span></span><br><span class="line">            );</span><br><span class="line">            producer.send(orderRecord);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 发送库存扣减消息到 inventory Topic</span></span><br><span class="line">            ProducerRecord&lt;String, String&gt; inventoryRecord = <span class="keyword">new</span> ProducerRecord&lt;&gt;(</span><br><span class="line">                <span class="string">&quot;inventory&quot;</span>, <span class="string">&quot;item-001&quot;</span>, <span class="string">&quot;&#123;\&quot;item\&quot;:\&quot;phone\&quot;, \&quot;count\&quot;:-1&#125;&quot;</span></span><br><span class="line">            );</span><br><span class="line">            producer.send(inventoryRecord);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 提交事务（两条消息会原子性写入）</span></span><br><span class="line">            producer.commitTransaction();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ProducerFencedException e) &#123;</span><br><span class="line">            <span class="comment">// 事务终止（如发生异常）</span></span><br><span class="line">            producer.abortTransaction();</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            producer.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>整个事务的执行过程如下所示。</p>
<ol>
<li>KAFKA 生产者通过 initTransactions API 将自定义的 transactional.id 注册到 transactional coordinator。此时 coordinator 会关闭所有有相同 transactional.id 且处于 pending 状态的事务，同时也会递增 epoch 来屏蔽僵尸生产者（zombie producers）。该操作对每个 producer session 只执行一次 producer.initTransaction()。</li>
<li>KAFKA 生产者通过 beginTransaction API 开启事务，并通过 send API 发送消息到目标 topic。此时消息对应的 partition 会首先被注册到 transactional coordinator，然后 producer 按照正常流程发送消息到目标 topic，且在发送消息时内部会通过校验屏蔽掉僵尸生产者 producer.beginTransaction();producer.send()*N;。</li>
<li>KAFKA 生产者通过 commitTransaction API 提交事务或通过 abortTransaction API 回滚事务。此时会向 transactional coordinator 提交请求，开始两阶段提交协议 producer.commitTransaction();producer.abortTransaction();<br>○ 第一阶段，transactional coordinator 更新内存中的事务状态为“prepare_commit”，并将该状态持久化到 transaction log 中<br>○ 第二阶段，coordinator 首先写 transaction marker 标记到目标 topic 的目标 partition，在向目标topic的目标partition写完控制消息后，会更新事务状态为“commited”或“abort”，并将该状态持久化到 transaction log中。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerConfig;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.KafkaConsumer;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.common.serialization.StringDeserializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionalConsumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">&quot;192.168.31.230:29092,192.168.31.230:39092,192.168.31.230:49092&quot;</span>);</span><br><span class="line">        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());</span><br><span class="line">        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());</span><br><span class="line">        props.put(ConsumerConfig.GROUP_ID_CONFIG, <span class="string">&quot;order-consumer-group&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置只读取已提交的事务消息</span></span><br><span class="line">        props.put(ConsumerConfig.ISOLATION_LEVEL_CONFIG, <span class="string">&quot;read_committed&quot;</span>);</span><br><span class="line"></span><br><span class="line">        KafkaConsumer&lt;String, String&gt; consumer = <span class="keyword">new</span> KafkaConsumer&lt;&gt;(props);</span><br><span class="line">        consumer.subscribe(Collections.singletonList(<span class="string">&quot;orders&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            consumer.poll(Duration.ofMillis(<span class="number">100</span>)).forEach(record -&gt; &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;收到订单消息: key=%s, value=%s%n&quot;</span>, record.key(), record.value());</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka指标监控架构</title>
    <url>/2022/11/20/kafka/Kafka%E6%8C%87%E6%A0%87%E7%9B%91%E6%8E%A7%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<p><img src="/images/kafka/20221120-1.png" alt="image-20221120-1"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mkdir /home/kafka</span><br><span class="line">cd /home/kafka</span><br><span class="line">cat &gt; docker-compose.yaml &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  kafka-<span class="number">1</span>:</span><br><span class="line">    image: apache/kafka:<span class="number">3.9</span><span class="number">.0</span></span><br><span class="line">    container_name: kafka-<span class="number">1</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">29092</span>:<span class="number">9092</span></span><br><span class="line">    environment:</span><br><span class="line">      KAFKA_NODE_ID: <span class="number">1</span></span><br><span class="line">      KAFKA_PROCESS_ROLES: <span class="string">&quot;broker,controller&quot;</span></span><br><span class="line">      KAFKA_LISTENERS: <span class="string">&#x27;PLAINTEXT://:19092,PLAINTEXT_HOST://:9092,CONTROLLER://:9093&#x27;</span></span><br><span class="line">      KAFKA_ADVERTISED_LISTENERS: <span class="string">&#x27;PLAINTEXT://kafka-1:19092,PLAINTEXT_HOST://192.168.31.230:29092,CONTROLLER://kafka-1:9093&#x27;</span></span><br><span class="line">      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT</span><br><span class="line">      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER</span><br><span class="line">      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT</span><br><span class="line">      KAFKA_CONTROLLER_QUORUM_VOTERS: <span class="string">&#x27;1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093&#x27;</span></span><br><span class="line">      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: <span class="number">0</span></span><br><span class="line">    networks:</span><br><span class="line">      - kafka_network</span><br><span class="line"></span><br><span class="line">  kafka-<span class="number">2</span>:</span><br><span class="line">    image: apache/kafka:<span class="number">3.9</span><span class="number">.0</span></span><br><span class="line">    container_name: kafka-<span class="number">2</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">39092</span>:<span class="number">9092</span></span><br><span class="line">    environment:</span><br><span class="line">      KAFKA_NODE_ID: <span class="number">2</span></span><br><span class="line">      KAFKA_PROCESS_ROLES: <span class="string">&quot;broker,controller&quot;</span></span><br><span class="line">      KAFKA_LISTENERS: <span class="string">&#x27;PLAINTEXT://:19092,PLAINTEXT_HOST://:9092,CONTROLLER://:9093&#x27;</span></span><br><span class="line">      KAFKA_ADVERTISED_LISTENERS: <span class="string">&#x27;PLAINTEXT://kafka-2:19092,PLAINTEXT_HOST://192.168.31.230:39092,CONTROLLER://kafka-2:9093&#x27;</span></span><br><span class="line">      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT</span><br><span class="line">      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER</span><br><span class="line">      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT</span><br><span class="line">      KAFKA_CONTROLLER_QUORUM_VOTERS: <span class="string">&#x27;1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093&#x27;</span></span><br><span class="line">      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: <span class="number">0</span></span><br><span class="line">    networks:</span><br><span class="line">      - kafka_network</span><br><span class="line"></span><br><span class="line">  kafka-<span class="number">3</span>:</span><br><span class="line">    image: apache/kafka:<span class="number">3.9</span><span class="number">.0</span></span><br><span class="line">    container_name: kafka-<span class="number">3</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">49092</span>:<span class="number">9092</span></span><br><span class="line">    environment:</span><br><span class="line">      KAFKA_NODE_ID: <span class="number">3</span></span><br><span class="line">      KAFKA_PROCESS_ROLES: <span class="string">&quot;broker,controller&quot;</span></span><br><span class="line">      KAFKA_LISTENERS: <span class="string">&#x27;PLAINTEXT://:19092,PLAINTEXT_HOST://:9092,CONTROLLER://:9093&#x27;</span></span><br><span class="line">      KAFKA_ADVERTISED_LISTENERS: <span class="string">&#x27;PLAINTEXT://kafka-3:19092,PLAINTEXT_HOST://192.168.31.230:49092,CONTROLLER://kafka-3:9093&#x27;</span></span><br><span class="line">      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT</span><br><span class="line">      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER</span><br><span class="line">      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT</span><br><span class="line">      KAFKA_CONTROLLER_QUORUM_VOTERS: <span class="string">&#x27;1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093&#x27;</span></span><br><span class="line">      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: <span class="number">0</span></span><br><span class="line">    networks:</span><br><span class="line">      - kafka_network</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  kafka_network:</span><br><span class="line">    driver: bridge</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">docker-compose up -d</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mkdir /home/kafka</span><br><span class="line">cd /home/kafka</span><br><span class="line">cat &gt; prometheus.yml &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">global:</span><br><span class="line">  scrape_interval: 15s</span><br><span class="line"></span><br><span class="line">scrape_configs:</span><br><span class="line">  - job_name: <span class="string">&#x27;kafka-exporter&#x27;</span></span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [<span class="string">&#x27;kafka-exporter:9308&#x27;</span>]</span><br><span class="line">EOF</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mkdir /home/kafka</span><br><span class="line">cd /home/kafka</span><br><span class="line">cat &gt; docker-compose-metrics.yaml &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  kafka-exporter:</span><br><span class="line">    image: danielqsj/kafka-exporter:v1<span class="number">.8</span><span class="number">.0</span></span><br><span class="line">    container_name: kafka-exporter</span><br><span class="line">    command:</span><br><span class="line">      - <span class="string">&quot;--kafka.server=kafka-1:9092&quot;</span></span><br><span class="line">      - <span class="string">&quot;--kafka.server=kafka-2:9092&quot;</span></span><br><span class="line">      - <span class="string">&quot;--kafka.server=kafka-3:9092&quot;</span></span><br><span class="line">    networks:</span><br><span class="line">      - kafka_network</span><br><span class="line"></span><br><span class="line">  prometheus:</span><br><span class="line">    image: prom/prometheus:latest</span><br><span class="line">    container_name: prometheus</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">9090</span>:<span class="number">9090</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./prometheus.yml:/etc/prometheus/prometheus.yml</span><br><span class="line">    networks:</span><br><span class="line">      - kafka_network</span><br><span class="line">      </span><br><span class="line">  grafana:</span><br><span class="line">    image: grafana/grafana:latest</span><br><span class="line">    container_name: grafana</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">3000</span>:<span class="number">3000</span></span><br><span class="line">    environment:</span><br><span class="line">      GF_SECURITY_ADMIN_PASSWORD: admin</span><br><span class="line">    depends_on:</span><br><span class="line">      - prometheus</span><br><span class="line">    networks:</span><br><span class="line">      - kafka_network</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  kafka_network:</span><br><span class="line">    driver: bridge</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">docker-compose -f docker-compose-metrics.yaml up -d</span><br><span class="line"></span><br><span class="line">docker logs -f kafka-exporter</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><a href="https://grafana.com/grafana/dashboards/?search=kafka+exporter">https://grafana.com/grafana/dashboards/?search=kafka+exporter</a></p>
]]></content>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot开发Kafka应用</title>
    <url>/2022/11/20/kafka/Spring%20Boot%E5%BC%80%E5%8F%91Kafka%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<p><img src="/images/kafka/20221120-2.png" alt="image-20221120-2"></p>
<h3 id="开发环境准备"><a href="#开发环境准备" class="headerlink" title="开发环境准备"></a>开发环境准备</h3><p>● 添加依赖<br>在pom.xml文件中添加Spring Kafka依赖：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-kafka&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>● 配置 Kafka<br>在application.yml文件中进行Kafka相关配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: ex00900</span><br><span class="line">  server:</span><br><span class="line">    port: <span class="number">8080</span></span><br><span class="line">  kafka:</span><br><span class="line">    bootstrap-servers: <span class="number">192.168</span><span class="number">.31</span><span class="number">.230</span>:<span class="number">29092</span>,<span class="number">192.168</span><span class="number">.31</span><span class="number">.230</span>:<span class="number">39092</span>,<span class="number">192.168</span><span class="number">.31</span><span class="number">.230</span>:<span class="number">49092</span>,</span><br><span class="line">    consumer:</span><br><span class="line">      group-id: kafka-consumer-group</span><br><span class="line">      auto-offset-reset: earliest</span><br><span class="line">      enable-auto-commit: <span class="keyword">false</span></span><br><span class="line">      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer</span><br><span class="line">      value-deserializer: com.itlaoqi.ex00900.IoTEventDeserializer</span><br><span class="line">    producer:</span><br><span class="line">      key-serializer: org.apache.kafka.common.serialization.StringSerializer</span><br><span class="line">      value-serializer: com.itlaoqi.ex00900.IoTEventSerializer</span><br><span class="line">    listener:</span><br><span class="line">      # `spring.kafka.listener.ack-mode`用于指定消费者的消息确认模式。</span><br><span class="line">      # Ack模式相关信息：</span><br><span class="line">      # 1. RECORD模式：提交时机为每条消息处理后，不可手动控制，可能导致重复消费，适用于需要逐条确认的场景。</span><br><span class="line">      # 2. BATCH模式：提交时机为每批消息处理后，不可手动控制，可能导致重复消费，适用于批量处理消息的场景。</span><br><span class="line">      # 3. TIME模式：提交时机基于时间间隔，不可手动控制，可能导致重复消费，适用于对消息处理结果要求不高的场景。</span><br><span class="line">      # 4. COUNT模式：提交时机基于消息数量，不可手动控制，可能导致重复消费，适用于需要按固定数量提交的场景。</span><br><span class="line">      # 5. COUNT_TIME模式：提交时机基于时间和数量，不可手动控制，可能导致重复消费，适用于需要兼顾时间和数量的场景。</span><br><span class="line">      # 6. MANUAL模式：提交时机为手动调用、同步提交，可手动控制，不会导致重复消费，适用于需要精确控制偏移量提交时机的场景。</span><br><span class="line">      # 7. MANUAL_IMMEDIATE模式：提交时机为手动调用、异步提交，可手动控制，不会导致重复消费，适用于需要精确控制偏移量提交时机、避免阻塞的场景。</span><br><span class="line">      ack-mode: manual</span><br></pre></td></tr></table></figure>

<p>其中，ack-mode用于指定消费者的消息确认模式，这里选择了manual模式，即手动调用、同步提交，可手动控制偏移量提交时机，避免重复消费。</p>
<h3 id="定义实体类"><a href="#定义实体类" class="headerlink" title="定义实体类"></a>定义实体类</h3><p>● 创建一个物联网终端事件实体类IoTEvent：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itlaoqi.ex00900;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Builder;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 物联网终端事件实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IoTEvent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer deviceId;</span><br><span class="line">    <span class="keyword">private</span> Long eventTimestamp;</span><br><span class="line">    <span class="keyword">private</span> String deviceType;</span><br><span class="line">    <span class="keyword">private</span> Integer eventValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实现序列化和反序列化"><a href="#实现序列化和反序列化" class="headerlink" title="实现序列化和反序列化"></a>实现序列化和反序列化</h3><p>● 序列化器IoTEventSerializer</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itlaoqi.ex00900;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> lombok.SneakyThrows;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IoTEventSerializer</span> <span class="keyword">implements</span> <span class="title">org</span>.<span class="title">apache</span>.<span class="title">kafka</span>.<span class="title">common</span>.<span class="title">serialization</span>.<span class="title">Serializer</span>&lt;<span class="title">IoTEvent</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] serialize(String topic, IoTEvent data) &#123;</span><br><span class="line">        <span class="keyword">return</span> objectMapper.writeValueAsBytes(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>● 反序列化器 IoTEventDeserializer</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itlaoqi.ex00900;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> lombok.SneakyThrows;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IoTEventDeserializer</span> <span class="keyword">implements</span> <span class="title">org</span>.<span class="title">apache</span>.<span class="title">kafka</span>.<span class="title">common</span>.<span class="title">serialization</span>.<span class="title">Deserializer</span>&lt;<span class="title">IoTEvent</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IoTEvent <span class="title">deserialize</span><span class="params">(String topic, <span class="keyword">byte</span>[] data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> objectMapper.readValue(data, IoTEvent.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="消息生产者"><a href="#消息生产者" class="headerlink" title="消息生产者"></a>消息生产者</h3><p>创建一个RESTful控制器IotEventController来发送消息：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itlaoqi.ex00900;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> lombok.SneakyThrows;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.core.KafkaTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.support.SendResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CompletableFuture;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IotEventController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> KafkaTemplate&lt;String, IoTEvent&gt; kafkaTemplate;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/send&quot;)</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IoTEvent <span class="title">sendEvent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CompletableFuture&lt;SendResult&lt;String, IoTEvent&gt;&gt; future = kafkaTemplate.send(<span class="string">&quot;iot-events&quot;</span>, IoTEvent.builder().deviceId(<span class="number">1</span>).deviceType(<span class="string">&quot;x10t&quot;</span>).eventTimestamp(System.currentTimeMillis()).eventValue(<span class="keyword">new</span> Random().nextInt(<span class="number">100</span>)).build());</span><br><span class="line">        SendResult&lt;String, IoTEvent&gt; result = future.get();</span><br><span class="line">        <span class="keyword">return</span> result.getProducerRecord().value();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当访问/send接口时，会生成一个IoTEvent对象并发送到iot-events主题。</p>
<h3 id="消息消费者"><a href="#消息消费者" class="headerlink" title="消息消费者"></a>消息消费者</h3><p>创建一个消息消费者类IotEventConsumer：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itlaoqi.ex00900;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.annotation.KafkaListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.support.Acknowledgment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IotEventConsumer</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    自动提交模式</span></span><br><span class="line"><span class="comment">    @KafkaListener(topics = &quot;iot-events&quot;)</span></span><br><span class="line"><span class="comment">    public void listen(IoTEvent event) &#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;Received message: &quot; + event);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*手动提交模式*/</span></span><br><span class="line">    <span class="meta">@KafkaListener(topics = &quot;iot-events&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">(IoTEvent event, Acknowledgment acknowledgment)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Received message: &quot;</span> + event);</span><br><span class="line">        acknowledgment.acknowledge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用@KafkaListener注解监听iot-events主题，当接收到消息后，打印消息内容并手动确认消息。</p>
]]></content>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis分布式锁分析与实现</title>
    <url>/2021/07/05/Redis/Redisson%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<h3 id="分布式锁注解类"><a href="#分布式锁注解类" class="headerlink" title="分布式锁注解类"></a>分布式锁注解类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> DistributeRedisLock &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * key前缀</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function">String  <span class="title">lockKey</span> <span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 等待时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">waitTime</span> <span class="params">()</span> <span class="keyword">default</span> 60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取锁后超时释放锁时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">leaseTime</span><span class="params">()</span> <span class="keyword">default</span>  300</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分布式锁切面类"><a href="#分布式锁切面类" class="headerlink" title="分布式锁切面类"></a>分布式锁切面类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistributeRedisLockAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(DistributeRedisLockAspect.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DistributeRedisLockAspect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Do nothing because of X and Y.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(</span></span><br><span class="line"><span class="meta">            value = &quot;@annotation(com.banksteel.openerp.commons.redisson.DistributeRedisLock)&quot;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">aroundHandle</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Method targetMethod = AspectUtils.getTargetMethod(joinPoint);</span><br><span class="line">        DistributeRedisLock distributeRedisLock = targetMethod.getAnnotation(DistributeRedisLock.class);</span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        String memberId = SaasParameter.getMemberId();</span><br><span class="line">        String arg0 = args[<span class="number">0</span>].toString();</span><br><span class="line">        StringBuffer s = <span class="keyword">new</span> StringBuffer(distributeRedisLock.lockKey()).append(<span class="string">&quot;::&quot;</span>).append(memberId)</span><br><span class="line">                .append(<span class="string">&quot;::&quot;</span>).append(arg0);</span><br><span class="line">        RLock lock = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock = redissonClient.getLock(s.toString());</span><br><span class="line">            <span class="keyword">if</span> (lock != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(lock.tryLock(distributeRedisLock.waitTime(), distributeRedisLock.leaseTime(), TimeUnit.SECONDS)) &#123;</span><br><span class="line">                    logger.info(<span class="string">&quot;获取切面redis锁成功&#123;&#125;&quot;</span>,targetMethod.getName());</span><br><span class="line">                    <span class="keyword">return</span> joinPoint.proceed();</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> BuzzErrorException(<span class="string">&quot;系统正在处理，请勿频繁操作！&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BuzzErrorException(<span class="string">&quot;系统异常，请稍后再试！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var6) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BuzzErrorException(var6.getMessage());</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (lock != <span class="keyword">null</span>) &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="redis配置类"><a href="#redis配置类" class="headerlink" title="redis配置类"></a>redis配置类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(RedissonProperty.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123;RedissonClient.class&#125;)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(&quot;banksteel.redis.nodes&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRedissonAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedissonClient <span class="title">redissonClient</span><span class="params">(RedissonProperty properties)</span></span>&#123;</span><br><span class="line">        Config config = <span class="keyword">new</span> Config();</span><br><span class="line">            String[] nodes = properties.getNodes().split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        List&lt;String&gt; newNodes = <span class="keyword">new</span> ArrayList(nodes.length);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(String node: nodes)&#123;</span><br><span class="line">            newNodes.add(node.startsWith(<span class="string">&quot;redis://&quot;</span>) ? node : <span class="string">&quot;redis://&quot;</span> + node);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        SentinelServersConfig serverConfig = config.useSentinelServers()</span><br><span class="line">                    .addSentinelAddress(newNodes.toArray(<span class="keyword">new</span> String[nodes.length]))</span><br><span class="line">                    .setMasterName(properties.getMaster())</span><br><span class="line">                    .setTimeout(properties.getTimeout())</span><br><span class="line">                    .setMasterConnectionPoolSize(properties.getMasterSize())</span><br><span class="line">                    .setSlaveConnectionPoolSize(properties.getSlaveSize())</span><br><span class="line">                ;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!StringUtils.isEmpty(properties.getPassword())) &#123;</span><br><span class="line">                serverConfig.setPassword(properties.getPassword());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedissonUtil <span class="title">redissonUtil</span><span class="params">(RedissonProperty properties)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RedissonUtil(redissonClient(properties));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="RedissonProperty"><a href="#RedissonProperty" class="headerlink" title="RedissonProperty"></a>RedissonProperty</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;banksteel.redis&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedissonProperty</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String master;</span><br><span class="line">    <span class="keyword">private</span> String nodes;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> timeout = <span class="number">5000</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> masterSize = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> slaveSize = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="redis处理工具"><a href="#redis处理工具" class="headerlink" title="redis处理工具"></a>redis处理工具</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedissonUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedissonUtil</span><span class="params">(RedissonClient redissonClient)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redissonClient = redissonClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**`</span></span><br><span class="line"><span class="comment">     * 获取字符串对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">RBucket&lt;T&gt; <span class="title">getRBucket</span><span class="params">(String objectName)</span> </span>&#123;</span><br><span class="line">        RBucket&lt;T&gt; bucket = redissonClient.getBucket(objectName);</span><br><span class="line">        <span class="keyword">return</span> bucket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Map对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;K, V&gt; <span class="function">RMap&lt;K, V&gt; <span class="title">getRMap</span><span class="params">(String objectName)</span> </span>&#123;</span><br><span class="line">        RMap&lt;K, V&gt; map = redissonClient.getMap(objectName);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取有序集合</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;V&gt; <span class="function">RSortedSet&lt;V&gt; <span class="title">getRSortedSet</span><span class="params">(String objectName)</span> </span>&#123;</span><br><span class="line">        RSortedSet&lt;V&gt; sortedSet = redissonClient.getSortedSet(objectName);</span><br><span class="line">        <span class="keyword">return</span> sortedSet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取集合</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;V&gt; <span class="function">RSet&lt;V&gt; <span class="title">getRSet</span><span class="params">(String objectName)</span> </span>&#123;</span><br><span class="line">        RSet&lt;V&gt; rSet = redissonClient.getSet(objectName);</span><br><span class="line">        <span class="keyword">return</span> rSet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;V&gt; <span class="function">RList&lt;V&gt; <span class="title">getRList</span><span class="params">(String objectName)</span> </span>&#123;</span><br><span class="line">        RList&lt;V&gt; rList = redissonClient.getList(objectName);</span><br><span class="line">        <span class="keyword">return</span> rList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取队列</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;V&gt; <span class="function">RQueue&lt;V&gt; <span class="title">getRQueue</span><span class="params">(String objectName)</span> </span>&#123;</span><br><span class="line">        RQueue&lt;V&gt; rQueue = redissonClient.getQueue(objectName);</span><br><span class="line">        <span class="keyword">return</span> rQueue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取双端队列</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;V&gt; <span class="function">RDeque&lt;V&gt; <span class="title">getRDeque</span><span class="params">(String objectName)</span> </span>&#123;</span><br><span class="line">        RDeque&lt;V&gt; rDeque = redissonClient.getDeque(objectName);</span><br><span class="line">        <span class="keyword">return</span> rDeque;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取锁</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RLock <span class="title">getRLock</span><span class="params">(String objectName)</span> </span>&#123;</span><br><span class="line">        RLock rLock = redissonClient.getLock(objectName);</span><br><span class="line">        <span class="keyword">return</span> rLock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取读取锁</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RReadWriteLock <span class="title">getRWLock</span><span class="params">(String objectName)</span> </span>&#123;</span><br><span class="line">        RReadWriteLock rwlock = redissonClient.getReadWriteLock(objectName);</span><br><span class="line">        <span class="keyword">return</span> rwlock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取原子数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RAtomicLong <span class="title">getRAtomicLong</span><span class="params">(String objectName)</span> </span>&#123;</span><br><span class="line">        RAtomicLong rAtomicLong = redissonClient.getAtomicLong(objectName);</span><br><span class="line">        <span class="keyword">return</span> rAtomicLong;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取记数锁</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RCountDownLatch <span class="title">getRCountDownLatch</span><span class="params">(String objectName)</span> </span>&#123;</span><br><span class="line">        RCountDownLatch rCountDownLatch = redissonClient.getCountDownLatch(objectName);</span><br><span class="line">        <span class="keyword">return</span> rCountDownLatch;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取消息的Topic</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;M&gt; <span class="function">RTopic&lt;M&gt; <span class="title">getRTopic</span><span class="params">(String objectName)</span> </span>&#123;</span><br><span class="line">        RTopic&lt;M&gt; rTopic = redissonClient.getTopic(objectName);</span><br><span class="line">        <span class="keyword">return</span> rTopic;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="redis配置文件"><a href="#redis配置文件" class="headerlink" title="redis配置文件"></a>redis配置文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">banksteel.redis.master=publicredis</span><br><span class="line">banksteel.redis.password =8clxNrcOgho!</span><br><span class="line">banksteel.redis.nodes=redis1.<span class="keyword">public</span>.banksteel.local:<span class="number">26379</span>,redis2.<span class="keyword">public</span>.banksteel.local:<span class="number">26379</span>,redis3.<span class="keyword">public</span>.banksteel.local:<span class="number">26379</span></span><br><span class="line">banksteel.redis.timeout=<span class="number">50000</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis主从复制</title>
    <url>/2021/06/11/Redis/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
    <content><![CDATA[<p>在当前最新的 Redis 6.0 中，主从复制的完整过程如下：</p>
<p>1）开启主从复制</p>
<p>通常有以下三种方式：<br>在 slave 直接执行命令：slaveof <masterip> <masterport><br>在 slave 配置文件中加入：slaveof <masterip> <masterport><br>使用启动命令：–slaveof <masterip> <masterport><br>注：在 Redis 5.0 之后，slaveof 相关命令和配置已经被替换成 replicaof，例如 replicaof <masterip> <masterport>。为了兼容旧版本，通过配置的方式仍然支持 slaveof，但是通过命令的方式则不行了。</masterport></masterip></masterport></masterip></masterport></masterip></masterport></masterip></p>
<p>2）建立套接字（socket）连接<br>slave 将根据指定的 IP 地址和端口，向 master 发起套接字（socket）连接，master 在接受（accept） slave 的套接字连接之后，为该套接字创建相应的客户端状态，此时连接建立完成。</p>
<p>3）发送PING命令<br>slave 向 master 发送一个 PING 命令，以检査套接字的读写状态是否正常、 master 能否正常处理命令请求。</p>
<p>4）身份验证<br>slave 向 master 发送 AUTH password 命令来进行身份验证。</p>
<p>5）发送端口信息<br>在身份验证通过后后， slave 将向 master 发送自己的监听端口号， master 收到后记录在 slave 所对应的客户端状态的 slave_listening_port 属性中。</p>
<p>6）发送IP地址<br>如果配置了 slave_announce_ip，则 slave 向 master 发送 slave_announce_ip 配置的 IP 地址， master 收到后记录在 slave 所对应的客户端状态的 slave_ip 属性。<br>该配置是用于解决服务器返回内网 IP 时，其他服务器无法访问的情况。可以通过该配置直接指定公网 IP。</p>
<p>7）发送CAPA<br>CAPA 全称是 capabilities，这边表示的是同步复制的能力。slave 会在这一阶段发送 capa 告诉 master 自己具备的（同步）复制能力， master 收到后记录在 slave 所对应的客户端状态的 slave_capa 属性。</p>
<p>8）数据同步<br>slave 将向 master 发送 PSYNC 命令， master 收到该命令后判断是进行部分重同步还是完整重同步，然后根据策略进行数据的同步。</p>
<p>9）命令传播<br>当完成了同步之后，就会进入命令传播阶段，这时 master 只要一直将自己执行的写命令发送给 slave ，而 slave 只要一直接收并执行 master 发来的写命令，就可以保证 master 和 slave 一直保持一致了。
    </p>
]]></content>
  </entry>
  <entry>
    <title>redis数据结构</title>
    <url>/2021/06/11/Redis/redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h3 id="redis的数据结构"><a href="#redis的数据结构" class="headerlink" title="redis的数据结构"></a>redis的数据结构</h3><p>常见的5种：<br>String：字符串，最基础的数据类型。<br>List：列表。<br>Hash：哈希对象。<br>Set：集合。<br>Sorted Set：有序集合，Set 的基础上加了个分值。<br>高级的4种：<br>HyperLogLog：通常用于基数统计。使用少量固定大小的内存，来统计集合中唯一元素的数量。统计结果不是精确值，而是一个带有0.81%标准差（standard error）的近似值。所以，HyperLogLog适用于一些对于统计结果精确度要求不是特别高的场景，例如网站的UV统计。<br>Geo：redis 3.2 版本的新特性。可以将用户给定的地理位置信息储存起来， 并对这些信息进行操作：获取2个位置的距离、根据给定地理位置坐标获取指定范围内的地理位置集合。<br>Bitmap：位图。<br>Stream：主要用于消息队列，类似于 kafka，可以认为是 pub/sub 的改进版。提供了消息的持久化和主备复制功能，可以让任何客户端访问任何时刻的数据，并且能记住每一个客户端的访问位置，还能保证消息不丢失。</p>
<h3 id="Sorted-Set底层数据结构"><a href="#Sorted-Set底层数据结构" class="headerlink" title="Sorted Set底层数据结构"></a>Sorted Set底层数据结构</h3><p>Sorted Set（有序集合）当前有两种编码实现：ziplist、skiplist</p>
<p>ziplist：使用压缩列表实现，当保存的元素长度都小于64字节，同时数量小于128时，使用该编码方式，否则会使用 skiplist。这两个参数可以通过 zset-max-ziplist-entries、zset-max-ziplist-value 来自定义修改。</p>
<p>ziplist数据结构：<br>    (1).zlbytes：记录了压缩列表占用的内存字节数，在对压缩列表进行内存重分配，或者计算zlend的位置时使用。它本身占了4个字节；<br>    (2).zltail：记录了尾节点（entry）至起始节点（entry）的偏移量。通过这个偏移量，可以快速确定最后一个entry节点的地址;<br>    (3).zllen：记录了entry节点的数量。当zllen的值小于65535时，这个值就表示节点的数量。当zllen的值大于65535时，节点的真实数量需要遍历整个压缩列表才能得出;<br>    (4).entry：压缩列表中所包含的每个节点。每个节点的长度根据该节点的内容来决定;<br>    (5).zlend：特殊值0XFF(255)，标记了压缩列表的末端。表示该压缩列表到此为止;<br>ziplist的entry节点的结构：<br>    (1).prev_entry_len：记录前驱节点的长度;<br>    (2).encoding：记录当前节点的value成员的数据类型以及长度;<br>    (3).value：根据encoding来保存字节数组或整数<br>ziplist的特点：<br>    (1).压缩列表ziplist结构本身就是一个连续的内存块，由表头（记录了压缩列表的一些信息，比如zlbytes压缩列表占用的内存字节<br>    数，zltail起始节点到尾结点的偏移量，zllen记录了entry节点的个数）、若干个entry节点和压缩列表尾部标识符zlend组成，通过(8种)一系列编码规则，提高内存的利用率，使用于存储整数和短字符串；<br>    (2).压缩列表ziplist结构的缺点是：每次插入或删除一个元素时，都需要进行频繁的进行内存的扩展或减小，然后还需要进行内存的<br>    整理，造成严重效率的损失，所以redis默认情况下在元素个数小于128时才使用ziplist,在元素大于128时使用skiplist;</p>
<p>skiplist：zset实现，一个zset同时包含一个字典（dict）和一个跳跃表（zskiplist）</p>
<p>skiplist数据结构：<br>    (1).是一个多层链表的数据结构，每个节点的level是通过一定的概率随机产生的（使用抛硬币的方式）;<br>    (2).每一层都是一个有序的链表，默认是升序;<br>    (3).最底层(Level 1)的链表包含所有元素;<br>    (4).跳跃表的空间复杂度为 O(n);<br>    (5).跳跃表支持平均O(logN)、最坏O(N)复杂度的节点查找;<br>    在大部分情况下，跳跃表的效率可以和平衡树相媲美，并且因为跳跃表的实现比平衡树要来得更为简单，所以有不少程序都使用跳跃表来代替平衡树;<br>    跳跃表 vs 红黑树<br>    红黑可以说是二叉查找树的一种变形，红黑在查找，插入，删除也是近似O(logn)的时间复杂度，但学过红黑树的都知道，<br>    红黑树比跳跃表复杂多了。<br>    但红黑树插入，删除结点时，是通过调整结构来保持红黑树的平衡，比起跳跃表直接通过一个随机数来决定跨越几层，在时间复杂度的花销上是要高于跳跃表的。<br>    当然，红黑树并不是一定比跳跃表差，在有些场合红黑树会是更好的选择，所以选择一种数据结构，关键还得看场合。<br>    总上所述，维护一组有序的集合，并且希望在查找、插入、删除等操作上尽可能快，那么跳跃表会是不错的选择。</p>
<h3 id="Sorted-Set为什么同时使用字典和跳跃表"><a href="#Sorted-Set为什么同时使用字典和跳跃表" class="headerlink" title="Sorted Set为什么同时使用字典和跳跃表"></a>Sorted Set为什么同时使用字典和跳跃表</h3><pre><code>主要是为了性能。
单独使用字典：在执行范围型操作，比如zrank、zrange，字典需要进行排序，至少需要O(NlogN)的时间复杂度及额外O(N)的内存空间。
单独使用跳跃表：根据成员查找分值操作的复杂度从O(1)上升为O(logN)。
</code></pre>
<h3 id="Sorted-Set为什么使用跳跃表，而不是红黑树"><a href="#Sorted-Set为什么使用跳跃表，而不是红黑树" class="headerlink" title="Sorted Set为什么使用跳跃表，而不是红黑树"></a>Sorted Set为什么使用跳跃表，而不是红黑树</h3><pre><code>1）跳表的性能和红黑树差不多;
2）跳表更容易实现和调试;
3）红黑树插入，删除结点时，是通过调整结构来保持红黑树的平衡，比起跳跃表直接通过一个随机数来决定跨越几层，在时间复杂度的花销上是要高于跳跃表的；
</code></pre>
<h3 id="Hash-对象底层结构"><a href="#Hash-对象底层结构" class="headerlink" title="Hash 对象底层结构"></a>Hash 对象底层结构</h3><pre><code>Hash对象当前有两种编码：ziplist、hashtable
ziplist：使用压缩列表实现，每当有新的键值对要加入到哈希对象时，程序会先将保存了键的节点推入到压缩列表的表尾，然后再将保存了值的节点推入到压缩列表表尾。
因此：
1）保存了同一键值对的两个节点总是紧挨在一起，保存键的节点在前，保存值的节点在后；
2）先添加到哈希对象中的键值对会被放在压缩列表的表头方向，而后来添加的会被放在表尾方向。
hashtable：使用字典作为底层实现，哈希对象中的每个键值对都使用一个字典键值来保存，跟 java 中的 HashMap 类似。
</code></pre>
]]></content>
  </entry>
  <entry>
    <title>IO多路复用解析</title>
    <url>/2021/09/21/Redis/IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h3 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h3><p>就是对网络中不同主机上的应用进程之间进行双向通信的端点的抽象。一个套接字就是网络上进程通信的一端，提供了应用层进程利用网络协议交换数据的机制。从所处的地位来讲，套接字上联应用进程，下联网络协议栈，是应用程序通过网络协议进行通信的接口，是应用程序与网络协议栈进行交互的接口;</p>
<h3 id="FD：file-descriptor"><a href="#FD：file-descriptor" class="headerlink" title="FD：file descriptor"></a>FD：file descriptor</h3><p>文件描述符,非负整数.”一切皆文件”,Linux中的一切资源都可以通过文件的方式访问和管理,而FD就类似于文件的索引(符号),指向某个资源,<br>内核(kernel)利用FD来访问和管理资源;</p>
<h3 id="用户态和内核态"><a href="#用户态和内核态" class="headerlink" title="用户态和内核态"></a>用户态和内核态</h3><p>现在的Linux操作系统会分为用户空间和内核空间;<br>用户态：当进程或者线程运行在用户空间的时候就处于用户态,在用户空间下只能执行一些相对安全的cpu指令;<br>内核态：当进程或者线程运行在内核空间的时候就处于内核态,在内核态可以执行一些比较危险的特权指令,这样做的目的是为了整个系统的安全考虑,避免应用程序瞎搞,把整个操作系统给搞挂了;但是内核空间它也将一些socket的相关能力进行封装,会通过像read和write这些函数提供出来供用户空间使用,这些函数也称为系统调用函数;当我们在用户态调用这些函数后,系统会切换到内核态,由内核来完成相应的socket操作,最终将执行的结果返回给我们;</p>
<h3 id="系统调用函数read和write的核心流程"><a href="#系统调用函数read和write的核心流程" class="headerlink" title="系统调用函数read和write的核心流程"></a>系统调用函数read和write的核心流程</h3><p>read：当我们在用户空间调用read函数的时候,数据会先从网卡拷贝到内核空间,也就是socket缓冲区,然后再从内核空间拷贝到用户空间;<br>write：与read函数相反,由用户空间拷贝到内核空间,然后再拷贝到网卡上;</p>
<h3 id="同步阻塞"><a href="#同步阻塞" class="headerlink" title="同步阻塞"></a>同步阻塞</h3><p>线程阻塞等待与就绪socket建立连接,严格的按照与建立Socket建立连接顺序来进行数据的读写;<br>单线程:如果某个socket发生了阻塞,会影响到其他socket的处理;<br>多线程:客户端较多时,会造成资源的浪费,全部socket中每个时刻可能只有几个就绪。同时线程的调度,上下文的切换甚至线程栈内存资源的占用都可能成为系统的瓶颈;</p>
<h3 id="同步非阻塞"><a href="#同步非阻塞" class="headerlink" title="同步非阻塞"></a>同步非阻塞</h3><p>同步非阻塞IO需要我们在用户空间下不断的去遍历所有监听的socket的FD,调用read函数来检查数据是否到来;<br>优点:相对于同步阻塞,单个socket的阻塞不会影响到其他socket;<br>缺点:同步非阻塞它需要不断去遍历调用read函数来检查是否有数据到来,调用read函数会有一个用户态切换到内核态的开销,如果socket较多的情况下,这个开销是很大的;</p>
<h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><p>当用户空间调用select函数时,会先将所有监听socket的FD拷贝一份到内核空间,然后阻塞当前用户空间调用select函数的线程程,内核空间会检查当前所有FD中没有就绪的,如果有就会返回就绪的FD集合,没有则阻塞当前检查进程,当有数据包到达后,socket接收到中断信号,会检查当前socket对应的等待队列是否有进程正在阻塞等待,如果有的话则会唤醒阻塞的内核进程,内核进程则会去遍历一遍所有的FD,然后检查到某些FD就绪之后,然后将相应的FD集合返回给用户空间,用户空间根据集合，遍历一遍所有的FD那些是就绪的,然后对就绪的FD进行数据的读写;<br>优点：select相对于同步非阻塞,将检查所有监听的socket对应的FD是否就绪下沉到了操作系统层面,从而避免了在用户空间进行大量的read函数造成用户态与内核态切换的系统开销;<br>缺点：每个进程打开的FD有一定的上限,由FD_SETSIZE设置，默认值是1024;<br>     每次调用select需要将所有的FD从用户态拷贝到内核态;如果这个FD集合是比较大的，这个也是会造成一定的开销的;<br>     用户空间接受到返回FD集合需要遍历一遍所有的FD获取就绪的FD,这里会造成一个O(n)遍历的开销;</p>
<h3 id="epoll-select的增强版本"><a href="#epoll-select的增强版本" class="headerlink" title="epoll(select的增强版本)"></a>epoll(select的增强版本)</h3><p>epoll有三个系统调用函数:<br>1.epoll_create(int size):用于创建一个给定size大小的epoll;<br>2.epoll_ctl:用于注册一个FD的读事件或者写事件到epoll;<br>3.epoll_wait:类似与select,用于获取就绪FD事件;<br>首先我们会在我们用户空间调用epoll_create函数来创建epoll,epoll中主要有三个数据结构,分别是用一个红黑树结构来维护所有的FD来达到一个快速查找FD的效果，第二个就是一个List结构用来维护所有就绪的FD列表,第三个就是一个队列结构来维护遍历所有FD发现没有FD就绪而阻塞的进程,方便后续有Socket接收到数据包来唤醒进程;<br>接着调用epoll_ctl函数,会将FD添加到内核空间的红黑树上;FD添加完成后;<br>接着调用epoll_wait函数,用户空间调用epoll_wait的线程会被阻塞,内核空间会检查所有的FD是否有就绪的,有则添加就绪事件<br>到就绪列表,没有,则进程让出cpu,将进程添加到阻塞队列;当有数据包到达后,socket接收到中断信号,会将对应事件添加到就序列表,并唤醒阻塞的进程,然后会将就绪列表中的事件集合返回给用户空间,用户空间进行相应的事件处理;</p>
<p>优点：直接将FD维护在内核空间的红黑树上,避免了从用户态将FD拷贝到内核态;<br>     通过就绪列表直接就可以获取到那些FD是就绪的,避免了遍历所有的FD来获取就绪的FD;<br>缺点：跨平台性不够好,目前只支持Linux,像macOS等操作系统不支持;<br>      在监听连接数和事件较少的场景下,select可能会更好,epoll所解决的问题是FD较多的情况下,在FD较少的情况下,由于select的实现更加简单,其他的性能是可能会更好的;</p>
<p>水平触发和边缘触发<br>LT:水平触发,默认。epoll_wait检测到事件后,如果该事件没有被处理完毕,后续每次epoll_wait调用都会返回该事件,水平触发相对来说更注重<br>安全性一点,但是他每次都需要检查事件是否处理完毕;<br>ET:边缘触发,epoll_wait检测到事件后,只会在当次返回该事件,不管该事件是否被处理完毕,边缘触发相对来说更注重性能一点;</p>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis和Memcached</title>
    <url>/2021/06/12/Redis/redis%E5%92%8CMemcached/</url>
    <content><![CDATA[<h3 id="关于redis和Memcached的比较："><a href="#关于redis和Memcached的比较：" class="headerlink" title="关于redis和Memcached的比较："></a>关于redis和Memcached的比较：</h3><pre><code>(1).数据结构：
    Memcached：主要支持简单的 key-value 数据结构，类似于 Redis 里的 String；
    Redis：总共有9种，常见的5种，高级的4种：
    String：字符串，最基础的数据类型；
    List：列表;
    Hash：哈希对象；
    Set：集合；
    Sorted Set：有序集合，Set 的基础上加了个分值；

    HyperLogLog：通常用于基数统计。使用少量固定大小的内存，来统计集合中唯一元素的数量。统计结果不是精确值，而是一个带有0.81%标准差（standard error）的近似值。所以，HyperLogLog适用于一些对于统计结果精确度要求不是特别高的场景，
    例如网站的UV统计；

    Geo：redis 3.2 版本的新特性。可以将用户给定的地理位置信息储存起来， 并对这些信息进行操作：获取2个位置的距离、根据
    给定地理位置坐标获取指定范围内的地理位置集合；

    Bitmap：位图；

    Stream：主要用于消息队列，类似于 kafka，可以认为是 pub/sub 的改进版。提供了消息的持久化和主备复制功能，可以让任何客户端访问任何时刻的数据，并且能记住每一个客户端的访问位置，还能保证消息不丢失。

(2).数据存储：
    Memcached：数据全部存在内存中，重启实例会导致数据全部丢失;
    Redis：通常全部存在内存中，同时支持持久化到磁盘上;

(3).持久化:
    Memcached：不支持;
    Redis：AOF、RDB、混合持久化;

(4).灾难恢复:
    Memcached：实例挂掉后，数据不可恢复;
    Redis：实例挂掉后可以通过RDB、AOF恢复 ，但是还是会有数据丢失问题;

(5).事件处理（事件库）:
    Memcached：使用 Libevent 库;

    Redis：自己封装了简易事件库 AeEvent;

(6).过期键删除策略:
    常见的有以下三种：

    定时删除：在设置键的过期时间的同时，创建一个定时器，让定时器在键的过期时间来临时，立即执行对键的删除操作。对内存最友好，对 CPU 时间最不友好;

    惰性删除：放任键过期不管，但是每次获取键时，都检査键是否过期，如果过期的话，就删除该键；如果没有过期，就返回该键。对 CPU 时间最优化，对内存最不友好;

    定期删除：每隔一段时间，默认100ms，程序就对数据库进行一次检査，删除里面的过期键。至 于要删除多少过期键，以及要检査多少个数据库，则由算法决定。前两种策略的折中，对 CPU 时间和内存的友好程度较平衡;

    Memcached：惰性删除

    Redis：惰性删除+定期删除

(7).内存驱淘汰(驱逐)策略:
    当内存空间已经用满时，服务实例将将根据配置的驱逐策略，进行相应的动作。

    memcached：主要为 LRU 算法

    redis：当前总共有以下8种：

    noeviction：默认策略，不淘汰任何 key，直接返回错误

    allkeys-lru：在所有的 key 中，使用 LRU 算法淘汰部分 key

    allkeys-lfu：在所有的 key 中，使用 LFU 算法淘汰部分 key

    allkeys-random：在所有的 key 中，随机淘汰部分 key

    volatile-lru：在设置了过期时间的 key 中，使用 LRU 算法淘汰部分 key

    volatile-lfu：在设置了过期时间的 key 中，使用 LFU 算法淘汰部分 key

    volatile-random：在设置了过期时间的 key 中，随机淘汰部分 key

    volatile-ttl：在设置了过期时间的 key 中，挑选 TTL（time to live，剩余时间）短的 key 淘汰

(8).性能：
    首先，影响性能比较的因素有很多，网络带宽、CPU、内存等等，所以其实很多测试并不能完全说明问题，可能在这个条件下 Redis 快，而在另一个条件下是 Memcached 快；

    Redis 作者 antirez 在 12 年左右在 Stack Overflow 上谈过两者的性能问题，他是这么说的：由于 Redis 只使用单核，而 Memcached 可以使用多核，所以在比较上：在处理小数据时，平均每一个核上 Redis 比 Memcached 性能更高，而在 100k 左右的大数据时， Memcached 性能要高于 Redis；

    antirez 的这个说法是按“CPU 单核”维度来比较，但是我们在实际的使用中，肯定是按“实例”维度来使用，所以接下来
    我们探讨下对于两者在“实例”维度的比较；

    按“实例”维度进行比较时，个人认为由于 Memcached 多线程的特性，在 Redis 6.0 之前，通常情况下 Memcached 性能是要高于 Redis 的，同时实例的 CPU 核数越多，Memcached 的性能优势越大；

    而在 Redis 6.0 支持 I/O 多线程后，当 Redis 关闭持久化后，两者在性能上可能会比较接近

(9).关于两者的技术选型，该如何选择？
    看完上面的比较，其实不难做出选择，99%的人、场景，或者说 Redis 能支持的场景，使用 Redis 基本不会有问题；

    而且就最近几年的发展来看，Redis 可谓风光无限，而 Memcached 则是已经逐渐跟不上 Redis 脚步了，这也侧面
    反映了当前大家的选择都是趋向于使用 Redis；

    而关于使用 Memcached 的场景，我自己了解到的一些线上真实使用场景都是对于性能有非常高的要求；

    Redis 6.0 支持的 I/O 阶段多线程目前根据官方说法至少能提升性能1倍，随着 Redis 在性能上的不断优化，可能后续 Memcached 的使用场景会越来越少了
</code></pre>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>缓存穿透，缓存击穿和缓存雪崩</title>
    <url>/2021/06/12/Redis/redis%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%EF%BC%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%E5%92%8C%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9/</url>
    <content><![CDATA[<p>缓存穿透:<br>    描述：访问一个缓存和数据库都不存在的 key，此时会直接打到数据库上，并且查不到数据，没法写缓存，<br>    所以下一次同样会打到数据库上;</p>
<pre><code>此时，缓存起不到作用，请求每次都会走到数据库，流量大时数据库可能会被打挂。此时缓存就好像被“穿透”了一样，起不到任何作用;

解决方案：
1、接口校验。在正常业务流程中可能会存在少量访问不存在 key 的情况，但是一般不会出现大量的情况，所以这种场景最大的可能性是遭受了非法攻击。可以在最外层先做一层校验：用户鉴权、数据合法性校验等，例如商品查询中，商品的ID是正整数，则可以直接对非正整数直接过滤等等;

2、缓存空值。当访问缓存和DB都没有查询到值时，可以将空值写进缓存，但是设置较短的过期时间，该时间需要根据产品业务特性来设置;

3、布隆过滤器。使用布隆过滤器存储所有可能访问的 key，不存在的 key 直接被过滤，存在的 key 则再进一步查询缓存和数据库;
</code></pre>
<p>布隆过滤器:<br>    布隆过滤器的特点是判断不存在的，则一定不存在；判断存在的，大概率存在，但也有小概率不存在。并且这个概率是可控的，我们可以让这个概率变小或者变高，取决于用户本身的需求;</p>
<pre><code>布隆过滤器由一个 bitSet 和 一组 Hash 函数（算法）组成，是一种空间效率极高的概率型算法和数据结构，
主要用来判断一个元素是否在集合中存在;

在初始化时，bitSet 的每一位被初始化为0，同时会定义 Hash 函数，例如有3组 Hash 函数：hash1、hash2、hash3;

写入流程:

当我们要写入一个值时，过程如下，以“lixiang”为例：

1）首先将“lixiang”跟3组 Hash 函数分别计算，得到 bitSet 的下标为：1、7、10。

2）将 bitSet 的这3个下标标记为1。

假设我们还有另外两个值：java 和 diaosi，按上面的流程跟 3组 Hash 函数分别计算，结果如下：

java：Hash 函数计算 bitSet 下标为：1、7、11

diaosi：Hash 函数计算  bitSet 下标为：4、10、11

查询流程:

当我们要查询一个值时，过程如下，同样以“jionghui”为例：

1）首先将“lixiang”跟3组 Hash 函数分别计算，得到 bitSet 的下标为：1、7、10;

2）查看 bitSet 的这3个下标是否都为1，如果这3个下标不都为1，则说明该值必然不存在，如果这3个下标都为1，则只能说明可能存在，并不能说明一定存在;

其实上图的例子已经说明了这个问题了，当我们只有值“jionghui”和“diaosi”时，bitSet 下标为1的有：1、4、7、10、11;

当我们又加入值“java”时，bitSet 下标为1的还是这5个，所以当 bitSet 下标为1的为：1、4、7、10、11 时，我们无法判断值“java”存不存在;

其根本原因是，不同的值在跟 Hash 函数计算后，可能会得到相同的下标，所以某个值的标记位，可能会被其他值给标上了;

这也是为啥布隆过滤器只能判断某个值可能存在，无法判断必然存在的原因。但是反过来，如果该值根据 Hash 函数计算的标记位没有全部都为1，那么则说明必然不存在，这个是肯定的;

降低这种误判率的思路也比较简单：

1）一个是加大 bitSet 的长度，这样不同的值出现“冲突”的概率就降低了，从而误判率也降低;

2）提升 Hash 函数的个数，Hash 函数越多，每个值对应的 bit 越多，从而误判率也降低;

布隆过滤器的误判率还有专门的推导公式，有兴趣的可以去搜相关的文章和论文查看
</code></pre>
<p>HashMap 和 布隆过滤器:<br>    估计有同学看了上面的例子，会觉得使用 HashMap 也能实现;</p>
<pre><code>确实，当数据量不大时，HashMap 实现起来一点问题都没有，而且还没有误判率，简直完美，还要个鸡儿布隆过滤器;

不过，当数据量上去后，布隆过滤器的空间优势就会开始体现，特别是要存储的 key 占用空间越大，布隆过滤器的优势越明显;

Guava 中的 BloomFilter 在默认情况下，误判率接近3%，大概要使用5个 Hash 函数;

也就是说一个 key 最多占用空间就是 5 bit，而且当多个 key 填充同一个 bit 时，会进一步降低使用空间;

布隆过滤器占用多少空间，主要取决于 Hash 函数的个数，跟 key 本身的大小无关，这使得其在空间的优势非常大;
</code></pre>
<p>缓存击穿:<br>    描述：某一个热点 key，在缓存过期的一瞬间，同时有大量的请求打进来，由于此时缓存过期了，所以请求最终都会走到数据库，造成瞬时数据库请求量大、压力骤增，甚至可能打垮数据库。</p>
<pre><code>解决方案：
1、加互斥锁。在并发的多个请求中，只有第一个请求线程能拿到锁并执行数据库查询操作，其他的线程拿不到锁就阻塞等着，等到第一个线程将数据写入缓存后，直接走缓存;

关于互斥锁的选择，网上看到的大部分文章都是选择 Redis 分布式锁（可以参考我之前的文章：面试必问的分布式锁，你懂了吗？），
因为这个可以保证只有一个请求会走到数据库，这是一种思路;

但是其实仔细想想的话，这边其实没有必要保证只有一个请求走到数据库，只要保证走到数据库的请求能大大降低即可，所以还有另一个思路是 JVM 锁;

JVM 锁保证了在单台服务器上只有一个请求走到数据库，通常来说已经足够保证数据库的压力大大降低，同时在性能上比分布式锁更好;

需要注意的是，无论是使用“分布式锁”，还是“JVM 锁”，加锁时要按 key 维度去加锁;

我看网上很多文章都是使用一个“固定的 key”加锁，这样会导致不同的 key 之间也会互相阻塞，造成性能严重损耗。

2、热点数据不过期。直接将缓存设置为不过期，然后由定时任务去异步加载数据，更新缓存。

这种方式适用于比较极端的场景，例如流量特别特别大的场景，使用时需要考虑业务能接受数据不一致的时间，还有就是异常情况的处理，不要到时候缓存刷新不上，一直是脏数据，那就凉了。
</code></pre>
<p>缓存雪崩:<br>    描述：大量的热点 key 设置了相同的过期时间，导在缓存在同一时刻全部失效，造成瞬时数据库请求量大、压力骤增，引起雪崩，甚至导致数据库被打挂;</p>
<pre><code>缓存雪崩其实有点像“升级版的缓存击穿”，缓存击穿是一个热点 key，缓存雪崩是一组热点 key;

解决方案：

1、过期时间打散。既然是大量缓存集中失效，那最容易想到就是让他们不集中生效。可以给缓存的过期时间时加上一个随机值时间，使得每个 key 的过期时间分布开来，不会集中在同一时刻失效;

2、热点数据不过期。该方式和缓存击穿一样，也是要着重考虑刷新的时间间隔和数据异常如何处理的情况;

3、加互斥锁。该方式和缓存击穿一样，按 key 维度加锁，对于同一个 key，只允许一个线程去计算，其他线程原地阻塞等待
第一个线程的计算结果，然后直接走缓存即可;
</code></pre>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>RocketMQ消费者概述</title>
    <url>/2022/01/23/RocketMQ/RocketMQ%E6%B6%88%E8%B4%B9%E8%80%85%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h3 id="几个关键概念"><a href="#几个关键概念" class="headerlink" title="几个关键概念"></a>几个关键概念</h3><p><img src="/images/RocketMQ/20220123-1.png" alt="image-20220123-1"></p>
<p>● 消费者组：一个逻辑概念，在使用消费者时需要指定一个组名。一个消费者组可以订阅多个Topic。<br>● 消费者实例：一个消费者组程序部署了多个进程，每个进程都可以称为一个消费者实例。<br>● 订阅关系：一个消费者组订阅一个 Topic 的某一个 Tag，这种记录被称为订阅关系。<br>PS：RocketMQ规定消费订阅关系（消费者组名-Topic-Tag）必须一致，一定要重视这个问题，一个消费者组中的实例订阅的Topic和Tag必须完全一致，否则就是订阅关系不一致。订阅关系不一致会导致消费消息紊乱。</p>
<h3 id="消费模式"><a href="#消费模式" class="headerlink" title="消费模式"></a>消费模式</h3><p>RocketMQ目前支持集群消费模式和广播消费模式，其中集群消费模式使用最为广泛。</p>
<h3 id="集群消费模式"><a href="#集群消费模式" class="headerlink" title="集群消费模式"></a>集群消费模式</h3><p>在同一个消费者组中的消费者实例，是负载均衡（策略可以配置）地消费Topic中的消息，假如有一个生产者（Producer）发送了 120 条消息，其所属的 Topic 有 3 个消费者（Consumer）组，每个消费者组设置为集群消费，分别有2个消费者实例。</p>
<p><img src="/images/RocketMQ/20220123-2.png" alt="image-20220123-2"></p>
<p>Consumer Group 1的两个实例分别负载均衡地消费60条消息。由此我们可以得出使用负载均衡策略时，每个消费者实例消费消息数=生产消息数/消费者实例数，在本例中是60=120/2。目前大部分场景都适合集群消费模式，RocketMQ 的消费模式默认是集群消费。比如异步通信、削峰等对消息没有顺序要求的场景都适合集群消费。因为集群模式的消费进度是保存在Broker端的，所以即使应用崩溃，消费进度也不会出错。</p>
<h3 id="广播消费模式"><a href="#广播消费模式" class="headerlink" title="广播消费模式"></a>广播消费模式</h3><p><img src="/images/RocketMQ/20220123-3.png" alt="image-20220123-3"></p>
<p>广播消费，顾名思义全部的消息都是广播分发，即消费者组中的全部消费者实例将消费整个Topic的全部消息。比如，有一个生产者生产了120条消息，其所属的Topic有3个消费者组，每个消费者组设置为广播消费，分别有两个消费者实例，Consumer Group 1中的消费者1和消费者2分别消费120条消息。整个消费者组收到消息120×2=240条。由此我们可以得出广播消费时，每个消费者实例的消费消息数=生产者生产的消息数，整个消费者组中所有实例消费消息数=每个消费者实例消费消息数×消费者实例数，本例中是240=120×2。广播消费比较适合各个消费者实例都需要通知的场景，比如刷新应用服务器中的缓存</p>
<p><img src="/images/RocketMQ/20220123-4.png" alt="image-20220123-4"></p>
<p>生产者发一个刷新缓存的广播消息，消费者组如果设置为广播消费，那么每个应用服务中的消费者都可以消费这个消息，也都能刷新缓存。广播消费的消费进度保存在客户端机器的文件中。如果文件弄丢了，那么消费进度就丢失了，可能会导致部分消息没有消费。</p>
<h3 id="可靠消费"><a href="#可靠消费" class="headerlink" title="可靠消费"></a>可靠消费</h3><p>RocketMQ是一种十分可靠的消息队列中间件，消费侧通过重试-死信机制、Rebalance机制等多种机制保证消费的可靠性。</p>
<h3 id="重试-死信机制"><a href="#重试-死信机制" class="headerlink" title="重试-死信机制"></a>重试-死信机制</h3><p>我们假设有一个场景，在消费消息时由于网络不稳定导致一条消息消费失败。此时是让生产者重新手动发消息呢，还是自己做数据补偿？RocketMQ 告诉你，消费不是一锤子买卖。横向看，RocketMQ的消费过程分为3个阶段：正常消费、重试消费和死信。在引进了正常Topic、重试队列、死信队列后，消费过程的可靠性提高了。</p>
<p><img src="/images/RocketMQ/20220123-5.png" alt="image-20220123-5"></p>
<p>● 正常Topic：正常消费者订阅的Topic名字。<br>● 重试Topic：如果由于各种意外导致消息消费失败，那么该消息会自动被保存到重试Topic中，格式为“%RETRY%消费者组”，在订阅的时候会自动订阅这个重试Topic。</p>
<p>进入重试队列的消息有16次重试机会，每次都会按照一定的时间间隔进行。RocketMQ认为消费不是一锤子买卖，可能由于各种偶然因素导致正常消费失败，只要正常消费或者重试消费中有一次消费成功，就算消费成功。</p>
<p><img src="/images/RocketMQ/20220123-6.png" alt="image-20220123-6"></p>
<p>死信Topic：死信Topic名字格式为“%DLQ%消费者组名”。如果正常消费1次失败，重试16次失败，那么消息会被保存到死信Topic中，进入死信Topic的消息不能被再次消费。RocketMQ认为，如果17次机会都失败了，说明生产者发送消息的格式发生了变化，或者消费服务出现了问题，需要人工介入处理。</p>
<h3 id="Rebalance机制"><a href="#Rebalance机制" class="headerlink" title="Rebalance机制"></a>Rebalance机制</h3><p>Rebalance（重平衡）机制，用于在发生Broker掉线、Topic扩容和缩容、消费者扩容和缩容等变化时，自动感知并调整自身消费，以尽量减少甚至避免消息没有被消费。</p>
<h3 id="两种消息获取方式"><a href="#两种消息获取方式" class="headerlink" title="两种消息获取方式"></a>两种消息获取方式</h3><p>● DefaultMQPullConsumer<br>该消费者使用时需要用户主动从Broker中Pull消息和消费消息，提交消费位点。用户主动Pull消息，自主管理位点，可以灵活地掌控消费进度和消费速度，适合流计算、消费特别耗时等特殊的消费场景。缺点也显而易见，需要从代码层面精准地控制消费，对开发人员有一定要求。在RocketMQ中org.apache.rocketmq.client.consumer.DefaultMQPullConsumer是默认的Pull消费者实现类。<br>● DefaultMQPushConsumer<br>由Broker主动向消费者推送最新的消息。代码接入非常简单，适合大部分业务场景。缺点是灵活度差，在了解其消费原理后，排查消费问题方可简单快捷。在RocketMQ中org.apache.rocketmq.client.consumer.DefaultMQPushConsumer是默认的Push消费者实现类。</p>
<p><img src="/images/RocketMQ/20220123-7.png" alt="image-20220123-7"></p>
]]></content>
      <tags>
        <tag>RocketMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RocketMQ集群消费模式与广播消费模式</title>
    <url>/2022/01/23/RocketMQ/RocketMQ%E9%9B%86%E7%BE%A4%E6%B6%88%E8%B4%B9%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%B9%BF%E6%92%AD%E6%B6%88%E8%B4%B9%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p><img src="/images/RocketMQ/20220123-8.png" alt="image-20220123-8"></p>
<h3 id="生产者CmProducer"><a href="#生产者CmProducer" class="headerlink" title="生产者CmProducer"></a>生产者CmProducer</h3><p>生产者是一致的，循环生成10条普通消息投给给Broker，主题为：cm-sample-data ，Tag：test ，Key：n</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CmProducer</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">        <span class="comment">//DefaultMQProducer用于发送非事务消息 </span></span><br><span class="line">        DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">&quot;cm-producer-group&quot;</span>); </span><br><span class="line">        <span class="comment">//注册NameServer地址 </span></span><br><span class="line">        producer.setNamesrvAddr(<span class="string">&quot;192.168.31.103:9876&quot;</span>); </span><br><span class="line">        <span class="comment">//异步发送失败后Producer自动重试2次 </span></span><br><span class="line">        producer.setRetryTimesWhenSendAsyncFailed(<span class="number">2</span>); </span><br><span class="line">        <span class="keyword">try</span> &#123; </span><br><span class="line">            <span class="comment">//启动生产者实例 </span></span><br><span class="line">            producer.start(); </span><br><span class="line">            <span class="keyword">for</span>(Integer i = <span class="number">0</span> ; i &lt; <span class="number">10</span> ; i++) &#123; </span><br><span class="line">                <span class="comment">//消息数据 </span></span><br><span class="line">                String data = <span class="string">&quot;第&quot;</span> + i + <span class="string">&quot;条消息数据&quot;</span>; </span><br><span class="line">                <span class="comment">//消息主题 </span></span><br><span class="line">                Message message = <span class="keyword">new</span> Message(<span class="string">&quot;cm-sample-data&quot;</span>, <span class="string">&quot;test&quot;</span>, i.toString(), data.getBytes()); </span><br><span class="line">                <span class="comment">//发送结果 </span></span><br><span class="line">                SendResult result = producer.send(message); </span><br><span class="line">                log.info(<span class="string">&quot;Broker响应：&quot;</span> + result); </span><br><span class="line">            &#125; </span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123; </span><br><span class="line">            e.printStackTrace(); </span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123; </span><br><span class="line">            <span class="keyword">try</span> &#123; </span><br><span class="line">				<span class="comment">//关闭连接 </span></span><br><span class="line">                producer.shutdown(); </span><br><span class="line">                log.info(<span class="string">&quot;连接已关闭&quot;</span>); </span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123; </span><br><span class="line">                e.printStackTrace(); </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="集群模式消费者"><a href="#集群模式消费者" class="headerlink" title="集群模式消费者"></a>集群模式消费者</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CmClusterConsumer</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">        <span class="comment">// 声明并初始化一个 consumer </span></span><br><span class="line">        <span class="comment">// 需要一个 consumer group 名字作为构造方法的参数 </span></span><br><span class="line">        DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">&quot;cm-cluster-consumer-group&quot;</span>); </span><br><span class="line">        <span class="comment">// 同样也要设置 NameServer 地址，须要与提供者的地址列表保持一致 </span></span><br><span class="line">        consumer.setNamesrvAddr(<span class="string">&quot;192.168.31.103:9876&quot;</span>); </span><br><span class="line">        <span class="comment">//设置为集群模式（负载均衡） </span></span><br><span class="line">        consumer.setMessageModel(MessageModel.CLUSTERING); </span><br><span class="line">        <span class="comment">// 设置 consumer 所订阅的 Topic 和 Tag，*代表全部的 Tag </span></span><br><span class="line">        consumer.subscribe(<span class="string">&quot;cm-sample-data&quot;</span>, <span class="string">&quot;*&quot;</span>); </span><br><span class="line">        <span class="comment">// 注册消息监听者 </span></span><br><span class="line">        consumer.registerMessageListener(<span class="keyword">new</span> MessageListenerConcurrently() &#123; </span><br><span class="line">            <span class="meta">@Override</span> </span><br><span class="line">            <span class="function"><span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; list, ConsumeConcurrentlyContext consumeConcurrentlyContext)</span> </span>&#123; </span><br><span class="line">                list.forEach(msg-&gt;&#123; </span><br><span class="line">                    log.info(<span class="string">&quot;收到消息：&quot;</span> + <span class="keyword">new</span> String(msg.getBody())); </span><br><span class="line">                &#125;); </span><br><span class="line">                <span class="comment">// 返回消费状态 </span></span><br><span class="line">                <span class="comment">// CONSUME_SUCCESS 消费成功 </span></span><br><span class="line">                <span class="comment">// RECONSUME_LATER 消费失败，需要稍后重新消费 </span></span><br><span class="line">                <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125;); </span><br><span class="line">		<span class="comment">// 调用 start() 方法启动 consumer </span></span><br><span class="line">        consumer.start(); </span><br><span class="line">        log.info(<span class="string">&quot;集群消费者启动成功，正在监听新消息&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">启动<span class="number">1</span>-<span class="number">4</span>个实例：</span><br><span class="line">实例<span class="number">1</span>：</span><br><span class="line"><span class="number">21</span>:<span class="number">54</span>:<span class="number">58.944</span> [main] INFO com.lixiang.rocketmq.consumemode.CmClusterConsumer - 集群消费者启动成功，正在监听新消息 </span><br><span class="line"><span class="number">21</span>:<span class="number">55</span>:<span class="number">08.963</span> [ConsumeMessageThread_3] INFO com.lixiang.rocketmq.consumemode.CmClusterConsumer - 收到消息：第<span class="number">2</span>条消息数据 </span><br><span class="line"><span class="number">21</span>:<span class="number">55</span>:<span class="number">08.979</span> [ConsumeMessageThread_5] INFO om.lixiang.rocketmq.consumemode.CmClusterConsumer - 收到消息：第<span class="number">6</span>条消息数据 </span><br><span class="line">实例<span class="number">2</span>：</span><br><span class="line"><span class="number">21</span>:<span class="number">55</span>:<span class="number">01.010</span> [main] INFO com.lixiang.rocketmq.consumemode.CmClusterConsumer - 集群消费者启动成功，正在监听新消息 </span><br><span class="line"><span class="number">21</span>:<span class="number">55</span>:<span class="number">08.949</span> [ConsumeMessageThread_1] INFO com.lixiang.rocketmq.consumemode.CmClusterConsumer - 收到消息：第<span class="number">0</span>条消息数据 </span><br><span class="line"><span class="number">21</span>:<span class="number">55</span>:<span class="number">08.949</span> [ConsumeMessageThread_3] INFO com.lixiang.rocketmq.consumemode.CmClusterConsumer - 收到消息：第<span class="number">4</span>条消息数据 </span><br><span class="line"><span class="number">21</span>:<span class="number">55</span>:<span class="number">08.985</span> [ConsumeMessageThread_4] INFO com.lixiang.rocketmq.consumemode.CmClusterConsumer - 收到消息：第<span class="number">8</span>条消息数据 </span><br><span class="line">实例<span class="number">3</span>：</span><br><span class="line"><span class="number">21</span>:<span class="number">55</span>:<span class="number">02.987</span> [main] INFO com.lixiang.rocketmq.consumemode.CmClusterConsumer - 集群消费者启动成功，正在监听新消息 </span><br><span class="line"><span class="number">21</span>:<span class="number">55</span>:<span class="number">08.965</span> [ConsumeMessageThread_1] INFO com.lixiang.rocketmq.consumemode.CmClusterConsumer - 收到消息：第<span class="number">1</span>条消息数据 </span><br><span class="line"><span class="number">21</span>:<span class="number">55</span>:<span class="number">08.978</span> [ConsumeMessageThread_2] INFO com.lixiang.rocketmq.consumemode.CmClusterConsumer - 收到消息：第<span class="number">5</span>条消息数据 </span><br><span class="line"><span class="number">21</span>:<span class="number">55</span>:<span class="number">08.988</span> [ConsumeMessageThread_3] INFO com.lixiang.rocketmq.consumemode.CmClusterConsumer - 收到消息：第<span class="number">9</span>条消息数据 </span><br><span class="line">实例<span class="number">4</span>：</span><br><span class="line"><span class="number">21</span>:<span class="number">55</span>:<span class="number">04.490</span> [main] INFO com.lixiang.rocketmq.consumemode.CmClusterConsumer - 集群消费者启动成功，正在监听新消息 </span><br><span class="line"><span class="number">21</span>:<span class="number">55</span>:<span class="number">08.978</span> [ConsumeMessageThread_1] INFO com.lixiang.rocketmq.consumemode.CmClusterConsumer - 收到消息：第<span class="number">3</span>条消息数据 </span><br><span class="line"><span class="number">21</span>:<span class="number">55</span>:<span class="number">08.982</span> [ConsumeMessageThread_2] INFO com.lixiang.rocketmq.consumemode.CmClusterConsumer - 收到消息：第<span class="number">7</span>条消息数据 </span><br></pre></td></tr></table></figure>

<h3 id="广播模式消费者"><a href="#广播模式消费者" class="headerlink" title="广播模式消费者"></a>广播模式消费者</h3><p>只有setMessageModel方法传入BROADCASTING常量，其他没有任何变化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CmBroadcastConsumer</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">        <span class="comment">//...其余代码完全一样 </span></span><br><span class="line">        <span class="comment">//设置为广播模式 </span></span><br><span class="line">        consumer.setMessageModel(MessageModel.BROADCASTING); </span><br><span class="line">        <span class="comment">//...其余代码完全一样 </span></span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h3><p>1-4个实例均消费到10条消息，不过不同实例之间获取消息的前后顺序均有差别。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">21</span>:<span class="number">59</span>:<span class="number">10.398</span> [main] INFO com.lixiang.rocketmq.consumemode.CmBroadcastConsumer - 广播消费者启动成功，正在监听新消息</span><br><span class="line"><span class="number">21</span>:<span class="number">59</span>:<span class="number">16.379</span> [ConsumeMessageThread_5] INFO com.lixiang.rocketmq.consumemode.CmBroadcastConsumer - 收到消息：第<span class="number">4</span>条消息数据</span><br><span class="line"><span class="number">21</span>:<span class="number">59</span>:<span class="number">16.380</span> [ConsumeMessageThread_3] INFO com.lixiang.rocketmq.consumemode.CmBroadcastConsumer - 收到消息：第<span class="number">2</span>条消息数据</span><br><span class="line"><span class="number">21</span>:<span class="number">59</span>:<span class="number">16.380</span> [ConsumeMessageThread_1] INFO com.lixiang.rocketmq.consumemode.CmBroadcastConsumer - 收到消息：第<span class="number">0</span>条消息数据</span><br><span class="line"><span class="number">21</span>:<span class="number">59</span>:<span class="number">16.380</span> [ConsumeMessageThread_4] INFO com.lixiang.rocketmq.consumemode.CmBroadcastConsumer - 收到消息：第<span class="number">3</span>条消息数据</span><br><span class="line"><span class="number">21</span>:<span class="number">59</span>:<span class="number">16.380</span> [ConsumeMessageThread_2] INFO com.lixiang.rocketmq.consumemode.CmBroadcastConsumer - 收到消息：第<span class="number">1</span>条消息数据</span><br><span class="line"><span class="number">21</span>:<span class="number">59</span>:<span class="number">16.381</span> [ConsumeMessageThread_6] INFO com.lixiang.rocketmq.consumemode.CmBroadcastConsumer - 收到消息：第<span class="number">5</span>条消息数据</span><br><span class="line"><span class="number">21</span>:<span class="number">59</span>:<span class="number">16.386</span> [ConsumeMessageThread_7] INFO com.lixiang.rocketmq.consumemode.CmBroadcastConsumer - 收到消息：第<span class="number">6</span>条消息数据</span><br><span class="line"><span class="number">21</span>:<span class="number">59</span>:<span class="number">16.389</span> [ConsumeMessageThread_8] INFO com.lixiang.rocketmq.consumemode.CmBroadcastConsumer - 收到消息：第<span class="number">7</span>条消息数据</span><br><span class="line"><span class="number">21</span>:<span class="number">59</span>:<span class="number">16.399</span> [ConsumeMessageThread_9] INFO com.lixiang.rocketmq.consumemode.CmBroadcastConsumer - 收到消息：第<span class="number">8</span>条消息数据</span><br><span class="line"><span class="number">21</span>:<span class="number">59</span>:<span class="number">16.399</span> [ConsumeMessageThread_10] INFO com.lixiang.rocketmq.consumemode.CmBroadcastConsumer - 收到消息：第<span class="number">9</span>条消息数据</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>RocketMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RocketMQ消费者基于Tag实现消息过滤</title>
    <url>/2022/01/24/RocketMQ/RocketMQ%E6%B6%88%E8%B4%B9%E8%80%85%E5%9F%BA%E4%BA%8ETag%E5%AE%9E%E7%8E%B0%E6%B6%88%E6%81%AF%E8%BF%87%E6%BB%A4/</url>
    <content><![CDATA[<p>在发送消息时，需要设置消息的“标记Tag”，Tag用于说明消息的某项特征，消费者可以根据这个特征决定是否接收这些消息。</p>
<h3 id="消息发送者"><a href="#消息发送者" class="headerlink" title="消息发送者"></a>消息发送者</h3><p>下面案例模拟了来自“京东”、“天猫”、“淘宝”的电商模拟数据，要求负责“阿里”业务的程序消费tmall与taobao的数据，负责“京东”的程序消费“jd”的数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//消息过滤案例生产者 </span></span><br><span class="line"><span class="meta">@Slf4j</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TfProducer</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">        <span class="comment">//DefaultMQProducer用于发送非事务消息 </span></span><br><span class="line">        DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">&quot;tf-producer-group&quot;</span>); </span><br><span class="line">        <span class="comment">//注册NameServer地址 </span></span><br><span class="line">        producer.setNamesrvAddr(<span class="string">&quot;192.168.31.103:9876&quot;</span>); </span><br><span class="line">        <span class="keyword">try</span> &#123; </span><br><span class="line">            <span class="comment">//启动生产者实例 </span></span><br><span class="line">            producer.start(); </span><br><span class="line">            <span class="keyword">for</span>(Integer i = <span class="number">0</span> ; i &lt; <span class="number">10</span> ; i++) &#123; </span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                Integer rnd = <span class="keyword">new</span> Random().nextInt(<span class="number">10</span>); </span><br><span class="line">                String tag = <span class="string">&quot;&quot;</span>; </span><br><span class="line">                <span class="keyword">switch</span> (rnd % <span class="number">3</span>)&#123; </span><br><span class="line">                    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                        tag = <span class="string">&quot;jd&quot;</span>; </span><br><span class="line">                        <span class="keyword">break</span>; </span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                        tag = <span class="string">&quot;tmall&quot;</span>; </span><br><span class="line">                        <span class="keyword">break</span>; </span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                        tag = <span class="string">&quot;taobao&quot;</span>;</span><br><span class="line">                        <span class="keyword">break</span>; </span><br><span class="line">                &#125; </span><br><span class="line">                <span class="comment">//消息数据 </span></span><br><span class="line">                String data = <span class="string">&quot;第&quot;</span> + i + <span class="string">&quot;条消息数据&quot;</span>; </span><br><span class="line">                <span class="comment">//消息主题 </span></span><br><span class="line">                Message message = <span class="keyword">new</span> Message(<span class="string">&quot;tf-sample-data&quot;</span>, tag, i.toString(), data.getBytes()); </span><br><span class="line">                <span class="comment">//发送结果 </span></span><br><span class="line">                SendResult result = producer.send(message); </span><br><span class="line">                log.info(<span class="string">&quot;tag:&#123;&#125;,keys:&#123;&#125;,data:&#123;&#125;&quot;</span> , tag,i.toString(),data); </span><br><span class="line">            &#125;         </span><br><span class="line">		&#125;<span class="keyword">catch</span> (Exception e)&#123; </span><br><span class="line">            e.printStackTrace(); </span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123; </span><br><span class="line">            <span class="keyword">try</span> &#123; </span><br><span class="line">                <span class="comment">//关闭连接 </span></span><br><span class="line">                producer.shutdown(); </span><br><span class="line">                log.info(<span class="string">&quot;连接已关闭&quot;</span>); </span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123; </span><br><span class="line">                e.printStackTrace(); </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TfProducer - tag:tmall,keys:<span class="number">0</span>,data:第<span class="number">0</span>条消息数据 </span><br><span class="line">TfProducer - tag:jd,keys:<span class="number">1</span>,data:第<span class="number">1</span>条消息数据 </span><br><span class="line">TfProducer - tag:tmall,keys:<span class="number">2</span>,data:第<span class="number">2</span>条消息数据 </span><br><span class="line">TfProducer - tag:tmall,keys:<span class="number">3</span>,data:第<span class="number">3</span>条消息数据 </span><br><span class="line">TfProducer - tag:tmall,keys:<span class="number">4</span>,data:第<span class="number">4</span>条消息数据 </span><br><span class="line">TfProducer - tag:taobao,keys:<span class="number">5</span>,data:第<span class="number">5</span>条消息数据 </span><br><span class="line">TfProducer - tag:jd,keys:<span class="number">6</span>,data:第<span class="number">6</span>条消息数据 </span><br><span class="line">TfProducer - tag:tmall,keys:<span class="number">7</span>,data:第<span class="number">7</span>条消息数据 </span><br><span class="line">TfProducer - tag:tmall,keys:<span class="number">8</span>,data:第<span class="number">8</span>条消息数据 </span><br><span class="line">TfProducer - tag:jd,keys:<span class="number">9</span>,data:第<span class="number">9</span>条消息数据</span><br></pre></td></tr></table></figure>

<h3 id="消息消费者"><a href="#消息消费者" class="headerlink" title="消息消费者"></a>消息消费者</h3><p>关键在第12行代码，consumer.subscribe第二个参数指明只消费tag=jd的数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TfJDConsumer</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">        <span class="comment">// 声明并初始化一个 consumer </span></span><br><span class="line">        <span class="comment">// 需要一个 consumer group 名字作为构造方法的参数 </span></span><br><span class="line">        DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">&quot;tf-jd-consumer-group&quot;</span>); </span><br><span class="line">        <span class="comment">// 同样也要设置 NameServer 地址，须要与提供者的地址列表保持一致 </span></span><br><span class="line">        consumer.setNamesrvAddr(<span class="string">&quot;192.168.31.103:9876&quot;</span>); </span><br><span class="line">        <span class="comment">//设置为集群模式 </span></span><br><span class="line">        consumer.setMessageModel(MessageModel.CLUSTERING); </span><br><span class="line">        <span class="comment">// 设置 consumer 所订阅的 Topic 和 Tag，*代表全部的 Tag </span></span><br><span class="line">        consumer.subscribe(<span class="string">&quot;tf-sample-data&quot;</span>, <span class="string">&quot;jd&quot;</span>); </span><br><span class="line">        <span class="comment">// 注册消息监听者 </span></span><br><span class="line">        consumer.registerMessageListener(<span class="keyword">new</span> MessageListenerConcurrently() &#123; </span><br><span class="line">            <span class="meta">@Override</span> </span><br><span class="line">            <span class="function"><span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; list, ConsumeConcurrentlyContext consumeConcurrentlyContext)</span> </span>&#123; </span><br><span class="line">                list.forEach(msg-&gt;&#123; </span><br><span class="line">                    log.info( msg.getTags() + <span class="string">&quot;:&quot;</span> + <span class="keyword">new</span> String(msg.getBody())); </span><br><span class="line">                &#125;); </span><br><span class="line">                <span class="comment">// 返回消费状态 </span></span><br><span class="line">                <span class="comment">// CONSUME_SUCCESS 消费成功 </span></span><br><span class="line">                <span class="comment">// RECONSUME_LATER 消费失败，需要稍后重新消费 </span></span><br><span class="line">                <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125;); </span><br><span class="line">        <span class="comment">// 调用 start() 方法启动 consumer </span></span><br><span class="line">        consumer.start(); </span><br><span class="line">        log.info(<span class="string">&quot;集群消费者启动成功，正在监听新消息&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">17</span>:<span class="number">12</span>:<span class="number">25.209</span> [main] INFO com.lixiang.rocketmq.tagfilter.TfJDConsumer - 集群消费者启动成功，正在监听新消息</span><br><span class="line"><span class="number">17</span>:<span class="number">12</span>:<span class="number">44.418</span> [ConsumeMessageThread_1] INFO com.lixiang.rocketmq.tagfilter.TfJDConsumer - jd:第<span class="number">1</span>条消息数据 </span><br><span class="line"><span class="number">17</span>:<span class="number">12</span>:<span class="number">45.389</span> [ConsumeMessageThread_2] INFO com.lixiang.rocketmq.tagfilter.TfJDConsumer - jd:第<span class="number">6</span>条消息数据 </span><br><span class="line"><span class="number">17</span>:<span class="number">12</span>:<span class="number">47.417</span> [ConsumeMessageThread_3] INFO com.lixiang.rocketmq.tagfilter.TfJDConsumer - jd:第<span class="number">9</span>条消息数据 </span><br></pre></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">com.lixiang.rocketmq.tagfilter.TfAliConsumer</span><br><span class="line">consumer.subscribe第二个参数指明只消费tag=tmall || taobao的数据，遇到这种多个</span><br><span class="line">DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">&quot;tf-ali-consumer-group&quot;</span>); </span><br><span class="line">... </span><br><span class="line"><span class="comment">//设置为广播模式 </span></span><br><span class="line">consumer.setMessageModel(MessageModel.BROADCASTING); </span><br><span class="line">consumer.subscribe(<span class="string">&quot;tf-sample-data&quot;</span>, <span class="string">&quot;tmall || taobao&quot;</span>); </span><br><span class="line">... </span><br></pre></td></tr></table></figure>

<h3 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">17</span>:<span class="number">11</span>:<span class="number">26.136</span> [main] INFO com.lixiang.rocketmq.tagfilter.TfAliConsumer - 广播消费者启动成功，正在监听新消息</span><br><span class="line"><span class="number">17</span>:<span class="number">12</span>:<span class="number">42.376</span> [ConsumeMessageThread_1] INFO com.lixiang.rocketmq.tagfilter.TfAliConsumer - tmall:第<span class="number">0</span>条消息数据 </span><br><span class="line"><span class="number">17</span>:<span class="number">12</span>:<span class="number">43.362</span> [ConsumeMessageThread_2] INFO com.lixiang.rocketmq.tagfilter.TfAliConsumer - taobao:第<span class="number">2</span>条消息数据 </span><br><span class="line"><span class="number">17</span>:<span class="number">12</span>:<span class="number">46.403</span> [ConsumeMessageThread_3] INFO com.lixiang.rocketmq.tagfilter.TfAliConsumer - taobao:第<span class="number">3</span>条消息数据 </span><br><span class="line"><span class="number">17</span>:<span class="number">12</span>:<span class="number">48.441</span> [ConsumeMessageThread_4] INFOcom.lixiang.rocketmq.tagfilter.TfAliConsumer - taobao:第<span class="number">4</span>条消息数据 </span><br><span class="line"><span class="number">17</span>:<span class="number">12</span>:<span class="number">49.444</span> [ConsumeMessageThread_5] INFO com.lixiang.rocketmq.tagfilter.TfAliConsumer - tmall:第<span class="number">5</span>条消息数据 </span><br><span class="line"><span class="number">17</span>:<span class="number">12</span>:<span class="number">50.457</span> [ConsumeMessageThread_6] INFO com.lixiang.rocketmq.tagfilter.TfAliConsumer - tmall:第<span class="number">7</span>条消息数据 </span><br><span class="line"><span class="number">17</span>:<span class="number">12</span>:<span class="number">51.470</span> [ConsumeMessageThread_7] INFO com.lixiang.rocketmq.tagfilter.TfAliConsumer - tmall:第<span class="number">8</span>条消息数据</span><br></pre></td></tr></table></figure>

<h3 id="Tags的写法"><a href="#Tags的写法" class="headerlink" title="Tags的写法"></a>Tags的写法</h3><pre><code>* ：消费所有消息
Tag：只消费指定的Tag
Tag || Tag || Tag：只要有一个Tag符合要求就会被消费
</code></pre>
<h3 id="为什么要设置两组不同的消费者组"><a href="#为什么要设置两组不同的消费者组" class="headerlink" title="为什么要设置两组不同的消费者组"></a>为什么要设置两组不同的消费者组</h3><p>如果通过不同Tag标注的数据，往往要交由不同的消费者处理，就像当前案例中，“jd”数据被京东消费组处理，“taobao”、“tmall”被阿里消费组处理。这两个消费组可以拥有不同的处理逻辑，例如京东消费者组采用“广播模式”，所有消费者都接收到相同数据；而阿里消费者组则采用“集群模式”将消费分发给不同的消费者实现”负载均衡“功能。如果放在同一个消费者组便无法实现上述功能。</p>
<p><img src="/images/RocketMQ/20220123-9.png" alt="image-20220123-9"></p>
<h3 id="生产者日志："><a href="#生产者日志：" class="headerlink" title="生产者日志："></a>生产者日志：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">17</span>:<span class="number">22</span>:<span class="number">53.539</span> [main] INFO com.lixiang.rocketmq.tagfilter.TfProducer - tag:tmall,keys:<span class="number">0</span>,data:第<span class="number">0</span>条消息数据 </span><br><span class="line"><span class="number">17</span>:<span class="number">22</span>:<span class="number">54.564</span> [main] INFO com.lixiang.rocketmq.tagfilter.TfProducer - tag:jd,keys:<span class="number">1</span>,data:第<span class="number">1</span>条消息数据 </span><br><span class="line"><span class="number">17</span>:<span class="number">22</span>:<span class="number">55.571</span> [main] INFO com.lixiang.rocketmq.tagfilter.TfProducer - tag:tmall,keys:<span class="number">2</span>,data:第<span class="number">2</span>条消息数据 </span><br><span class="line"><span class="number">17</span>:<span class="number">22</span>:<span class="number">56.588</span> [main] INFO com.lixiang.rocketmq.tagfilter.TfProducer - tag:jd,keys:<span class="number">3</span>,data:第<span class="number">3</span>条消息数据 </span><br><span class="line"><span class="number">17</span>:<span class="number">22</span>:<span class="number">57.603</span> [main] INFO com.lixiang.rocketmq.tagfilter.TfProducer - tag:taobao,keys:<span class="number">4</span>,data:第<span class="number">4</span>条消息数据 </span><br><span class="line"><span class="number">17</span>:<span class="number">22</span>:<span class="number">58.612</span> [main] INFO com.lixiang.rocketmq.tagfilter.TfProducer - tag:tmall,keys:<span class="number">5</span>,data:第<span class="number">5</span>条消息数据 </span><br><span class="line"><span class="number">17</span>:<span class="number">22</span>:<span class="number">59.630</span> [main] INFO com.lixiang.rocketmq.tagfilter.TfProducer - tag:tmall,keys:<span class="number">6</span>,data:第<span class="number">6</span>条消息数据 </span><br><span class="line"><span class="number">17</span>:<span class="number">23</span>:<span class="number">00.650</span> [main] INFO com.lixiang.rocketmq.tagfilter.TfProducer - tag:jd,keys:<span class="number">7</span>,data:第<span class="number">7</span>条消息数据 </span><br><span class="line"><span class="number">17</span>:<span class="number">23</span>:<span class="number">01.661</span> [main] INFO com.lixiang.rocketmq.tagfilter.TfProducer - tag:jd,keys:<span class="number">8</span>,data:第<span class="number">8</span>条消息数据 </span><br><span class="line"><span class="number">17</span>:<span class="number">23</span>:<span class="number">02.673</span> [main] INFO com.lixiang.rocketmq.tagfilter.TfProducer - tag:jd,keys:<span class="number">9</span>,data:第<span class="number">9</span>条消息数据</span><br></pre></td></tr></table></figure>

<p>启动两个京东消费者实例的运行结果说明集群模式已生效。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">实例<span class="number">1</span>：</span><br><span class="line"><span class="number">17</span>:<span class="number">22</span>:<span class="number">56.633</span> [ConsumeMessageThread_1] INFO com.lixiang.rocketmq.tagfilter.TfJDConsumer - jd:第<span class="number">3</span>条消息数据 </span><br><span class="line"><span class="number">17</span>:<span class="number">23</span>:<span class="number">01.662</span> [ConsumeMessageThread_3] INFO com.lixiang.rocketmq.tagfilter.TfJDConsumer - jd:第<span class="number">8</span>条消息数据 </span><br><span class="line"><span class="number">17</span>:<span class="number">23</span>:<span class="number">02.673</span> [ConsumeMessageThread_4] INFO com.lixiang.rocketmq.tagfilter.TfJDConsumer - jd:第<span class="number">9</span>条消息数据 </span><br><span class="line">实例<span class="number">2</span>：</span><br><span class="line"><span class="number">17</span>:<span class="number">22</span>:<span class="number">54.562</span> [ConsumeMessageThread_3] INFO com.lixiang.rocketmq.tagfilter.TfJDConsumer - jd:第<span class="number">1</span>条消息数据 </span><br><span class="line"><span class="number">17</span>:<span class="number">23</span>:<span class="number">00.650</span> [ConsumeMessageThread_2] INFO com.lixiang.rocketmq.tagfilter.TfJDConsumer - jd:第<span class="number">7</span>条消息数据</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>RocketMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RocketMQ消费者基于自定义属性实现SQL过滤</title>
    <url>/2022/01/24/RocketMQ/RocketMQ%E6%B6%88%E8%B4%B9%E8%80%85%E5%9F%BA%E4%BA%8E%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7%E5%AE%9E%E7%8E%B0SQL%E8%BF%87%E6%BB%A4/</url>
    <content><![CDATA[<p>在发送消息时，发送方可以自定义消息的用户属性，消费者可以利用SQL92的WHERE子句语法实现消息过滤。<br>相比Tag过滤，消息过滤使用更加灵活，也更容易被程序猿接受，但相较Tag过滤执行效率较低。</p>
<h3 id="消息生产者"><a href="#消息生产者" class="headerlink" title="消息生产者"></a>消息生产者</h3><p>消息发送方和标准发送有两点变化：<br>● 可以不设置消息的Tag与Key，转而使用用户自定义属性，这里实现了source与id两个自定义属性的赋值<br>● 利用message.putUserProperty为用户赋予自定义属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SfProducer</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">        <span class="comment">//DefaultMQProducer用于发送非事务消息 </span></span><br><span class="line">        DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">&quot;sf-producer-group&quot;</span>); </span><br><span class="line">        <span class="comment">//注册NameServer地址 </span></span><br><span class="line">        producer.setNamesrvAddr(<span class="string">&quot;192.168.31.103:9876&quot;</span>); </span><br><span class="line">        <span class="comment">/*//异步发送失败后Producer自动重试2次 </span></span><br><span class="line"><span class="comment">        producer.setRetryTimesWhenSendAsyncFailed(2);*/</span> </span><br><span class="line">        <span class="keyword">try</span> &#123; </span><br><span class="line">            <span class="comment">//启动生产者实例 </span></span><br><span class="line">            producer.start(); </span><br><span class="line">            <span class="keyword">for</span>(Integer i = <span class="number">0</span> ; i &lt; <span class="number">10</span> ; i++) &#123; </span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                Integer rnd = <span class="keyword">new</span> Random().nextInt(<span class="number">10</span>); </span><br><span class="line">                <span class="comment">//用户自定义属性 </span></span><br><span class="line">                String source = <span class="string">&quot;&quot;</span>; </span><br><span class="line">                <span class="keyword">switch</span> (rnd % <span class="number">3</span>)&#123; </span><br><span class="line">                    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                        source = <span class="string">&quot;jd&quot;</span>; </span><br><span class="line">                        <span class="keyword">break</span>; </span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                        source = <span class="string">&quot;tmall&quot;</span>; </span><br><span class="line">                        <span class="keyword">break</span>; </span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                        source = <span class="string">&quot;taobao&quot;</span>; </span><br><span class="line">                        <span class="keyword">break</span>; </span><br><span class="line">                &#125; </span><br><span class="line">				<span class="comment">//消息数据 </span></span><br><span class="line">                String data = <span class="string">&quot;第&quot;</span> + i + <span class="string">&quot;条消息数据&quot;</span>; </span><br><span class="line">                <span class="comment">//消息主题，使用用户自定义属性时可以不设置tag与key </span></span><br><span class="line">                Message message = <span class="keyword">new</span> Message(<span class="string">&quot;sf-sample-data&quot;</span>, data.getBytes()); </span><br><span class="line">                message.putUserProperty(<span class="string">&quot;id&quot;</span> , i.toString());</span><br><span class="line">                message.putUserProperty(<span class="string">&quot;source&quot;</span>, source); </span><br><span class="line">                <span class="comment">//发送结果 </span></span><br><span class="line">                SendResult result = producer.send(message); </span><br><span class="line">                log.info(<span class="string">&quot;id:&#123;&#125;,source:&#123;&#125;,data:&#123;&#125;&quot;</span> ,i.toString(), source,data); </span><br><span class="line">            &#125; </span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123; </span><br><span class="line">            e.printStackTrace(); </span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123; </span><br><span class="line">            <span class="keyword">try</span> &#123; </span><br><span class="line">                <span class="comment">//关闭连接 </span></span><br><span class="line">                producer.shutdown(); </span><br><span class="line">                log.info(<span class="string">&quot;连接已关闭&quot;</span>); </span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123; </span><br><span class="line">                e.printStackTrace(); </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">09:<span class="number">34</span>:<span class="number">52.771</span> [main] INFO com.lixiang.rocketmq.sqlfilter.SfProducer - id:<span class="number">0</span>,source:jd,data:第<span class="number">0</span>条消息数据 </span><br><span class="line">09:<span class="number">34</span>:<span class="number">53.788</span> [main] INFO com.lixiang.rocketmq.sqlfilter.SfProducer - id:<span class="number">1</span>,source:jd,data:第<span class="number">1</span>条消息数据 </span><br><span class="line">09:<span class="number">34</span>:<span class="number">54.801</span> [main] INFO com.lixiang.rocketmq.sqlfilter.SfProducer - id:<span class="number">2</span>,source:tmall,data:第<span class="number">2</span>条消息数据 </span><br><span class="line">09:<span class="number">34</span>:<span class="number">55.818</span> [main] INFO com.lixiang.rocketmq.sqlfilter.SfProducer - id:<span class="number">3</span>,source:tmall,data:第<span class="number">3</span>条消息数据 </span><br><span class="line">09:<span class="number">34</span>:<span class="number">56.836</span> [main] INFO com.lixiang.rocketmq.sqlfilter.SfProducer - id:<span class="number">4</span>,source:jd,data:第<span class="number">4</span>条消息数据 </span><br><span class="line">09:<span class="number">34</span>:<span class="number">57.850</span> [main] INFO com.lixiang.rocketmq.sqlfilter.SfProducer - id:<span class="number">5</span>,source:taobao,data:第<span class="number">5</span>条消息数据 </span><br><span class="line">09:<span class="number">34</span>:<span class="number">58.865</span> [main] INFO com.lixiang.rocketmq.sqlfilter.SfProducer - id:<span class="number">6</span>,source:taobao,data:第<span class="number">6</span>条消息数据 </span><br><span class="line">09:<span class="number">34</span>:<span class="number">59.880</span> [main] INFO com.lixiang.rocketmq.sqlfilter.SfProducer - id:<span class="number">7</span>,source:jd,data:第<span class="number">7</span>条消息数据 </span><br><span class="line">09:<span class="number">35</span>:<span class="number">00.896</span> [main] INFO com.lixiang.rocketmq.sqlfilter.SfProducer - id:<span class="number">8</span>,source:tmall,data:第<span class="number">8</span>条消息数据 </span><br><span class="line">09:<span class="number">35</span>:<span class="number">01.911</span> [main] INFO com.lixiang.rocketmq.sqlfilter.SfProducer - id:<span class="number">9</span>,source:taobao,data:第<span class="number">9</span>条消息数据 </span><br></pre></td></tr></table></figure>

<h3 id="消息消费者"><a href="#消息消费者" class="headerlink" title="消息消费者"></a>消息消费者</h3><p>默认RocketMQ并未开启自定义属性SQL过滤的选项，需要在配置文件中额外开启，如下所示：<br>master.conf:Master节点配置文件追加下面选型：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#开启自定义属性SQL过滤 </span><br><span class="line">enablePropertyFilter=<span class="keyword">true</span> </span><br><span class="line">完整如下：</span><br><span class="line">brokerClusterName=DefaultCluster </span><br><span class="line">brokerName=broker-a </span><br><span class="line">brokerId=<span class="number">0</span> </span><br><span class="line">deleteWhen=<span class="number">04</span> </span><br><span class="line">fileReservedTime=<span class="number">48</span> </span><br><span class="line">brokerRole=SYNC_MASTER </span><br><span class="line">flushDiskType=SYNC_FLUSH </span><br><span class="line">namesrvAddr=<span class="number">192.168</span><span class="number">.31</span><span class="number">.103</span>:<span class="number">9876</span> </span><br><span class="line">autoCreateTopicEnable=<span class="keyword">true</span> </span><br><span class="line">#开启自定义属性SQL过滤 </span><br><span class="line">enablePropertyFilter=<span class="keyword">true</span> </span><br><span class="line">slave.conf：Slave节点也要追加该配置项，别忘记</span><br></pre></td></tr></table></figure>

<h3 id="京东消费者"><a href="#京东消费者" class="headerlink" title="京东消费者"></a>京东消费者</h3><p>京东消费者负责消费source=’jd’的数据，和标准消费者最大的不同便是在subscribe方法第二个参数不再是Tag，而改为MessageSelector.bySql方法，利用WHERE子句写法对自定义属性实现过滤，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SfJDConsumer</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">        DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">&quot;sf-jd-consumer-group&quot;</span>); </span><br><span class="line">        consumer.setNamesrvAddr(<span class="string">&quot;192.168.31.103:9876&quot;</span>); </span><br><span class="line">        consumer.setMessageModel(MessageModel.CLUSTERING); </span><br><span class="line">        <span class="comment">//利用SQL WHERE子句写法对自定义属性进行过滤 </span></span><br><span class="line">        consumer.subscribe(<span class="string">&quot;sf-sample-data&quot;</span>, MessageSelector.bySql(<span class="string">&quot;source=&#x27;jd&#x27;&quot;</span>)); </span><br><span class="line">        consumer.registerMessageListener(<span class="keyword">new</span> MessageListenerConcurrently() &#123; </span><br><span class="line">            <span class="meta">@Override</span> </span><br><span class="line">            <span class="function"><span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; list, ConsumeConcurrentlyContext consumeConcurrentlyContext)</span> </span>&#123; </span><br><span class="line">                list.forEach(msg-&gt;&#123; </span><br><span class="line">                    log.info(<span class="string">&quot;id:&#123;&#125;,source:&#123;&#125;,data:&#123;&#125;&quot;</span> ,msg.getUserProperty(<span class="string">&quot;id&quot;</span>),msg.getUserProperty(<span class="string">&quot;source&quot;</span>), <span class="keyword">new</span> String(msg.getBody()));&#125;); </span><br><span class="line">                <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125;); </span><br><span class="line">        consumer.start(); </span><br><span class="line">        log.info(<span class="string">&quot;集群消费者启动成功，正在监听新消息&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">09:<span class="number">34</span>:<span class="number">52.770</span> [ConsumeMessageThread_2] INFO com.lixiang.rocketmq.sqlfilter.SfJDConsumer - id:<span class="number">0</span>,source:jd,data:第<span class="number">0</span>条消息数据 </span><br><span class="line">09:<span class="number">34</span>:<span class="number">53.788</span> [ConsumeMessageThread_3] INFO com.lixiang.rocketmq.sqlfilter.SfJDConsumer - id:<span class="number">1</span>,source:jd,data:第<span class="number">1</span>条消息数据 </span><br><span class="line">09:<span class="number">34</span>:<span class="number">56.836</span> [ConsumeMessageThread_4] INFO com.lixiang.rocketmq.sqlfilter.SfJDConsumer - id:<span class="number">4</span>,source:jd,data:第<span class="number">4</span>条消息数据 </span><br><span class="line">09:<span class="number">34</span>:<span class="number">59.880</span> [ConsumeMessageThread_5] INFO com.lixiang.rocketmq.sqlfilter.SfJDConsumer - id:<span class="number">7</span>,source:jd,data:第<span class="number">7</span>条消息数据</span><br></pre></td></tr></table></figure>

<h3 id="阿里消费者"><a href="#阿里消费者" class="headerlink" title="阿里消费者"></a>阿里消费者</h3><p>京东消费者负责消费天与猫淘宝的数据，与京东消费者最明显的区别是：<br>● 因为业务范围不同，消费者组不一样；<br>● bySQL的要获取多个数值，可用下面语法<br>    ● source in (‘tmall’,’taobao’)<br>    ● source = ‘tmall’ or source = ‘taobao’</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">... </span><br><span class="line">DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">&quot;sf-ali-consumer-group&quot;</span>); </span><br><span class="line">... </span><br><span class="line">consumer.subscribe(<span class="string">&quot;sf-sample-data&quot;</span>, MessageSelector.bySql(<span class="string">&quot;source in (&#x27;tmall&#x27; </span></span><br><span class="line"><span class="string">,&#x27;taobao&#x27;)&quot;</span>)); </span><br></pre></td></tr></table></figure>

<h3 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">09:<span class="number">34</span>:<span class="number">54.803</span> [ConsumeMessageThread_14] INFO com.lixiang.rocketmq.sqlfilter.SfAliConsumer - id:<span class="number">2</span>,source:tmall,data:第<span class="number">2</span>条消息数据 </span><br><span class="line">09:<span class="number">34</span>:<span class="number">55.819</span> [ConsumeMessageThread_15] INFO com.lixiang.rocketmq.sqlfilter.SfAliConsumer - id:<span class="number">3</span>,source:tmall,data:第<span class="number">3</span>条消息数据 </span><br><span class="line">09:<span class="number">34</span>:<span class="number">57.850</span> [ConsumeMessageThread_16] INFO com.lixiang.rocketmq.sqlfilter.SfAliConsumer - id:<span class="number">5</span>,source:taobao,data:第<span class="number">5</span>条消息数据 </span><br><span class="line">09:<span class="number">34</span>:<span class="number">58.865</span> [ConsumeMessageThread_17] INFO com.lixiang.rocketmq.sqlfilter.SfAliConsumer - id:<span class="number">6</span>,source:taobao,data:第<span class="number">6</span>条消息数据 </span><br><span class="line">09:<span class="number">35</span>:<span class="number">00.896</span> [ConsumeMessageThread_18] INFO com.lixiang.rocketmq.sqlfilter.SfAliConsumer - id:<span class="number">8</span>,source:tmall,data:第<span class="number">8</span>条消息数据 </span><br><span class="line">09:<span class="number">35</span>:<span class="number">01.911</span> [ConsumeMessageThread_19] INFO com.lixiang.rocketmq.sqlfilter.SfAliConsumer - id:<span class="number">9</span>,source:taobao,data:第<span class="number">9</span>条消息数据 </span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>RocketMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RocketMQ消费者端如何接收有序消息</title>
    <url>/2022/01/29/RocketMQ/RocketMQ%E6%B6%88%E8%B4%B9%E8%80%85%E7%AB%AF%E5%A6%82%E4%BD%95%E6%8E%A5%E6%94%B6%E6%9C%89%E5%BA%8F%E6%B6%88%E6%81%AF/</url>
    <content><![CDATA[<h3 id="队列消费的两种模式"><a href="#队列消费的两种模式" class="headerlink" title="队列消费的两种模式"></a>队列消费的两种模式</h3><p>● 并发消费模式<br>当同一类消息被送入不同队列，且这些消息在处理上并不需要按时序消费时，可以考虑使用并发消费模式。并发消费模式生产者会将消息轮询发送到不同的队列当中，这些队列会和消费者实例建立多个连接（线程）将消息并发送入到不同的消费者。因为消费者处理速度有快慢，所以并不能保证物流数据会按0~9的顺序依次消费。并发消费模式处理效率很高，但无法保证有序性。</p>
<p><img src="/images/RocketMQ/20220129-1.png" alt="image-20220129-1"></p>
<p>● 有序消费模式<br>有序消息是指生产者在产生数据的时候，根据Hash规则指定让消息放入哪个队列，在消费者消费时会保证不同消费者针对每一个队列只有唯一的连接（线程）用于消费指定队列。有序消费模式可以保证消息按队列FIFO顺序依次被消费，但因此失去并发性能，有序消费模式只有在业务要求必须按顺序消费的场景下才允许使用。</p>
<p><img src="/images/RocketMQ/20220129-2.png" alt="image-20220129-2"></p>
<h3 id="RocketMQ如何实现有序消息"><a href="#RocketMQ如何实现有序消息" class="headerlink" title="RocketMQ如何实现有序消息"></a>RocketMQ如何实现有序消息</h3><p>要实现RocketMQ有序消息需要两点调整：<br>● 生产者端要求按id等唯一标识分配消息队列<br>● 消费者端采用专用的监听器保证对队列的单线程应用</p>
<h3 id="生产者端"><a href="#生产者端" class="headerlink" title="生产者端"></a>生产者端</h3><p>核心代码是在向Broker发送消息时附加MessageQueueSelector对象，在实现select方法时指定存放到哪个队列中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span> </span><br><span class="line"><span class="comment">// 发送分区顺序消息 </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SequenceMessageProvider</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">        <span class="comment">// 前置准备代码 </span></span><br><span class="line">        DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">&quot;producer-group&quot;</span>); </span><br><span class="line">        producer.setNamesrvAddr(<span class="string">&quot;192.168.31.103:9876&quot;</span>); </span><br><span class="line">        <span class="keyword">try</span> &#123; </span><br><span class="line">            producer.start(); </span><br><span class="line">            <span class="comment">// 模拟10笔订单 </span></span><br><span class="line">            <span class="keyword">for</span> (Integer orderId = <span class="number">1</span>; orderId &lt;= <span class="number">10</span>; orderId++) &#123; </span><br><span class="line">                <span class="comment">// 每笔订单要发送3条消息：(1)创建订单 (2)订单库存扣减 (3)加积分 </span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">3</span> ; i++) &#123; </span><br><span class="line">                    String data = <span class="string">&quot;&quot;</span>; </span><br><span class="line">                    <span class="keyword">switch</span> (i % <span class="number">3</span>) &#123; </span><br><span class="line">                        <span class="keyword">case</span> <span class="number">0</span>: </span><br><span class="line">                            data = orderId + <span class="string">&quot;号创建订单&quot;</span>; </span><br><span class="line">                            <span class="keyword">break</span>; </span><br><span class="line">                        <span class="keyword">case</span> <span class="number">1</span>: </span><br><span class="line">                            data = orderId + <span class="string">&quot;号订单减库存&quot;</span>; </span><br><span class="line">							<span class="keyword">break</span>; </span><br><span class="line">                        <span class="keyword">case</span> <span class="number">2</span>: </span><br><span class="line">                            data = orderId + <span class="string">&quot;号订单加积分&quot;</span>; </span><br><span class="line">                            <span class="keyword">break</span>; </span><br><span class="line">                    &#125; </span><br><span class="line">                    <span class="comment">//创建消息对象 topic=&quot;order&quot;,tags=&quot;order&quot;,key=orderId </span></span><br><span class="line">                    Message message = <span class="keyword">new</span> Message(<span class="string">&quot;order&quot;</span>,<span class="string">&quot;order&quot;</span>,orderId.toString(), data.getBytes(<span class="string">&quot;UTF-8&quot;</span>)); </span><br><span class="line">                    <span class="comment">//发送消息，实现MessageQueueSelector接口 </span></span><br><span class="line">                    SendResult result = producer.send(message, <span class="keyword">new</span> MessageQueueSelector() &#123; </span><br><span class="line">                        <span class="comment">//select方法决定向broker哪一个队列发送消息 </span></span><br><span class="line">                        <span class="meta">@Override</span> </span><br><span class="line">                        <span class="function"><span class="keyword">public</span> MessageQueue <span class="title">select</span><span class="params">(List&lt;MessageQueue&gt; mqs, Message msg, Object arg)</span> </span>&#123; </span><br><span class="line">                            <span class="keyword">int</span> orderId = Integer.parseInt(msg.getKeys()); </span><br><span class="line">                            <span class="keyword">int</span> index = orderId % mqs.size(); </span><br><span class="line">                            MessageQueue messageQueue = mqs.get(index); </span><br><span class="line">                            log.info(<span class="string">&quot;id:&#123;&#125;,data:&#123;&#125;,queue:&#123;&#125;&quot;</span>, orderId ,<span class="keyword">new</span> String(msg.getBody()), messageQueue); </span><br><span class="line">                            <span class="keyword">return</span> messageQueue; </span><br><span class="line">                        &#125; </span><br><span class="line">                    &#125;, <span class="keyword">null</span>); </span><br><span class="line">                &#125; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123; </span><br><span class="line">            e.printStackTrace(); </span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123; </span><br><span class="line">            <span class="keyword">try</span> &#123; </span><br><span class="line">                producer.shutdown(); </span><br><span class="line">                System.out.println(<span class="string">&quot;连接已关闭&quot;</span>); </span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123; </span><br><span class="line">                e.printStackTrace(); </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">id:<span class="number">1</span>,data:<span class="number">1</span>号创建订单,queue:MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">1</span>] </span><br><span class="line">id:<span class="number">1</span>,data:<span class="number">1</span>号订单减库存,queue:MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">1</span>] </span><br><span class="line">id:<span class="number">1</span>,data:<span class="number">1</span>号订单加积分,queue:MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">1</span>] </span><br><span class="line">id:<span class="number">2</span>,data:<span class="number">2</span>号创建订单,queue:MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">2</span>] </span><br><span class="line">id:<span class="number">2</span>,data:<span class="number">2</span>号订单减库存,queue:MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">2</span>] </span><br><span class="line">id:<span class="number">2</span>,data:<span class="number">2</span>号订单加积分,queue:MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">2</span>] </span><br><span class="line">id:<span class="number">3</span>,data:<span class="number">3</span>号创建订单,queue:MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">0</span>] </span><br><span class="line">id:<span class="number">3</span>,data:<span class="number">3</span>号订单减库存,queue:MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">0</span>] </span><br><span class="line">id:<span class="number">3</span>,data:<span class="number">3</span>号订单加积分,queue:MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">0</span>] </span><br><span class="line">id:<span class="number">4</span>,data:<span class="number">4</span>号创建订单,queue:MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">1</span>] </span><br><span class="line">id:<span class="number">4</span>,data:<span class="number">4</span>号订单减库存,queue:MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">1</span>] </span><br><span class="line">id:<span class="number">4</span>,data:<span class="number">4</span>号订单加积分,queue:MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">1</span>] </span><br><span class="line">id:<span class="number">5</span>,data:<span class="number">5</span>号创建订单,queue:MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">2</span>] </span><br><span class="line">id:<span class="number">5</span>,data:<span class="number">5</span>号订单减库存,queue:MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">2</span>] </span><br><span class="line">id:<span class="number">5</span>,data:<span class="number">5</span>号订单加积分,queue:MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">2</span>] </span><br><span class="line">id:<span class="number">6</span>,data:<span class="number">6</span>号创建订单,queue:MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">0</span>] </span><br><span class="line">id:<span class="number">6</span>,data:<span class="number">6</span>号订单减库存,queue:MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">0</span>] </span><br><span class="line">id:<span class="number">6</span>,data:<span class="number">6</span>号订单加积分,queue:MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">0</span>] </span><br><span class="line">id:<span class="number">7</span>,data:<span class="number">7</span>号创建订单,queue:MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">1</span>] </span><br><span class="line">id:<span class="number">7</span>,data:<span class="number">7</span>号订单减库存,queue:MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">1</span>] </span><br><span class="line">id:<span class="number">7</span>,data:<span class="number">7</span>号订单加积分,queue:MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">1</span>] </span><br><span class="line">id:<span class="number">8</span>,data:<span class="number">8</span>号创建订单,queue:MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">2</span>] </span><br><span class="line">id:<span class="number">8</span>,data:<span class="number">8</span>号订单减库存,queue:MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">2</span>] </span><br><span class="line">id:<span class="number">8</span>,data:<span class="number">8</span>号订单加积分,queue:MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">2</span>] </span><br><span class="line">id:<span class="number">9</span>,data:<span class="number">9</span>号创建订单,queue:MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">0</span>] </span><br><span class="line">id:<span class="number">9</span>,data:<span class="number">9</span>号订单减库存,queue:MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">0</span>] </span><br><span class="line">id:<span class="number">9</span>,data:<span class="number">9</span>号订单加积分,queue:MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">0</span>] </span><br><span class="line">id:<span class="number">10</span>,data:<span class="number">10</span>号创建订单,queue:MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">1</span>] </span><br><span class="line">id:<span class="number">10</span>,data:<span class="number">10</span>号订单减库存,queue:MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">1</span>] </span><br><span class="line">id:<span class="number">10</span>,data:<span class="number">10</span>号订单加积分,queue:MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">1</span>] </span><br></pre></td></tr></table></figure>

<h3 id="消费者端"><a href="#消费者端" class="headerlink" title="消费者端"></a>消费者端</h3><p>消费者端最大的变化是registerMessageListener监听器要实例化MessageListenerOrderly对象，用于为每一个队列分配唯一的连接（线程）进行消费。每一批消息从Broker投递给消费者都会触发consumeMessage()方法实现对消息的消费。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SequenceMessageConsumer</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">        <span class="comment">// 声明并初始化一个 consumer </span></span><br><span class="line">        <span class="comment">// 需要一个 consumer group 名字作为构造方法的参数 </span></span><br><span class="line">        DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">&quot;consumer-group&quot;</span>); </span><br><span class="line">        <span class="comment">// 同样也要设置 NameServer 地址，须要与提供者的地址列表保持一致 </span></span><br><span class="line">        consumer.setNamesrvAddr(<span class="string">&quot;192.168.31.103:9876&quot;</span>); </span><br><span class="line">        <span class="comment">// 设置 consumer 所订阅的 Topic 和 Tag，*代表全部的 Tag </span></span><br><span class="line">        consumer.subscribe(<span class="string">&quot;order&quot;</span>, <span class="string">&quot;*&quot;</span>); </span><br><span class="line">        <span class="comment">// 注册消息监听者，消费者端要增加MessageListenerOrderly监听器，用于实现有序队列</span></span><br><span class="line">        consumer.registerMessageListener(<span class="keyword">new</span> MessageListenerOrderly() &#123; </span><br><span class="line">            <span class="meta">@Override</span> </span><br><span class="line">            <span class="function"><span class="keyword">public</span> ConsumeOrderlyStatus <span class="title">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; list, ConsumeOrderlyContext context)</span> </span>&#123; </span><br><span class="line">                <span class="comment">//遍历输出 </span></span><br><span class="line">                list.forEach(msg-&gt;&#123; </span><br><span class="line">                    log.info(<span class="string">&quot;&#123;&#125;,&#123;&#125;,&#123;&#125;&quot;</span>,msg.getKeys(),<span class="keyword">new</span> String(msg.getBody()),context.getMessageQueue()); </span><br><span class="line">                &#125;); </span><br><span class="line">                <span class="comment">//确认接收成功 </span></span><br><span class="line">                <span class="keyword">return</span> ConsumeOrderlyStatus.SUCCESS; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125;); </span><br><span class="line">        <span class="comment">// 启动消费者 </span></span><br><span class="line">        consumer.start(); </span><br><span class="line">        log.info(<span class="string">&quot;消费者启动成功，正在监听新消息&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>这里我们启动两个实例，查看运行结果：<br>实例1输出日志，可以发现所有queueId=2的队列消息都被实例1的ConsumeMessageThread_1线程消费，采用FIFO依次进行处理，同一个队列中的消息消费是有序的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">15</span>:<span class="number">58</span>:<span class="number">28.611</span> [main] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - 消费者启动成功，正在监听新消息</span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">49.457</span> [ConsumeMessageThread_1] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">2</span>,<span class="number">2</span>号创建订单,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">2</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">49.460</span> [ConsumeMessageThread_1] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">2</span>,<span class="number">2</span>号订单减库存,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">2</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">49.460</span> [ConsumeMessageThread_1] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">2</span>,<span class="number">2</span>号订单加积分,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">2</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">49.460</span> [ConsumeMessageThread_1] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">5</span>,<span class="number">5</span>号创建订单,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">2</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">49.460</span> [ConsumeMessageThread_1] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">5</span>,<span class="number">5</span>号订单减库存,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">2</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">49.460</span> [ConsumeMessageThread_1] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">5</span>,<span class="number">5</span>号订单加积分,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">2</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">49.460</span> [ConsumeMessageThread_1] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">8</span>,<span class="number">8</span>号创建订单,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">2</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">49.460</span> [ConsumeMessageThread_1] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">8</span>,<span class="number">8</span>号订单减库存,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">2</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">49.460</span> [ConsumeMessageThread_1] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">8</span>,<span class="number">8</span>号订单加积分,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">2</span>] </span><br></pre></td></tr></table></figure>

<p>实例2输出日志，可以发现所有queueId=1的队列消息都被实例2的ConsumeMessageThread_1线程消费，采用FIFO依次进行处理；<br>所有queueId=0的队列消息都被实例2的ConsumeMessageThread_0线程消费，采用FIFO依次进行处理，同一个队列中的消息消费是有序的，不同队列间不能保证消息有序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[main] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - 消费者启动成功，正在监听新消息</span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">31.370</span> [ConsumeMessageThread_1] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">1</span>,<span class="number">1</span>号创建订单,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">1</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">31.370</span> [ConsumeMessageThread_2] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">3</span>,<span class="number">3</span>号创建订单,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">0</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">31.373</span> [ConsumeMessageThread_2] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">3</span>,<span class="number">3</span>号订单减库存,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">0</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">31.373</span> [ConsumeMessageThread_1] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">1</span>,<span class="number">1</span>号订单减库存,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">1</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">31.373</span> [ConsumeMessageThread_2] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">3</span>,<span class="number">3</span>号订单加积分,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">0</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">31.373</span> [ConsumeMessageThread_1] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">1</span>,<span class="number">1</span>号订单加积分,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">1</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">31.373</span> [ConsumeMessageThread_2] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">6</span>,<span class="number">6</span>号创建订单,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">0</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">31.373</span> [ConsumeMessageThread_1] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">4</span>,<span class="number">4</span>号创建订单,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">1</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">31.373</span> [ConsumeMessageThread_2] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">6</span>,<span class="number">6</span>号订单减库存,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">0</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">31.373</span> [ConsumeMessageThread_1] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">4</span>,<span class="number">4</span>号订单减库存,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">1</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">31.373</span> [ConsumeMessageThread_2] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">6</span>,<span class="number">6</span>号订单加积分,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">0</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">31.373</span> [ConsumeMessageThread_1] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">4</span>,<span class="number">4</span>号订单加积分,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">1</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">31.373</span> [ConsumeMessageThread_2] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">9</span>,<span class="number">9</span>号创建订单,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">0</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">31.373</span> [ConsumeMessageThread_1] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">7</span>,<span class="number">7</span>号创建订单,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">1</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">31.373</span> [ConsumeMessageThread_2] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">9</span>,<span class="number">9</span>号订单减库存,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">0</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">31.373</span> [ConsumeMessageThread_1] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">7</span>,<span class="number">7</span>号订单减库存,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">1</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">31.373</span> [ConsumeMessageThread_2] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">9</span>,<span class="number">9</span>号订单加积分,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">0</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">31.373</span> [ConsumeMessageThread_1] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">7</span>,<span class="number">7</span>号订单加积分,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">1</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">31.373</span> [ConsumeMessageThread_2] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">3</span>,<span class="number">3</span>号创建订单,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">0</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">31.373</span> [ConsumeMessageThread_1] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">10</span>,<span class="number">10</span>号创建订单,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">1</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">31.373</span> [ConsumeMessageThread_2] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">3</span>,<span class="number">3</span>号订单减库存,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">0</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">31.373</span> [ConsumeMessageThread_1] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">10</span>,<span class="number">10</span>号订单减库存,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">1</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">31.373</span> [ConsumeMessageThread_2] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">3</span>,<span class="number">3</span>号订单加积分,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">0</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">31.373</span> [ConsumeMessageThread_1] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">10</span>,<span class="number">10</span>号订单加积分,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">1</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">31.373</span> [ConsumeMessageThread_2] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">6</span>,<span class="number">6</span>号创建订单,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">0</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">31.373</span> [ConsumeMessageThread_1] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">1</span>,<span class="number">1</span>号创建订单,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">1</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">31.373</span> [ConsumeMessageThread_2] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">6</span>,<span class="number">6</span>号订单减库存,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">0</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">31.373</span> [ConsumeMessageThread_1] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">1</span>,<span class="number">1</span>号订单减库存,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">1</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">31.373</span> [ConsumeMessageThread_2] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">6</span>,<span class="number">6</span>号订单加积分,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">0</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">31.373</span> [ConsumeMessageThread_1] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">1</span>,<span class="number">1</span>号订单加积分,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">1</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">31.373</span> [ConsumeMessageThread_2] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">9</span>,<span class="number">9</span>号创建订单,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">0</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">31.373</span> [ConsumeMessageThread_1] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">4</span>,<span class="number">4</span>号创建订单,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">1</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">31.373</span> [ConsumeMessageThread_2] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">9</span>,<span class="number">9</span>号订单减库存,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">0</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">31.373</span> [ConsumeMessageThread_1] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">4</span>,<span class="number">4</span>号订单减库存,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">1</span>] <span class="number">15</span>:<span class="number">59</span>:<span class="number">31.373</span> [ConsumeMessageThread_2] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">9</span>,<span class="number">9</span>号订单加积分,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">0</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">31.373</span> [ConsumeMessageThread_1] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">4</span>,<span class="number">4</span>号订单加积分,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">1</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">31.373</span> [ConsumeMessageThread_1] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">7</span>,<span class="number">7</span>号创建订单,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">1</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">31.374</span> [ConsumeMessageThread_1] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">7</span>,<span class="number">7</span>号订单减库存,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">1</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">31.374</span> [ConsumeMessageThread_1] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">7</span>,<span class="number">7</span>号订单加积分,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">1</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">31.374</span> [ConsumeMessageThread_1] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">10</span>,<span class="number">10</span>号创建订单,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">1</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">31.374</span> [ConsumeMessageThread_1] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">10</span>,<span class="number">10</span>号订单减库存,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">1</span>] </span><br><span class="line"><span class="number">15</span>:<span class="number">59</span>:<span class="number">31.374</span> [ConsumeMessageThread_1] INFO com.lixiang.rocketmq.seqmsg.SequenceMessageConsumer - <span class="number">10</span>,<span class="number">10</span>号订单加积分,MessageQueue [topic=order, brokerName=broker-a, queueId=<span class="number">1</span>] </span><br></pre></td></tr></table></figure>

<h3 id="如何实现消息全局顺序消费"><a href="#如何实现消息全局顺序消费" class="headerlink" title="如何实现消息全局顺序消费"></a>如何实现消息全局顺序消费</h3><p>只需要在生产者固定将所有消息发送到0号队列即可保证全局有序，这也意味着全局采用单线程消费，执行效率极差。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> MessageQueue <span class="title">select</span><span class="params">(List&lt;MessageQueue&gt; mqs, Message msg, Object arg)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    MessageQueue messageQueue = mqs.get(<span class="number">0</span>); </span><br><span class="line">    <span class="keyword">return</span> messageQueue; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h3 id="有序消费有什么使用限制吗"><a href="#有序消费有什么使用限制吗" class="headerlink" title="有序消费有什么使用限制吗"></a>有序消费有什么使用限制吗</h3><p>有序消费模式只支持集群模式（CLUSTERING），不支持广播模式（BROADCASTING），采用广播模式会无法接收到数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置为集群模式 </span></span><br><span class="line">consumer.setMessageModel(MessageModel.CLUSTERING);<span class="comment">//支持有序消息，默认模式 </span></span><br><span class="line">consumer.setMessageModel(MessageModel.BROADCASTING);<span class="comment">//不支持有序消息 </span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>RocketMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RocketMQ Push与Pull模式</title>
    <url>/2022/01/29/RocketMQ/RocketMQ%20Push%E4%B8%8EPull%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="RocketMQ在消费者层面拥有两种数据获取方式："><a href="#RocketMQ在消费者层面拥有两种数据获取方式：" class="headerlink" title="RocketMQ在消费者层面拥有两种数据获取方式："></a>RocketMQ在消费者层面拥有两种数据获取方式：</h3><p>● 推送模式Push</p>
<p><img src="/images/RocketMQ/20220129-3.png" alt="image-20220129-3"></p>
<p>推送模式顾名思义，是由Broker作为发起方，主动向消费者将最新产生的数据推送过来，Push模式使用的消费者类为DefaultMQPushConsumer，在前面我们一直在利用DefaultMQPushConsumer进行开发。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">&quot;consumer-group&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>● 拉取模式Pull</p>
<p><img src="/images/RocketMQ/20220129-4.png" alt="image-20220129-4"></p>
<p>拉取模式是指由消费者作为发起方，定时向Broker发起队列查询请求，Broker将最近还没有消费的消息返回给消费者进行处理，拉取模式最显著的特点是发起者为消费方，定时拉取最近未消费数据，Broker返回后再有消费者确认接收应答。</p>
<h3 id="Pull模式"><a href="#Pull模式" class="headerlink" title="Pull模式"></a>Pull模式</h3><p>在RocketMQ 4.6版本后，默认Pull模式不再使用DefaultMQPullConsumer拉取消息，改为使用DefaultLitePullConsumer，DefaultLitePullConsumer是更加轻量级的Pull模式消费者实现，以前使用DefaultMQPullConsumer实现Pull模式时要关注大量拉取时的开发细节，但这些在引入DefaultLitePullConsumer以后变的非常简单，RocketMQ做好了大量封装，让开发者只是用简单的几个API便可以实现复杂的拉取操作。</p>
<h3 id="生产者PullProducer"><a href="#生产者PullProducer" class="headerlink" title="生产者PullProducer"></a>生产者PullProducer</h3><p>生产者部分和标准代码相同，这里模拟发送100条税务数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">&quot;pg1&quot;</span>);</span><br><span class="line">    producer.setNamesrvAddr(<span class="string">&quot;192.168.31.103:9876&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        producer.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            String data = <span class="string">&quot;id=&quot;</span> + i + <span class="string">&quot;税务数据&quot;</span>;</span><br><span class="line">            Message message = <span class="keyword">new</span> Message(<span class="string">&quot;tax-data&quot;</span>, data.getBytes());</span><br><span class="line">            SendResult result = producer.send(message);</span><br><span class="line">            System.out.println(<span class="string">&quot;消息已发送：MsgId:&quot;</span> + result.getMsgId() + <span class="string">&quot;，发送状态:&quot;</span> + result.getSendStatus());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (MQClientException | RemotingException | MQBrokerException | InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            producer.shutdown();</span><br><span class="line">            System.out.println(<span class="string">&quot;链接已关闭&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="消费者PullConsumer"><a href="#消费者PullConsumer" class="headerlink" title="消费者PullConsumer"></a>消费者PullConsumer</h3><p>消费者部分变化较大，体现在三方面：<br>● 采用DefaultLitePullConsumer 对象拉取<br>● 调用poll方法拉取未消费数据<br>● 需要自定义获取间隔</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//采用DefaultLitePullConsumer 对象拉取消息</span></span><br><span class="line">    DefaultLitePullConsumer consumer = <span class="keyword">new</span> DefaultLitePullConsumer(<span class="string">&quot;consumer-group&quot;</span>);</span><br><span class="line">    <span class="comment">//注册NameServer地址</span></span><br><span class="line">    consumer.setNamesrvAddr(<span class="string">&quot;192.168.31.103:9876&quot;</span>);</span><br><span class="line">    <span class="comment">//订阅主题</span></span><br><span class="line">    consumer.subscribe(<span class="string">&quot;tax-data&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">    consumer.setPullBatchSize(<span class="number">100</span>);</span><br><span class="line">    <span class="comment">// 启动消费者</span></span><br><span class="line">    consumer.start();</span><br><span class="line">    log.info(<span class="string">&quot;消费者启动成功，正在监听新消息&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        ++i;</span><br><span class="line">        <span class="comment">//调用poll方法拉取未消费数据</span></span><br><span class="line">        List&lt;MessageExt&gt; list = consumer.poll();</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (list != <span class="keyword">null</span> &amp;&amp; list.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (MessageExt ext : list) &#123;</span><br><span class="line">                j++;</span><br><span class="line">                log.info(<span class="string">&quot;&#123;&#125;-&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;&quot;</span>, String.valueOf(i), String.valueOf(j), <span class="string">&quot;Queue-&quot;</span> + ext.getQueueId(), ext.getQueueOffset(), <span class="keyword">new</span> String(ext.getBody()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p>● 情况1：先启动消费者，再启动生产者通过观察可以得到，消费者轮询每个队列，每次只取1个消息进行处理，因为发送消息的时候是1条1条发送的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">14</span>:<span class="number">51</span>:<span class="number">13.689</span> [main] INFO com.lixiang.rocketmq.pull.PullConsumer - 消费者启动成功，正在监听新</span><br><span class="line"><span class="number">14</span>:<span class="number">51</span>:<span class="number">30.539</span> [main] INFO com.lixiang.rocketmq.pull.PullConsumer - <span class="number">4</span>-<span class="number">1</span>,Queue-<span class="number">3</span>,<span class="number">3425</span>,id=<span class="number">1</span>税</span><br><span class="line"><span class="number">14</span>:<span class="number">51</span>:<span class="number">30.542</span> [main] INFO com.lixiang.rocketmq.pull.PullConsumer - <span class="number">5</span>-<span class="number">1</span>,Queue-<span class="number">0</span>,<span class="number">3639</span>,id=<span class="number">2</span>税</span><br><span class="line"><span class="number">14</span>:<span class="number">51</span>:<span class="number">30.544</span> [main] INFO com.lixiang.rocketmq.pull.PullConsumer - <span class="number">6</span>-<span class="number">1</span>,Queue-<span class="number">1</span>,<span class="number">3452</span>,id=<span class="number">3</span>税</span><br><span class="line"><span class="number">14</span>:<span class="number">51</span>:<span class="number">30.547</span> [main] INFO com.lixiang.rocketmq.pull.PullConsumer - <span class="number">7</span>-<span class="number">1</span>,Queue-<span class="number">2</span>,<span class="number">3438</span>,id=<span class="number">4</span>税</span><br><span class="line"><span class="number">14</span>:<span class="number">51</span>:<span class="number">30.550</span> [main] INFO com.lixiang.rocketmq.pull.PullConsumer - <span class="number">8</span>-<span class="number">1</span>,Queue-<span class="number">3</span>,<span class="number">3426</span>,id=<span class="number">5</span>税</span><br><span class="line"><span class="number">14</span>:<span class="number">51</span>:<span class="number">30.553</span> [main] INFO com.lixiang.rocketmq.pull.PullConsumer - <span class="number">9</span>-<span class="number">1</span>,Queue-<span class="number">0</span>,<span class="number">3640</span>,id=<span class="number">6</span>税</span><br><span class="line"><span class="number">14</span>:<span class="number">51</span>:<span class="number">30.556</span> [main] INFO com.lixiang.rocketmq.pull.PullConsumer - <span class="number">10</span>-<span class="number">1</span>,Queue-<span class="number">1</span>,<span class="number">3453</span>,id=<span class="number">7</span>税</span><br><span class="line"><span class="number">14</span>:<span class="number">51</span>:<span class="number">30.559</span> [main] INFO com.lixiang.rocketmq.pull.PullConsumer - <span class="number">11</span>-<span class="number">1</span>,Queue-<span class="number">2</span>,<span class="number">3439</span>,id=<span class="number">8</span>税</span><br><span class="line"><span class="number">14</span>:<span class="number">51</span>:<span class="number">30.562</span> [main] INFO com.lixiang.rocketmq.pull.PullConsumer - <span class="number">12</span>-<span class="number">1</span>,Queue-<span class="number">3</span>,<span class="number">3427</span>,id=<span class="number">9</span>税</span><br><span class="line"><span class="number">14</span>:<span class="number">51</span>:<span class="number">30.564</span> [main] INFO com.lixiang.rocketmq.pull.PullConsumer - <span class="number">13</span>-<span class="number">1</span>,Queue-<span class="number">0</span>,<span class="number">3641</span>,id=<span class="number">10</span></span><br><span class="line"><span class="number">14</span>:<span class="number">51</span>:<span class="number">30.568</span> [main] INFO com.lixiang.rocketmq.pull.PullConsumer - <span class="number">14</span>-<span class="number">1</span>,Queue-<span class="number">1</span>,<span class="number">3454</span>,id=<span class="number">11</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>● 情况2：先启动生产者，在启动消费者通过观察得到，消费者在启动时会自动将之前积压在队列中的数据批量消费，默认每次10条，直到将所有积压数据消费掉然后再1条1条获取。类似情况下，如果生产者后续一次批量发送10条，消费者也是poll一次10条，最多不超过PullBatchSize默认10。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">14</span>:<span class="number">55</span>:<span class="number">03.757</span> [main] INFO com.lixiang.rocketmq.pull.PullConsumer - 消费者启动成功，正在监听新</span><br><span class="line"><span class="number">14</span>:<span class="number">55</span>:<span class="number">03.990</span> [main] INFO com.lixiang.rocketmq.pull.PullConsumer - <span class="number">1</span>-<span class="number">1</span>,Queue-<span class="number">1</span>,<span class="number">3477</span>,id=<span class="number">1</span>税</span><br><span class="line"><span class="number">14</span>:<span class="number">55</span>:<span class="number">03.998</span> [main] INFO com.lixiang.rocketmq.pull.PullConsumer - <span class="number">1</span>-<span class="number">2</span>,Queue-<span class="number">1</span>,<span class="number">3478</span>,id=<span class="number">5</span>税</span><br><span class="line"><span class="number">14</span>:<span class="number">55</span>:<span class="number">03.998</span> [main] INFO com.lixiang.rocketmq.pull.PullConsumer - <span class="number">1</span>-<span class="number">3</span>,Queue-<span class="number">1</span>,<span class="number">3479</span>,id=<span class="number">9</span>税</span><br><span class="line">...</span><br><span class="line"><span class="number">14</span>:<span class="number">55</span>:<span class="number">03.998</span> [main] INFO com.lixiang.rocketmq.pull.PullConsumer - <span class="number">1</span>-<span class="number">10</span>,Queue-<span class="number">1</span>,<span class="number">3486</span>,id=<span class="number">377</span> <span class="number">14</span>:<span class="number">55</span>:<span class="number">03.998</span> [main] INFO com.lixiang.rocketmq.pull.PullConsumer - <span class="number">2</span>-<span class="number">1</span>,Queue-<span class="number">0</span>,<span class="number">3664</span>,id=<span class="number">4</span>税</span><br><span class="line">...</span><br><span class="line"><span class="number">14</span>:<span class="number">55</span>:<span class="number">03.998</span> [main] INFO com.lixiang.rocketmq.pull.PullConsumer - <span class="number">2</span>-<span class="number">10</span>,Queue-<span class="number">0</span>,<span class="number">3673</span>,id=<span class="number">40</span></span><br><span class="line"><span class="number">14</span>:<span class="number">55</span>:<span class="number">03.999</span> [main] INFO com.lixiang.rocketmq.pull.PullConsumer - <span class="number">3</span>-<span class="number">1</span>,Queue-<span class="number">2</span>,<span class="number">3463</span>,id=<span class="number">2</span>税</span><br><span class="line">...</span><br><span class="line"><span class="number">14</span>:<span class="number">55</span>:<span class="number">04.006</span> [main] INFO com.lixiang.rocketmq.pull.PullConsumer - <span class="number">12</span>-<span class="number">5</span>,Queue-<span class="number">1</span>,<span class="number">3501</span>,id=<span class="number">97</span></span><br></pre></td></tr></table></figure>

<h3 id="poll方法默认自动提交，可以手动提交吗"><a href="#poll方法默认自动提交，可以手动提交吗" class="headerlink" title="poll方法默认自动提交，可以手动提交吗"></a>poll方法默认自动提交，可以手动提交吗</h3><p>可以，需要两点调整：<br>● consumer.setAutoCommit(false); //关闭自动提交<br>● consumer.commitSync();//手动提交消费进度<br>注意：一定要在业务处理完毕后确保手动执行commitSync方法，否则下次消息会被重复拉取。工作中更推荐使用这种方式，在处理业务后手动提交，可以避免数据因为业务失败导致的消息丢失。<br>完整代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//采用DefaultLitePullConsumer 对象拉取消息</span></span><br><span class="line">    DefaultLitePullConsumer consumer = <span class="keyword">new</span> DefaultLitePullConsumer(<span class="string">&quot;consumer-group&quot;</span>);</span><br><span class="line">    <span class="comment">//注册NameServer地址</span></span><br><span class="line">    consumer.setNamesrvAddr(<span class="string">&quot;192.168.31.103:9876&quot;</span>);</span><br><span class="line">    <span class="comment">//订阅主题</span></span><br><span class="line">    consumer.subscribe(<span class="string">&quot;tax-data&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">    consumer.setPullBatchSize(<span class="number">100</span>);</span><br><span class="line">    <span class="comment">// 启动消费者</span></span><br><span class="line">    consumer.start();</span><br><span class="line">    log.info(<span class="string">&quot;消费者启动成功，正在监听新消息&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        ++i;</span><br><span class="line">        <span class="comment">//调用poll方法拉取未消费数据</span></span><br><span class="line">        List&lt;MessageExt&gt; list = consumer.poll();</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (list != <span class="keyword">null</span> &amp;&amp; list.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (MessageExt ext : list) &#123;</span><br><span class="line">                j++;</span><br><span class="line">                log.info(<span class="string">&quot;&#123;&#125;-&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;&quot;</span>, String.valueOf(i), String.valueOf(j), <span class="string">&quot;Queue-&quot;</span> + ext.getQueueId(), ext.getQueueOffset(), <span class="keyword">new</span> String(ext.getBody()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="如何调整批量获取数量"><a href="#如何调整批量获取数量" class="headerlink" title="如何调整批量获取数量"></a>如何调整批量获取数量</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">consumer.setPullBatchSize(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>

<h3 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">15</span>:<span class="number">03</span>:<span class="number">04.160</span> [main] INFO com.lixiang.rocketmq.pull.PullConsumer - 消费者启动成功，正在监听新</span><br><span class="line"><span class="number">15</span>:<span class="number">03</span>:<span class="number">04.389</span> [main] INFO com.lixiang.rocketmq.pull.PullConsumer - <span class="number">1</span>-<span class="number">1</span>,Queue-<span class="number">0</span>,<span class="number">3689</span>,id=<span class="number">20</span>税</span><br><span class="line"><span class="number">15</span>:<span class="number">03</span>:<span class="number">04.396</span> [main] INFO com.lixiang.rocketmq.pull.PullConsumer - <span class="number">1</span>-<span class="number">2</span>,Queue-<span class="number">0</span>,<span class="number">3690</span>,id=<span class="number">21</span>税</span><br><span class="line"><span class="number">15</span>:<span class="number">03</span>:<span class="number">04.396</span> [main] INFO com.lixiang.rocketmq.pull.PullConsumer - <span class="number">1</span>-<span class="number">3</span>,Queue-<span class="number">0</span>,<span class="number">3691</span>,id=<span class="number">22</span>税</span><br><span class="line"><span class="number">15</span>:<span class="number">03</span>:<span class="number">04.396</span> [main] INFO com.lixiang.rocketmq.pull.PullConsumer - <span class="number">1</span>-<span class="number">4</span>,Queue-<span class="number">0</span>,<span class="number">3692</span>,id=<span class="number">23</span>税</span><br><span class="line"><span class="number">15</span>:<span class="number">03</span>:<span class="number">04.396</span> [main] INFO com.lixiang.rocketmq.pull.PullConsumer - <span class="number">1</span>-<span class="number">5</span>,Queue-<span class="number">0</span>,<span class="number">3693</span>,id=<span class="number">24</span>税</span><br><span class="line"><span class="number">15</span>:<span class="number">03</span>:<span class="number">04.396</span> [main] INFO com.lixiang.rocketmq.pull.PullConsumer - <span class="number">2</span>-<span class="number">1</span>,Queue-<span class="number">1</span>,<span class="number">3502</span>,id=<span class="number">30</span>税</span><br><span class="line"><span class="number">15</span>:<span class="number">03</span>:<span class="number">04.396</span> [main] INFO com.lixiang.rocketmq.pull.PullConsumer - <span class="number">2</span>-<span class="number">2</span>,Queue-<span class="number">1</span>,<span class="number">3503</span>,id=<span class="number">31</span>税</span><br><span class="line"><span class="number">15</span>:<span class="number">03</span>:<span class="number">04.396</span> [main] INFO com.lixiang.rocketmq.pull.PullConsumer - <span class="number">2</span>-<span class="number">3</span>,Queue-<span class="number">1</span>,<span class="number">3504</span>,id=<span class="number">32</span>税</span><br><span class="line"><span class="number">15</span>:<span class="number">03</span>:<span class="number">04.396</span> [main] INFO com.lixiang.rocketmq.pull.PullConsumer - <span class="number">2</span>-<span class="number">4</span>,Queue-<span class="number">1</span>,<span class="number">3505</span>,id=<span class="number">33</span>税</span><br><span class="line"><span class="number">15</span>:<span class="number">03</span>:<span class="number">04.396</span> [main] INFO com.lixiang.rocketmq.pull.PullConsumer - <span class="number">2</span>-<span class="number">5</span>,Queue-<span class="number">1</span>,<span class="number">3506</span>,id=<span class="number">34</span>税</span><br><span class="line"><span class="number">15</span>:<span class="number">03</span>:<span class="number">04.397</span> [main] INFO com.lixiang.rocketmq.pull.PullConsumer - <span class="number">3</span>-<span class="number">1</span>,Queue-<span class="number">3</span>,<span class="number">3475</span>,id=<span class="number">10</span>税</span><br><span class="line"><span class="number">15</span>:<span class="number">03</span>:<span class="number">04.397</span> [main] INFO com.lixiang.rocketmq.pull.PullConsumer - <span class="number">3</span>-<span class="number">2</span>,Queue-<span class="number">3</span>,<span class="number">3476</span>,id=<span class="number">11</span>税</span><br><span class="line"><span class="number">15</span>:<span class="number">03</span>:<span class="number">04.397</span> [main] INFO com.lixiang.rocketmq.pull.PullConsumer - <span class="number">3</span>-<span class="number">3</span>,Queue-<span class="number">3</span>,<span class="number">3477</span>,id=<span class="number">12</span>税</span><br><span class="line"><span class="number">15</span>:<span class="number">03</span>:<span class="number">04.397</span> [main] INFO com.lixiang.rocketmq.pull.PullConsumer - <span class="number">3</span>-<span class="number">4</span>,Queue-<span class="number">3</span>,<span class="number">3478</span>,id=<span class="number">13</span>税</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>RocketMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RocketMQ消息存储</title>
    <url>/2022/01/30/RocketMQ/RocketMQ%E6%B6%88%E6%81%AF%E5%AD%98%E5%82%A8/</url>
    <content><![CDATA[<p>分布式队列因为有高可靠性的要求，所以数据要进行持久化存储。</p>
<p><img src="/images/RocketMQ/20220130-1.png" alt="image-20220130-1"></p>
<p>1. 消息生成者发送消息<br>2. MQ收到消息，将消息进行持久化，在存储中新增一条记录<br>3. 返回ACK给生产者<br>4. MQ push 消息给对应的消费者，然后等待消费者返回ACK<br>5. 如果消息消费者在指定时间内成功返回ack，那么MQ认为消息消费成功，在存储中删除消息，即执行第6步；如果MQ在指定时间内没有收到ACK，则认为消息消费失败，会尝试重新push消息,重复执行4、5、6步骤<br>6. MQ删除消息</p>
<h3 id="存储介质"><a href="#存储介质" class="headerlink" title="存储介质"></a>存储介质</h3><p>● 关系型数据库DB<br>Apache下开源的另外一款MQ—ActiveMQ（默认采用的KahaDB做消息存储）可选用JDBC的方式来做消息持久化，通过简单的xml配置信息即可实现JDBC消息存储。由于，普通关系型数据库（如Mysql）在单表数据量达到千万级别的情况下，其IO读写性能往往会出现瓶颈。在可靠性方面，该种方案非常依赖DB，如果一旦DB出现故障，则MQ的消息就无法落盘存储会导致线上故障</p>
<p>● 文件系统<br>目前业界较为常用的几款产品（RocketMQ/Kafka/RabbitMQ）均采用的是消息刷盘至所部署虚拟机/物理机的文件系统来做持久化（刷盘一般可以分为异步刷盘和同步刷盘两种模式）。消息刷盘为消息存储提供了一种高效率、高可靠性和高性能的数据持久化方式。除非部署MQ机器本身或是本地磁盘挂了，否则一般是不会出现无法持久化的故障问题。</p>
<p>● 文件系统 &gt; 关系型数据库DB</p>
<h3 id="消息的存储和发送"><a href="#消息的存储和发送" class="headerlink" title="消息的存储和发送"></a>消息的存储和发送</h3><p>● 消息存储<br>RocketMQ的消息用顺序写,随机读,保证了消息存储的速度。</p>
<p><img src="/images/RocketMQ/20220130-2.png" alt="image-20220130-2"></p>
<p>● 消息发送<br>Linux操作系统分为【用户态】和【内核态】，文件操作、网络操作需要涉及这两种形态的切换，免不了进行数据复制。</p>
<p><img src="/images/RocketMQ/20220130-3.png" alt="image-20220130-3"></p>
<p>RocketMQ充分利用了上述特性，也就是所谓的“零拷贝”技术，提高消息存盘和网络发送的速度。</p>
<p><img src="/images/RocketMQ/20220130-4.png" alt="image-20220130-4"></p>
]]></content>
      <tags>
        <tag>RocketMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RocketMQ消息存储与检索原理</title>
    <url>/2022/01/30/RocketMQ/RocketMQ%E6%B6%88%E6%81%AF%E5%AD%98%E5%82%A8%E4%B8%8E%E6%A3%80%E7%B4%A2%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h3 id="Broker存储目录结构"><a href="#Broker存储目录结构" class="headerlink" title="Broker存储目录结构"></a>Broker存储目录结构</h3><p>● Commitlog：这是一个目录，其中包含具体的commitlog文件。文件名长度为20个字符，文件名由该文件保存消息的最大物理offset值在高位补0组成。每个文件大小一般是1GB，可以通过mapedFileSizeCommitLog进行配置。<br>● consumequeue：这是一个目录，包含该 Broker 上所有的 Topic 对应的消费队列文件信息。消费队列文件的格式为“./consumequeue/Topic名字/queue id/具体消费队列文件”。每个消费队列其实是commitlog的一个索引，提供给消费者做拉取消息、更新位点使用。<br>● Index：这是一个目录，全部的文件都是按照消息key创建的Hash索引。文件名是用创建时的时间戳命名的。<br>● Config：这是一个目录，保存了当前Broker中全部的Topic、订阅关系和消费进度。这些数据Broker会定时从内存持久化到磁盘，以便宕机后恢复。<br>● abort：Broker 是否异常关闭的标志。正常关闭时该文件会被删除，异常关闭时则不会。当Broker重新启动时，根据是否异常宕机决定是否需要重新构建Index索引等操作。<br>● checkpoint：Broker最近一次正常运行时的状态，比如最后一次正常刷盘的时间、最后一次正确索引的时间等。</p>
<p><img src="/images/RocketMQ/20220130-5.png" alt="image-20220130-5"></p>
<p>Tips:如果没有在配置文件中显式指定存储位置，这些文件默认存放在Linux的”/root/store”目录下</p>
<p><img src="/images/RocketMQ/20220130-6.png" alt="image-20220130-6"></p>
<h3 id="RocketMQ-消息的构成"><a href="#RocketMQ-消息的构成" class="headerlink" title="RocketMQ 消息的构成"></a>RocketMQ 消息的构成</h3><p><img src="/images/RocketMQ/20220130-7.png" alt="image-20220130-7"></p>
<h3 id="CommitLog的作用"><a href="#CommitLog的作用" class="headerlink" title="CommitLog的作用"></a>CommitLog的作用</h3><p><img src="/images/RocketMQ/20220130-8.png" alt="image-20220130-8"></p>
<p>CommitLog目录下有多个CommitLog文件。其实CommitLog只有一个文件，为了方便保存和读写被切分为多个子文件，所有的子文件通过其保存的第一个和最后一个消息的物理位点进行连接。</p>
<p><img src="/images/RocketMQ/20220130-9.png" alt="image-20220130-9"></p>
<p>Broker按照时间和物理的offset顺序写CommitLog文件，每次写的时候需要加锁，每个 CommitLog 子文件的大小默认是1GB（1024×1024×1024B），可以通过mapedFileSizeCommitLog进行配置。当一个CommitLog写满后，创建一个新的CommitLog，继续上一个ComiitLog的Offset写操作，直到写满换成下一个文件。所有CommitLog子文件之间的Offset是连续的，所以最后一个CommitLog总是被写入的。</p>
<h3 id="RocketMQ消息的索引机制"><a href="#RocketMQ消息的索引机制" class="headerlink" title="RocketMQ消息的索引机制"></a>RocketMQ消息的索引机制</h3><p>● 利用MessageID提取消息<br>因为MessageID就是用broker+offset生成的（这里MsgId指的是服务端的），所以很容易就找到对应的commitLog文件来读取消息。</p>
<p>● 基于ConsumeQueue实现Tag查询<br>    - ConsumeQueue存储结构<br>        - zxp_test_topic：主题名<br>            - 0|1|2|3：队列编号<br>                - ConsumeQueue文件，每个文件默认600W字节=5.72MB</p>
<p><img src="/images/RocketMQ/20220130-10.png" alt="image-20220130-10"></p>
<p>● 处理过程<br>第一步，消费者要获取tag=20220101的消息，首先通过执行”20220101”.hashcode=99得到Hash值；<br>第二步，在ConsumeQueue文件中查找hash(tag)=99的offset数据；<br>第三步，根据物理位置Offset到对应的CommitLog文件中提取消息，因为可能会出现Hash碰撞，所以再次对这些命中数据以字符串匹配方式筛选”20220101”的消息；<br>第四步，将“20220101”消息提取，封装为Message对象返回。</p>
<p><img src="/images/RocketMQ/20220130-11.png" alt="image-20220130-11"></p>
<h3 id="基于IndexFile实现Key查询"><a href="#基于IndexFile实现Key查询" class="headerlink" title="基于IndexFile实现Key查询"></a>基于IndexFile实现Key查询</h3><p><img src="/images/RocketMQ/20220130-12.png" alt="image-20220130-12"></p>
<p>每个Index File文件包含文件头、Hash槽位、索引数据。每个文件的Hash槽位个数、索引数据个数都是固定的。Hash 槽位可以通过 Broker启动参数 maxHashSlotNum进行配置，默认值为500万；索引数据可以通过Broker启动参数maxIndexNum进行配置，默认值为500万×4=2000万，一个Index File约为400MB。</p>
<p><img src="/images/RocketMQ/20220130-13.png" alt="image-20220130-13"></p>
<p>每个Index File文件包含文件头、Hash槽位、索引数据。每个文件的Hash槽位个数、索引数据个数都是固定的。</p>
<h3 id="基于Slot-链表的查询过程"><a href="#基于Slot-链表的查询过程" class="headerlink" title="基于Slot+链表的查询过程"></a>基于Slot+链表的查询过程</h3><p><img src="/images/RocketMQ/20220130-14.png" alt="image-20220130-14"></p>
<p>Index File的索引设计在一定程度上参考了Java中的HashMap设计，只是当Index File遇到Hash碰撞时只会用链表，而Java 8中在一定情况下链表会转化为红黑树。<br>这里具体实现相对ComsumeQueue比较复杂，有兴趣的童鞋可以阅读下面详细学习：<br><a href="https://www.cnblogs.com/xjwhaha/p/15772846.html">https://www.cnblogs.com/xjwhaha/p/15772846.html</a></p>
<p><img src="/images/RocketMQ/20220130-15.png" alt="image-20220130-15"></p>
]]></content>
      <tags>
        <tag>RocketMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RocketMQ Broker过期文件删除机制</title>
    <url>/2022/02/05/RocketMQ/RocketMQ%20Broker%E8%BF%87%E6%9C%9F%E6%96%87%E4%BB%B6%E5%88%A0%E9%99%A4%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h3 id="Broker过期文件删除机制"><a href="#Broker过期文件删除机制" class="headerlink" title="Broker过期文件删除机制"></a>Broker过期文件删除机制</h3><p>由于RocketMQ操作CommitLog、ConsumeQueue文件是基于内存映射机制并在启动的时候回加载CommitLog、ConsumeQueue目录下的所有文件，为了避免内存与磁盘的浪费，不可能将消息永久存储在消息服务器上，所以要引入一种机制来删除已过期的文件。RocketMQ顺序写CommitLog、ConsumeQueue文件，所有写操作全部落在最后一个CommitLog或者ConsumerQueue文件上，之前的文件在下一个文件创建后将不会再被更新。RocketMQ清除过期文件的方法时：如果当前文件在在一定时间间隔内没有再次被消费，则认为是过期文件，可以被删除，RocketMQ不会关注这个文件上的消息是否全部被消费。默认每个文件的过期时间为72小时，通过在Broker配置文件中设置fileReservedTime来改变过期时间，单位为小时。</p>
<h3 id="默认消息清理的时机"><a href="#默认消息清理的时机" class="headerlink" title="默认消息清理的时机"></a>默认消息清理的时机</h3><p>Broker每10秒检查一次文件，扫描是否存在CommitLog满足删除条件。</p>
<h3 id="删除文件的条件"><a href="#删除文件的条件" class="headerlink" title="删除文件的条件"></a>删除文件的条件</h3><p>第一，默认凌晨4点，删除72小时内没有产生消费的CommitLog文件；<br>第二，磁盘使用空间超过85%；<br>第三，手动执行删除。</p>
<h3 id="删除CommitLog的执行过程"><a href="#删除CommitLog的执行过程" class="headerlink" title="删除CommitLog的执行过程"></a>删除CommitLog的执行过程</h3><p><img src="/images/RocketMQ/20220205-1.png" alt="image-20220205-1"></p>
<p>第一步：克隆全部的 CommitLog 文件。CommitLog 文件可能随时有数据写入，为了不影响正常写入，所以克隆一份来操作。<br>第二步：检查每一个CommitLog文件是否过期，如果已过期则立即进行删除。在删除前会做一系列检查：检查文件被引用的次数、清理映射的所有内存数据对象、释放内存。清理完成后，删除物理文件。<br>第三步：上一步的删除有可能失败，比如有线程引用该过期文件，内存映射清理失败等，都可能导致删除失败。如果文件已经关闭，删除前检查没有通过，则可以通过第二次删除来处理，如果删除失败，间隔120秒后再次尝试执行重试删除直到文件删除。</p>
<h3 id="ConsumeQueue、IndexFile文件的删除过程"><a href="#ConsumeQueue、IndexFile文件的删除过程" class="headerlink" title="ConsumeQueue、IndexFile文件的删除过程"></a>ConsumeQueue、IndexFile文件的删除过程</h3><p>Consume Queue和Index File都是索引文件，在CommitLog文件被删除后，对应的索引文件其实没有存在的意义，并且占用磁盘空间，所以这些文件应该被删除。<br>RocketMQ的删除策略是定时检查，满足删除条件时会删除过期或者无意义的文件。<br>执行过程如下<br>● CommitLog.getMinOffset获取当前日志最小偏移量，当前提交日志的最小偏移量对比上一次查询的值发生了变化，也就是说必然是最少一个提交日志文件被删除，那么相应的在消费队列中的过期数据也可以被删除，就执行后面的流程。反之，则意味着不需要执行任何操作，结束方法即可。</p>
<p><img src="/images/RocketMQ/20220205-2.png" alt="image-20220205-2"></p>
<p>● 遍历其中每一个ConsumeQueue对象，删除过期的消费队列文件以及更新消费队列的最小偏移量；<br>● 如果有删除了ConsumeQueue文件，休眠一小段时间，继续对下一个ConsumeQueue检查执行删除操作。<br>IndexFile索引文件与ConsumeQueue删除逻辑相同，不做赘述。</p>
]]></content>
      <tags>
        <tag>RocketMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RocketMQ同步刷盘与异步刷盘</title>
    <url>/2022/02/05/RocketMQ/RocketMQ%E5%90%8C%E6%AD%A5%E5%88%B7%E7%9B%98%E4%B8%8E%E5%BC%82%E6%AD%A5%E5%88%B7%E7%9B%98/</url>
    <content><![CDATA[<h3 id="同步刷盘与异步刷盘"><a href="#同步刷盘与异步刷盘" class="headerlink" title="同步刷盘与异步刷盘"></a>同步刷盘与异步刷盘</h3><p>RocketMQ的消息是存储到磁盘上的，这样既能保证断电后恢复，又可以让存储的消息量超出内存的限制。</p>
<p><img src="/images/RocketMQ/20220205-3.png" alt="image-20220205-3"></p>
<p>RocketMQ为了提高性能，会尽可能地保证磁盘的顺序写。消息在通过Producer写入RocketMQ的时候，有两种写磁盘方式：</p>
<h3 id="同步刷盘"><a href="#同步刷盘" class="headerlink" title="同步刷盘"></a>同步刷盘</h3><p>在返回应用写成功状态前，消息已经被写入磁盘。具体流程是，消息写入内存的PAGECACHE后，立刻通知刷盘线程刷盘，然后等待刷盘完成，刷盘线程执行完成后唤醒等待的线程，给应用返回消息写成功的状态。<br>优点：可以保持MQ的消息状态和生产者/消费者的消息状态一致<br>缺点：性能比异步的低</p>
<h3 id="异步刷盘"><a href="#异步刷盘" class="headerlink" title="异步刷盘"></a>异步刷盘</h3><p>异步刷盘方式：在返回写成功状态时，消息可能只是被写入了内存的PAGECACHE，写操作的返回快，吞吐量大；当内存里的消息量积累到一定程度时，统一触发写磁盘操作，快速写入<br>优点：性能高<br>缺点：Master宕机，磁盘损坏的情况下，会丢失少量的消息, 导致MQ的消息状态和生产者/消费者的消息状态不一致</p>
<h3 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">single-master.conf</span><br><span class="line">#同步刷盘 </span><br><span class="line">flushDiskType=SYNC_FLUSH  </span><br><span class="line">或者</span><br><span class="line">#异步刷盘 </span><br><span class="line">flushDiskType=ASYNC_FLUSH </span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>RocketMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RocketMQ的幂等性保障</title>
    <url>/2022/02/06/RocketMQ/RocketMQ%E7%9A%84%E5%B9%82%E7%AD%89%E6%80%A7%E4%BF%9D%E9%9A%9C/</url>
    <content><![CDATA[<h3 id="什么是幂等性"><a href="#什么是幂等性" class="headerlink" title="什么是幂等性"></a>什么是幂等性</h3><p>那什么是幂等性呢，说人话就是当多次重复请求时，接口能够保证与预期相符的结果。我们举个例子来说明，例如我们设计了一个为员工涨薪的接口,本次请求发送后为1号员工涨薪500元。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PUT https:<span class="comment">//edu.lagou.com/employee/salary </span></span><br><span class="line">&#123;<span class="string">&quot;id&quot;</span> : <span class="string">&quot;1&quot;</span>,<span class="string">&quot;incr_salary&quot;</span>:<span class="number">500</span>&#125; </span><br></pre></td></tr></table></figure>

<p>如果你是一个新人没有考虑幂等特性，可能会这么写，伪代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询1号员工数据 </span></span><br><span class="line">Employee employee = employeeService.selectById(<span class="number">1</span>); </span><br><span class="line"><span class="comment">//更新工资 </span></span><br><span class="line">employee.setSalary(employee.getSalary() + incrSalary); </span><br><span class="line"><span class="comment">//执行更新语句 </span></span><br><span class="line">employeeService.update(employee) </span><br></pre></td></tr></table></figure>

<p>对于这段代码，单独执行没有任何问题，但是我们要注意，在分布式环境下，为了保证消息的高可靠性，往往客户端会采用重试或者消息补偿的形式重复发送同一个请求，那在这种情况下这段代码就会出严重问题，每一个重复请求被发送到服务器都会让该员工工资加500，最终该员工工资会大于要求实际应收工资。消息队列 RocketMQ 消费者在接收到消息以后，有必要根据业务上的唯一Key对消息做幂等处理的必要性。</p>
<h3 id="消费幂等的必要性"><a href="#消费幂等的必要性" class="headerlink" title="消费幂等的必要性"></a>消费幂等的必要性</h3><p>在互联网应用中，尤其在网络不稳定的情况下，消息队列 RocketMQ 的消息有可能会出现重复，这个重复简单可以概括为以下情况：</p>
<h3 id="发送时消息重复"><a href="#发送时消息重复" class="headerlink" title="发送时消息重复"></a>发送时消息重复</h3><p>当一条消息已被成功发送到服务端并完成持久化，此时出现了网络闪断或者客户端宕机，导致服务端对客户端应答失败。如果此时生产者意识到消息发送失败并尝试再次发送消息，消费者后续会收到两条内容相同并且 Message ID 也相同的消息。</p>
<h3 id="投递时消息重复"><a href="#投递时消息重复" class="headerlink" title="投递时消息重复"></a>投递时消息重复</h3><p>消息消费的场景下，消息已投递到消费者并完成业务处理，当客户端给服务端反馈应答的时候网络闪断。 为了保证消息至少被消费一次，消息队列 RocketMQ 的服务端将在网络恢复后再次尝试投递之前已被处理过的消息，消费者后续会收到两条内容相同并且 Message ID 也相同的消息。<br>负载均衡时消息重复（包括但不限于网络抖动、Broker重启以及订阅方应用重启）当消息队列RocketMQ的Broker或客户端重启、扩容或缩容时，会触发 Rebalance，此时消费者可能会收到重复消息。</p>
<h3 id="幂等性处理方式"><a href="#幂等性处理方式" class="headerlink" title="幂等性处理方式"></a>幂等性处理方式</h3><p>因为 Message ID 有可能出现冲突（重复）的情况，所以真正安全的幂等处理，不建议以Message ID 作为处理依据。最好的方式是以业务唯一标识作为幂等处理的关键依据，而业务的唯一标识可以通过消息 Key 进行设置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Message message = <span class="keyword">new</span> Message(); </span><br><span class="line">message.setKey(<span class="string">&quot;order_110010&quot;</span>); </span><br><span class="line">SendResult sendResult = producer.send(message); </span><br><span class="line">订阅方收到消息时可以根据消息的 Key 进行幂等处理：</span><br><span class="line">consumer.subscribe(<span class="string">&quot;ons_test&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="keyword">new</span> MessageListener() &#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Action <span class="title">consume</span><span class="params">(Message message, ConsumeContext context)</span> </span>&#123; </span><br><span class="line">        String key = message.getKey(); </span><br><span class="line">        <span class="comment">//if(order_110010状态为&quot;等待支付&quot;) </span></span><br><span class="line">            <span class="comment">//处理扣款 </span></span><br><span class="line">            <span class="comment">//返回支付成功响应 </span></span><br><span class="line">        <span class="comment">//else if(order_110010状态为&quot;已支付&quot;) </span></span><br><span class="line">            <span class="comment">//返回支付成功响应 </span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;); </span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>RocketMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RocketMQ在Spring Boot项目中使用</title>
    <url>/2022/01/11/RocketMQ/RocketMQ%E5%9C%A8Spring%20Boot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>Spring Boot对RocketMQ进行了简化封装，提供了rocketmq-spring-boot-starter组件对RocketMQ进行了直接继承，本讲我们快速上手Spring Boot如何开发RocketMQ生产者与消费者</p>
<h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.rocketmq&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;rocketmq-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.2.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>● 配置application.properties</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 应用名称 </span><br><span class="line">spring.application.name=spb-rocketmq </span><br><span class="line"># 应用服务 WEB 访问端口 </span><br><span class="line">server.port=<span class="number">8000</span> </span><br><span class="line"># nameserver </span><br><span class="line">#如果构建nameserver集群用;号分割多个nameserver，运行时Spring Boot从前向后依次</span><br><span class="line">尝试连接</span><br><span class="line">#rocketmq.name-server=192.168.31.103:9876;192.168.31.113:9876 </span><br><span class="line">rocketmq.name-server=<span class="number">192.168</span><span class="number">.31</span><span class="number">.103</span>:<span class="number">9876</span> </span><br><span class="line"># 生产者组 </span><br><span class="line">rocketmq.producer.group=producer-group </span><br><span class="line"># 异步发送时，重试次数 </span><br><span class="line">rocketmq.producer.retry-times-when-send-async-failed=<span class="number">5</span></span><br></pre></td></tr></table></figure>

<p>RocketMQTemplate对象是Spring Boot对RocketMQ整合对象，封装了asyncSend、convertAndSend等发送消息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RocketMQTemplate rocketMQTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/producer/send&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testSendMessage</span><span class="params">(<span class="keyword">int</span> num)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        String ret = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; num ; i++) &#123;</span><br><span class="line">            <span class="comment">//异步发送，Callback监听</span></span><br><span class="line">            Message message = <span class="keyword">new</span> Message(<span class="string">&quot;tax-data&quot;</span>, <span class="string">&quot;2022s1&quot;</span>, <span class="string">&quot;id-&quot;</span> + i, (<span class="string">&quot;Tax-data-&quot;</span> + i).getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            rocketMQTemplate.asyncSend(<span class="string">&quot;tax-data&quot;</span>, message, <span class="keyword">new</span> SendCallback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(SendResult sendResult)</span> </span>&#123;</span><br><span class="line">                    log.info(<span class="string">&quot;发送成功：&#123;&#125;&quot;</span>, sendResult.toString());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onException</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">                    log.info(<span class="string">&quot;发送异常：&#123;&#125;&quot;</span>, throwable.toString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//rocketMQTemplate.convertAndSend(&quot;tax-data&quot;,&quot;Hello Springboot Rockekmq&quot;);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>● 运行结果如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">INFO <span class="number">19628</span> --- [ublicExecutor_7] c.i.r.s.controller.ProducerController    : 发送成功：SendResult [sendStatus=SEND_OK, msgId=7F0000014CAC18B4AAC28424C413001E, offsetMsgId=C0A81F6900002A9F0000000000404A14, messageQueue=MessageQueue [topic=tax-data, brokerName=broker-a, queueId=<span class="number">3</span>], queueOffset=<span class="number">4058</span>] </span><br><span class="line">INFO <span class="number">19628</span> --- [ublicExecutor_8] c.i.r.s.controller.ProducerController    : 发送成功：SendResult [sendStatus=SEND_OK, msgId=7F0000014CAC18B4AAC28424C486001F, offsetMsgId=C0A81F6900002A9F0000000000404BF1, messageQueue=MessageQueue [topic=tax-data, brokerName=broker-a, queueId=<span class="number">0</span>], queueOffset=<span class="number">4171</span>] </span><br><span class="line">INFO <span class="number">19628</span> --- [ublicExecutor_9] c.i.r.s.controller.ProducerController    : 发送成功：SendResult [sendStatus=SEND_OK, msgId=7F0000014CAC18B4AAC28424C4F30020, offsetMsgId=C0A81F6900002A9F0000000000404DCE, messageQueue=MessageQueue [topic=tax-data, brokerName=broker-a, queueId=<span class="number">0</span>], queueOffset=<span class="number">4172</span>] </span><br><span class="line">INFO <span class="number">19628</span> --- [blicExecutor_10] c.i.r.s.controller.ProducerController    : 发送成功：SendResult [sendStatus=SEND_OK, msgId=7F0000014CAC18B4AAC28424C55F0021, offsetMsgId=C0A81F6900002A9F0000000000404FAB, messageQueue=MessageQueue [topic=tax-data, brokerName=broker-a, queueId=<span class="number">1</span>], queueOffset=<span class="number">4085</span>] </span><br><span class="line">INFO <span class="number">19628</span> --- [blicExecutor_11] c.i.r.s.controller.ProducerController    : 发送成功：SendResult [sendStatus=SEND_OK, msgId=7F0000014CAC18B4AAC28424C5CB0022, offsetMsgId=C0A81F6900002A9F0000000000405188, messageQueue=MessageQueue [topic=tax-data, brokerName=broker-a, queueId=<span class="number">3</span>], queueOffset=<span class="number">4059</span>] </span><br><span class="line">INFO <span class="number">19628</span> --- [blicExecutor_12] c.i.r.s.controller.ProducerController    : 发送成功：SendResult [sendStatus=SEND_OK, msgId=7F0000014CAC18B4AAC28424C6360023, offsetMsgId=C0A81F6900002A9F0000000000405365, messageQueue=MessageQueue [topic=tax-data, brokerName=broker-a, queueId=<span class="number">0</span>], queueOffset=<span class="number">4173</span>] </span><br><span class="line">INFO <span class="number">19628</span> --- [ublicExecutor_1] c.i.r.s.controller.ProducerController    : 发送成功：SendResult [sendStatus=SEND_OK, msgId=7F0000014CAC18B4AAC28424C6A10024, offsetMsgId=C0A81F6900002A9F0000000000405542, messageQueue=MessageQueue [topic=tax-data, brokerName=broker-a, queueId=<span class="number">2</span>], queueOffset=<span class="number">4171</span>] </span><br><span class="line">INFO <span class="number">19628</span> --- [ublicExecutor_2] c.i.r.s.controller.ProducerController    : 发送成功：SendResult [sendStatus=SEND_OK, msgId=7F0000014CAC18B4AAC28424C70B0025, offsetMsgId=C0A81F6900002A9F000000000040571F, messageQueue=MessageQueue [topic=tax-data, brokerName=broker-a, queueId=<span class="number">3</span>], queueOffset=<span class="number">4060</span>] </span><br><span class="line">INFO <span class="number">19628</span> --- [ublicExecutor_3] c.i.r.s.controller.ProducerController    : 发送成功：SendResult [sendStatus=SEND_OK, msgId=7F0000014CAC18B4AAC28424C7760026, offsetMsgId=C0A81F6900002A9F00000000004058FC, messageQueue=MessageQueue [topic=tax-data, brokerName=broker-a, queueId=<span class="number">2</span>], queueOffset=<span class="number">4172</span>] </span><br><span class="line">INFO <span class="number">19628</span> --- [ublicExecutor_4] c.i.r.s.controller.ProducerController    : 发送成功：SendResult [sendStatus=SEND_OK, msgId=7F0000014CAC18B4AAC28424C7E20027, offsetMsgId=C0A81F6900002A9F0000000000405AD9, messageQueue=MessageQueue [topic=tax-data, brokerName=broker-a, queueId=<span class="number">2</span>], queueOffset=<span class="number">4173</span>] </span><br></pre></td></tr></table></figure>

<h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.rocketmq&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;rocketmq-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.2.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>● 配置application.properties</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#配置消费者组、消息模式等与消费者相关设置spring.application.name=spb-rocketmq-consumer </span><br><span class="line">rocketmq.name-server=<span class="number">192.168</span><span class="number">.31</span><span class="number">.103</span>:<span class="number">9876</span> </span><br><span class="line">#消费者组 </span><br><span class="line">rocketmq.consumer.group=consumer-group </span><br><span class="line">#消息模式CLUSTERING-集群模式 </span><br><span class="line">rocketmq.consumer.message-model=CLUSTERING</span><br></pre></td></tr></table></figure>

<p>@RocketMQMessageListener监听器用于监听Broker队列，默认推送Push，实现RocketMQListener获取发送的数据结果。onMessage方法执行成功自动ack确认接收onMessage方法抛出异常自动nack拒绝接收，broker下次会重新发送</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RocketMQMessageListener(topic = &quot;tax-data&quot;,consumerGroup = &quot;$&#123;rocketmq.consumer.group&#125;&quot;,selectorExpression = &quot;*&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">RocketMQListener</span>&lt;<span class="title">MessageExt</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(MessageExt s)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;接收到消息:&#123;&#125;&quot;</span>,s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>RocketMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker核心概念容器镜像</title>
    <url>/2023/07/29/%E4%BA%91%E5%8E%9F%E7%94%9F/Docker/Docker%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F/</url>
    <content><![CDATA[<h1 id="一、Docker容器镜像操作"><a href="#一、Docker容器镜像操作" class="headerlink" title="一、Docker容器镜像操作"></a>一、Docker容器镜像操作</h1><h2 id="2-1-查看本地容器镜像"><a href="#2-1-查看本地容器镜像" class="headerlink" title="2.1 查看本地容器镜像"></a>2.1 查看本地容器镜像</h2><h3 id="2-1-1-使用docker-images命令查看"><a href="#2-1-1-使用docker-images命令查看" class="headerlink" title="2.1.1 使用docker images命令查看"></a>2.1.1 使用docker images命令查看</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker images</span></span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">bash         latest    <span class="number">5557</span>e073f11c   <span class="number">2</span> weeks ago    <span class="number">13</span>MB</span><br><span class="line">nginx        latest    <span class="number">605</span>c77e624dd   <span class="number">3</span> weeks ago    <span class="number">141</span>MB</span><br><span class="line">centos       latest    <span class="number">5</span>d0da3dc9764   <span class="number">4</span> months ago   <span class="number">231</span>MB</span><br></pre></td></tr></table></figure>



<h3 id="2-1-2-使用docker-image命令查看"><a href="#2-1-2-使用docker-image命令查看" class="headerlink" title="2.1.2 使用docker image命令查看"></a>2.1.2 使用docker image命令查看</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker image list</span></span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">bash         latest    <span class="number">5557</span>e073f11c   <span class="number">2</span> weeks ago    <span class="number">13</span>MB</span><br><span class="line">nginx        latest    <span class="number">605</span>c77e624dd   <span class="number">3</span> weeks ago    <span class="number">141</span>MB</span><br><span class="line">centos       latest    <span class="number">5</span>d0da3dc9764   <span class="number">4</span> months ago   <span class="number">231</span>MB</span><br></pre></td></tr></table></figure>



<h3 id="2-1-3-查看docker容器镜像本地存储位置"><a href="#2-1-3-查看docker容器镜像本地存储位置" class="headerlink" title="2.1.3 查看docker容器镜像本地存储位置"></a>2.1.3 查看docker容器镜像本地存储位置</h3><blockquote>
<p>考虑到docker容器镜像会占用本地存储空间，建议搭建其它存储系统挂载到本地以便解决占用大量本地存储的问题。</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ls /var/lib/docker</span></span><br><span class="line">buildkit  containers  image  network  overlay2  plugins  runtimes  swarm  tmp  trust  volumes</span><br></pre></td></tr></table></figure>





<h2 id="2-2-搜索Docker-Hub容器镜像"><a href="#2-2-搜索Docker-Hub容器镜像" class="headerlink" title="2.2 搜索Docker Hub容器镜像"></a>2.2 搜索Docker Hub容器镜像</h2><h3 id="2-2-1-命令行搜索"><a href="#2-2-1-命令行搜索" class="headerlink" title="2.2.1 命令行搜索"></a>2.2.1 命令行搜索</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker search centos</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">输出</span><br><span class="line">NAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">centos                            The official build of CentOS.                   <span class="number">6987</span>      [<span class="type">OK</span>]</span><br><span class="line">ansible/centos7<span class="literal">-ansible</span>           Ansible on Centos7                              <span class="number">135</span>                  [<span class="type">OK</span>]</span><br><span class="line">consol/centos<span class="literal">-xfce</span><span class="literal">-vnc</span>            Centos container with <span class="string">&quot;headless&quot;</span> VNC session…   <span class="number">135</span>                  [<span class="type">OK</span>]</span><br><span class="line">jdeathe/centos<span class="literal">-ssh</span>                OpenSSH / Supervisor / EPEL/IUS/SCL Repos - …   <span class="number">121</span>                  [<span class="type">OK</span>]</span><br></pre></td></tr></table></figure>





<h3 id="2-2-2-Docker-Hub-Web界面搜索"><a href="#2-2-2-Docker-Hub-Web界面搜索" class="headerlink" title="2.2.2 Docker Hub Web界面搜索"></a>2.2.2 Docker Hub Web界面搜索</h3><p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F.assets/image-20220124162022990.png" alt="image-20220124162022990"></p>
<p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F.assets/image-20220124162116338.png" alt="image-20220124162116338"></p>
<p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F.assets/image-20220124162200273.png" alt="image-20220124162200273"></p>
<p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F.assets/image-20220124162312918.png" alt="image-20220124162312918"></p>
<h2 id="2-3-Docker-容器镜像下载"><a href="#2-3-Docker-容器镜像下载" class="headerlink" title="2.3 Docker 容器镜像下载"></a>2.3 Docker 容器镜像下载</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker pull centos</span></span><br></pre></td></tr></table></figure>



<h2 id="2-4-Docker容器镜像删除方法"><a href="#2-4-Docker容器镜像删除方法" class="headerlink" title="2.4 Docker容器镜像删除方法"></a>2.4 Docker容器镜像删除方法</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker images</span></span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">bash         latest    <span class="number">5557</span>e073f11c   <span class="number">2</span> weeks ago    <span class="number">13</span>MB</span><br><span class="line">nginx        latest    <span class="number">605</span>c77e624dd   <span class="number">3</span> weeks ago    <span class="number">141</span>MB</span><br><span class="line">centos       latest    <span class="number">5</span>d0da3dc9764   <span class="number">4</span> months ago   <span class="number">231</span>MB</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker rmi centos</span></span><br><span class="line">Untagged: centos:latest</span><br><span class="line">Untagged: centos@sha256:a27fd8080b517143cbbbab9dfb7c8571c40d67d534bbdee55bd6c473f432b177</span><br><span class="line">Deleted: sha256:<span class="number">5</span>d0da3dc976460b72c77d94c8a1ad043720b0416bfc16c52c45d4847e53fadb6</span><br><span class="line">Deleted: sha256:<span class="number">74</span>ddd0ec08fa43d09f32636ba91a0a3053b02cb4627c35051aff89f853606b59</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker images</span></span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">centos       latest    <span class="number">5</span>d0da3dc9764   <span class="number">4</span> months ago   <span class="number">231</span>MB</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker rmi 5d0da3dc9764</span></span><br></pre></td></tr></table></figure>





<h1 id="二、Docker容器镜像介绍"><a href="#二、Docker容器镜像介绍" class="headerlink" title="二、Docker容器镜像介绍"></a>二、Docker容器镜像介绍</h1><h2 id="2-1-Docker-Image"><a href="#2-1-Docker-Image" class="headerlink" title="2.1 Docker Image"></a>2.1 Docker Image</h2><ul>
<li>Docker 镜像是只读的容器模板，是Docker容器基础</li>
<li>为Docker容器提供了静态文件系统运行环境（rootfs）</li>
<li>是容器的静止状态</li>
<li>容器是镜像的运行状态</li>
</ul>
<h2 id="2-2-联合文件系统"><a href="#2-2-联合文件系统" class="headerlink" title="2.2 联合文件系统"></a>2.2 联合文件系统</h2><h3 id="2-2-1-联合文件系统定义"><a href="#2-2-1-联合文件系统定义" class="headerlink" title="2.2.1 联合文件系统定义"></a>2.2.1 联合文件系统定义</h3><ul>
<li>联合文件系统(union filesystem)</li>
<li>联合文件系统是实现联合挂载技术的文件系统</li>
<li>联合挂载技术可以实现在一个挂载点同时挂载多个文件系统，将挂载点的原目录与被挂载内容进行整合，使得最终可见的文件系统包含整合之后的各层文件和目录</li>
</ul>
<h3 id="2-2-2-图解"><a href="#2-2-2-图解" class="headerlink" title="2.2.2 图解"></a>2.2.2 图解</h3><p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F.assets/image-20220125080435098.png" alt="image-20220125080435098"></p>
<h2 id="2-3-Docker-Overlay2"><a href="#2-3-Docker-Overlay2" class="headerlink" title="2.3 Docker Overlay2"></a>2.3 Docker Overlay2</h2><p>容器文件系统有多种存储驱动实现方式：aufs，devicemapper，overlay，overlay2 等，本次以overlay2为例进行说明。</p>
<h3 id="2-3-1-概念"><a href="#2-3-1-概念" class="headerlink" title="2.3.1 概念"></a>2.3.1 概念</h3><ul>
<li>registry/repository： registry 是 repository 的集合，repository 是镜像的集合。</li>
<li>image：image 是存储镜像相关的元数据，包括镜像的架构，镜像默认配置信息，镜像的容器配置信息等等。它是“逻辑”上的概念，并无物理上的镜像文件与之对应。</li>
<li>layer：layer(镜像层) 组成了镜像，单个 layer 可以被多个镜像共享。</li>
</ul>
<p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F.assets/image-20220125082226414.png" alt="image-20220125082226414"></p>
<h3 id="2-3-2-查看Docker-Host存储驱动方式"><a href="#2-3-2-查看Docker-Host存储驱动方式" class="headerlink" title="2.3.2 查看Docker Host存储驱动方式"></a>2.3.2 查看Docker Host存储驱动方式</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker info | grep overlay</span></span><br><span class="line"> Storage Driver: overlay2</span><br></pre></td></tr></table></figure>





<h3 id="2-3-3-了解images分层"><a href="#2-3-3-了解images分层" class="headerlink" title="2.3.3 了解images分层"></a>2.3.3 了解images分层</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker pull nginx</span></span><br><span class="line"><span class="keyword">Using</span> default tag: latest</span><br><span class="line">latest: Pulling from library/nginx</span><br><span class="line">a2abf6c4d29d: Pull complete</span><br><span class="line">a9edb18cadd1: Pull complete</span><br><span class="line"><span class="number">589</span>b7251471a: Pull complete</span><br><span class="line"><span class="number">186</span>b1aaa4aa6: Pull complete</span><br><span class="line">b4df32aa5a72: Pull complete</span><br><span class="line">a0bcbecc962e: Pull complete</span><br><span class="line">Digest: sha256:<span class="number">0</span>d17b565c37bcbd895e9d92315a05c1c3c9a29f762b011a10c54a66cd53c9b31</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> nginx:latest</span><br><span class="line">docker.io/library/nginx:latest</span><br></pre></td></tr></table></figure>



<p>可以看到上述下载的镜像分为6层，如何找到这6层存储在Docker Host哪个位置呢？</p>
<p>首先查看nginx镜像</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker images</span></span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">nginx        latest    <span class="number">605</span>c77e624dd   <span class="number">3</span> weeks ago    <span class="number">141</span>MB</span><br></pre></td></tr></table></figure>



<p>通过其Image ID 605c77e624dd 就可以找到存储位置</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ls /var/lib/docker/image/overlay2/</span></span><br><span class="line">distribution  imagedb  layerdb  repositories.json</span><br></pre></td></tr></table></figure>



<p>这个目录是查找的入口，非常重要。它存储了镜像管理的元数据。</p>
<ul>
<li>repositories.json 记录了 repo 与镜像 ID 的映射关系</li>
<li>imagedb 记录了镜像架构，操作系统，构建镜像的容器 ID 和配置以及 rootfs 等信息</li>
<li>layerdb 记录了每层镜像层的元数据。</li>
</ul>
<p>通过短 ID 查找 repositories.json 文件，找到镜像 nginx 的长 ID，通过长 ID 在 imagedb 中找到该镜像的元数据：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /var/lib/docker/image/overlay2/repositories.json | grep 605c77e624dd</span></span><br><span class="line">&#123;<span class="string">&quot;Repositories&quot;</span>:<span class="string">&quot;nginx&quot;</span>:&#123;<span class="string">&quot;nginx:latest&quot;</span>:<span class="string">&quot;sha256:605c77e624ddb75e6110f997c58876baa13f8754486b461117934b24a9dc3a85&quot;</span>,<span class="string">&quot;nginx@sha256:0d17b565c37bcbd895e9d92315a05c1c3c9a29f762b011a10c54a66cd53c9b31&quot;</span>:<span class="string">&quot;sha256:605c77e624ddb75e6110f997c58876baa13f8754486b461117934b24a9dc3a85&quot;</span>&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /var/lib/docker/image/overlay2/imagedb/content/sha256/605c77e624ddb75e6110f997c58876baa13f8754486b461117934b24a9dc3a85</span></span><br><span class="line">......</span><br><span class="line"><span class="string">&quot;os&quot;</span>:<span class="string">&quot;linux&quot;</span>,<span class="string">&quot;rootfs&quot;</span>:&#123;<span class="string">&quot;type&quot;</span>:<span class="string">&quot;layers&quot;</span>,<span class="string">&quot;diff_ids&quot;</span>:[<span class="string">&quot;sha256:2edcec3590a4ec7f40cf0743c15d78fb39d8326bc029073b41ef9727da6c851f&quot;</span>,<span class="string">&quot;sha256:e379e8aedd4d72bb4c529a4ca07a4e4d230b5a1d3f7a61bc80179e8f02421ad8&quot;</span>,<span class="string">&quot;sha256:b8d6e692a25e11b0d32c5c3dd544b71b1085ddc1fddad08e68cbd7fda7f70221&quot;</span>,<span class="string">&quot;sha256:f1db227348d0a5e0b99b15a096d930d1a69db7474a1847acbc31f05e4ef8df8c&quot;</span>,<span class="string">&quot;sha256:32ce5f6a5106cc637d09a98289782edf47c32cb082dc475dd47cbf19a4f866da&quot;</span>,<span class="string">&quot;sha256:d874fd2bc83bb3322b566df739681fbd2248c58d3369cb25908d68e7ed6040a6&quot;</span>]&#125;&#125;</span><br></pre></td></tr></table></figure>



<p>这里仅保留我们想要的元数据 rootfs。在 rootfs 中看到 layers 有6层，这6层即对应镜像的6层镜像层。并且，自上而下分别映射到容器的底层到顶层。找到了镜像的6层，接下来的问题是每层的文件内容在哪里呢？</p>
<p>layerdb 元数据会给我们想要的信息，通过底层 diff-id: 2edcec3590a4ec7f40cf0743c15d78fb39d8326bc029073b41ef9727da6c851f 我们查到最底层镜像层的 cache_id，通过 cache_id 即可查找到镜像层的文件内容：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ls /var/lib/docker/image/overlay2/layerdb/sha256/2edcec3590a4ec7f40cf0743c15d78fb39d8326bc029073b41ef9727da6c851f</span></span><br><span class="line">cache<span class="literal">-id</span>  <span class="built_in">diff</span>  size  tar<span class="operator">-split</span>.json.gz</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /var/lib/docker/image/overlay2/layerdb/sha256/2edcec3590a4ec7f40cf0743c15d78fb39d8326bc029073b41ef9727da6c851f/cache-id</span></span><br><span class="line"><span class="number">85</span>c4c5ecdac6c0d197f899dac227b9d493911a9a5820eac501bb5e9ae361f4c7</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /var/lib/docker/image/overlay2/layerdb/sha256/2edcec3590a4ec7f40cf0743c15d78fb39d8326bc029073b41ef9727da6c851f/diff</span></span><br><span class="line">sha256:<span class="number">2</span>edcec3590a4ec7f40cf0743c15d78fb39d8326bc029073b41ef9727da6c851f</span><br></pre></td></tr></table></figure>



<p>使用 cacheID 查找文件内容</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ls /var/lib/docker/overlay2/85c4c5ecdac6c0d197f899dac227b9d493911a9a5820eac501bb5e9ae361f4c7</span></span><br><span class="line">committed  <span class="built_in">diff</span>  link</span><br><span class="line"><span class="comment"># ls /var/lib/docker/overlay2/85c4c5ecdac6c0d197f899dac227b9d493911a9a5820eac501bb5e9ae361f4c7/diff</span></span><br><span class="line">bin   dev  home  lib64  mnt  proc  run   srv  tmp  var</span><br><span class="line">boot  etc  lib   media  opt  root  sbin  sys  usr</span><br></pre></td></tr></table></figure>



<p>上示例中，镜像元数据和镜像层内容是分开存储的。因此通过 cache-id 我们需要到 /var/lib/docker/overlay2 目录下查看镜像层内容，它就存在 diff 目录下，其中 link 存储的是镜像层对应的短 ID，后面会看到它的用场。</p>
<p>找到了镜像层的最底层，接着查找镜像层的“中间层”，发现在 layerdb 目录下没有 diff-id e379e8aedd4d72bb4c529a4ca07a4e4d230b5a1d3f7a61bc80179e8f02421ad8的镜像层：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ls /var/lib/docker/image/overlay2/layerdb/sha256/e379e8aedd4d72bb4c529a4ca07a4e4d230b5a1d3f7a61bc80179e8f02421ad8</span></span><br><span class="line"><span class="built_in">ls</span>: 无法访问/var/lib/docker/image/overlay2/layerdb/sha256/e379e8aedd4d72bb4c529a4ca07a4e4d230b5a1d3f7a61bc80179e8f02421ad8: 没有那个文件或目录</span><br></pre></td></tr></table></figure>



<p>这是因为 docker 引入了内容寻址机制，该机制会根据文件内容来索引镜像和镜像层。docker 利用 rootfs 中的 diff_id 计算出内容寻址的 chainID，通过 chainID 获取 layer 相关信息，最终索引到镜像层文件内容。</p>
<p>对于最底层镜像层其 diff_id 即是 chainID。因此我们可以查找到它的文件内容。除最底层外，chainID 需通过公式 chainID(n) = SHA256(chain(n-1) diffID(n)) 计算得到，计算“中间层” chainID：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># echo -n &quot;sha256:2edcec3590a4ec7f40cf0743c15d78fb39d8326bc029073b41ef9727da6c851f sha256:e379e8aedd4d72bb4c529a4ca07a4e4d230b5a1d3f7a61bc80179e8f02421ad8&quot; | sha256sum -</span></span><br><span class="line"><span class="number">780238</span>f18c540007376dd5e904f583896a69fe620876cabc06977a3af4ba4fb5  -</span><br></pre></td></tr></table></figure>



<p>根据 “中间层” chainID 查找文件内容：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ls /var/lib/docker/image/overlay2/layerdb/sha256/780238f18c540007376dd5e904f583896a69fe620876cabc06977a3af4ba4fb5</span></span><br><span class="line">cache<span class="literal">-id</span>  <span class="built_in">diff</span>  parent  size  tar<span class="operator">-split</span>.json.gz</span><br></pre></td></tr></table></figure>





<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /var/lib/docker/image/overlay2/layerdb/sha256/780238f18c540007376dd5e904f583896a69fe620876cabc06977a3af4ba4fb5/cache-id</span></span><br><span class="line"><span class="number">57</span>e1f1b11e26f748161b7fccbf2ba6b24c2f98dc8a821729f0be215ad267498c</span><br></pre></td></tr></table></figure>





<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /var/lib/docker/image/overlay2/layerdb/sha256/780238f18c540007376dd5e904f583896a69fe620876cabc06977a3af4ba4fb5/diff</span></span><br><span class="line">sha256:e379e8aedd4d72bb4c529a4ca07a4e4d230b5a1d3f7a61bc80179e8f02421ad8</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /var/lib/docker/image/overlay2/layerdb/sha256/780238f18c540007376dd5e904f583896a69fe620876cabc06977a3af4ba4fb5/parent</span></span><br><span class="line">sha256:<span class="number">2</span>edcec3590a4ec7f40cf0743c15d78fb39d8326bc029073b41ef9727da6c851f</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">镜像层文件内容</span><br><span class="line"><span class="comment"># ls /var/lib/docker/overlay2/57e1f1b11e26f748161b7fccbf2ba6b24c2f98dc8a821729f0be215ad267498c</span></span><br><span class="line">committed  <span class="built_in">diff</span>  link  lower  work</span><br><span class="line"><span class="comment"># ls /var/lib/docker/overlay2/57e1f1b11e26f748161b7fccbf2ba6b24c2f98dc8a821729f0be215ad267498c/diff/</span></span><br><span class="line">docker<span class="literal">-entrypoint</span>.d  etc  lib  tmp  usr  var</span><br></pre></td></tr></table></figure>





<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">镜像层文件内容短 ID</span><br><span class="line"><span class="comment"># cat /var/lib/docker/overlay2/57e1f1b11e26f748161b7fccbf2ba6b24c2f98dc8a821729f0be215ad267498c/link</span></span><br><span class="line"><span class="number">24</span>GM2IZVPTUROAG7AWJO5ZWE6B</span><br></pre></td></tr></table></figure>





<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">“父”镜像层文件内容短 ID</span><br><span class="line"><span class="comment"># cat /var/lib/docker/overlay2/57e1f1b11e26f748161b7fccbf2ba6b24c2f98dc8a821729f0be215ad267498c/lower</span></span><br><span class="line">l/SICZO4QNVZEVOIJ4HDXVDKNYA2</span><br></pre></td></tr></table></figure>



<p>找到最底层文件内容和“中间层”文件内容，再去找最顶层文件内容就变的不难了</p>
<h2 id="2-4-Docker容器与镜像"><a href="#2-4-Docker容器与镜像" class="headerlink" title="2.4 Docker容器与镜像"></a>2.4 Docker容器与镜像</h2><p>通过 docker run 命令启动一个镜像为 nginx的容器：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker run -d nginx:latest</span></span><br><span class="line"><span class="number">3272831107</span>a3499afe8160b0cd423e2ac4223522f1995b7be3504a1d3d272878</span><br><span class="line"><span class="comment"># docker ps | grep nginx</span></span><br><span class="line"><span class="number">3272831107</span>a3   nginx:latest   <span class="string">&quot;/docker-entrypoint.…&quot;</span>   <span class="number">11</span> seconds ago   Up <span class="number">9</span> seconds   <span class="number">80</span>/tcp    angry_beaver</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mount | grep overlay</span></span><br><span class="line">overlay on /var/lib/docker/overlay2/b3f5c8b42ac055c715216e376cfe44571f618a876f481533ec1434aa0bc4f8ed/merged <span class="built_in">type</span> overlay (rw,relatime,seclabel,lowerdir=/var/lib/docker/overlay2/l/MS2X66BYF6UZ7EKUWMZJKCF4HO:/var/lib/docker/overlay2/l/ODJROQUGY3WQMOGQ3BLYZGIAG4:/var/lib/docker/overlay2/l/Q5LOBFJRH5M7M5CMSWW5L4VYOY:/var/lib/docker/overlay2/l/ZR35FN2E3WEARZV4HLRU373FT7:/var/lib/docker/overlay2/l/NSM2PTAT6TIT2H6G3HFNGZJH5N:/var/lib/docker/overlay2/l/<span class="number">24</span>GM2IZVPTUROAG7AWJO5ZWE6B:/var/lib/docker/overlay2/l/SICZO4QNVZEVOIJ4HDXVDKNYA2,upperdir=/var/lib/docker/overlay2/b3f5c8b42ac055c715216e376cfe44571f618a876f481533ec1434aa0bc4f8ed/<span class="built_in">diff</span>,workdir=/var/lib/docker/overla <span class="number">2</span>/b3f5c8b42ac055c715216e376cfe44571f618a876f481533ec1434aa0bc4f8ed/work)</span><br></pre></td></tr></table></figure>



<p>可以看到，启动容器会 mount 一个 overlay 的联合文件系统到容器内。这个文件系统由三层组成：</p>
<ul>
<li>lowerdir：只读层，即为镜像的镜像层。</li>
<li>upperdir：读写层，该层是容器的读写层，对容器的读写操作将反映在读写层。</li>
<li>workdir： overlayfs 的内部层，用于实现从只读层到读写层的 copy_up 操作。</li>
<li>merge：容器内作为同一视图联合挂载点的目录。</li>
</ul>
<p>这里需要着重介绍的是容器的 lowerdir 镜像只读层，查看只读层的短 ID：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">lowerdir=/var/lib/docker/overlay2/l/MS2X66BYF6UZ7EKUWMZJKCF4HO</span><br><span class="line">/var/lib/docker/overlay2/l/ODJROQUGY3WQMOGQ3BLYZGIAG4</span><br><span class="line">/var/lib/docker/overlay2/l/Q5LOBFJRH5M7M5CMSWW5L4VYOY</span><br><span class="line">/var/lib/docker/overlay2/l/ZR35FN2E3WEARZV4HLRU373FT7</span><br><span class="line">/var/lib/docker/overlay2/l/NSM2PTAT6TIT2H6G3HFNGZJH5N</span><br><span class="line">/var/lib/docker/overlay2/l/<span class="number">24</span>GM2IZVPTUROAG7AWJO5ZWE6B</span><br><span class="line">/var/lib/docker/overlay2/l/SICZO4QNVZEVOIJ4HDXVDKNYA2</span><br></pre></td></tr></table></figure>



<p>镜像层只有6层这里的短 ID 却有7个？<br>在 /var/lib/docker/overlay2/l 目录下我们找到了答案：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd /var/lib/docker/overlay2/l</span></span><br><span class="line"><span class="comment"># pwd</span></span><br><span class="line">/var/lib/docker/overlay2/l</span><br><span class="line"><span class="comment"># ls</span></span><br><span class="line"><span class="number">24</span>GM2IZVPTUROAG7AWJO5ZWE6B  LZEAXJGRW6HKBBGGB2N4CWMSVJ  R2XTGODAA67NQJM44MIKMDUF4W</span><br><span class="line"><span class="number">5</span>OI5WMJ2FP7QI7IFWDMHLBRDDN  MS2X66BYF6UZ7EKUWMZJKCF4HO  SICZO4QNVZEVOIJ4HDXVDKNYA2</span><br><span class="line"><span class="number">644</span>ISPHLTBSSC2KLP6BGHHHZPR  NSM2PTAT6TIT2H6G3HFNGZJH5N  ZR35FN2E3WEARZV4HLRU373FT7</span><br><span class="line"><span class="number">6</span>CQUILQSJNVTMFFV3ABCCOGOYG  ODJROQUGY3WQMOGQ3BLYZGIAG4</span><br><span class="line">BQENAYC44O2ZCZFT5URMH5OADK  Q5LOBFJRH5M7M5CMSWW5L4VYOY</span><br></pre></td></tr></table></figure>





<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ls -l MS2X66BYF6UZ7EKUWMZJKCF4HO/</span></span><br><span class="line">总用量 <span class="number">0</span></span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span>. <span class="number">4</span> root root <span class="number">43</span> <span class="number">1</span>月  <span class="number">25</span> <span class="number">01</span>:<span class="number">27</span> dev</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span>. <span class="number">2</span> root root <span class="number">66</span> <span class="number">1</span>月  <span class="number">25</span> <span class="number">01</span>:<span class="number">27</span> etc</span><br><span class="line">[<span class="type">root</span>@<span class="number">192</span> <span class="type">l</span>]<span class="comment"># ls -l ODJROQUGY3WQMOGQ3BLYZGIAG4/</span></span><br><span class="line">总用量 <span class="number">0</span></span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span>. <span class="number">2</span> root root <span class="number">41</span> <span class="number">12</span>月 <span class="number">30</span> <span class="number">03</span>:<span class="number">28</span> docker<span class="literal">-entrypoint</span>.d</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="number">192</span> <span class="type">l</span>]<span class="comment"># ls -l Q5LOBFJRH5M7M5CMSWW5L4VYOY/</span></span><br><span class="line">总用量 <span class="number">0</span></span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span>. <span class="number">2</span> root root <span class="number">41</span> <span class="number">12</span>月 <span class="number">30</span> <span class="number">03</span>:<span class="number">28</span> docker<span class="literal">-entrypoint</span>.d</span><br><span class="line">[<span class="type">root</span>@<span class="number">192</span> <span class="type">l</span>]<span class="comment"># ls -l ZR35FN2E3WEARZV4HLRU373FT7/</span></span><br><span class="line">总用量 <span class="number">0</span></span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span>. <span class="number">2</span> root root <span class="number">45</span> <span class="number">12</span>月 <span class="number">30</span> <span class="number">03</span>:<span class="number">28</span> docker<span class="literal">-entrypoint</span>.d</span><br><span class="line">[<span class="type">root</span>@<span class="number">192</span> <span class="type">l</span>]<span class="comment"># ls -l NSM2PTAT6TIT2H6G3HFNGZJH5N/</span></span><br><span class="line">总用量 <span class="number">4</span></span><br><span class="line"><span class="literal">-rwxrwxr</span><span class="literal">-x</span>. <span class="number">1</span> root root <span class="number">1202</span> <span class="number">12</span>月 <span class="number">30</span> <span class="number">03</span>:<span class="number">28</span> docker<span class="literal">-entrypoint</span>.sh</span><br><span class="line">[<span class="type">root</span>@<span class="number">192</span> <span class="type">l</span>]<span class="comment"># ls -l 24GM2IZVPTUROAG7AWJO5ZWE6B/</span></span><br><span class="line">总用量 <span class="number">4</span></span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span>.  <span class="number">2</span> root root    <span class="number">6</span> <span class="number">12</span>月 <span class="number">30</span> <span class="number">03</span>:<span class="number">28</span> docker<span class="literal">-entrypoint</span>.d</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span>. <span class="number">18</span> root root <span class="number">4096</span> <span class="number">12</span>月 <span class="number">30</span> <span class="number">03</span>:<span class="number">28</span> etc</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span>.  <span class="number">4</span> root root   <span class="number">45</span> <span class="number">12</span>月 <span class="number">20</span> <span class="number">08</span>:<span class="number">00</span> lib</span><br><span class="line">drwxrwxrwt.  <span class="number">2</span> root root    <span class="number">6</span> <span class="number">12</span>月 <span class="number">30</span> <span class="number">03</span>:<span class="number">28</span> tmp</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span>.  <span class="number">7</span> root root   <span class="number">66</span> <span class="number">12</span>月 <span class="number">20</span> <span class="number">08</span>:<span class="number">00</span> usr</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span>.  <span class="number">5</span> root root   <span class="number">41</span> <span class="number">12</span>月 <span class="number">20</span> <span class="number">08</span>:<span class="number">00</span> var</span><br><span class="line">[<span class="type">root</span>@<span class="number">192</span> <span class="type">l</span>]<span class="comment"># ls -l SICZO4QNVZEVOIJ4HDXVDKNYA2/</span></span><br><span class="line">总用量 <span class="number">12</span></span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span>.  <span class="number">2</span> root root <span class="number">4096</span> <span class="number">12</span>月 <span class="number">20</span> <span class="number">08</span>:<span class="number">00</span> bin</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span>.  <span class="number">2</span> root root    <span class="number">6</span> <span class="number">12</span>月 <span class="number">12</span> <span class="number">01</span>:<span class="number">25</span> boot</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span>.  <span class="number">2</span> root root    <span class="number">6</span> <span class="number">12</span>月 <span class="number">20</span> <span class="number">08</span>:<span class="number">00</span> dev</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span>. <span class="number">30</span> root root <span class="number">4096</span> <span class="number">12</span>月 <span class="number">20</span> <span class="number">08</span>:<span class="number">00</span> etc</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span>.  <span class="number">2</span> root root    <span class="number">6</span> <span class="number">12</span>月 <span class="number">12</span> <span class="number">01</span>:<span class="number">25</span> home</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span>.  <span class="number">8</span> root root   <span class="number">96</span> <span class="number">12</span>月 <span class="number">20</span> <span class="number">08</span>:<span class="number">00</span> lib</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span>.  <span class="number">2</span> root root   <span class="number">34</span> <span class="number">12</span>月 <span class="number">20</span> <span class="number">08</span>:<span class="number">00</span> lib64</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span>.  <span class="number">2</span> root root    <span class="number">6</span> <span class="number">12</span>月 <span class="number">20</span> <span class="number">08</span>:<span class="number">00</span> media</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span>.  <span class="number">2</span> root root    <span class="number">6</span> <span class="number">12</span>月 <span class="number">20</span> <span class="number">08</span>:<span class="number">00</span> mnt</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span>.  <span class="number">2</span> root root    <span class="number">6</span> <span class="number">12</span>月 <span class="number">20</span> <span class="number">08</span>:<span class="number">00</span> opt</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span>.  <span class="number">2</span> root root    <span class="number">6</span> <span class="number">12</span>月 <span class="number">12</span> <span class="number">01</span>:<span class="number">25</span> proc</span><br><span class="line">drwx------.  <span class="number">2</span> root root   <span class="number">37</span> <span class="number">12</span>月 <span class="number">20</span> <span class="number">08</span>:<span class="number">00</span> root</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span>.  <span class="number">3</span> root root   <span class="number">30</span> <span class="number">12</span>月 <span class="number">20</span> <span class="number">08</span>:<span class="number">00</span> run</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span>.  <span class="number">2</span> root root <span class="number">4096</span> <span class="number">12</span>月 <span class="number">20</span> <span class="number">08</span>:<span class="number">00</span> sbin</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span>.  <span class="number">2</span> root root    <span class="number">6</span> <span class="number">12</span>月 <span class="number">20</span> <span class="number">08</span>:<span class="number">00</span> srv</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span>.  <span class="number">2</span> root root    <span class="number">6</span> <span class="number">12</span>月 <span class="number">12</span> <span class="number">01</span>:<span class="number">25</span> sys</span><br><span class="line">drwxrwxrwt.  <span class="number">2</span> root root    <span class="number">6</span> <span class="number">12</span>月 <span class="number">20</span> <span class="number">08</span>:<span class="number">00</span> tmp</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span>. <span class="number">11</span> root root  <span class="number">120</span> <span class="number">12</span>月 <span class="number">20</span> <span class="number">08</span>:<span class="number">00</span> usr</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span>. <span class="number">11</span> root root  <span class="number">139</span> <span class="number">12</span>月 <span class="number">20</span> <span class="number">08</span>:<span class="number">00</span> var</span><br></pre></td></tr></table></figure>



<p>镜像层ODJROQUGY3WQMOGQ3BLYZGIAG4/Q5LOBFJRH5M7M5CMSWW5L4VYOY/ZR35FN2E3WEARZV4HLRU373FT7/NSM2PTAT6TIT2H6G3HFNGZJH5N/24GM2IZVPTUROAG7AWJO5ZWE6B/SICZO4QNVZEVOIJ4HDXVDKNYA2 分别对应镜像的6层镜像层文件内容，它们分别映射到镜像层的 diff 目录。而 MS2X66BYF6UZ7EKUWMZJKCF4HO映射的是容器的初始化层 init，该层内容是和容器配置相关的文件内容，它是只读的。</p>
<p>启动了容器，docker 将镜像的内容 mount 到容器中。那么，如果在容器内写文件会对镜像有什么影响呢？</p>
<h2 id="2-5-容器内写文件"><a href="#2-5-容器内写文件" class="headerlink" title="2.5 容器内写文件"></a>2.5 容器内写文件</h2><p>不难理解，镜像层是只读的，在容器中写文件其实是将文件写入到 overlay 的可读写层。</p>
<p>这里有几个 case 可以测试：</p>
<ul>
<li>读写层不存在该文件，只读层存在。</li>
<li>读写层存在该文件，只读层不存在。</li>
<li>读写层和只读层都不存在该文件。</li>
</ul>
<p>我们简单构建一种读写层和只读层都不存在的场景：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker run -it centos:latest bash</span></span><br><span class="line">[<span class="type">root</span>@<span class="number">355</span><span class="type">e99982248</span> /]<span class="comment"># touch lixiang.txt</span></span><br><span class="line">[<span class="type">root</span>@<span class="number">355</span><span class="type">e99982248</span> /]<span class="comment"># ls</span></span><br><span class="line">bin  etc   lib    lost+found  mnt      opt   root  sbin  sys  usr</span><br><span class="line">dev  home  lib64  media       lixiang.txt  proc  run   srv   tmp  var</span><br></pre></td></tr></table></figure>



<p>查看读写层是否有该文件：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">查看镜像是否有变化</span><br><span class="line"><span class="comment"># docker images</span></span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">ubuntu       latest    d13c942271d6   <span class="number">2</span> weeks ago    <span class="number">72.8</span>MB</span><br><span class="line">bash         latest    <span class="number">5557</span>e073f11c   <span class="number">2</span> weeks ago    <span class="number">13</span>MB</span><br><span class="line">nginx        latest    <span class="number">605</span>c77e624dd   <span class="number">3</span> weeks ago    <span class="number">141</span>MB</span><br><span class="line">centos       latest    <span class="number">5</span>d0da3dc9764   <span class="number">4</span> months ago   <span class="number">231</span>MB</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># cat /var/lib/docker/image/overlay2/repositories.json | grep 5d0da3dc9764</span></span><br><span class="line">&#123;<span class="string">&quot;Repositories&quot;</span>&#123;<span class="string">&quot;centos:latest&quot;</span>:<span class="string">&quot;sha256:5d0da3dc976460b72c77d94c8a1ad043720b0416bfc16c52c45d4847e53fadb6&quot;</span>,<span class="string">&quot;centos@sha256:a27fd8080b517143cbbbab9dfb7c8571c40d67d534bbdee55bd6c473f432b177&quot;</span>:<span class="string">&quot;sha256:5d0da3dc976460b72c77d94c8a1ad043720b0416bfc16c52c45d4847e53fadb6&quot;</span>&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># cat /var/lib/docker/image/overlay2/imagedb/content/sha256/5d0da3dc976460b72c77d94c8a1ad043720b0416bfc16c52c45d4847e53fadb6</span></span><br><span class="line">&#123;<span class="string">&quot;os&quot;</span>:<span class="string">&quot;linux&quot;</span>,<span class="string">&quot;rootfs&quot;</span>:&#123;<span class="string">&quot;type&quot;</span>:<span class="string">&quot;layers&quot;</span>,<span class="string">&quot;diff_ids&quot;</span>:[<span class="string">&quot;sha256:74ddd0ec08fa43d09f32636ba91a0a3053b02cb4627c35051aff89f853606b59&quot;</span>]&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># ls </span></span><br><span class="line">/var/lib/docker/image/overlay2/layerdb/sha256/<span class="number">74</span>ddd0ec08fa43d09f32636ba91a0a3053b02cb4627c35051aff89f853606b59:</span><br><span class="line">cache<span class="literal">-id</span>  <span class="built_in">diff</span>  size  tar<span class="operator">-split</span>.json.gz</span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># cat /var/lib/docker/image/overlay2/layerdb/sha256/74ddd0ec08fa43d09f32636ba91a0a3053b02cb4627c35051aff89f853606b59/cache-id</span></span><br><span class="line">b17bc5c5103514923a30983c48f909e06f366b7aa1e85f112b67abb3ef5cd0cb</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># cat /var/lib/docker/image/overlay2/layerdb/sha256/74ddd0ec08fa43d09f32636ba91a0a3053b02cb4627c35051aff89f853606b59/diff</span></span><br><span class="line">sha256:<span class="number">74</span>ddd0ec08fa43d09f32636ba91a0a3053b02cb4627c35051aff89f853606b59</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># ls /var/lib/docker/overlay2/b17bc5c5103514923a30983c48f909e06f366b7aa1e85f112b67abb3ef5cd0cb</span></span><br><span class="line">committed  <span class="built_in">diff</span>  link</span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># ls /var/lib/docker/overlay2/b17bc5c5103514923a30983c48f909e06f366b7aa1e85f112b67abb3ef5cd0cb/diff/</span></span><br><span class="line">bin  etc   lib    lost+found  mnt  proc  run   srv  tmp  var</span><br><span class="line">dev  home  lib64  media       opt  root  sbin  sys  usr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查看容器是否有变化</span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># mount | grep overlay</span></span><br><span class="line"><span class="built_in">type</span> overlay (rw,relatime,seclabel,lowerdir=/var/lib/docker/overlay2/l/R2W2LEMDPRIUFYDVSLIQSCYTGX:/var/lib/docker/overlay2/l/R2XTGODAA67NQJM44MIKMDUF4W,upperdir=/var/lib/docker overlay2/<span class="number">7</span>f0b54c748171872ce564305e394547555cb1182abf802c2262384be3dc78a8f/<span class="built_in">diff</span>,workdir=/var/lib/docker/overlay2/<span class="number">7</span>f0b54c748171872ce564305e394547555cb1182abf802c2262384be3dc78a8f/work)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># ls -l /var/lib/docker/overlay2/l/</span></span><br><span class="line">总用量 <span class="number">0</span></span><br><span class="line"></span><br><span class="line">lrwxrwxrwx. <span class="number">1</span> root root <span class="number">77</span> <span class="number">1</span>月  <span class="number">25</span> <span class="number">01</span>:<span class="number">41</span> R2W2LEMDPRIUFYDVSLIQSCYTGX -&gt; ../<span class="number">7</span>f0b54c748171872ce564305e394547555cb1182abf802c2262384be3dc78a8f<span class="literal">-init</span>/<span class="built_in">diff</span></span><br><span class="line">lrwxrwxrwx. <span class="number">1</span> root root <span class="number">72</span> <span class="number">1</span>月  <span class="number">25</span> <span class="number">00</span>:<span class="number">29</span> R2XTGODAA67NQJM44MIKMDUF4W -&gt; ../b17bc5c5103514923a30983c48f909e06f366b7aa1e85f112b67abb3ef5cd0cb/<span class="built_in">diff</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># ls /var/lib/docker/overlay2/7f0b54c748171872ce564305e394547555cb1182abf802c2262384be3dc78a8f/diff</span></span><br><span class="line">lixiang.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># ls /var/lib/docker/overlay2/7f0b54c748171872ce564305e394547555cb1182abf802c2262384be3dc78a8f/merged/</span></span><br><span class="line">bin  etc   lib    lost+found  mnt      opt   root  sbin  sys  usr</span><br><span class="line">dev  home  lib64  media       lixiang.txt  proc  run   srv   tmp  var</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="三、Docker容器镜像操作命令"><a href="#三、Docker容器镜像操作命令" class="headerlink" title="三、Docker容器镜像操作命令"></a>三、Docker容器镜像操作命令</h1><h2 id="3-1-docker-commit"><a href="#3-1-docker-commit" class="headerlink" title="3.1  docker commit"></a>3.1  docker commit</h2><p>上节提到容器内写文件会反映在 overlay 的可读写层，那么读写层的文件内容可以做成镜像吗？</p>
<p>可以。docker 通过 commit 和 build 操作实现镜像的构建。commit 将容器提交为一个镜像，build 在一个镜像的基础上构建镜像。</p>
<p>使用 commit 将上节的容器提交为一个镜像：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="number">355</span><span class="type">e99982248</span> /]<span class="comment">#   ctrl+p+q</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE           COMMAND                  CREATED          STATUS          PORTS     NAMES</span><br><span class="line"><span class="number">355</span>e99982248   centos:latest   <span class="string">&quot;bash&quot;</span>                   <span class="number">21</span> minutes ago   Up <span class="number">21</span> minutes             fervent_perlman</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker commit 355e99982248</span></span><br><span class="line">sha256:<span class="number">8965</span>dcf23201ed42d4904e2f10854d301ad93b34bea73f384440692e006943de</span><br></pre></td></tr></table></figure>





<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker images</span></span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED              SIZE</span><br><span class="line">&lt;none&gt;       &lt;none&gt;    <span class="number">8965</span>dcf23201   About a minute ago   <span class="number">231</span>MB</span><br></pre></td></tr></table></figure>





<p>image 短 ID 8965dcf23201 即为容器提交的镜像，查看镜像的 imagedb 元数据：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat  /var/lib/docker/image/overlay2/imagedb/content/sha256/8965dcf23201ed42d4904e2f10854d301ad93b34bea73f384440692e006943de</span></span><br><span class="line">......</span><br><span class="line"><span class="string">&quot;os&quot;</span>:<span class="string">&quot;linux&quot;</span>,<span class="string">&quot;rootfs&quot;</span>:&#123;<span class="string">&quot;type&quot;</span>:<span class="string">&quot;layers&quot;</span>,<span class="string">&quot;diff_ids&quot;</span>:[<span class="string">&quot;sha256:74ddd0ec08fa43d09f32636ba91a0a3053b02cb4627c35051aff89f853606b59&quot;</span>,<span class="string">&quot;sha256:551c3089b186b4027e949910981ff1ba54114610f2aab9359d28694c18b0203b&quot;</span>]&#125;&#125;</span><br></pre></td></tr></table></figure>



<p>可以看到镜像层自上而下的前1个镜像层 diff_id 和 centos 镜像层 diff_id 是一样的，说明每层镜像层可以被多个镜像共享。而多出来的一层镜像层内容即是上节我们写入文件的内容：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># echo -n &quot;sha256:74ddd0ec08fa43d09f32636ba91a0a3053b02cb4627c35051aff89f853606b59 sha256:551c3089b186b4027e949910981ff1ba54114610f2aab9359d28694c18b0203b&quot; | sha256sum -</span></span><br><span class="line"><span class="number">92</span>f7208b1cc0b5cc8fe214a4b0178aa4962b58af8ec535ee7211f335b1e0ed3b  -</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd /var/lib/docker/image/overlay2/layerdb/sha256/92f7208b1cc0b5cc8fe214a4b0178aa4962b58af8ec535ee7211f335b1e0ed3b</span></span><br><span class="line">[<span class="type">root</span>@<span class="number">192</span> <span class="number">92</span><span class="type">f7208b1cc0b5cc8fe214a4b0178aa4962b58af8ec535ee7211f335b1e0ed3b</span>]<span class="comment"># ls</span></span><br><span class="line">cache<span class="literal">-id</span>  <span class="built_in">diff</span>  parent  size  tar<span class="operator">-split</span>.json.gz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="number">192</span> <span class="number">92</span><span class="type">f7208b1cc0b5cc8fe214a4b0178aa4962b58af8ec535ee7211f335b1e0ed3b</span>]<span class="comment"># cat cache-id</span></span><br><span class="line"><span class="number">250</span>dc0b4f2c5f27952241a55cd4c286bfaaf8af4b77c9d0a38976df4c147cb95</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="number">192</span> <span class="number">92</span><span class="type">f7208b1cc0b5cc8fe214a4b0178aa4962b58af8ec535ee7211f335b1e0ed3b</span>]<span class="comment"># ls /var/lib/docker/overlay2/250dc0b4f2c5f27952241a55cd4c286bfaaf8af4b77c9d0a38976df4c147cb95</span></span><br><span class="line"><span class="built_in">diff</span>  link  lower  work</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="number">192</span> <span class="number">92</span><span class="type">f7208b1cc0b5cc8fe214a4b0178aa4962b58af8ec535ee7211f335b1e0ed3b</span>]<span class="comment"># ls /var/lib/docker/overlay2/250dc0b4f2c5f27952241a55cd4c286bfaaf8af4b77c9d0a38976df4c147cb95/diff</span></span><br><span class="line">lixiang.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="3-2-docker-save"><a href="#3-2-docker-save" class="headerlink" title="3.2 docker save"></a>3.2 docker save</h2><blockquote>
<p>导出容器镜像，方便分享。</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker save -o centos.tar centos:latest  </span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ls</span></span><br><span class="line"></span><br><span class="line">centos.tar  </span><br></pre></td></tr></table></figure>





<h2 id="3-3-docker-load"><a href="#3-3-docker-load" class="headerlink" title="3.3 docker load"></a>3.3 docker load</h2><blockquote>
<p>把他人分享的容器镜像导入到本地，这通常是容器镜像分发方式之一。</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker load -i centos.tar</span></span><br></pre></td></tr></table></figure>





<h2 id="3-4-docker-export"><a href="#3-4-docker-export" class="headerlink" title="3.4 docker export"></a>3.4 docker export</h2><blockquote>
<p>把正在运行的容器导出</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE           COMMAND                  CREATED       STATUS       PORTS     NAMES</span><br><span class="line"><span class="number">355</span>e99982248   centos:latest   <span class="string">&quot;bash&quot;</span>                   <span class="number">7</span> hours ago   Up <span class="number">7</span> hours             fervent_perlman</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker export -o centos7.tar 355e99982248</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ls</span></span><br><span class="line">centos7.tar</span><br></pre></td></tr></table></figure>


<h2 id="3-5-docker-import"><a href="#3-5-docker-import" class="headerlink" title="3.5 docker import"></a>3.5 docker import</h2><blockquote>
<p>导入使用docker export导入的容器做为本地容器镜像。</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ls</span></span><br><span class="line">centos7.tar </span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker import centos7.tar centos7:v1</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker images</span></span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED              SIZE</span><br><span class="line">centos7      v1        <span class="number">3639</span>f9a13231   <span class="number">17</span> seconds ago       <span class="number">231</span>MB</span><br></pre></td></tr></table></figure>


<p>通过docker save与docker load及docker export与docker import分享容器镜像都是非常麻烦的，有没有更方便的方式分享容器镜像呢？</p>
]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker核心概念镜像仓库</title>
    <url>/2023/07/29/%E4%BA%91%E5%8E%9F%E7%94%9F/Docker/Docker%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<h1 id="一、容器镜像加速器"><a href="#一、容器镜像加速器" class="headerlink" title="一、容器镜像加速器"></a>一、容器镜像加速器</h1><blockquote>
<p>由于国内访问国外的容器镜像仓库速度比较慢，因此国内企业创建了容器镜像加速器，以方便国内用户使用容器镜像。</p>
</blockquote>
<h2 id="1-1-获取阿里云容器镜像加速地址"><a href="#1-1-获取阿里云容器镜像加速地址" class="headerlink" title="1.1 获取阿里云容器镜像加速地址"></a>1.1 获取阿里云容器镜像加速地址</h2><p><img src="/images/Docker/docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220125221631548.png" alt="image-20220125221631548"></p>
<p><img src="/images/Docker/docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220125221748100.png" alt="image-20220125221748100"></p>
<h2 id="1-2-配置docker-daemon使用加速器"><a href="#1-2-配置docker-daemon使用加速器" class="headerlink" title="1.2 配置docker daemon使用加速器"></a>1.2 配置docker daemon使用加速器</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">添加daemon.json配置文件</span><br><span class="line"><span class="comment"># vim /etc/docker/daemon.json</span></span><br><span class="line"><span class="comment"># cat /etc/docker/daemon.json</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://s27w6kze.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">重启docker</span><br><span class="line"><span class="comment"># systemctl daemon-reload</span></span><br><span class="line"><span class="comment"># systemctl restart docker</span></span><br></pre></td></tr></table></figure>





<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">尝试下载容器镜像</span><br><span class="line"><span class="comment"># docker pull centos</span></span><br></pre></td></tr></table></figure>







<h1 id="二、容器镜像仓库"><a href="#二、容器镜像仓库" class="headerlink" title="二、容器镜像仓库"></a>二、容器镜像仓库</h1><h2 id="2-1-docker-hub"><a href="#2-1-docker-hub" class="headerlink" title="2.1 docker hub"></a>2.1 docker hub</h2><h3 id="2-1-1-注册"><a href="#2-1-1-注册" class="headerlink" title="2.1.1 注册"></a>2.1.1 注册</h3><blockquote>
<p>准备邮箱及用户ID</p>
</blockquote>
<p><img src="/images/Docker/docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220125224745376.png" alt="image-20220125224745376"></p>
<p><img src="/images/Docker/docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220125224838850.png" alt="image-20220125224838850"></p>
<p><img src="/images/Docker/docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220125225243088.png" alt="image-20220125225243088"></p>
<p><img src="/images/Docker/docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220125225448956.png" alt="image-20220125225448956"></p>
<h3 id="2-1-2-登录"><a href="#2-1-2-登录" class="headerlink" title="2.1.2 登录"></a>2.1.2 登录</h3><p><img src="/images/Docker/docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220125225753719.png" alt="image-20220125225753719"></p>
<p><img src="/images/Docker/docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220125225914283.png" alt="image-20220125225914283"></p>
<h3 id="2-1-3-创建容器镜像仓库"><a href="#2-1-3-创建容器镜像仓库" class="headerlink" title="2.1.3 创建容器镜像仓库"></a>2.1.3 创建容器镜像仓库</h3><p><img src="/images/Docker/docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220125230046456.png" alt="image-20220125230046456"></p>
<p><img src="/images/Docker/docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220125230216488.png" alt="image-20220125230216488"></p>
<p><img src="/images/Docker/docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220125230307699.png" alt="image-20220125230307699"></p>
<h3 id="2-1-4-在本地登录Docker-Hub"><a href="#2-1-4-在本地登录Docker-Hub" class="headerlink" title="2.1.4 在本地登录Docker Hub"></a>2.1.4 在本地登录Docker Hub</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">默认可以不添加docker hub容器镜像仓库地址</span><br><span class="line"><span class="comment"># docker login </span></span><br><span class="line">Login with your Docker ID to push and pull images from Docker Hub. <span class="keyword">If</span> you don<span class="string">&#x27;t have a Docker ID, head over to https://hub.docker.com to create one.</span></span><br><span class="line"><span class="string">Username: dockersmartmsb</span></span><br><span class="line"><span class="string">Password:</span></span><br><span class="line"><span class="string">WARNING! Your password will be stored unencrypted in /root/.docker/config.json.</span></span><br><span class="line"><span class="string">Configure a credential helper to remove this warning. See</span></span><br><span class="line"><span class="string">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Login Succeeded 成功</span></span><br></pre></td></tr></table></figure>





<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">登出</span><br><span class="line"><span class="comment"># docker logout</span></span><br><span class="line">Removing login credentials <span class="keyword">for</span> https://index.docker.io/v1/</span><br></pre></td></tr></table></figure>







<h3 id="2-1-5-上传容器镜像"><a href="#2-1-5-上传容器镜像" class="headerlink" title="2.1.5 上传容器镜像"></a>2.1.5 上传容器镜像</h3><blockquote>
<p>在登录Docker Hub主机上传容器镜像,向全球用户共享容器镜像。</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">为容器镜像重新打标记</span><br><span class="line"></span><br><span class="line">原始容器镜像</span><br><span class="line"><span class="comment"># docker images</span></span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">centos       latest    <span class="number">5</span>d0da3dc9764   <span class="number">4</span> months ago   <span class="number">231</span>MB</span><br><span class="line"></span><br><span class="line">重新为容器镜像打标记</span><br><span class="line"><span class="comment"># docker tag centos:latest dockersmartmsb/centos:v1</span></span><br><span class="line"></span><br><span class="line">重新打标记后容器镜像</span><br><span class="line"><span class="comment"># docker images</span></span><br><span class="line">REPOSITORY              TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">dockersmartmsb/centos   v1        <span class="number">5</span>d0da3dc9764   <span class="number">4</span> months ago   <span class="number">231</span>MB</span><br><span class="line">centos                  latest    <span class="number">5</span>d0da3dc9764   <span class="number">4</span> months ago   <span class="number">231</span>MB</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">上传容器镜像至docker hub</span><br><span class="line"><span class="comment"># docker push dockersmartmsb/centos:v1</span></span><br><span class="line">The push refers to repository [<span class="type">docker.io</span>/<span class="type">dockersmartmsb</span>/<span class="type">centos</span>]</span><br><span class="line"><span class="number">74</span>ddd0ec08fa: Mounted from library/centos</span><br><span class="line">v1: digest: sha256:a1801b843b1bfaf77c501e7a6d3f709401a1e0c83863037fa3aab063a7fdb9dc size: <span class="number">529</span></span><br></pre></td></tr></table></figure>



<p><img src="/images/Docker/docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220125231912826.png" alt="image-20220125231912826"></p>
<h3 id="2-1-6-下载容器镜像"><a href="#2-1-6-下载容器镜像" class="headerlink" title="2.1.6 下载容器镜像"></a>2.1.6 下载容器镜像</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">在其它主机上下载</span><br><span class="line"></span><br><span class="line">下载</span><br><span class="line"><span class="comment"># docker pull dockersmartmsb/centos:v1</span></span><br><span class="line">v1: Pulling from dockersmartmsb/centos</span><br><span class="line">a1d0c7532777: Pull complete</span><br><span class="line">Digest: sha256:a1801b843b1bfaf77c501e7a6d3f709401a1e0c83863037fa3aab063a7fdb9dc</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> dockersmartmsb/centos:v1</span><br><span class="line">docker.io/dockersmartmsb/centos:v1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查看下载后容器镜像</span><br><span class="line"><span class="comment"># docker images</span></span><br><span class="line">REPOSITORY              TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">dockersmartmsb/centos   v1        <span class="number">5</span>d0da3dc9764   <span class="number">4</span> months ago   <span class="number">231</span>MB</span><br></pre></td></tr></table></figure>





<h2 id="2-2-harbor"><a href="#2-2-harbor" class="headerlink" title="2.2 harbor"></a>2.2 harbor</h2><h3 id="2-2-1-获取-docker-compose二进制文件"><a href="#2-2-1-获取-docker-compose二进制文件" class="headerlink" title="2.2.1 获取 docker compose二进制文件"></a>2.2.1 获取 docker compose二进制文件</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">下载docker<span class="literal">-compose</span>二进制文件</span><br><span class="line"><span class="comment"># wget https://github.com/docker/compose/releases/download/1.25.0/docker-compose-Linux-x86_64</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">查看已下载二进制文件</span><br><span class="line"><span class="comment"># ls</span></span><br><span class="line">docker<span class="literal">-compose</span><span class="literal">-Linux</span><span class="literal">-x86_64</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">移动二进制文件到/usr/bin目录，并更名为docker<span class="literal">-compose</span></span><br><span class="line"><span class="comment"># mv docker-compose-Linux-x86_64 /usr/bin/docker-compose</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">为二进制文件添加可执行权限</span><br><span class="line"><span class="comment"># chmod +x /usr/bin/docker-compose</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">安装完成后，查看docker<span class="literal">-compse</span>版本</span><br><span class="line"><span class="comment"># docker-compose version</span></span><br><span class="line">docker<span class="literal">-compose</span> version <span class="number">1.25</span>.<span class="number">0</span>, build <span class="number">0</span>a186604</span><br><span class="line">docker<span class="literal">-py</span> version: <span class="number">4.1</span>.<span class="number">0</span></span><br><span class="line">CPython version: <span class="number">3.7</span>.<span class="number">4</span></span><br><span class="line">OpenSSL version: OpenSSL <span class="number">1.1</span>.<span class="number">0</span>l  <span class="number">10</span> Sep <span class="number">2019</span></span><br></pre></td></tr></table></figure>





<h3 id="2-2-2-获取harbor安装文件"><a href="#2-2-2-获取harbor安装文件" class="headerlink" title="2.2.2 获取harbor安装文件"></a>2.2.2 获取harbor安装文件</h3><p><img src="/images/Docker/docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220125232445910.png" alt="image-20220125232445910"></p>
<p><img src="/images/Docker/docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220125232519365.png" alt="image-20220125232519365"></p>
<p><img src="/images/Docker/docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220125233602760.png" alt="image-20220125233602760"></p>
<p><img src="/images/Docker/docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220125233652604.png" alt="image-20220125233652604"></p>
<p><img src="/images/Docker/docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220125233739356.png" alt="image-20220125233739356"></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">下载harbor离线安装包</span><br><span class="line"><span class="comment"># wget https://github.com/goharbor/harbor/releases/download/v2.4.1/harbor-offline-installer-v2.4.1.tgz</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">查看已下载的离线安装包</span><br><span class="line"><span class="comment"># ls</span></span><br><span class="line">harbor<span class="literal">-offline</span><span class="literal">-installer</span><span class="literal">-v2</span>.<span class="number">4.1</span>.tgz</span><br></pre></td></tr></table></figure>





<h3 id="2-2-3-获取TLS文件"><a href="#2-2-3-获取TLS文件" class="headerlink" title="2.2.3 获取TLS文件"></a>2.2.3 获取TLS文件</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">查看准备好的证书</span><br><span class="line"><span class="comment"># ls</span></span><br><span class="line">kubemsb.com_nginx.zip</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">解压证书压缩包文件</span><br><span class="line"><span class="comment"># unzip kubemsb.com_nginx.zip</span></span><br><span class="line">Archive:  kubemsb.com_nginx.zip</span><br><span class="line">Aliyun Certificate Download</span><br><span class="line">  inflating: <span class="number">6864844</span>_kubemsb.com.pem</span><br><span class="line">  inflating: <span class="number">6864844</span>_kubemsb.com.key</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">查看解压出的文件</span><br><span class="line"><span class="comment"># ls</span></span><br><span class="line"><span class="number">6864844</span>_kubemsb.com.key</span><br><span class="line"><span class="number">6864844</span>_kubemsb.com.pem</span><br></pre></td></tr></table></figure>





<h3 id="2-2-4-修改配置文件"><a href="#2-2-4-修改配置文件" class="headerlink" title="2.2.4 修改配置文件"></a>2.2.4 修改配置文件</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">解压harbor离线安装包</span><br><span class="line"><span class="comment"># tar xf harbor-offline-installer-v2.4.1.tgz</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">查看解压出来的目录</span><br><span class="line"><span class="comment"># ls</span></span><br><span class="line">harbor </span><br></pre></td></tr></table></figure>





<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">移动证书到harbor目录</span><br><span class="line"><span class="comment"># # mv 6864844_kubemsb.com.* harbor</span></span><br><span class="line"></span><br><span class="line">查看harbor目录</span><br><span class="line"><span class="comment"># ls harbor</span></span><br><span class="line"><span class="number">6864844</span>_kubemsb.com.key  <span class="number">6864844</span>_kubemsb.com.pem  common.sh  harbor.v2.<span class="number">4.1</span>.tar.gz  harbor.yml.tmpl  install.sh  LICENSE  prepare</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">创建配置文件</span><br><span class="line"><span class="comment"># cd harbor/</span></span><br><span class="line"><span class="comment"># mv harbor.yml.tmpl harbor.yml</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">修改配置文件内容</span><br><span class="line"></span><br><span class="line"><span class="comment"># vim harbor.yml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Configuration file of Harbor</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The IP address or hostname to access admin UI and registry service.</span></span><br><span class="line"><span class="comment"># DO NOT use localhost or 127.0.0.1, because Harbor needs to be accessed by external clients.</span></span><br><span class="line">hostname: www.kubemsb.com 修改为域名，而且一定是证书签发的域名</span><br><span class="line"></span><br><span class="line"><span class="comment"># http related config</span></span><br><span class="line">http:</span><br><span class="line">  <span class="comment"># port for http, default is 80. If https enabled, this port will redirect to https port</span></span><br><span class="line">  port: <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># https related config</span></span><br><span class="line">https:</span><br><span class="line">  <span class="comment"># https port for harbor, default is 443</span></span><br><span class="line">  port: <span class="number">443</span></span><br><span class="line">  <span class="comment"># The path of cert and key files for nginx</span></span><br><span class="line">  certificate: /root/harbor/<span class="number">6864844</span>_kubemsb.com.pem 证书</span><br><span class="line">  private_key: /root/harbor/<span class="number">6864844</span>_kubemsb.com.key 密钥</span><br><span class="line"></span><br><span class="line"><span class="comment"># # Uncomment following will enable tls communication between all harbor components</span></span><br><span class="line"><span class="comment"># internal_tls:</span></span><br><span class="line"><span class="comment">#   # set enabled to true means internal tls is enabled</span></span><br><span class="line"><span class="comment">#   enabled: true</span></span><br><span class="line"><span class="comment">#   # put your cert and key files on dir</span></span><br><span class="line"><span class="comment">#   dir: /etc/harbor/tls/internal</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment external_url if you want to enable external proxy</span></span><br><span class="line"><span class="comment"># And when it enabled the hostname will no longer used</span></span><br><span class="line"><span class="comment"># external_url: https://reg.mydomain.com:8433</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The initial password of Harbor admin</span></span><br><span class="line"><span class="comment"># It only works in first time to install harbor</span></span><br><span class="line"><span class="comment"># Remember Change the admin password from UI after launching Harbor.</span></span><br><span class="line">harbor_admin_password: <span class="number">12345</span> 访问密码</span><br><span class="line">......</span><br></pre></td></tr></table></figure>





<h3 id="2-2-5-执行预备脚本"><a href="#2-2-5-执行预备脚本" class="headerlink" title="2.2.5 执行预备脚本"></a>2.2.5 执行预备脚本</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ./prepare</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">输出</span><br><span class="line">prepare base <span class="built_in">dir</span> is <span class="built_in">set</span> to /root/harbor</span><br><span class="line">Clearing the configuration file: /config/portal/nginx.conf</span><br><span class="line">Clearing the configuration file: /config/log/logrotate.conf</span><br><span class="line">Clearing the configuration file: /config/log/rsyslog_docker.conf</span><br><span class="line">Generated configuration file: /config/portal/nginx.conf</span><br><span class="line">Generated configuration file: /config/log/logrotate.conf</span><br><span class="line">Generated configuration file: /config/log/rsyslog_docker.conf</span><br><span class="line">Generated configuration file: /config/nginx/nginx.conf</span><br><span class="line">Generated configuration file: /config/core/env</span><br><span class="line">Generated configuration file: /config/core/app.conf</span><br><span class="line">Generated configuration file: /config/registry/config.yml</span><br><span class="line">Generated configuration file: /config/registryctl/env</span><br><span class="line">Generated configuration file: /config/registryctl/config.yml</span><br><span class="line">Generated configuration file: /config/db/env</span><br><span class="line">Generated configuration file: /config/jobservice/env</span><br><span class="line">Generated configuration file: /config/jobservice/config.yml</span><br><span class="line">Generated and saved secret to file: /<span class="keyword">data</span>/secret/keys/secretkey</span><br><span class="line">Successfully called func: create_root_cert</span><br><span class="line">Generated configuration file: /compose_location/docker<span class="literal">-compose</span>.yml</span><br><span class="line">Clean up the input <span class="built_in">dir</span></span><br></pre></td></tr></table></figure>





<h3 id="2-2-6-执行安装脚本"><a href="#2-2-6-执行安装脚本" class="headerlink" title="2.2.6 执行安装脚本"></a>2.2.6 执行安装脚本</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ./install.sh</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">输出</span><br><span class="line">[<span class="type">Step</span> <span class="number">0</span>]: checking <span class="keyword">if</span> docker is installed ...</span><br><span class="line"></span><br><span class="line">Note: docker version: <span class="number">20.10</span>.<span class="number">12</span></span><br><span class="line"></span><br><span class="line">[<span class="type">Step</span> <span class="number">1</span>]: checking docker<span class="literal">-compose</span> is installed ...</span><br><span class="line"></span><br><span class="line">Note: docker<span class="literal">-compose</span> version: <span class="number">1.25</span>.<span class="number">0</span></span><br><span class="line"></span><br><span class="line">[<span class="type">Step</span> <span class="number">2</span>]: loading Harbor images ...</span><br><span class="line"></span><br><span class="line">[<span class="type">Step</span> <span class="number">3</span>]: preparing environment ...</span><br><span class="line"></span><br><span class="line">[<span class="type">Step</span> <span class="number">4</span>]: preparing harbor configs ...</span><br><span class="line">prepare base <span class="built_in">dir</span> is <span class="built_in">set</span> to /root/harbor</span><br><span class="line"></span><br><span class="line">[<span class="type">Step</span> <span class="number">5</span>]: starting Harbor ...</span><br><span class="line">Creating network <span class="string">&quot;harbor_harbor&quot;</span> with the default driver</span><br><span class="line">Creating harbor<span class="literal">-log</span> ... done</span><br><span class="line">Creating harbor<span class="literal">-db</span>     ... done</span><br><span class="line">Creating registry      ... done</span><br><span class="line">Creating registryctl   ... done</span><br><span class="line">Creating redis         ... done</span><br><span class="line">Creating harbor<span class="literal">-portal</span> ... done</span><br><span class="line">Creating harbor<span class="literal">-core</span>   ... done</span><br><span class="line">Creating harbor<span class="literal">-jobservice</span> ... done</span><br><span class="line">Creating nginx             ... done</span><br><span class="line">✔ ---<span class="literal">-Harbor</span> has been installed and started successfully.----</span><br></pre></td></tr></table></figure>





<h3 id="2-2-7-验证运行情况"><a href="#2-2-7-验证运行情况" class="headerlink" title="2.2.7 验证运行情况"></a>2.2.7 验证运行情况</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                                COMMAND                  CREATED              STATUS                        PORTS                                                                            NAMES</span><br><span class="line"><span class="number">71</span>c0db683e4a   goharbor/nginx<span class="literal">-photon</span>:v2.<span class="number">4.1</span>         <span class="string">&quot;nginx -g &#x27;daemon of…&quot;</span>   About a minute ago   Up About a minute (healthy)   <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">80</span>-&gt;<span class="number">8080</span>/tcp, :::<span class="number">80</span>-&gt;<span class="number">8080</span>/tcp, <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">443</span>-&gt;<span class="number">8443</span>/tcp, :::<span class="number">443</span>-&gt;<span class="number">8443</span>/tcp   nginx</span><br><span class="line"><span class="number">4</span>e3b53a86f01   goharbor/harbor<span class="literal">-jobservice</span>:v2.<span class="number">4.1</span>    <span class="string">&quot;/harbor/entrypoint.…&quot;</span>   About a minute ago   Up About a minute (healthy)                                                                                    harbor<span class="literal">-jobservice</span></span><br><span class="line">df76e1eabbf7   goharbor/harbor<span class="literal">-core</span>:v2.<span class="number">4.1</span>          <span class="string">&quot;/harbor/entrypoint.…&quot;</span>   About a minute ago   Up About a minute (healthy)                                                                                    harbor<span class="literal">-core</span></span><br><span class="line">eeb4d224dfc4   goharbor/harbor<span class="literal">-portal</span>:v2.<span class="number">4.1</span>        <span class="string">&quot;nginx -g &#x27;daemon of…&quot;</span>   About a minute ago   Up About a minute (healthy)                                                                                    harbor<span class="literal">-portal</span></span><br><span class="line"><span class="number">70</span>e162c38b59   goharbor/redis<span class="literal">-photon</span>:v2.<span class="number">4.1</span>         <span class="string">&quot;redis-server /etc/r…&quot;</span>   About a minute ago   Up About a minute (healthy)                                                                                    redis</span><br><span class="line"><span class="number">8</span>bcc0e9b06ec   goharbor/harbor<span class="literal">-registryctl</span>:v2.<span class="number">4.1</span>   <span class="string">&quot;/home/harbor/start.…&quot;</span>   About a minute ago   Up About a minute (healthy)                                                                                    registryctl</span><br><span class="line">d88196398df7   goharbor/registry<span class="literal">-photon</span>:v2.<span class="number">4.1</span>      <span class="string">&quot;/home/harbor/entryp…&quot;</span>   About a minute ago   Up About a minute (healthy)                                                                                    registry</span><br><span class="line">ed5ba2ba9c82   goharbor/harbor<span class="literal">-db</span>:v2.<span class="number">4.1</span>            <span class="string">&quot;/docker-entrypoint.…&quot;</span>   About a minute ago   Up About a minute (healthy)                                                                                    harbor<span class="literal">-db</span></span><br><span class="line">dcb4b57c7542   goharbor/harbor<span class="literal">-log</span>:v2.<span class="number">4.1</span>           <span class="string">&quot;/bin/sh -c /usr/loc…&quot;</span>   About a minute ago   Up About a minute (healthy)   <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">1514</span>-&gt;<span class="number">10514</span>/tcp                                                        harbor<span class="literal">-log</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>







<h3 id="2-2-8-访问harbor-UI界面"><a href="#2-2-8-访问harbor-UI界面" class="headerlink" title="2.2.8 访问harbor UI界面"></a>2.2.8 访问harbor UI界面</h3><h4 id="2-2-8-1-在物理机通过浏览器访问"><a href="#2-2-8-1-在物理机通过浏览器访问" class="headerlink" title="2.2.8.1 在物理机通过浏览器访问"></a>2.2.8.1 在物理机通过浏览器访问</h4><p><img src="/images/Docker/docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220126000804490.png" alt="image-20220126000804490"></p>
<p><img src="/images/Docker/docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220126000825616.png" alt="image-20220126000825616"></p>
<p><img src="/images/Docker/docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220126000840905.png" alt="image-20220126000840905"></p>
<h4 id="2-2-8-2-在Docker-Host主机通过域名访问"><a href="#2-2-8-2-在Docker-Host主机通过域名访问" class="headerlink" title="2.2.8.2 在Docker Host主机通过域名访问"></a>2.2.8.2 在Docker Host主机通过域名访问</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">添加域名解析</span><br><span class="line"><span class="comment"># vim /etc/hosts</span></span><br><span class="line"><span class="comment"># cat /etc/hosts</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::<span class="number">1</span>         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line"><span class="number">192.168</span>.<span class="number">10.155</span> www.kubemsb.com</span><br></pre></td></tr></table></figure>



<p><img src="/images/Docker/docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220126001253192.png" alt="image-20220126001253192"></p>
<p><img src="/images/Docker/docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220126001447862.png" alt="image-20220126001447862"></p>
<p><img src="/images/Docker/docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220126001510880.png" alt="image-20220126001510880"></p>
<h1 id="三、docker镜像上传至Harbor及从harbor下载"><a href="#三、docker镜像上传至Harbor及从harbor下载" class="headerlink" title="三、docker镜像上传至Harbor及从harbor下载"></a>三、docker镜像上传至Harbor及从harbor下载</h1><h2 id="3-1-修改docker-daemon使用harbor"><a href="#3-1-修改docker-daemon使用harbor" class="headerlink" title="3.1  修改docker daemon使用harbor"></a>3.1  修改docker daemon使用harbor</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">添加/etc/docker/daemon.json文件，默认不存在，需要手动添加</span><br><span class="line"><span class="comment"># vim /etc/docker/daemon.json</span></span><br><span class="line"><span class="comment"># cat /etc/docker/daemon.json</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;insecure-registries&quot;</span>: [<span class="string">&quot;www.kubemsb.com&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">重启加载daemon配置</span><br><span class="line"><span class="comment"># systemctl daemon-reload</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">重启docker</span><br><span class="line"><span class="comment"># systemctl restart docker</span></span><br></pre></td></tr></table></figure>





<h2 id="3-2-docker-tag"><a href="#3-2-docker-tag" class="headerlink" title="3.2 docker tag"></a>3.2 docker tag</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">查看已有容器镜像文件</span><br><span class="line"><span class="comment"># docker images</span></span><br><span class="line">REPOSITORY                      TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">centos                          latest    <span class="number">5</span>d0da3dc9764   <span class="number">4</span> months ago   <span class="number">231</span>MB</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">为已存在镜像重新添加tag</span><br><span class="line"><span class="comment"># docker tag centos:latest www.kubemsb.com/library/centos:v1</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">再次查看本地容器镜像</span><br><span class="line"><span class="comment"># docker images</span></span><br><span class="line">REPOSITORY                       TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">centos                           latest    <span class="number">5</span>d0da3dc9764   <span class="number">4</span> months ago   <span class="number">231</span>MB</span><br><span class="line">www.kubemsb.com/library/centos   v1        <span class="number">5</span>d0da3dc9764   <span class="number">4</span> months ago   <span class="number">231</span>MB</span><br></pre></td></tr></table></figure>





<h2 id="3-3-docker-push"><a href="#3-3-docker-push" class="headerlink" title="3.3 docker push"></a>3.3 docker push</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker login www.kubemsb.com</span></span><br><span class="line">Username: admin  用户名 admin</span><br><span class="line">Password:        密码   <span class="number">12345</span></span><br><span class="line">WARNING! Your password will be stored unencrypted <span class="keyword">in</span> /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/<span class="comment">#credentials-store</span></span><br><span class="line"></span><br><span class="line">Login Succeeded 登陆成功</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">推送本地容器镜像到harbor仓库</span><br><span class="line"><span class="comment"># docker push www.kubemsb.com/library/centos:v1</span></span><br></pre></td></tr></table></figure>



<p><img src="/images/Docker/docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220126002747864.png" alt="image-20220126002747864"></p>
<h2 id="3-4-docker-pull"><a href="#3-4-docker-pull" class="headerlink" title="3.4 docker pull"></a>3.4 docker pull</h2><blockquote>
<p>在其它主机上下载或使用harbor容器镜像仓库中的容器镜像</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">在本地添加域名解析</span><br><span class="line"><span class="comment"># vim /etc/hosts</span></span><br><span class="line"><span class="comment"># cat /etc/hosts</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::<span class="number">1</span>         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line"><span class="number">192.168</span>.<span class="number">10.155</span> www.kubemsb.com</span><br></pre></td></tr></table></figure>





<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">在本地添加/etc/docker/daemon.json文件，其中为本地主机访问的容器镜像仓库</span><br><span class="line"><span class="comment"># vim /etc/docker/daemon.json</span></span><br><span class="line"><span class="comment"># cat /etc/docker/daemon.json</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;insecure-registries&quot;</span>: [<span class="string">&quot;www.kubemsb.com&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl daemon-reload</span></span><br><span class="line"><span class="comment"># systemctl restart docker</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">下载容器镜像</span><br><span class="line"><span class="comment"># docker pull www.kubemsb.com/library/centos:v1</span></span><br><span class="line">v1: Pulling from library/centos</span><br><span class="line">Digest: sha256:a1801b843b1bfaf77c501e7a6d3f709401a1e0c83863037fa3aab063a7fdb9dc</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> www.kubemsb.com/library/centos:v1</span><br><span class="line">www.kubemsb.com/library/centos:v1</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">查看已下载的容器镜像</span><br><span class="line"><span class="comment"># docker images</span></span><br><span class="line">REPOSITORY                       TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">www.kubemsb.com/library/centos   v1        <span class="number">5</span>d0da3dc9764   <span class="number">4</span> months ago   <span class="number">231</span>MB</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker核心概念容器</title>
    <url>/2023/07/28/%E4%BA%91%E5%8E%9F%E7%94%9F/Docker/Docker%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<h1 id="使用容器运行Nginx应用"><a href="#使用容器运行Nginx应用" class="headerlink" title="使用容器运行Nginx应用"></a>使用容器运行Nginx应用</h1><blockquote>
<p>查找本地容器镜像文件</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">执行命令过程一：下载容器镜像</span><br><span class="line"><span class="comment"># docker run -d nginx:latest</span></span><br><span class="line">Unable to find image <span class="string">&#x27;nginx:latest&#x27;</span> locally</span><br><span class="line">latest: Pulling from library/nginx</span><br><span class="line">a2abf6c4d29d: Downloading  <span class="number">1.966</span>MB/<span class="number">31.36</span>MB 下载中</span><br><span class="line">a9edb18cadd1: Downloading  <span class="number">1.572</span>MB/<span class="number">25.35</span>MB</span><br><span class="line"><span class="number">589</span>b7251471a: Download complete 下载完成</span><br><span class="line"><span class="number">186</span>b1aaa4aa6: Download complete</span><br><span class="line">b4df32aa5a72: Waiting 等待下载</span><br><span class="line">a0bcbecc962e: Waiting</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">执行命令过程二：下载容器镜像</span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># docker run -d nginx:latest</span></span><br><span class="line">Unable to find image <span class="string">&#x27;nginx:latest&#x27;</span> locally</span><br><span class="line">latest: Pulling from library/nginx</span><br><span class="line">a2abf6c4d29d: Downloading  <span class="number">22.87</span>MB/<span class="number">31.36</span>MB</span><br><span class="line">a9edb18cadd1: Downloading  <span class="number">22.78</span>MB/<span class="number">25.35</span>MB</span><br><span class="line"><span class="number">589</span>b7251471a: Waiting</span><br><span class="line"><span class="number">186</span>b1aaa4aa6: Waiting</span><br><span class="line">b4df32aa5a72: Waiting</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">执行命令过程三：下载容器镜像</span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># docker run -d nginx:latest</span></span><br><span class="line">Unable to find image <span class="string">&#x27;nginx:latest&#x27;</span> locally</span><br><span class="line">latest: Pulling from library/nginx</span><br><span class="line">a2abf6c4d29d: Pull complete 下载完成</span><br><span class="line">a9edb18cadd1: Pull complete</span><br><span class="line"><span class="number">589</span>b7251471a: Pull complete</span><br><span class="line"><span class="number">186</span>b1aaa4aa6: Pull complete</span><br><span class="line">b4df32aa5a72: Waiting 等待下载</span><br></pre></td></tr></table></figure>

<h3 id="1-1-2-观察容器运行情况"><a href="#1-1-2-观察容器运行情况" class="headerlink" title="1.1.2 观察容器运行情况"></a>1.1.2 观察容器运行情况</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker run -d nginx:latest</span></span><br><span class="line"><span class="number">9834</span>c8c18a7c7c89ab0ea4119d11bafe9c18313c8006bc02ce57ff54d9a1cc0c</span><br></pre></td></tr></table></figure>


<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">命令解释</span><br><span class="line">docker run 启动一个容器</span><br><span class="line"><span class="literal">-d</span> 把容器镜像中需要执行的命令以daemon（守护进程）的方式运行</span><br><span class="line">nginx 应用容器镜像的名称，通常表示该镜像为某一个软件</span><br><span class="line">latest 表示上述容器镜像的版本，表示最新版本，用户可自定义其标识，例如v1或v2等</span><br></pre></td></tr></table></figure>


<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE        COMMAND                  CREATED          STATUS        PORTS     NAMES</span><br><span class="line"><span class="number">9834</span>c8c18a7c   nginx:latest <span class="string">&quot;/docker-entrypoint.…&quot;</span>   <span class="number">24</span> seconds ago   Up <span class="number">23</span> seconds <span class="number">80</span>/tcp condescending_pare</span><br></pre></td></tr></table></figure>


<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">命令解释</span><br><span class="line">docker <span class="built_in">ps</span> 类似于Linux系统的<span class="built_in">ps</span>命令，查看正在运行的容器，如果想查看没有运行的容器，需要在此命令后使用-<span class="literal">-all</span></span><br></pre></td></tr></table></figure>


<p><strong>输出内容解释</strong></p>
<table>
<thead>
<tr>
<th>CONTAINERID</th>
<th>IMAGE</th>
<th>COMMAND</th>
<th>CREATED</th>
<th>STATUS</th>
<th>PORTS</th>
<th>NAMES</th>
</tr>
</thead>
<tbody><tr>
<td>9834c8c18a7c</td>
<td>nginx:latest</td>
<td>“/docker-entrypoint.…”</td>
<td>24 seconds ago</td>
<td>Up 23 seconds</td>
<td>80/tcp</td>
<td>condescending_pare</td>
</tr>
</tbody></table>
<h2 id="1-2-访问容器中运行的Nginx服务"><a href="#1-2-访问容器中运行的Nginx服务" class="headerlink" title="1.2 访问容器中运行的Nginx服务"></a>1.2 访问容器中运行的Nginx服务</h2><h3 id="1-2-1-确认容器IP地址"><a href="#1-2-1-确认容器IP地址" class="headerlink" title="1.2.1 确认容器IP地址"></a>1.2.1 确认容器IP地址</h3><blockquote>
<p>实际工作中不需要此步操作。</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"> <span class="comment"># docker inspect 9834</span></span><br><span class="line"> </span><br><span class="line"> <span class="string">&quot;GlobalIPv6Address&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;GlobalIPv6PrefixLen&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;172.17.0.2&quot;</span>, 容器IP地址</span><br><span class="line">            <span class="string">&quot;IPPrefixLen&quot;</span>: <span class="number">16</span>,</span><br><span class="line">            <span class="string">&quot;IPv6Gateway&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:11:00:02&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Networks&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;bridge&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;IPAMConfig&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;Links&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;Aliases&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;NetworkID&quot;</span>: <span class="string">&quot;d3de2fdbc30ee36a55c1431ef3ae4578392e552009f00b2019b4720735fe5a60&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;d91f47c9f756ff22dc599a207164f2e9366bd0c530882ce0f08ae2278fb3d50c&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;172.17.0.1&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;172.17.0.2&quot;</span>,   容器IP地址</span><br><span class="line">                    <span class="string">&quot;IPPrefixLen&quot;</span>: <span class="number">16</span>,</span><br><span class="line">                    <span class="string">&quot;IPv6Gateway&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6Address&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6PrefixLen&quot;</span>: <span class="number">0</span>,</span><br><span class="line">                    <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:11:00:02&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;DriverOpts&quot;</span>: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">命令解释</span><br><span class="line">docker inspect 为查看容器结构信息命令</span><br><span class="line"><span class="number">9834</span> 为前面生成的容器ID号前<span class="number">4</span>位，使用这个ID号时，由于其较长，使用时能最短识别即可。</span><br></pre></td></tr></table></figure>



<h3 id="1-2-2-容器网络说明"><a href="#1-2-2-容器网络说明" class="headerlink" title="1.2.2 容器网络说明"></a>1.2.2 容器网络说明</h3><p><img src="/images/Docker/%E4%BD%BF%E7%94%A8%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8CNginx%E5%BA%94%E7%94%A8%E5%8F%8ADocker%E5%91%BD%E4%BB%A4.assets/image-20220121172037253.png" alt="image-20220121172037253"></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ip a s</span></span><br><span class="line">......</span><br><span class="line">docker0网桥，用于为容器提供桥接，转发到主机之外的网络</span><br><span class="line"><span class="number">5</span>: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="number">1500</span> qdisc noqueue state UP <span class="built_in">group</span> default</span><br><span class="line">    link/ether <span class="number">02</span>:<span class="number">42</span>:d5:c3:d4:cc brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet <span class="number">172.17</span>.<span class="number">0.1</span>/<span class="number">16</span> brd <span class="number">172.17</span>.<span class="number">255.255</span> scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::<span class="number">42</span>:d5ff:fec3:d4cc/<span class="number">64</span> scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">       </span><br><span class="line">       </span><br><span class="line">与容器中的虚拟网络设备在同一个命名空间中，用于把容器中的网络连接到主机</span><br><span class="line"><span class="number">9</span>: veth393dece@if8: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="number">1500</span> qdisc noqueue master docker0 state UP <span class="built_in">group</span> default</span><br><span class="line">    link/ether <span class="number">02</span>:e3:<span class="number">11</span>:<span class="number">58</span>:<span class="number">54</span>:<span class="number">0</span>f brd ff:ff:ff:ff:ff:ff link<span class="literal">-netnsid</span> <span class="number">0</span></span><br><span class="line">    inet6 fe80::e3:<span class="number">11</span>ff:fe58:<span class="number">540</span>f/<span class="number">64</span> scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>



<h3 id="1-2-3-使用curl命令访问"><a href="#1-2-3-使用curl命令访问" class="headerlink" title="1.2.3 使用curl命令访问"></a>1.2.3 使用curl命令访问</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl http://172.17.0.2</span></span><br><span class="line"></span><br><span class="line">返回结果，表示访问成功！</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">html &#123; color<span class="literal">-scheme</span>: light dark; &#125;</span><br><span class="line">body &#123; width: <span class="number">35</span>em; margin: <span class="number">0</span> auto;</span><br><span class="line">font<span class="literal">-family</span>: Tahoma, Verdana, Arial, sans<span class="literal">-serif</span>; &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;<span class="keyword">If</span> you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;<span class="keyword">For</span> online documentation and support please refer to</span><br><span class="line">&lt;a href=<span class="string">&quot;http://nginx.org/&quot;</span>&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href=<span class="string">&quot;http://nginx.com/&quot;</span>&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you <span class="keyword">for</span> <span class="keyword">using</span> nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<h1 id="二、Docker命令"><a href="#二、Docker命令" class="headerlink" title="二、Docker命令"></a>二、Docker命令</h1><h2 id="2-1-Docker命令获取帮助方法"><a href="#2-1-Docker命令获取帮助方法" class="headerlink" title="2.1 Docker命令获取帮助方法"></a>2.1 Docker命令获取帮助方法</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker -h</span></span><br><span class="line">Flag shorthand <span class="literal">-h</span> has been deprecated, please use -<span class="literal">-help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker [<span class="type">OPTIONS</span>] COMMAND  用法</span><br><span class="line"></span><br><span class="line">A self<span class="literal">-sufficient</span> runtime <span class="keyword">for</span> containers 功能介绍</span><br><span class="line"></span><br><span class="line">Options: 选项</span><br><span class="line">      -<span class="literal">-config</span> string      Location of client config files (default <span class="string">&quot;/root/.docker&quot;</span>)</span><br><span class="line">  <span class="literal">-c</span>, -<span class="literal">-context</span> string     Name of the context to use to connect to the daemon (overrides</span><br><span class="line">                           DOCKER_HOST env var and default context <span class="built_in">set</span> with <span class="string">&quot;docker context use&quot;</span>)</span><br><span class="line">  <span class="literal">-D</span>, -<span class="literal">-debug</span>              Enable debug mode</span><br><span class="line">  <span class="literal">-H</span>, -<span class="literal">-host</span> list          Daemon socket(s) to connect to</span><br><span class="line">  <span class="literal">-l</span>, -<span class="literal">-log</span><span class="literal">-level</span> string   <span class="built_in">Set</span> the logging level (<span class="string">&quot;debug&quot;</span>|<span class="string">&quot;info&quot;</span>|<span class="string">&quot;warn&quot;</span>|<span class="string">&quot;error&quot;</span>|<span class="string">&quot;fatal&quot;</span>)</span><br><span class="line">                           (default <span class="string">&quot;info&quot;</span>)</span><br><span class="line">      -<span class="literal">-tls</span>                Use TLS; implied by -<span class="literal">-tlsverify</span></span><br><span class="line">      -<span class="literal">-tlscacert</span> string   Trust certs signed only by this CA (default <span class="string">&quot;/root/.docker/ca.pem&quot;</span>)</span><br><span class="line">      -<span class="literal">-tlscert</span> string     Path to TLS certificate file (default <span class="string">&quot;/root/.docker/cert.pem&quot;</span>)</span><br><span class="line">      -<span class="literal">-tlskey</span> string      Path to TLS key file (default <span class="string">&quot;/root/.docker/key.pem&quot;</span>)</span><br><span class="line">      -<span class="literal">-tlsverify</span>          Use TLS and verify the remote</span><br><span class="line">  <span class="literal">-v</span>, -<span class="literal">-version</span>            Print version information and quit</span><br><span class="line"></span><br><span class="line">Management Commands: 管理类命令</span><br><span class="line">  app*        Docker App (Docker Inc., v0.<span class="number">9.1</span><span class="literal">-beta3</span>)</span><br><span class="line">  builder     Manage builds</span><br><span class="line">  buildx*     Docker Buildx (Docker Inc., v0.<span class="number">7.1</span><span class="literal">-docker</span>)</span><br><span class="line">  config      Manage Docker configs</span><br><span class="line">  container   Manage containers</span><br><span class="line">  context     Manage contexts</span><br><span class="line">  image       Manage images</span><br><span class="line">  manifest    Manage Docker image manifests and manifest lists</span><br><span class="line">  network     Manage networks</span><br><span class="line">  node        Manage Swarm nodes</span><br><span class="line">  plugin      Manage plugins</span><br><span class="line">  scan*       Docker Scan (Docker Inc., v0.<span class="number">12.0</span>)</span><br><span class="line">  secret      Manage Docker secrets</span><br><span class="line">  service     Manage services</span><br><span class="line">  stack       Manage Docker stacks</span><br><span class="line">  swarm       Manage Swarm</span><br><span class="line">  system      Manage Docker</span><br><span class="line">  trust       Manage trust on Docker images</span><br><span class="line">  volume      Manage volumes</span><br><span class="line"></span><br><span class="line">Commands: 未分组命令</span><br><span class="line">  attach      Attach local standard input, output, and error streams to a running container</span><br><span class="line">  build       Build an image from a Dockerfile</span><br><span class="line">  commit      Create a new image from a container<span class="string">&#x27;s changes</span></span><br><span class="line"><span class="string">  cp          Copy files/folders between a container and the local filesystem</span></span><br><span class="line"><span class="string">  create      Create a new container</span></span><br><span class="line"><span class="string">  diff        Inspect changes to files or directories on a container&#x27;</span>s filesystem</span><br><span class="line">  events      Get real time events from the server</span><br><span class="line">  exec        Run a command <span class="keyword">in</span> a running container</span><br><span class="line">  export      Export a container<span class="string">&#x27;s filesystem as a tar archive</span></span><br><span class="line"><span class="string">  history     Show the history of an image</span></span><br><span class="line"><span class="string">  images      List images</span></span><br><span class="line"><span class="string">  import      Import the contents from a tarball to create a filesystem image</span></span><br><span class="line"><span class="string">  info        Display system-wide information</span></span><br><span class="line"><span class="string">  inspect     Return low-level information on Docker objects</span></span><br><span class="line"><span class="string">  kill        Kill one or more running containers</span></span><br><span class="line"><span class="string">  load        Load an image from a tar archive or STDIN</span></span><br><span class="line"><span class="string">  login       Log in to a Docker registry</span></span><br><span class="line"><span class="string">  logout      Log out from a Docker registry</span></span><br><span class="line"><span class="string">  logs        Fetch the logs of a container</span></span><br><span class="line"><span class="string">  pause       Pause all processes within one or more containers</span></span><br><span class="line"><span class="string">  port        List port mappings or a specific mapping for the container</span></span><br><span class="line"><span class="string">  ps          List containers</span></span><br><span class="line"><span class="string">  pull        Pull an image or a repository from a registry</span></span><br><span class="line"><span class="string">  push        Push an image or a repository to a registry</span></span><br><span class="line"><span class="string">  rename      Rename a container</span></span><br><span class="line"><span class="string">  restart     Restart one or more containers</span></span><br><span class="line"><span class="string">  rm          Remove one or more containers</span></span><br><span class="line"><span class="string">  rmi         Remove one or more images</span></span><br><span class="line"><span class="string">  run         Run a command in a new container</span></span><br><span class="line"><span class="string">  save        Save one or more images to a tar archive (streamed to STDOUT by default)</span></span><br><span class="line"><span class="string">  search      Search the Docker Hub for images</span></span><br><span class="line"><span class="string">  start       Start one or more stopped containers</span></span><br><span class="line"><span class="string">  stats       Display a live stream of container(s) resource usage statistics</span></span><br><span class="line"><span class="string">  stop        Stop one or more running containers</span></span><br><span class="line"><span class="string">  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE</span></span><br><span class="line"><span class="string">  top         Display the running processes of a container</span></span><br><span class="line"><span class="string">  unpause     Unpause all processes within one or more containers</span></span><br><span class="line"><span class="string">  update      Update configuration of one or more containers</span></span><br><span class="line"><span class="string">  version     Show the Docker version information</span></span><br><span class="line"><span class="string">  wait        Block until one or more containers stop, then print their exit codes</span></span><br></pre></td></tr></table></figure>



<h2 id="2-2-Docker官网提供的命令说明"><a href="#2-2-Docker官网提供的命令说明" class="headerlink" title="2.2 Docker官网提供的命令说明"></a>2.2 Docker官网提供的命令说明</h2><p>网址链接：<a href="https://docs.docker.com/reference/">https://docs.docker.com/reference/</a></p>
<p><img src="/images/Docker/%E4%BD%BF%E7%94%A8%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8CNginx%E5%BA%94%E7%94%A8%E5%8F%8ADocker%E5%91%BD%E4%BB%A4.assets/image-20220121173519802.png" alt="image-20220121173519802"></p>
<p><img src="/images/Docker/%E4%BD%BF%E7%94%A8%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8CNginx%E5%BA%94%E7%94%A8%E5%8F%8ADocker%E5%91%BD%E4%BB%A4.assets/image-20220121173613294.png" alt="image-20220121173613294"></p>
<p><img src="/images/Docker/%E4%BD%BF%E7%94%A8%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8CNginx%E5%BA%94%E7%94%A8%E5%8F%8ADocker%E5%91%BD%E4%BB%A4.assets/image-20220121173705508.png" alt="image-20220121173705508"></p>
<h2 id="2-3-docker命令应用"><a href="#2-3-docker命令应用" class="headerlink" title="2.3 docker命令应用"></a>2.3 docker命令应用</h2><h3 id="2-3-1-docker-run"><a href="#2-3-1-docker-run" class="headerlink" title="2.3.1 docker run"></a>2.3.1 docker run</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker run -i -t --name c1 centos:latest bash</span></span><br><span class="line">[<span class="type">root</span>@<span class="number">948</span><span class="type">f234e22a1</span> /]<span class="comment">#</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">命令解释</span><br><span class="line">docker run 运行一个命令在容器中，命令是主体，没有命令容器就会消亡</span><br><span class="line"><span class="literal">-i</span> 交互式</span><br><span class="line"><span class="literal">-t</span> 提供终端</span><br><span class="line">-<span class="literal">-name</span> c1 把将运行的容器命名为c1</span><br><span class="line">centos:latest 使用centos最新版本容器镜像</span><br><span class="line">bash 在容器中执行的命令</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">查看主机名</span><br><span class="line">[<span class="type">root</span>@<span class="number">948</span><span class="type">f234e22a1</span> /]<span class="comment">#</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">查看网络信息</span><br><span class="line">[<span class="type">root</span>@<span class="number">948</span><span class="type">f234e22a1</span> /]<span class="comment"># ip a s</span></span><br><span class="line"><span class="number">1</span>: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu <span class="number">65536</span> qdisc noqueue state UNKNOWN <span class="built_in">group</span> default qlen <span class="number">1000</span></span><br><span class="line">    link/loopback <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> brd <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">    inet <span class="number">127.0</span>.<span class="number">0.1</span>/<span class="number">8</span> scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"><span class="number">12</span>: eth0@if13: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="number">1500</span> qdisc noqueue state UP <span class="built_in">group</span> default</span><br><span class="line">    link/ether <span class="number">02</span>:<span class="number">42</span>:<span class="built_in">ac</span>:<span class="number">11</span>:<span class="number">00</span>:<span class="number">03</span> brd ff:ff:ff:ff:ff:ff link<span class="literal">-netnsid</span> <span class="number">0</span></span><br><span class="line">    inet <span class="number">172.17</span>.<span class="number">0.3</span>/<span class="number">16</span> brd <span class="number">172.17</span>.<span class="number">255.255</span> scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">查看进程</span><br><span class="line">[<span class="type">root</span>@<span class="number">948</span><span class="type">f234e22a1</span> /]<span class="comment"># ps aux</span></span><br><span class="line">USER        PID %CPU %MEM    VSZ   RSS TTY      STAT <span class="built_in">START</span>   TIME COMMAND</span><br><span class="line">root          <span class="number">1</span>  <span class="number">0.0</span>  <span class="number">0.1</span>  <span class="number">12036</span>  <span class="number">2172</span> pts/<span class="number">0</span>    Ss   <span class="number">09</span>:<span class="number">58</span>   <span class="number">0</span>:<span class="number">00</span> bash</span><br><span class="line">root         <span class="number">16</span>  <span class="number">0.0</span>  <span class="number">0.0</span>  <span class="number">44652</span>  <span class="number">1784</span> pts/<span class="number">0</span>    <span class="built_in">R</span>+   <span class="number">10</span>:<span class="number">02</span>   <span class="number">0</span>:<span class="number">00</span> <span class="built_in">ps</span> aux</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">查看用户</span><br><span class="line">[<span class="type">root</span>@<span class="number">948</span><span class="type">f234e22a1</span> /]<span class="comment"># cat /etc/passwd</span></span><br><span class="line">root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/bin/bash</span><br><span class="line">bin:x:<span class="number">1</span>:<span class="number">1</span>:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:<span class="number">2</span>:<span class="number">2</span>:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:<span class="number">3</span>:<span class="number">4</span>:adm:/var/adm:/sbin/nologin</span><br><span class="line"><span class="built_in">lp</span>:x:<span class="number">4</span>:<span class="number">7</span>:<span class="built_in">lp</span>:/var/spool/lpd:/sbin/nologin</span><br><span class="line">sync:x:<span class="number">5</span>:<span class="number">0</span>:sync:/sbin:/bin/sync</span><br><span class="line">shutdown:x:<span class="number">6</span>:<span class="number">0</span>:shutdown:/sbin:/sbin/shutdown</span><br><span class="line">halt:x:<span class="number">7</span>:<span class="number">0</span>:halt:/sbin:/sbin/halt</span><br><span class="line">mail:x:<span class="number">8</span>:<span class="number">12</span>:mail:/var/spool/mail:/sbin/nologin</span><br><span class="line">operator:x:<span class="number">11</span>:<span class="number">0</span>:operator:/root:/sbin/nologin</span><br><span class="line">games:x:<span class="number">12</span>:<span class="number">100</span>:games:/usr/games:/sbin/nologin</span><br><span class="line">ftp:x:<span class="number">14</span>:<span class="number">50</span>:FTP User:/var/ftp:/sbin/nologin</span><br><span class="line">nobody:x:<span class="number">65534</span>:<span class="number">65534</span>:Kernel Overflow User:/:/sbin/nologin</span><br><span class="line">dbus:x:<span class="number">81</span>:<span class="number">81</span>:System message bus:/:/sbin/nologin</span><br><span class="line">systemd<span class="literal">-coredump</span>:x:<span class="number">999</span>:<span class="number">997</span>:systemd Core Dumper:/:/sbin/nologin</span><br><span class="line">systemd<span class="literal">-resolve</span>:x:<span class="number">193</span>:<span class="number">193</span>:systemd Resolver:/:/sbin/nologin</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">查看目录</span><br><span class="line">[<span class="type">root</span>@<span class="number">948</span><span class="type">f234e22a1</span> /]<span class="comment"># pwd</span></span><br><span class="line">/</span><br><span class="line">[<span class="type">root</span>@<span class="number">948</span><span class="type">f234e22a1</span> /]<span class="comment"># ls</span></span><br><span class="line">bin  etc   lib    lost+found  mnt  proc  run   srv  tmp  var</span><br><span class="line">dev  home  lib64  media       opt  root  sbin  sys  usr</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">退出命令执行，观察容器运行情况</span><br><span class="line">[<span class="type">root</span>@<span class="number">948</span><span class="type">f234e22a1</span> /]<span class="comment"># exit</span></span><br><span class="line"><span class="keyword">exit</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>



<h3 id="2-3-2-docker-ps"><a href="#2-3-2-docker-ps" class="headerlink" title="2.3.2 docker ps"></a>2.3.2 docker ps</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">命令解释</span><br><span class="line">docker <span class="built_in">ps</span> 查看正在运行的容器，本案例由于没有命令在容器中运行，因此容器被停止了，所以本次查看没有结果。</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker ps --all</span></span><br><span class="line">CONTAINER ID   IMAGE           COMMAND     CREATED             STATUS                         PORTS     NAMES</span><br><span class="line"><span class="number">948</span>f234e22a1   centos:latest   <span class="string">&quot;bash&quot;</span>    <span class="number">10</span> minutes ago      Exited (<span class="number">0</span>) <span class="number">2</span> minutes ago                    c1</span><br></pre></td></tr></table></figure>



<table>
<thead>
<tr>
<th>CONTAINERID</th>
<th>IMAGE</th>
<th>COMMAND</th>
<th>CREATED</th>
<th>STATUS</th>
<th>PORTS</th>
<th>NAMES</th>
</tr>
</thead>
<tbody><tr>
<td>948f234e22a1</td>
<td>centos:latest</td>
<td>“bash”</td>
<td>10 minutes ago</td>
<td>Exited (0) 2 minutes ago</td>
<td></td>
<td>c1</td>
</tr>
</tbody></table>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">命令解释</span><br><span class="line">docker <span class="built_in">ps</span> -<span class="literal">-all</span> 可以查看正在运行的和停止运行的容器</span><br></pre></td></tr></table></figure>



<h3 id="2-3-3-docker-inspect"><a href="#2-3-3-docker-inspect" class="headerlink" title="2.3.3 docker inspect"></a>2.3.3 docker inspect</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker run -it --name c2 centos:latest bash</span></span><br><span class="line">[<span class="type">root</span>@<span class="number">9</span><span class="type">f2eea16da4c</span> /]<span class="comment"># </span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">操作说明</span><br><span class="line">在上述提示符处按住ctrl键，再按p键与q键，可以退出交互式的容器，容器会处于运行状态。</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE           COMMAND   CREATED          STATUS          PORTS     NAMES</span><br><span class="line"><span class="number">9</span>f2eea16da4c   centos:latest   <span class="string">&quot;bash&quot;</span>    <span class="number">37</span> seconds ago   Up <span class="number">35</span> seconds             c2</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">命令解释</span><br><span class="line">可以看到容器处于运行状态</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker inspect c2</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;Networks&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;bridge&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;IPAMConfig&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;Links&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;Aliases&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;NetworkID&quot;</span>: <span class="string">&quot;d3de2fdbc30ee36a55c1431ef3ae4578392e552009f00b2019b4720735fe5a60&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;d1a2b7609f2f73a6cac67229a4395eef293f695c0ac4fd6c9c9e6913c9c85c1c&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;172.17.0.1&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;172.17.0.2&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPPrefixLen&quot;</span>: <span class="number">16</span>,</span><br><span class="line">                    <span class="string">&quot;IPv6Gateway&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6Address&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6PrefixLen&quot;</span>: <span class="number">0</span>,</span><br><span class="line">                    <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:11:00:02&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;DriverOpts&quot;</span>: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">命令解释</span><br><span class="line">docker inpect 查看容器详细信息</span><br></pre></td></tr></table></figure>





<h3 id="2-3-4-docker-exec"><a href="#2-3-4-docker-exec" class="headerlink" title="2.3.4 docker  exec"></a>2.3.4 docker  exec</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker exec -it c2 ls /root</span></span><br><span class="line">anaconda<span class="literal">-ks</span>.cfg  anaconda<span class="literal">-post</span>.log  original<span class="literal">-ks</span>.cfg</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">命令解释</span><br><span class="line">docker exec 在容器外实现与容器交互执行某命令</span><br><span class="line"><span class="literal">-it</span> 交互式</span><br><span class="line">c2 正在运行的容器名称</span><br><span class="line"><span class="built_in">ls</span> /root 在正在运行的容器中运行相关的命令</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">下面命令与上面命令执行效果一致</span><br><span class="line"><span class="comment"># docker exec c2 ls /root</span></span><br><span class="line">anaconda<span class="literal">-ks</span>.cfg</span><br><span class="line">anaconda<span class="literal">-post</span>.log</span><br><span class="line">original<span class="literal">-ks</span>.cfg</span><br></pre></td></tr></table></figure>



<h3 id="2-3-5-docker-attach"><a href="#2-3-5-docker-attach" class="headerlink" title="2.3.5 docker attach"></a>2.3.5 docker attach</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">查看正在运行的容器</span><br><span class="line"><span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE           COMMAND   CREATED          STATUS          PORTS     NAMES</span><br><span class="line"><span class="number">9</span>f2eea16da4c   centos:latest   <span class="string">&quot;bash&quot;</span>    <span class="number">13</span> minutes ago   Up <span class="number">13</span> minutes             c2</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># docker attach c2</span></span><br><span class="line">[<span class="type">root</span>@<span class="number">9</span><span class="type">f2eea16da4c</span> /]<span class="comment">#</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">命令解释</span><br><span class="line">docker attach 类似于ssh命令，可以进入到容器中</span><br><span class="line">c2 正在运行的容器名称</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">说明</span><br><span class="line">docker attach 退出容器时，如不需要容器再运行，可直接使用<span class="keyword">exit</span>退出；如需要容器继续运行，可使用ctrl+p+q</span><br></pre></td></tr></table></figure>



<h3 id="2-3-6-docker-stop"><a href="#2-3-6-docker-stop" class="headerlink" title="2.3.6 docker stop"></a>2.3.6 docker stop</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE           COMMAND   CREATED          STATUS          PORTS     NAMES</span><br><span class="line"><span class="number">9</span>f2eea16da4c   centos:latest   <span class="string">&quot;bash&quot;</span>    <span class="number">22</span> minutes ago   Up <span class="number">22</span> minutes             c2</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker stop 9f2eea</span></span><br><span class="line"><span class="number">9</span>f2eea</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker ps --all</span></span><br><span class="line">CONTAINER ID   IMAGE           COMMAND                  CREATED          STATUS                       PORTS     NAMES</span><br><span class="line"><span class="number">9</span>f2eea16da4c   centos:latest   <span class="string">&quot;bash&quot;</span>                   <span class="number">22</span> minutes ago   Exited (<span class="number">137</span>) <span class="number">4</span> seconds ago             c2</span><br></pre></td></tr></table></figure>





<h3 id="2-3-7-docker-start"><a href="#2-3-7-docker-start" class="headerlink" title="2.3.7 docker start"></a>2.3.7 docker start</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker ps --all</span></span><br><span class="line">CONTAINER ID   IMAGE           COMMAND     CREATED          STATUS                       PORTS     NAMES</span><br><span class="line"><span class="number">9</span>f2eea16da4c   centos:latest   <span class="string">&quot;bash&quot;</span>      <span class="number">22</span> minutes ago   Exited (<span class="number">137</span>) <span class="number">4</span> seconds ago              c2</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker start 9f2eea</span></span><br><span class="line"><span class="number">9</span>f2eea</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE           COMMAND   CREATED          STATUS          PORTS     NAMES</span><br><span class="line"><span class="number">9</span>f2eea16da4c   centos:latest   <span class="string">&quot;bash&quot;</span>    <span class="number">24</span> minutes ago   Up <span class="number">16</span> seconds             c2</span><br></pre></td></tr></table></figure>





<h3 id="2-3-8-docker-top"><a href="#2-3-8-docker-top" class="headerlink" title="2.3.8  docker top"></a>2.3.8  docker top</h3><blockquote>
<p>在Docker Host查看容器中运行的进程信息</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker top c2</span></span><br><span class="line">UID    PID     PPID      C      STIME        TTY              TIME                CMD</span><br><span class="line">root  <span class="number">69040</span>   <span class="number">69020</span>      <span class="number">0</span>      <span class="number">18</span>:<span class="number">37</span>       pts/<span class="number">0</span>           <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>              bash</span><br></pre></td></tr></table></figure>



<table>
<thead>
<tr>
<th>UID</th>
<th>PID</th>
<th>PPID</th>
<th>C</th>
<th>STIME</th>
<th>TTY</th>
<th>TIME</th>
<th>CMD</th>
</tr>
</thead>
<tbody><tr>
<td>root</td>
<td>69040</td>
<td>69020</td>
<td>0</td>
<td>18:37</td>
<td>pts/0</td>
<td>00:00:00</td>
<td>bash</td>
</tr>
</tbody></table>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">命令解释</span><br><span class="line">docker top 查看container内进程信息，指在docker host上查看，与docker exec <span class="literal">-it</span> c2 <span class="built_in">ps</span> <span class="literal">-ef</span>不同。</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">输出说明</span><br><span class="line">UID 容器中运行的命令用户ID</span><br><span class="line">PID 容器中运行的命令PID</span><br><span class="line">PPID 容器中运行的命令父PID，由于PPID是一个容器，此可指为容器在Docker Host中进程ID</span><br><span class="line">C     占用CPU百分比</span><br><span class="line">STIME 启动时间</span><br><span class="line">TTY   运行所在的终端</span><br><span class="line">TIME  运行时间</span><br><span class="line">CMD   执行的命令</span><br></pre></td></tr></table></figure>



<h3 id="2-3-9-docker-rm"><a href="#2-3-9-docker-rm" class="headerlink" title="2.3.9 docker rm"></a>2.3.9 docker rm</h3><blockquote>
<p>如果容器已停止，使用此命令可以直接删除；如果容器处于运行状态，则需要提前关闭容器后，再删除容器。下面演示容器正在运行关闭后删除的方法。</p>
</blockquote>
<h4 id="2-3-9-1-指定删除容器"><a href="#2-3-9-1-指定删除容器" class="headerlink" title="2.3.9.1 指定删除容器"></a>2.3.9.1 指定删除容器</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE           COMMAND   CREATED      STATUS         PORTS     NAMES</span><br><span class="line"><span class="number">9</span>f2eea16da4c   centos:latest   <span class="string">&quot;bash&quot;</span>    <span class="number">2</span> days ago   Up <span class="number">3</span> seconds             c2</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker stop c2</span></span><br><span class="line">或</span><br><span class="line"><span class="comment"># docker stop 9f2eea16da4c</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker rm c2</span></span><br><span class="line">或</span><br><span class="line"><span class="comment"># docker rm 9f2eea16da4c</span></span><br></pre></td></tr></table></figure>



<h4 id="2-3-9-2-批量删除容器"><a href="#2-3-9-2-批量删除容器" class="headerlink" title="2.3.9.2 批量删除容器"></a>2.3.9.2 批量删除容器</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker ps --all</span></span><br><span class="line">CONTAINER ID   IMAGE           COMMAND          CREATED      STATUS                  PORTS    NAMES</span><br><span class="line"><span class="number">948</span>f234e22a1   centos:latest   <span class="string">&quot;bash&quot;</span>           <span class="number">2</span> days ago   Exited (<span class="number">0</span>) <span class="number">2</span> days ago            c1</span><br><span class="line"><span class="number">01</span>cb3e01273c   centos:latest   <span class="string">&quot;bash&quot;</span>           <span class="number">2</span> days ago   Exited (<span class="number">0</span>) <span class="number">2</span> days ago            systemimage1</span><br><span class="line"><span class="number">46</span>d950fdfb33   nginx:latest    <span class="string">&quot;/docker-ent...&quot;</span> <span class="number">2</span> days ago   Exited (<span class="number">0</span>) <span class="number">2</span> days ago            upbeat_goldberg</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker ps --all | awk &#x27;&#123;if (NR&gt;=2)&#123;print $1&#125;&#125;&#x27; | xargs docker rm</span></span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker部署应用集群</title>
    <url>/2023/08/01/%E4%BA%91%E5%8E%9F%E7%94%9F/Docker/Docker%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<h1 id="一、Docker部署应用"><a href="#一、Docker部署应用" class="headerlink" title="一、Docker部署应用"></a>一、Docker部署应用</h1><h2 id="1-1-使用Docker部署应用必要性"><a href="#1-1-使用Docker部署应用必要性" class="headerlink" title="1.1 使用Docker部署应用必要性"></a>1.1 使用Docker部署应用必要性</h2><ul>
<li>有利于快速实现应用部署</li>
<li>有利于快速实现应用恢复</li>
</ul>
<h2 id="1-2-使用Docker部署应用参考资料"><a href="#1-2-使用Docker部署应用参考资料" class="headerlink" title="1.2 使用Docker部署应用参考资料"></a>1.2 使用Docker部署应用参考资料</h2><p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220211145757283.png" alt="image-20220211145757283"></p>
<h1 id="二、使用Docker容器实现Nginx部署"><a href="#二、使用Docker容器实现Nginx部署" class="headerlink" title="二、使用Docker容器实现Nginx部署"></a>二、使用Docker容器实现Nginx部署</h1><h2 id="2-1-获取参考资料"><a href="#2-1-获取参考资料" class="headerlink" title="2.1 获取参考资料"></a>2.1 获取参考资料</h2><p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220211145839441.png" alt="image-20220211145839441"></p>
<p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220211145905117.png" alt="image-20220211145905117"></p>
<p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220211145956450.png" alt="image-20220211145956450"></p>
<h2 id="2-2-运行Nginx应用容器"><a href="#2-2-运行Nginx应用容器" class="headerlink" title="2.2 运行Nginx应用容器"></a>2.2 运行Nginx应用容器</h2><blockquote>
<p>不在docker host暴露端口</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker run -d --name nginx-server -v /opt/nginx-server:/usr/share/nginx/html:ro nginx</span></span><br><span class="line"><span class="number">664</span>cd1bbda4ad2a71cbd09f0c6baa9b34db80db2d69496670a960be07b9521cb</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE       COMMAND                  CREATED          STATUS          PORTS                                                  NAMES</span><br><span class="line"><span class="number">664</span>cd1bbda4a   nginx       <span class="string">&quot;/docker-entrypoint.…&quot;</span>   <span class="number">4</span> seconds ago    Up <span class="number">3</span> seconds    <span class="number">80</span>/tcp                                                 nginx<span class="literal">-server</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker inspect 664 | grep IPAddress</span></span><br><span class="line">            <span class="string">&quot;SecondaryIPAddresses&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;172.17.0.3&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;172.17.0.3&quot;</span>,</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl http://172.17.0.3</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;<span class="number">403</span> Forbidden&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;<span class="number">403</span> Forbidden&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;nginx/<span class="number">1.21</span>.<span class="number">6</span>&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>





<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ls /opt</span></span><br><span class="line">nginx<span class="literal">-server</span></span><br><span class="line"><span class="comment"># echo &quot;nginx is working&quot; &gt; /opt/nginx-server/index.html</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl http://172.17.0.3</span></span><br><span class="line">nginx is working</span><br></pre></td></tr></table></figure>



<h2 id="2-3-运行Nginx应用容器"><a href="#2-3-运行Nginx应用容器" class="headerlink" title="2.3 运行Nginx应用容器"></a>2.3 运行Nginx应用容器</h2><blockquote>
<p>在docker host暴露80端口</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker run -d -p 80:80 --name nginx-server-port -v /opt/nginx-server-port:/usr/share/nginx/html:ro nginx</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE       COMMAND                  CREATED             STATUS             PORTS                                                  NAMES</span><br><span class="line"><span class="number">74</span>dddf51983d   nginx       <span class="string">&quot;/docker-entrypoint.…&quot;</span>   <span class="number">3</span> seconds ago       Up <span class="number">2</span> seconds       <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">80</span>-&gt;<span class="number">80</span>/tcp, :::<span class="number">80</span>-&gt;<span class="number">80</span>/tcp                      nginx<span class="literal">-server</span><span class="literal">-port</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ls /opt</span></span><br><span class="line">nginx<span class="literal">-server</span>  nginx<span class="literal">-server</span><span class="literal">-port</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># echo &quot;nginx is running&quot; &gt; /opt/nginx-server-port/index.html</span></span><br></pre></td></tr></table></figure>



<p><strong>在宿主机上访问</strong></p>
<p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220211151131609.png" alt="image-20220211151131609"></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker top nginx-server-port</span></span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">root                <span class="number">22195</span>               <span class="number">22163</span>               <span class="number">0</span>                   <span class="number">15</span>:<span class="number">08</span>               ?                   <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>            nginx: master <span class="keyword">process</span> nginx <span class="literal">-g</span> daemon off;</span><br><span class="line"><span class="number">101</span>                 <span class="number">22387</span>               <span class="number">22195</span>               <span class="number">0</span>                   <span class="number">15</span>:<span class="number">08</span>               ?                   <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>            nginx: worker <span class="keyword">process</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>







<h2 id="2-4-运行Nginx应用容器"><a href="#2-4-运行Nginx应用容器" class="headerlink" title="2.4 运行Nginx应用容器"></a>2.4 运行Nginx应用容器</h2><blockquote>
<p>挂载配置文件,需要创建一个nginx容器，把配置文件复制出来修改后使用。</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker cp nginxwebcontainername:/etc/nginx/nginx.conf /opt/nginxcon/</span></span><br><span class="line">修改后即可使用</span><br></pre></td></tr></table></figure>





<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ls /opt/nginxcon/nginx.conf</span></span><br><span class="line">/opt/nginxcon/nginx.conf</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker run -d \</span></span><br><span class="line"><span class="literal">-p</span> <span class="number">82</span>:<span class="number">80</span> -<span class="literal">-name</span> nginx<span class="literal">-server</span><span class="literal">-conf</span> \</span><br><span class="line"><span class="literal">-v</span> /opt/nginx<span class="literal">-server</span><span class="literal">-conf</span>:/usr/share/nginx/html:ro \</span><br><span class="line"><span class="literal">-v</span> /opt/nginxcon/nginx.conf:/etc/nginx/nginx.conf:ro \</span><br><span class="line">nginx</span><br><span class="line"><span class="number">76251</span>ec44e5049445399303944fc96eb8161ccb49e27b673b99cb2492009523c</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker top nginx-server-conf</span></span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">root                <span class="number">25005</span>               <span class="number">24972</span>               <span class="number">0</span>                   <span class="number">15</span>:<span class="number">38</span>               ?                   <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>            nginx: master <span class="keyword">process</span> nginx <span class="literal">-g</span> daemon off;</span><br><span class="line"><span class="number">101</span>                 <span class="number">25178</span>               <span class="number">25005</span>               <span class="number">0</span>                   <span class="number">15</span>:<span class="number">38</span>               ?                   <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>            nginx: worker <span class="keyword">process</span></span><br><span class="line"><span class="number">101</span>                 <span class="number">25179</span>               <span class="number">25005</span>               <span class="number">0</span>                   <span class="number">15</span>:<span class="number">38</span>               ?                   <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>            nginx: worker <span class="keyword">process</span></span><br></pre></td></tr></table></figure>





<h1 id="三、使用Docker容器实现Tomcat部署"><a href="#三、使用Docker容器实现Tomcat部署" class="headerlink" title="三、使用Docker容器实现Tomcat部署"></a>三、使用Docker容器实现Tomcat部署</h1><h2 id="3-1-获取参考资料"><a href="#3-1-获取参考资料" class="headerlink" title="3.1 获取参考资料"></a>3.1 获取参考资料</h2><p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220211154602595.png" alt="image-20220211154602595"></p>
<p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220211154639682.png" alt="image-20220211154639682"></p>
<p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220211154747062.png" alt="image-20220211154747062"></p>
<h2 id="3-2-运行tomcat应用容器"><a href="#3-2-运行tomcat应用容器" class="headerlink" title="3.2 运行tomcat应用容器"></a>3.2 运行tomcat应用容器</h2><h3 id="3-2-1-不暴露端口运行"><a href="#3-2-1-不暴露端口运行" class="headerlink" title="3.2.1 不暴露端口运行"></a>3.2.1 不暴露端口运行</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker run -d --rm tomcat:9.0</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE        COMMAND                  CREATED             STATUS             PORTS                                                  NAMES</span><br><span class="line">c20a0e781246   tomcat:<span class="number">9.0</span>   <span class="string">&quot;catalina.sh run&quot;</span>        <span class="number">27</span> seconds ago      Up <span class="number">25</span> seconds      <span class="number">8080</span>/tcp                                               heuristic_cori</span><br></pre></td></tr></table></figure>







<h3 id="3-2-2-暴露端口运行"><a href="#3-2-2-暴露端口运行" class="headerlink" title="3.2.2 暴露端口运行"></a>3.2.2 暴露端口运行</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker run -d -p 8080:8080 --rm tomcat:9.0</span></span><br><span class="line"><span class="number">2</span>fcf5762314373c824928490b871138a01a94abedd7e6814ad5f361d09fbe1de</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE        COMMAND                  CREATED             STATUS             PORTS                                                  NAMES</span><br><span class="line"><span class="number">2</span>fcf57623143   tomcat:<span class="number">9.0</span>   <span class="string">&quot;catalina.sh run&quot;</span>        <span class="number">3</span> seconds ago       Up <span class="number">1</span> second        <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">8080</span>-&gt;<span class="number">8080</span>/tcp, :::<span class="number">8080</span>-&gt;<span class="number">8080</span>/tcp              eloquent_chatelet</span><br></pre></td></tr></table></figure>



<p><strong>在宿主机访问</strong></p>
<p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220211160925125.png" alt="image-20220211160925125"></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker exec 2fc ls /usr/local/tomcat/webapps</span></span><br><span class="line">里面为空，所以可以添加网站文件。</span><br></pre></td></tr></table></figure>





<h3 id="3-2-3-暴露端口及添加网站文件"><a href="#3-2-3-暴露端口及添加网站文件" class="headerlink" title="3.2.3 暴露端口及添加网站文件"></a>3.2.3 暴露端口及添加网站文件</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker run -d -p 8081:8080 -v /opt/tomcat-server:/usr/local/tomcat/webapps/ROOT tomcat:9.0</span></span><br><span class="line">f456e705d48fc603b7243a435f0edd6284558c194e105d87befff2dccddc0b63</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE        COMMAND             CREATED         STATUS         PORTS                                       NAMES</span><br><span class="line">f456e705d48f   tomcat:<span class="number">9.0</span>   <span class="string">&quot;catalina.sh run&quot;</span>   <span class="number">3</span> seconds ago   Up <span class="number">2</span> seconds   <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">8081</span>-&gt;<span class="number">8080</span>/tcp, :::<span class="number">8081</span>-&gt;<span class="number">8080</span>/tcp   cool_germain</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># echo &quot;tomcat running&quot; &gt; /opt/tomcat-server/index.html</span></span><br></pre></td></tr></table></figure>



<p><strong>在宿主机访问</strong></p>
<p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220211162127222.png" alt="image-20220211162127222"></p>
<h1 id="四、使用Docker容器实现MySQL部署"><a href="#四、使用Docker容器实现MySQL部署" class="headerlink" title="四、使用Docker容器实现MySQL部署"></a>四、使用Docker容器实现MySQL部署</h1><h2 id="4-1-单节点MySQL部署"><a href="#4-1-单节点MySQL部署" class="headerlink" title="4.1 单节点MySQL部署"></a>4.1 单节点MySQL部署</h2><p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220211162728055.png" alt="image-20220211162728055"></p>
<p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220211162817731.png" alt="image-20220211162817731"></p>
<p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220211162911952.png" alt="image-20220211162911952"></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker run -p 3306:3306 \</span></span><br><span class="line"> -<span class="literal">-name</span> mysql \</span><br><span class="line"> <span class="literal">-v</span> /opt/mysql/log:/var/log/mysql \</span><br><span class="line"> <span class="literal">-v</span> /opt/mysql/<span class="keyword">data</span>:/var/lib/mysql \</span><br><span class="line"> <span class="literal">-v</span> /opt/mysql/conf:/etc/mysql \</span><br><span class="line"> <span class="literal">-e</span> MYSQL_ROOT_PASSWORD=root \</span><br><span class="line"> <span class="literal">-d</span> \</span><br><span class="line"> mysql:<span class="number">5.7</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE       COMMAND                  CREATED          STATUS          PORTS                                                  NAMES</span><br><span class="line"><span class="number">6</span>d16ca21cf31   mysql:<span class="number">5.7</span>   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   <span class="number">32</span> seconds ago   Up <span class="number">30</span> seconds   <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">3306</span>-&gt;<span class="number">3306</span>/tcp, :::<span class="number">3306</span>-&gt;<span class="number">3306</span>/tcp, <span class="number">33060</span>/tcp   mysql</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">通过容器中客户端访问</span><br><span class="line"><span class="comment"># docker exec -it mysql mysql -uroot -proot</span></span><br><span class="line">mysql: [<span class="type">Warning</span>] <span class="keyword">Using</span> a password on the <span class="keyword">command</span> line interface can be insecure.</span><br><span class="line">Welcome to the MySQL monitor.  Commands <span class="keyword">end</span> with ; or \g.</span><br><span class="line">Your MySQL connection id is <span class="number">4</span></span><br><span class="line">Server version: <span class="number">5.7</span>.<span class="number">37</span> MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) <span class="number">2000</span>, <span class="number">2022</span>, Oracle and/or its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line"><span class="built_in">Type</span> <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> help. <span class="built_in">Type</span> <span class="string">&#x27;\c&#x27;</span> to <span class="built_in">clear</span> the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">在docker host上访问</span><br><span class="line"><span class="comment"># yum -y install mariadb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mysql -h 192.168.255.157 -uroot -proot -P 3306</span></span><br><span class="line">Welcome to the MariaDB monitor.  Commands <span class="keyword">end</span> with ; or \g.</span><br><span class="line">Your MySQL connection id is <span class="number">7</span></span><br><span class="line">Server version: <span class="number">5.7</span>.<span class="number">37</span> MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) <span class="number">2000</span>, <span class="number">2018</span>, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line"><span class="built_in">Type</span> <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> help. <span class="built_in">Type</span> <span class="string">&#x27;\c&#x27;</span> to <span class="built_in">clear</span> the current input statement.</span><br><span class="line"></span><br><span class="line">MySQL [(<span class="type">none</span>)]&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line"><span class="number">4</span> rows <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>







<h2 id="4-2-MySQL主从复制集群部署"><a href="#4-2-MySQL主从复制集群部署" class="headerlink" title="4.2 MySQL主从复制集群部署"></a>4.2 MySQL主从复制集群部署</h2><h3 id="4-2-1-MySQL主节点部署"><a href="#4-2-1-MySQL主节点部署" class="headerlink" title="4.2.1 MySQL主节点部署"></a>4.2.1 MySQL主节点部署</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker run -p 3306:3306 \</span></span><br><span class="line"> -<span class="literal">-name</span> mysql<span class="literal">-master</span> \</span><br><span class="line"> <span class="literal">-v</span> /opt/mysql<span class="literal">-master</span>/log:/var/log/mysql \</span><br><span class="line"> <span class="literal">-v</span> /opt/mysql<span class="literal">-master</span>/<span class="keyword">data</span>:/var/lib/mysql \</span><br><span class="line"> <span class="literal">-v</span> /opt/mysql<span class="literal">-master</span>/conf:/etc/mysql \</span><br><span class="line"> <span class="literal">-e</span> MYSQL_ROOT_PASSWORD=root \</span><br><span class="line"> <span class="literal">-d</span> mysql:<span class="number">5.7</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE       COMMAND                  CREATED          STATUS          PORTS                                                  NAMES</span><br><span class="line"><span class="number">2</span>dbbed8e35c7   mysql:<span class="number">5.7</span>   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   <span class="number">58</span> seconds ago   Up <span class="number">57</span> seconds   <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">3306</span>-&gt;<span class="number">3306</span>/tcp, :::<span class="number">3306</span>-&gt;<span class="number">3306</span>/tcp, <span class="number">33060</span>/tcp   mysql<span class="literal">-master</span></span><br></pre></td></tr></table></figure>





<h3 id="4-2-2-MySQL主节点配置"><a href="#4-2-2-MySQL主节点配置" class="headerlink" title="4.2.2 MySQL主节点配置"></a>4.2.2 MySQL主节点配置</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /opt/mysql-master/conf/my.cnf</span></span><br><span class="line"><span class="comment"># cat /opt/mysql-master/conf/my.cnf</span></span><br><span class="line">[<span class="type">client</span>]</span><br><span class="line">default<span class="literal">-character</span><span class="literal">-set</span>=utf8</span><br><span class="line"></span><br><span class="line">[<span class="type">mysql</span>]</span><br><span class="line">default<span class="literal">-character</span><span class="literal">-set</span>=utf8</span><br><span class="line"></span><br><span class="line">[<span class="type">mysqld</span>]</span><br><span class="line">init_connect=<span class="string">&#x27;SET collation_connection = utf8_unicode_ci&#x27;</span></span><br><span class="line">init_connect=<span class="string">&#x27;SET NAMES utf8&#x27;</span></span><br><span class="line">character<span class="literal">-set</span><span class="literal">-server</span>=utf8</span><br><span class="line">collation<span class="literal">-server</span>=utf8_unicode_ci</span><br><span class="line"><span class="built_in">skip-character</span><span class="literal">-set</span><span class="literal">-client</span><span class="literal">-handshake</span></span><br><span class="line"><span class="built_in">skip-name</span><span class="literal">-resolve</span></span><br><span class="line"></span><br><span class="line">server_id=<span class="number">1</span></span><br><span class="line">log<span class="literal">-bin</span>=mysql<span class="literal">-bin</span></span><br><span class="line"><span class="built_in">read-only</span>=<span class="number">0</span></span><br><span class="line">binlog<span class="literal">-do</span><span class="literal">-db</span>=kubelixiang_test</span><br><span class="line"></span><br><span class="line">replicate<span class="literal">-ignore</span><span class="literal">-db</span>=mysql</span><br><span class="line">replicate<span class="literal">-ignore</span><span class="literal">-db</span>=sys</span><br><span class="line">replicate<span class="literal">-ignore</span><span class="literal">-db</span>=information_schema</span><br><span class="line">replicate<span class="literal">-ignore</span><span class="literal">-db</span>=performance_schema</span><br></pre></td></tr></table></figure>







<h3 id="4-2-3-MySQL从节点部署"><a href="#4-2-3-MySQL从节点部署" class="headerlink" title="4.2.3 MySQL从节点部署"></a>4.2.3 MySQL从节点部署</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker run -p 3307:3306 \</span></span><br><span class="line"> -<span class="literal">-name</span> mysql<span class="literal">-slave</span> \</span><br><span class="line"> <span class="literal">-v</span> /opt/mysql<span class="literal">-slave</span>/log:/var/log/mysql \</span><br><span class="line"> <span class="literal">-v</span> /opt/mysql<span class="literal">-slave</span>/<span class="keyword">data</span>:/var/lib/mysql \</span><br><span class="line"> <span class="literal">-v</span> /opt/mysql<span class="literal">-slave</span>/conf:/etc/mysql \</span><br><span class="line"> <span class="literal">-e</span> MYSQL_ROOT_PASSWORD=root \</span><br><span class="line"> <span class="literal">-d</span> </span><br><span class="line"> -<span class="literal">-link</span> mysql<span class="literal">-master</span>:mysql<span class="literal">-master</span></span><br><span class="line"> mysql:<span class="number">5.7</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE       COMMAND                  CREATED         STATUS         PORTS                                                  NAMES</span><br><span class="line">caf7bf3fc68f   mysql:<span class="number">5.7</span>   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   <span class="number">8</span> seconds ago   Up <span class="number">6</span> seconds   <span class="number">33060</span>/tcp, <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">3307</span>-&gt;<span class="number">3306</span>/tcp, :::<span class="number">3307</span>-&gt;<span class="number">3306</span>/tcp   mysql<span class="literal">-slave</span></span><br></pre></td></tr></table></figure>







<h3 id="4-2-4-MySQL从节点配置"><a href="#4-2-4-MySQL从节点配置" class="headerlink" title="4.2.4 MySQL从节点配置"></a>4.2.4 MySQL从节点配置</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /opt/mysql-slave/conf/my.cnf</span></span><br><span class="line"><span class="comment"># cat /opt/mysql-slave/conf/my.cnf</span></span><br><span class="line">[<span class="type">client</span>]</span><br><span class="line">default<span class="literal">-character</span><span class="literal">-set</span>=utf8</span><br><span class="line"></span><br><span class="line">[<span class="type">mysql</span>]</span><br><span class="line">default<span class="literal">-character</span><span class="literal">-set</span>=utf8</span><br><span class="line"></span><br><span class="line">[<span class="type">mysqld</span>]</span><br><span class="line">init_connect=<span class="string">&#x27;SET collation_connection = utf8_unicode_ci&#x27;</span></span><br><span class="line">init_connect=<span class="string">&#x27;SET NAMES utf8&#x27;</span></span><br><span class="line">character<span class="literal">-set</span><span class="literal">-server</span>=utf8</span><br><span class="line">collation<span class="literal">-server</span>=utf8_unicode_ci</span><br><span class="line"><span class="built_in">skip-character</span><span class="literal">-set</span><span class="literal">-client</span><span class="literal">-handshake</span></span><br><span class="line"><span class="built_in">skip-name</span><span class="literal">-resolve</span></span><br><span class="line"></span><br><span class="line">server_id=<span class="number">2</span></span><br><span class="line">log<span class="literal">-bin</span>=mysql<span class="literal">-bin</span></span><br><span class="line"><span class="built_in">read-only</span>=<span class="number">1</span></span><br><span class="line">binlog<span class="literal">-do</span><span class="literal">-db</span>=kubelixiang_test</span><br><span class="line"></span><br><span class="line">replicate<span class="literal">-ignore</span><span class="literal">-db</span>=mysql</span><br><span class="line">replicate<span class="literal">-ignore</span><span class="literal">-db</span>=sys</span><br><span class="line">replicate<span class="literal">-ignore</span><span class="literal">-db</span>=information_schema</span><br><span class="line">replicate<span class="literal">-ignore</span><span class="literal">-db</span>=performance_schema</span><br></pre></td></tr></table></figure>



<h3 id="4-2-5-master节点配置"><a href="#4-2-5-master节点配置" class="headerlink" title="4.2.5 master节点配置"></a>4.2.5 master节点配置</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mysql -h 192.168.255.157 -uroot -proot -P 3306</span></span><br><span class="line">Welcome to the MariaDB monitor.  Commands <span class="keyword">end</span> with ; or \g.</span><br><span class="line">Your MySQL connection id is <span class="number">2</span></span><br><span class="line">Server version: <span class="number">5.7</span>.<span class="number">37</span> MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) <span class="number">2000</span>, <span class="number">2018</span>, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line"><span class="built_in">Type</span> <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> help. <span class="built_in">Type</span> <span class="string">&#x27;\c&#x27;</span> to <span class="built_in">clear</span> the current input statement.</span><br><span class="line"></span><br><span class="line">MySQL [(<span class="type">none</span>)]&gt;</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">授权</span><br><span class="line">MySQL [(<span class="type">none</span>)]&gt; grant replication slave on *.* to <span class="string">&#x27;backup&#x27;</span><span class="string">@&#x27;%&#x27; identified by &#x27;123456&#x27;;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">重启容器，使用配置生效</span><br><span class="line"><span class="comment"># docker restart mysql-master</span></span><br></pre></td></tr></table></figure>





<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">查看状态</span><br><span class="line">MySQL [(<span class="type">none</span>)]&gt; show master status\G</span><br><span class="line">*************************** <span class="number">1</span>. row ***************************</span><br><span class="line">             File: mysql<span class="literal">-bin</span>.<span class="number">000001</span></span><br><span class="line">         Position: <span class="number">154</span></span><br><span class="line">     Binlog_Do_DB: kubelixiang_test</span><br><span class="line"> Binlog_Ignore_DB:</span><br><span class="line">Executed_Gtid_Set:</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>





<h3 id="4-2-6-slave节点配置"><a href="#4-2-6-slave节点配置" class="headerlink" title="4.2.6 slave节点配置"></a>4.2.6 slave节点配置</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker restart mysql-slave</span></span><br></pre></td></tr></table></figure>





<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mysql -h 192.168.255.157 -uroot -proot -P 3307</span></span><br><span class="line">Welcome to the MariaDB monitor.  Commands <span class="keyword">end</span> with ; or \g.</span><br><span class="line">Your MySQL connection id is <span class="number">2</span></span><br><span class="line">Server version: <span class="number">5.7</span>.<span class="number">37</span> MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) <span class="number">2000</span>, <span class="number">2018</span>, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line"><span class="built_in">Type</span> <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> help. <span class="built_in">Type</span> <span class="string">&#x27;\c&#x27;</span> to <span class="built_in">clear</span> the current input statement.</span><br><span class="line"></span><br><span class="line">MySQL [(<span class="type">none</span>)]&gt;</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">MySQL [(<span class="type">none</span>)]&gt; change master to master_host=<span class="string">&#x27;mysql-master&#x27;</span>, master_user=<span class="string">&#x27;backup&#x27;</span>, master_password=<span class="string">&#x27;123456&#x27;</span>, master_log_file=<span class="string">&#x27;mysql-bin.000001&#x27;</span>, master_log_pos=<span class="number">154</span>, master_port=<span class="number">3306</span>;</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">MySQL [(<span class="type">none</span>)]&gt; <span class="built_in">start</span> slave;</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">MySQL [(<span class="type">none</span>)]&gt; show slave status\G</span><br><span class="line">*************************** <span class="number">1</span>. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting <span class="keyword">for</span> master to send event</span><br><span class="line">                  Master_Host: mysql<span class="literal">-master</span></span><br><span class="line">                  Master_User: backup</span><br><span class="line">                  Master_Port: <span class="number">3306</span></span><br><span class="line">                Connect_Retry: <span class="number">60</span></span><br><span class="line">              Master_Log_File: mysql<span class="literal">-bin</span>.<span class="number">000001</span></span><br><span class="line">          Read_Master_Log_Pos: <span class="number">154</span></span><br><span class="line">               Relay_Log_File: e0872f94c377<span class="literal">-relay</span><span class="literal">-bin</span>.<span class="number">000002</span></span><br><span class="line">                Relay_Log_Pos: <span class="number">320</span></span><br><span class="line">        Relay_Master_Log_File: mysql<span class="literal">-bin</span>.<span class="number">000001</span></span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB:</span><br><span class="line">          Replicate_Ignore_DB: mysql,sys,information_schema,performance_schema</span><br><span class="line">           Replicate_Do_Table:</span><br><span class="line">       Replicate_Ignore_Table:</span><br><span class="line">      Replicate_Wild_Do_Table:</span><br><span class="line">  Replicate_Wild_Ignore_Table:</span><br><span class="line">                   Last_Errno: <span class="number">0</span></span><br><span class="line">                   Last_Error:</span><br><span class="line">                 Skip_Counter: <span class="number">0</span></span><br><span class="line">          Exec_Master_Log_Pos: <span class="number">154</span></span><br><span class="line">              Relay_Log_Space: <span class="number">534</span></span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File:</span><br><span class="line">                Until_Log_Pos: <span class="number">0</span></span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File:</span><br><span class="line">           Master_SSL_CA_Path:</span><br><span class="line">              Master_SSL_Cert:</span><br><span class="line">            Master_SSL_Cipher:</span><br><span class="line">               Master_SSL_Key:</span><br><span class="line">        Seconds_Behind_Master: <span class="number">0</span></span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: <span class="number">0</span></span><br><span class="line">                Last_IO_Error:</span><br><span class="line">               Last_SQL_Errno: <span class="number">0</span></span><br><span class="line">               Last_SQL_Error:</span><br><span class="line">  Replicate_Ignore_Server_Ids:</span><br><span class="line">             Master_Server_Id: <span class="number">1</span></span><br><span class="line">                  Master_UUID: <span class="number">0130</span>b415<span class="literal">-8b21</span><span class="literal">-11ec</span><span class="literal">-8982</span><span class="literal">-0242ac110002</span></span><br><span class="line">             Master_Info_File: /var/lib/mysql/master.info</span><br><span class="line">                    SQL_Delay: <span class="number">0</span></span><br><span class="line">          SQL_Remaining_Delay: NULL</span><br><span class="line">      Slave_SQL_Running_State: Slave has read all relay log; waiting <span class="keyword">for</span> more updates</span><br><span class="line">           Master_Retry_Count: <span class="number">86400</span></span><br><span class="line">                  Master_Bind:</span><br><span class="line">      Last_IO_Error_Timestamp:</span><br><span class="line">     Last_SQL_Error_Timestamp:</span><br><span class="line">               Master_SSL_Crl:</span><br><span class="line">           Master_SSL_Crlpath:</span><br><span class="line">           Retrieved_Gtid_Set:</span><br><span class="line">            Executed_Gtid_Set:</span><br><span class="line">                Auto_Position: <span class="number">0</span></span><br><span class="line">         Replicate_Rewrite_DB:</span><br><span class="line">                 Channel_Name:</span><br><span class="line">           Master_TLS_Version:</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>



<h3 id="4-2-7-验证MySQL集群可用性"><a href="#4-2-7-验证MySQL集群可用性" class="headerlink" title="4.2.7 验证MySQL集群可用性"></a>4.2.7 验证MySQL集群可用性</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">在MySQL Master节点添加kubelixiang_test数据库</span><br><span class="line"><span class="comment"># mysql -h 192.168.255.157 -uroot -proot -P3306</span></span><br><span class="line"></span><br><span class="line">MySQL [(<span class="type">none</span>)]&gt; create database kubelixiang_test;</span><br><span class="line">Query OK, <span class="number">1</span> row affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">MySQL [(<span class="type">none</span>)]&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| kubelixiang_test       |     |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line"><span class="number">6</span> rows <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">在MySQL Slave节点查看同步情况</span><br><span class="line"><span class="comment"># mysql -h 192.168.255.157 -uroot -proot -P3307</span></span><br><span class="line"></span><br><span class="line">MySQL [(<span class="type">none</span>)]&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| kubelixiang_test       |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line"><span class="number">5</span> rows <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>









<h1 id="五、使用Docker容器实现Oracle部署"><a href="#五、使用Docker容器实现Oracle部署" class="headerlink" title="五、使用Docker容器实现Oracle部署"></a>五、使用Docker容器实现Oracle部署</h1><h2 id="5-1-获取参考资料"><a href="#5-1-获取参考资料" class="headerlink" title="5.1 获取参考资料"></a>5.1 获取参考资料</h2><p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212111348491.png" alt="image-20220212111348491"></p>
<p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212111511130.png" alt="image-20220212111511130"></p>
<h2 id="5-2-运行oracle容器"><a href="#5-2-运行oracle容器" class="headerlink" title="5.2 运行oracle容器"></a>5.2 运行oracle容器</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker pull oracleinanutshell/oracle-xe-11g</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker run -h oracle --name oracle -d -p 49160:22 -p 49161:1521 -p 49162:8080 oracleinanutshell/oracle-xe-11g</span></span><br><span class="line"><span class="number">237</span>db949020abf2cee12e3193fa8a34d9dfadaafd9d5604564668d4472abe0b2</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                             COMMAND                  CREATED         STATUS         PORTS                                                                                                                               NAMES</span><br><span class="line"><span class="number">237</span>db949020a   oracleinanutshell/oracle<span class="literal">-xe</span><span class="literal">-11g</span>   <span class="string">&quot;/bin/sh -c &#x27;/usr/sb…&quot;</span>   <span class="number">7</span> seconds ago   Up <span class="number">4</span> seconds   <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">49160</span>-&gt;<span class="number">22</span>/tcp, :::<span class="number">49160</span>-&gt;<span class="number">22</span>/tcp, <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">49161</span>-&gt;<span class="number">1521</span>/tcp, :::<span class="number">49161</span>-&gt;<span class="number">1521</span>/tcp, <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">49162</span>-&gt;<span class="number">8080</span>/tcp, :::<span class="number">49162</span>-&gt;<span class="number">8080</span>/tcp   oracle</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">说明：</span><br><span class="line"><span class="number">49160</span> 为ssh端口</span><br><span class="line"><span class="number">49161</span> 为sqlplus端口</span><br><span class="line"><span class="number">49162</span> 为oem端口</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">oracle数据库连接信息</span><br><span class="line">port:<span class="number">49161</span></span><br><span class="line">sid:xe</span><br><span class="line">username:system</span><br><span class="line">password:oracle</span><br><span class="line"></span><br><span class="line">SYS用户密码为:oracle</span><br></pre></td></tr></table></figure>



<h2 id="5-3-下载客户端连接工具"><a href="#5-3-下载客户端连接工具" class="headerlink" title="5.3 下载客户端连接工具"></a>5.3 下载客户端连接工具</h2><p>下载链接地址：<a href="https://www.oracle.com/tools/downloads/sqldev-downloads.html">https://www.oracle.com/tools/downloads/sqldev-downloads.html</a></p>
<p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212115409934.png" alt="image-20220212115409934"></p>
<p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212115556498.png" alt="image-20220212115556498"></p>
<p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212115858640.png" alt="image-20220212115858640"></p>
<p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212115929175.png" alt="image-20220212115929175"></p>
<p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212120017387.png" alt="image-20220212120017387"></p>
<p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212120525692.png" alt="image-20220212120525692"></p>
<p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212120808803.png" alt="image-20220212120808803"></p>
<p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212120839513.png" alt="image-20220212120839513"></p>
<p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212120910215.png" alt="image-20220212120910215"></p>
<p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212120952721.png" alt="image-20220212120952721"></p>
<h1 id="六、使用Docker容器实现ElasticSearch-Kibana部署"><a href="#六、使用Docker容器实现ElasticSearch-Kibana部署" class="headerlink" title="六、使用Docker容器实现ElasticSearch+Kibana部署"></a>六、使用Docker容器实现ElasticSearch+Kibana部署</h1><h2 id="6-1-获取参考资料"><a href="#6-1-获取参考资料" class="headerlink" title="6.1 获取参考资料"></a>6.1 获取参考资料</h2><h3 id="6-1-1-ES部署参考资料"><a href="#6-1-1-ES部署参考资料" class="headerlink" title="6.1.1 ES部署参考资料"></a>6.1.1 ES部署参考资料</h3><p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212211742909.png" alt="image-20220212211742909"></p>
<p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212211840530.png" alt="image-20220212211840530"></p>
<p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212211857732.png" alt="image-20220212211857732"></p>
<p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212211950202.png" alt="image-20220212211950202"></p>
<h3 id="6-1-2-Kibana部署参考资料"><a href="#6-1-2-Kibana部署参考资料" class="headerlink" title="6.1.2 Kibana部署参考资料"></a>6.1.2 Kibana部署参考资料</h3><p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212212223735.png" alt="image-20220212212223735"></p>
<p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212212245791.png" alt="image-20220212212245791"></p>
<p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212212305429.png" alt="image-20220212212305429"></p>
<p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212212341841.png" alt="image-20220212212341841"></p>
<h2 id="6-2-ES部署"><a href="#6-2-ES部署" class="headerlink" title="6.2 ES部署"></a>6.2 ES部署</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker pull elasticsearch:7.17.0</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkdir -p /opt/es/config</span></span><br><span class="line"><span class="comment"># mkdir -p /opt/es/data</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># echo &quot;http.host: 0.0.0.0&quot; &gt;&gt; /opt/es/config/elasticsearch.yml</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># chmod -R 777 /opt/es/</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker run --name elasticsearch -p 9200:9200 -p 9300:9300 \</span></span><br><span class="line"><span class="literal">-e</span> <span class="string">&quot;discovery.type=single-node&quot;</span> \</span><br><span class="line"><span class="literal">-e</span> ES_JAVA_OPTS=<span class="string">&quot;-Xms64m -Xmx512m&quot;</span> \</span><br><span class="line"><span class="literal">-v</span> /opt/es/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \</span><br><span class="line"><span class="literal">-v</span> /opt/es/<span class="keyword">data</span>:/usr/share/elasticsearch/<span class="keyword">data</span> \</span><br><span class="line"><span class="literal">-v</span> /opt/es/plugins:/usr/share/elasticsearch/plugins \</span><br><span class="line"><span class="literal">-d</span> elasticsearch:<span class="number">7.17</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                 COMMAND                  CREATED          STATUS          PORTS                                                                                  NAMES</span><br><span class="line">e1c306e6e5a3   elasticsearch:<span class="number">7.17</span>.<span class="number">0</span>   <span class="string">&quot;/bin/tini -- /usr/l…&quot;</span>   <span class="number">22</span> seconds ago   Up <span class="number">20</span> seconds   <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">9200</span>-&gt;<span class="number">9200</span>/tcp, :::<span class="number">9200</span>-&gt;<span class="number">9200</span>/tcp, <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">9300</span>-&gt;<span class="number">9300</span>/tcp, :::<span class="number">9300</span>-&gt;<span class="number">9300</span>/tcp   elasticsearch</span><br></pre></td></tr></table></figure>



<p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212224446838.png" alt="image-20220212224446838"></p>
<h2 id="6-3-Kibana部署"><a href="#6-3-Kibana部署" class="headerlink" title="6.3 Kibana部署"></a>6.3 Kibana部署</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker pull kibana:7.17.0</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker run --name kibana -e ELASTICSEARCH_HOSTS=http://192.168.255.157:9200 -p 5601:5601 \</span></span><br><span class="line"><span class="literal">-d</span> kibana:<span class="number">7.17</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                  COMMAND                  CREATED         STATUS         PORTS                                                                                  NAMES</span><br><span class="line">fb60e73f9cd5   kibana:<span class="number">7.17</span>.<span class="number">0</span>          <span class="string">&quot;/bin/tini -- /usr/l…&quot;</span>   <span class="number">2</span> minutes ago   Up <span class="number">2</span> minutes   <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">5601</span>-&gt;<span class="number">5601</span>/tcp, :::<span class="number">5601</span>-&gt;<span class="number">5601</span>/tcp                                              kibana</span><br></pre></td></tr></table></figure>



<p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212224524598.png" alt="image-20220212224524598"></p>
<h1 id="七、使用Docker容器实现Redis部署"><a href="#七、使用Docker容器实现Redis部署" class="headerlink" title="七、使用Docker容器实现Redis部署"></a>七、使用Docker容器实现Redis部署</h1><h2 id="7-1-获取参考资料"><a href="#7-1-获取参考资料" class="headerlink" title="7.1 获取参考资料"></a>7.1 获取参考资料</h2><p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212225251173.png" alt="image-20220212225251173"></p>
<p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212225313006.png" alt="image-20220212225313006"></p>
<p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212225336437.png" alt="image-20220212225336437"></p>
<p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212225412367.png" alt="image-20220212225412367"></p>
<h2 id="7-2-运行Redis容器"><a href="#7-2-运行Redis容器" class="headerlink" title="7.2 运行Redis容器"></a>7.2 运行Redis容器</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkdir -p /opt/redis/conf</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># touch /opt/redis/conf/redis.conf</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker run -p 6379:6379 --name redis -v /opt/redis/data:/data \</span></span><br><span class="line"><span class="literal">-v</span> /opt/redis/conf:/etc/redis \</span><br><span class="line"><span class="literal">-d</span> redis redis<span class="literal">-server</span> /etc/redis/redis.conf</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                  COMMAND                  CREATED          STATUS          PORTS                                                                                  NAMES</span><br><span class="line"><span class="number">9</span>bd2b39cd92a   redis                  <span class="string">&quot;docker-entrypoint.s…&quot;</span>   <span class="number">44</span> seconds ago   Up <span class="number">42</span> seconds   <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">6379</span>-&gt;<span class="number">6379</span>/tcp, :::<span class="number">6379</span>-&gt;<span class="number">6379</span>/tcp                                              redis</span><br></pre></td></tr></table></figure>



<h2 id="7-3-验证"><a href="#7-3-验证" class="headerlink" title="7.3 验证"></a>7.3 验证</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum -y install redis</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># redis-cli -h 192.168.255.157 -p 6379</span></span><br><span class="line"></span><br><span class="line"><span class="number">192.168</span>.<span class="number">255.157</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> test1 a</span><br><span class="line">OK</span><br><span class="line"><span class="number">192.168</span>.<span class="number">255.157</span>:<span class="number">6379</span>&gt; get test1</span><br><span class="line"><span class="string">&quot;a&quot;</span></span><br></pre></td></tr></table></figure>



<h2 id="7-4-Redis集群"><a href="#7-4-Redis集群" class="headerlink" title="7.4 Redis集群"></a>7.4 Redis集群</h2><p>安装redis-cluster；3主3从方式，从为了同步备份，主进行slot数据分片</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">编辑运行多个redis容器脚本文件</span><br><span class="line"><span class="comment"># vim redis-cluster.sh</span></span><br><span class="line"><span class="comment"># cat redis-cluster.sh</span></span><br><span class="line"><span class="keyword">for</span> port <span class="keyword">in</span> <span class="variable">$</span>(seq <span class="number">8001</span> <span class="number">8006</span>); \</span><br><span class="line"><span class="keyword">do</span> \</span><br><span class="line">mkdir <span class="literal">-p</span> /mydata/redis/node-<span class="variable">$</span>&#123;port&#125;/conf</span><br><span class="line">touch /mydata/redis/node-<span class="variable">$</span>&#123;port&#125;/conf/redis.conf</span><br><span class="line"><span class="built_in">cat</span> &lt;&lt; EOF &gt;/mydata/redis/node-<span class="variable">$</span>&#123;port&#125;/conf/redis.conf</span><br><span class="line">port <span class="variable">$</span>&#123;port&#125;</span><br><span class="line">cluster<span class="literal">-enabled</span> yes</span><br><span class="line">cluster<span class="literal">-config</span><span class="operator">-file</span> nodes.conf</span><br><span class="line">cluster<span class="literal">-node</span><span class="literal">-timeout</span> <span class="number">5000</span></span><br><span class="line">cluster<span class="literal">-announce</span><span class="literal">-ip</span> <span class="number">192.168</span>.<span class="number">255.157</span></span><br><span class="line">cluster<span class="literal">-announce</span><span class="literal">-port</span> <span class="variable">$</span>&#123;port&#125;</span><br><span class="line">cluster<span class="literal">-announce</span><span class="literal">-bus</span><span class="literal">-port</span> <span class="number">1</span><span class="variable">$</span>&#123;port&#125;</span><br><span class="line">appendonly yes</span><br><span class="line">EOF</span><br><span class="line">docker run <span class="literal">-p</span> <span class="variable">$</span>&#123;port&#125;:<span class="variable">$</span>&#123;port&#125; <span class="literal">-p</span> <span class="number">1</span><span class="variable">$</span>&#123;port&#125;:<span class="number">1</span><span class="variable">$</span>&#123;port&#125; -<span class="literal">-name</span> redis-<span class="variable">$</span>&#123;port&#125; \</span><br><span class="line"><span class="literal">-v</span> /mydata/redis/node-<span class="variable">$</span>&#123;port&#125;/<span class="keyword">data</span>:/<span class="keyword">data</span> \</span><br><span class="line"><span class="literal">-v</span> /mydata/redis/node-<span class="variable">$</span>&#123;port&#125;/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line"><span class="literal">-d</span> redis:<span class="number">5.0</span>.<span class="number">7</span> redis<span class="literal">-server</span> /etc/redis/redis.conf; \</span><br><span class="line">done</span><br></pre></td></tr></table></figure>





<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">执行脚本</span><br><span class="line"><span class="comment"># sh redis-cluster.sh</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">查看已运行容器</span><br><span class="line"><span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE         COMMAND                  CREATED              STATUS              PORTS                                                                                                NAMES</span><br><span class="line"><span class="number">8</span>d53864a98ce   redis:<span class="number">5.0</span>.<span class="number">7</span>   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   About a minute ago   Up About a minute   <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">8006</span>-&gt;<span class="number">8006</span>/tcp, :::<span class="number">8006</span>-&gt;<span class="number">8006</span>/tcp, <span class="number">6379</span>/tcp, <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">18006</span>-&gt;<span class="number">18006</span>/tcp, :::<span class="number">18006</span>-&gt;<span class="number">18006</span>/tcp   redis<span class="literal">-8006</span></span><br><span class="line">e2b5da0f0605   redis:<span class="number">5.0</span>.<span class="number">7</span>   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   <span class="number">2</span> minutes ago        Up About a minute   <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">8005</span>-&gt;<span class="number">8005</span>/tcp, :::<span class="number">8005</span>-&gt;<span class="number">8005</span>/tcp, <span class="number">6379</span>/tcp, <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">18005</span>-&gt;<span class="number">18005</span>/tcp, :::<span class="number">18005</span>-&gt;<span class="number">18005</span>/tcp   redis<span class="literal">-8005</span></span><br><span class="line"><span class="number">70</span>e8e8f15aea   redis:<span class="number">5.0</span>.<span class="number">7</span>   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   <span class="number">2</span> minutes ago        Up <span class="number">2</span> minutes        <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">8004</span>-&gt;<span class="number">8004</span>/tcp, :::<span class="number">8004</span>-&gt;<span class="number">8004</span>/tcp, <span class="number">6379</span>/tcp, <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">18004</span>-&gt;<span class="number">18004</span>/tcp, :::<span class="number">18004</span>-&gt;<span class="number">18004</span>/tcp   redis<span class="literal">-8004</span></span><br><span class="line">dff8e4bf02b4   redis:<span class="number">5.0</span>.<span class="number">7</span>   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   <span class="number">2</span> minutes ago        Up <span class="number">2</span> minutes        <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">8003</span>-&gt;<span class="number">8003</span>/tcp, :::<span class="number">8003</span>-&gt;<span class="number">8003</span>/tcp, <span class="number">6379</span>/tcp, <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">18003</span>-&gt;<span class="number">18003</span>/tcp, :::<span class="number">18003</span>-&gt;<span class="number">18003</span>/tcp   redis<span class="literal">-8003</span></span><br><span class="line">c34dc4c423ef   redis:<span class="number">5.0</span>.<span class="number">7</span>   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   <span class="number">2</span> minutes ago        Up <span class="number">2</span> minutes        <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">8002</span>-&gt;<span class="number">8002</span>/tcp, :::<span class="number">8002</span>-&gt;<span class="number">8002</span>/tcp, <span class="number">6379</span>/tcp, <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">18002</span>-&gt;<span class="number">18002</span>/tcp, :::<span class="number">18002</span>-&gt;<span class="number">18002</span>/tcp   redis<span class="literal">-8002</span></span><br><span class="line">b8cb5feffb43   redis:<span class="number">5.0</span>.<span class="number">7</span>   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   <span class="number">2</span> minutes ago        Up <span class="number">2</span> minutes        <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">8001</span>-&gt;<span class="number">8001</span>/tcp, :::<span class="number">8001</span>-&gt;<span class="number">8001</span>/tcp, <span class="number">6379</span>/tcp, <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">18001</span>-&gt;<span class="number">18001</span>/tcp, :::<span class="number">18001</span>-&gt;<span class="number">18001</span>/tcp   redis<span class="literal">-8001</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">登录redis容器</span><br><span class="line"><span class="comment"># docker exec -it redis-8001 bash</span></span><br><span class="line">root@b8cb5feffb43:/<span class="keyword">data</span><span class="comment">#</span></span><br></pre></td></tr></table></figure>





<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">创建redis<span class="literal">-cluster</span></span><br><span class="line">root@b8cb5feffb43:/<span class="keyword">data</span><span class="comment"># redis-cli --cluster create 192.168.255.157:8001 192.168.255.157:8002 192.168.255.157:8003 192.168.255.157:8004 192.168.255.157:8005 192.168.255.157:8006 --cluster-replicas 1</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">输出：</span><br><span class="line">&gt;&gt;&gt; Performing hash slots allocation on <span class="number">6</span> nodes...</span><br><span class="line">Master[<span class="number">0</span>] -&gt; Slots <span class="number">0</span> - <span class="number">5460</span></span><br><span class="line">Master[<span class="number">1</span>] -&gt; Slots <span class="number">5461</span> - <span class="number">10922</span></span><br><span class="line">Master[<span class="number">2</span>] -&gt; Slots <span class="number">10923</span> - <span class="number">16383</span></span><br><span class="line">Adding replica <span class="number">192.168</span>.<span class="number">255.157</span>:<span class="number">8005</span> to <span class="number">192.168</span>.<span class="number">255.157</span>:<span class="number">8001</span></span><br><span class="line">Adding replica <span class="number">192.168</span>.<span class="number">255.157</span>:<span class="number">8006</span> to <span class="number">192.168</span>.<span class="number">255.157</span>:<span class="number">8002</span></span><br><span class="line">Adding replica <span class="number">192.168</span>.<span class="number">255.157</span>:<span class="number">8004</span> to <span class="number">192.168</span>.<span class="number">255.157</span>:<span class="number">8003</span></span><br><span class="line">&gt;&gt;&gt; Trying to optimize slaves allocation <span class="keyword">for</span> anti<span class="literal">-affinity</span></span><br><span class="line">[<span class="type">WARNING</span>] Some slaves are <span class="keyword">in</span> the same host as their master</span><br><span class="line">M: abd07f1a2679fe77558bad3ff4b7ab70ec41efa5 <span class="number">192.168</span>.<span class="number">255.157</span>:<span class="number">8001</span></span><br><span class="line">   slots:[<span class="number">0</span>-<span class="number">5460</span>] (<span class="number">5461</span> slots) master</span><br><span class="line">M: <span class="number">40</span>e69202bb3eab13a8157c33da6240bb31f2fd6f <span class="number">192.168</span>.<span class="number">255.157</span>:<span class="number">8002</span></span><br><span class="line">   slots:[<span class="number">5461</span>-<span class="number">10922</span>] (<span class="number">5462</span> slots) master</span><br><span class="line">M: <span class="number">9</span>a927abf3c2982ba9ffdb29176fc8ffa77a2cf03 <span class="number">192.168</span>.<span class="number">255.157</span>:<span class="number">8003</span></span><br><span class="line">   slots:[<span class="number">10923</span>-<span class="number">16383</span>] (<span class="number">5461</span> slots) master</span><br><span class="line">S: <span class="number">81</span>d0a4056328830a555fcd75cf523d4c9d52205c <span class="number">192.168</span>.<span class="number">255.157</span>:<span class="number">8004</span></span><br><span class="line">   replicates <span class="number">9</span>a927abf3c2982ba9ffdb29176fc8ffa77a2cf03</span><br><span class="line">S: <span class="number">8121</span>a28519e5b52e4817913aa3969d9431bb68af <span class="number">192.168</span>.<span class="number">255.157</span>:<span class="number">8005</span></span><br><span class="line">   replicates abd07f1a2679fe77558bad3ff4b7ab70ec41efa5</span><br><span class="line">S: <span class="number">3</span>a8dd5343c0b8f5580bc44f6b3bb5b4371d4dde5 <span class="number">192.168</span>.<span class="number">255.157</span>:<span class="number">8006</span></span><br><span class="line">   replicates <span class="number">40</span>e69202bb3eab13a8157c33da6240bb31f2fd6f</span><br><span class="line">Can I <span class="built_in">set</span> the above configuration? (<span class="built_in">type</span> <span class="string">&#x27;yes&#x27;</span> to accept): yes 输入yes</span><br><span class="line">&gt;&gt;&gt; Nodes configuration updated</span><br><span class="line">&gt;&gt;&gt; Assign a different config epoch to each node</span><br><span class="line">&gt;&gt;&gt; Sending CLUSTER MEET messages to join the cluster</span><br><span class="line">Waiting <span class="keyword">for</span> the cluster to join</span><br><span class="line">.....</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (<span class="keyword">using</span> node 192.168.255.157:8001)</span><br><span class="line">M: abd07f1a2679fe77558bad3ff4b7ab70ec41efa5 <span class="number">192.168</span>.<span class="number">255.157</span>:<span class="number">8001</span></span><br><span class="line">   slots:[<span class="number">0</span>-<span class="number">5460</span>] (<span class="number">5461</span> slots) master</span><br><span class="line">   <span class="number">1</span> additional replica(s)</span><br><span class="line">S: <span class="number">81</span>d0a4056328830a555fcd75cf523d4c9d52205c <span class="number">192.168</span>.<span class="number">255.157</span>:<span class="number">8004</span></span><br><span class="line">   slots: (<span class="number">0</span> slots) slave</span><br><span class="line">   replicates <span class="number">9</span>a927abf3c2982ba9ffdb29176fc8ffa77a2cf03</span><br><span class="line">M: <span class="number">40</span>e69202bb3eab13a8157c33da6240bb31f2fd6f <span class="number">192.168</span>.<span class="number">255.157</span>:<span class="number">8002</span></span><br><span class="line">   slots:[<span class="number">5461</span>-<span class="number">10922</span>] (<span class="number">5462</span> slots) master</span><br><span class="line">   <span class="number">1</span> additional replica(s)</span><br><span class="line">S: <span class="number">8121</span>a28519e5b52e4817913aa3969d9431bb68af <span class="number">192.168</span>.<span class="number">255.157</span>:<span class="number">8005</span></span><br><span class="line">   slots: (<span class="number">0</span> slots) slave</span><br><span class="line">   replicates abd07f1a2679fe77558bad3ff4b7ab70ec41efa5</span><br><span class="line">M: <span class="number">9</span>a927abf3c2982ba9ffdb29176fc8ffa77a2cf03 <span class="number">192.168</span>.<span class="number">255.157</span>:<span class="number">8003</span></span><br><span class="line">   slots:[<span class="number">10923</span>-<span class="number">16383</span>] (<span class="number">5461</span> slots) master</span><br><span class="line">   <span class="number">1</span> additional replica(s)</span><br><span class="line">S: <span class="number">3</span>a8dd5343c0b8f5580bc44f6b3bb5b4371d4dde5 <span class="number">192.168</span>.<span class="number">255.157</span>:<span class="number">8006</span></span><br><span class="line">   slots: (<span class="number">0</span> slots) slave</span><br><span class="line">   replicates <span class="number">40</span>e69202bb3eab13a8157c33da6240bb31f2fd6f</span><br><span class="line">[<span class="type">OK</span>] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[<span class="type">OK</span>] All <span class="number">16384</span> slots covered.</span><br></pre></td></tr></table></figure>





<h1 id="八、使用Docker容器实现RabbitMQ部署"><a href="#八、使用Docker容器实现RabbitMQ部署" class="headerlink" title="八、使用Docker容器实现RabbitMQ部署"></a>八、使用Docker容器实现RabbitMQ部署</h1><h2 id="8-1-获取参考资料"><a href="#8-1-获取参考资料" class="headerlink" title="8.1 获取参考资料"></a>8.1 获取参考资料</h2><p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220213123228483.png" alt="image-20220213123228483"></p>
<p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220213123307806.png" alt="image-20220213123307806"></p>
<p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220213123355531.png" alt="image-20220213123355531"></p>
<p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220213123503083.png" alt="image-20220213123503083"></p>
<h2 id="8-2-部署RabbitMQ"><a href="#8-2-部署RabbitMQ" class="headerlink" title="8.2 部署RabbitMQ"></a>8.2 部署RabbitMQ</h2><blockquote>
<p>部署带管理控制台的RabbitMQ</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker run -d --name rabbitmq -p 5671:5671 -p 5672:5672 -p 4369:4369 -p 25672:25672 -p 15671:15671 -p 15672:15672 -v /opt/rabbitmq:/var/lib/rabbitmq rabbitmq:management</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                 COMMAND                  CREATED          STATUS         PORTS                                                                                                                                                                                                                                             NAMES</span><br><span class="line"><span class="number">97</span>d28093faa4   rabbitmq:management   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   <span class="number">11</span> seconds ago   Up <span class="number">6</span> seconds   <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">4369</span>-&gt;<span class="number">4369</span>/tcp, :::<span class="number">4369</span>-&gt;<span class="number">4369</span>/tcp, <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">5671</span><span class="literal">-5672</span>-&gt;<span class="number">5671</span><span class="literal">-5672</span>/tcp, :::<span class="number">5671</span><span class="literal">-5672</span>-&gt;<span class="number">5671</span><span class="literal">-5672</span>/tcp, <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">15671</span><span class="literal">-15672</span>-&gt;<span class="number">15671</span><span class="literal">-15672</span>/tcp, :::<span class="number">15671</span><span class="literal">-15672</span>-&gt;<span class="number">15671</span><span class="literal">-15672</span>/tcp, <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">25672</span>-&gt;<span class="number">25672</span>/tcp, :::<span class="number">25672</span>-&gt;<span class="number">25672</span>/tcp, <span class="number">15691</span><span class="literal">-15692</span>/tcp   rabbitmq</span><br></pre></td></tr></table></figure>





<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">端口说明：</span><br><span class="line"><span class="number">4369</span>, <span class="number">25672</span> (Erlang发现&amp;集群端口)</span><br><span class="line"><span class="number">5672</span>, <span class="number">5671</span> (AMQP端口)</span><br><span class="line"><span class="number">15672</span> (web管理后台端口)</span><br><span class="line"><span class="number">61613</span>, <span class="number">61614</span> (STOMP协议端口)</span><br><span class="line"><span class="number">1883</span>, <span class="number">8883</span> (MQTT协议端口)</span><br></pre></td></tr></table></figure>



<p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220213124157710.png" alt="image-20220213124157710"></p>
<p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220213124232819.png" alt="image-20220213124232819"></p>
<p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220213124302137.png" alt="image-20220213124302137"></p>
]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Dockerfile容器镜像构建技术</title>
    <url>/2023/08/03/%E4%BA%91%E5%8E%9F%E7%94%9F/Docker/Dockerfile%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<h1 id="一、容器与容器镜像之间的关系"><a href="#一、容器与容器镜像之间的关系" class="headerlink" title="一、容器与容器镜像之间的关系"></a>一、容器与容器镜像之间的关系</h1><p>说到Docker管理的容器不得不说容器镜像，主要因为容器镜像是容器模板，通过容器镜像我们才能快速创建容器。</p>
<p>如下图所示：</p>
<p><img src="/images/Docker/Dockerfile%E7%B2%BE%E8%AE%B2%E5%8F%8A%E6%96%B0%E5%9E%8B%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA%E6%8A%80%E6%9C%AF.assets/clip_image002.jpg" alt="img"></p>
<blockquote>
<p>Docker Daemon通过容器镜像创建容器。</p>
</blockquote>
<h1 id="二、容器镜像分类"><a href="#二、容器镜像分类" class="headerlink" title="二、容器镜像分类"></a>二、容器镜像分类</h1><ul>
<li>操作系统类<ul>
<li>CentOS</li>
<li>Ubuntu</li>
<li>在dockerhub下载或自行制作</li>
</ul>
</li>
<li>应用类<ul>
<li>Tomcat</li>
<li>Nginx</li>
<li>MySQL</li>
<li>Redis</li>
</ul>
</li>
</ul>
<h1 id="三、容器镜像获取的方法"><a href="#三、容器镜像获取的方法" class="headerlink" title="三、容器镜像获取的方法"></a>三、容器镜像获取的方法</h1><p>主要有以下几种：</p>
<p>1、在DockerHub直接下载</p>
<p>2、把操作系统中文件系统打包为容器镜像</p>
<p>3、把正在运行的容器打包为容器镜像，即docker commit</p>
<p>4、通过Dockerfile实现容器镜像的自定义及生成</p>
<h1 id="四、容器镜像获取方法演示"><a href="#四、容器镜像获取方法演示" class="headerlink" title="四、容器镜像获取方法演示"></a>四、容器镜像获取方法演示</h1><h2 id="4-1-在DockerHub直接下载"><a href="#4-1-在DockerHub直接下载" class="headerlink" title="4.1 在DockerHub直接下载"></a>4.1 在DockerHub直接下载</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker pull centos:latest</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker pull nginx:latest</span></span><br></pre></td></tr></table></figure>





<h2 id="4-2-把操作系统中文件系统打包为容器镜像"><a href="#4-2-把操作系统中文件系统打包为容器镜像" class="headerlink" title="4.2 把操作系统中文件系统打包为容器镜像"></a>4.2 把操作系统中文件系统打包为容器镜像</h2><h3 id="4-2-1-安装一个最化的操作系统"><a href="#4-2-1-安装一个最化的操作系统" class="headerlink" title="4.2.1 安装一个最化的操作系统"></a>4.2.1 安装一个最化的操作系统</h3><p><img src="/images/Docker/Dockerfile%E7%B2%BE%E8%AE%B2%E5%8F%8A%E6%96%B0%E5%9E%8B%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA%E6%8A%80%E6%9C%AF.assets/image-20220210123047484.png" alt="image-20220210123047484"></p>
<h3 id="4-2-2-把操作系统中文件系统进行打包"><a href="#4-2-2-把操作系统中文件系统进行打包" class="headerlink" title="4.2.2 把操作系统中文件系统进行打包"></a>4.2.2 把操作系统中文件系统进行打包</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tar --numeric-owner --exclude=/proc --exclude=/sys -cvf centos7u6.tar /</span></span><br></pre></td></tr></table></figure>



<h3 id="4-2-3-把打包后文件加载至本地文件系统生成本地容器镜像"><a href="#4-2-3-把打包后文件加载至本地文件系统生成本地容器镜像" class="headerlink" title="4.2.3 把打包后文件加载至本地文件系统生成本地容器镜像"></a>4.2.3 把打包后文件加载至本地文件系统生成本地容器镜像</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ls</span></span><br><span class="line">centos7u6.tar</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker import centos7u6.tar centos7u6:v1</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker images</span></span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">centos7u6    v1        <span class="number">130</span>cb005b2dc   <span class="number">7</span> seconds ago   <span class="number">1.09</span>GB</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker run -it centos7u6:v1 bash</span></span><br><span class="line">[<span class="type">root</span>@<span class="number">50</span><span class="type">f24f688b4d</span> /]<span class="comment"># ip a s</span></span><br><span class="line"><span class="number">1</span>: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu <span class="number">65536</span> qdisc noqueue state UNKNOWN <span class="built_in">group</span> default qlen <span class="number">1000</span></span><br><span class="line">    link/loopback <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> brd <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">    inet <span class="number">127.0</span>.<span class="number">0.1</span>/<span class="number">8</span> scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"><span class="number">7</span>: eth0@if8: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="number">1500</span> qdisc noqueue state UP <span class="built_in">group</span> default</span><br><span class="line">    link/ether <span class="number">02</span>:<span class="number">42</span>:<span class="built_in">ac</span>:<span class="number">11</span>:<span class="number">00</span>:<span class="number">02</span> brd ff:ff:ff:ff:ff:ff link<span class="literal">-netnsid</span> <span class="number">0</span></span><br><span class="line">    inet <span class="number">172.17</span>.<span class="number">0.2</span>/<span class="number">16</span> brd <span class="number">172.17</span>.<span class="number">255.255</span> scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>





<h2 id="4-3-把正在运行的容器打包为容器镜像"><a href="#4-3-把正在运行的容器打包为容器镜像" class="headerlink" title="4.3 把正在运行的容器打包为容器镜像"></a>4.3 把正在运行的容器打包为容器镜像</h2><h3 id="4-3-1-运行一个容器"><a href="#4-3-1-运行一个容器" class="headerlink" title="4.3.1 运行一个容器"></a>4.3.1 运行一个容器</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker run -it centos7u6:v1 bash</span></span><br></pre></td></tr></table></figure>



<h3 id="4-3-2-在容器中安装应用"><a href="#4-3-2-在容器中安装应用" class="headerlink" title="4.3.2 在容器中安装应用"></a>4.3.2 在容器中安装应用</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="number">064</span><span class="type">aace45718</span> /]<span class="comment"># yum -y install httpd</span></span><br></pre></td></tr></table></figure>



<h3 id="4-3-3-把正在运行的容器打包为容器镜像"><a href="#4-3-3-把正在运行的容器打包为容器镜像" class="headerlink" title="4.3.3 把正在运行的容器打包为容器镜像"></a>4.3.3 把正在运行的容器打包为容器镜像</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="number">064</span><span class="type">aace45718</span> /]<span class="comment"># ctrl + p +q</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker commit 064aace45718 centos7u6-httpd:v1</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker images</span></span><br><span class="line">REPOSITORY        TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">centos7u6<span class="literal">-httpd</span>   v1        <span class="number">30</span>ec9d728880   <span class="number">6</span> seconds ago   <span class="number">1.29</span>GB</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker run -it centos7u6-httpd:v1 bash</span></span><br><span class="line">[<span class="type">root</span>@<span class="number">01</span><span class="type">a1373b4a3f</span> /]<span class="comment"># rpm -qa | grep httpd</span></span><br><span class="line">httpd<span class="literal">-tools</span><span class="literal">-2</span>.<span class="number">4.6</span><span class="literal">-97</span>.el7.centos.<span class="number">4</span>.x86_64</span><br><span class="line">httpd<span class="literal">-2</span>.<span class="number">4.6</span><span class="literal">-97</span>.el7.centos.<span class="number">4</span>.x86_64</span><br></pre></td></tr></table></figure>





<h2 id="4-4-通过Dockerfile实现容器镜像的自定义及生成"><a href="#4-4-通过Dockerfile实现容器镜像的自定义及生成" class="headerlink" title="4.4 通过Dockerfile实现容器镜像的自定义及生成"></a>4.4 通过Dockerfile实现容器镜像的自定义及生成</h2><h3 id="4-4-1-Dockerfile介绍"><a href="#4-4-1-Dockerfile介绍" class="headerlink" title="4.4.1 Dockerfile介绍"></a>4.4.1 Dockerfile介绍</h3><p>Dockerfile是一种能够被Docker程序解释的剧本。Dockerfile由一条一条的指令组成，并且有自己的书写格式和支持的命令。当我们需要在容器镜像中指定自己额外的需求时，只需在Dockerfile上添加或修改指令，然后通过docker build生成我们自定义的容器镜像（image）。</p>
<img src="/images/Docker/Dockerfile精讲及新型容器镜像构建技术.assets/clip_image002-1644469873598.jpg" alt="img">







<h3 id="4-4-2-Dockerfile指令"><a href="#4-4-2-Dockerfile指令" class="headerlink" title="4.4.2 Dockerfile指令"></a>4.4.2 Dockerfile指令</h3><ul>
<li><p>构建类指令</p>
<ul>
<li>用于构建image</li>
<li>其指定的操作不会在运行image的容器上执行（FROM、MAINTAINER、RUN、ENV、ADD、COPY）</li>
</ul>
</li>
<li><p>设置类指令</p>
<ul>
<li>用于设置image的属性</li>
<li>其指定的操作将在运行image的容器中执行（CMD、ENTRYPOINT、USER 、EXPOSE、VOLUME、WORKDIR、ONBUILD）</li>
</ul>
</li>
</ul>
<ul>
<li>指令说明</li>
</ul>
<table>
<thead>
<tr>
<th>指令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>FROM</td>
<td>构建新镜像基于的基础镜像</td>
</tr>
<tr>
<td>LABEL</td>
<td>标签</td>
</tr>
<tr>
<td>RUN</td>
<td>构建镜像时运行的Shell命令</td>
</tr>
<tr>
<td>COPY</td>
<td>拷贝文件或目录到镜像中</td>
</tr>
<tr>
<td>ADD</td>
<td>解压压缩包并拷贝</td>
</tr>
<tr>
<td>ENV</td>
<td>设置环境变量</td>
</tr>
<tr>
<td>USER</td>
<td>为RUN、CMD和ENTRYPOINT执行命令指定运行用户</td>
</tr>
<tr>
<td>EXPOSE</td>
<td>声明容器运行的服务端口</td>
</tr>
<tr>
<td>WORKDIR</td>
<td>为RUN、CMD、ENTRYPOINT、COPY和ADD设置工作目录</td>
</tr>
<tr>
<td>CMD</td>
<td>运行容器时默认执行，如果有多个CMD指令，最后一个生效</td>
</tr>
</tbody></table>
<ul>
<li>指令详细解释</li>
</ul>
<p>通过<code>man dockerfile</code>可以查看到详细的说明,这里简单的翻译并列出常用的指令</p>
<p>1, <strong>FROM</strong></p>
<p>FROM指令用于指定其后构建新镜像所使用的基础镜像。</p>
<p>FROM指令必是Dockerfile文件中的首条命令。</p>
<p>FROM指令指定的基础image可以是官方远程仓库中的，也可以位于本地仓库，优先本地仓库。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">格式:FROM &lt;image&gt;:&lt;tag&gt;</span><br><span class="line">例:FROM centos:latest</span><br></pre></td></tr></table></figure>

<p>2, <strong>RUN</strong></p>
<p>RUN指令用于在<strong>构建</strong>镜像中执行命令，有以下两种格式:</p>
<ul>
<li>shell格式</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">格式:RUN &lt;命令&gt;</span><br><span class="line">例:RUN <span class="built_in">echo</span> <span class="string">&#x27;kubelixiang&#x27;</span> &gt; /var/www/html/index.html</span><br></pre></td></tr></table></figure>

<ul>
<li>exec格式</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">格式:RUN [<span class="string">&quot;可执行文件&quot;</span>, <span class="string">&quot;参数1&quot;</span>, <span class="string">&quot;参数2&quot;</span>]</span><br><span class="line">例:RUN [<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo kubelixiang &gt; /var/www/html/index.html&quot;</span>]</span><br></pre></td></tr></table></figure>

<p><strong>注意:</strong> 按优化的角度来讲:当有多条要执行的命令,不要使用多条RUN,尽量使用&amp;&amp;符号与\符号连接成一行。因为多条RUN命令会让镜像建立多层(总之就是会变得臃肿了:smiley:)。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">RUN yum install httpd httpd<span class="literal">-devel</span> <span class="literal">-y</span></span><br><span class="line">RUN <span class="built_in">echo</span> test &gt; /var/www/html/index.html</span><br><span class="line">可以改成</span><br><span class="line">RUN yum install httpd httpd<span class="literal">-devel</span> <span class="literal">-y</span> &amp;&amp; <span class="built_in">echo</span> test &gt; /var/www/html/index.html</span><br><span class="line">或者改成</span><br><span class="line">RUN yum install httpd httpd<span class="literal">-devel</span> <span class="literal">-y</span>  \</span><br><span class="line">    &amp;&amp; <span class="built_in">echo</span> test &gt; /var/www/html/index.html</span><br></pre></td></tr></table></figure>

<p>3, <strong>CMD</strong></p>
<p>CMD不同于RUN,CMD用于指定在容器启动时所要执行的命令,而RUN用于指定镜像构建时所要执行的命令。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">格式有三种:</span><br><span class="line">CMD [<span class="string">&quot;executable&quot;</span>,<span class="string">&quot;param1&quot;</span>,<span class="string">&quot;param2&quot;</span>]</span><br><span class="line">CMD [<span class="string">&quot;param1&quot;</span>,<span class="string">&quot;param2&quot;</span>]</span><br><span class="line">CMD command param1 param2</span><br></pre></td></tr></table></figure>

<p>每个Dockerfile只能有一条CMD命令。如果指定了多条命令，只有最后一条会被执行。</p>
<p>如果用户启动容器时候指定了运行的命令，则会覆盖掉CMD指定的命令。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">什么是启动容器时指定运行的命令?</span><br><span class="line"><span class="comment"># docker run -d -p 80:80 镜像名 运行的命令</span></span><br></pre></td></tr></table></figure>



<p>4, <strong>EXPOSE</strong></p>
<p>EXPOSE指令用于指定容器在运行时监听的端口</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">格式:EXPOSE &lt;port&gt; [&lt;<span class="type">port</span>&gt;<span class="type">...</span>]</span><br><span class="line">例:EXPOSE <span class="number">80</span> <span class="number">3306</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure>

<p>上述运行的端口还需要使用docker run运行容器时通过-p参数映射到宿主机的端口.</p>
<p>5, <strong>ENV</strong></p>
<p>ENV指令用于指定一个环境变量.</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">格式:ENV &lt;key&gt; &lt;value&gt; 或者 ENV &lt;key&gt;=&lt;value&gt;</span><br><span class="line">例:ENV JAVA_HOME /usr/local/jdkxxxx/</span><br></pre></td></tr></table></figure>

<p>6, <strong>ADD</strong></p>
<p>ADD指令用于把宿主机上的文件拷贝到镜像中</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">格式:ADD &lt;src&gt; &lt;dest&gt;</span><br><span class="line">&lt;src&gt;可以是一个本地文件或本地压缩文件，还可以是一个url,</span><br><span class="line">如果把&lt;src&gt;写成一个url，那么ADD就类似于<span class="built_in">wget</span>命令</span><br><span class="line">&lt;dest&gt;路径的填写可以是容器内的绝对路径，也可以是相对于工作目录的相对路径</span><br></pre></td></tr></table></figure>

<p>7, <strong>COPY</strong></p>
<p>COPY指令与ADD指令类似,但COPY的源文件只能是本地文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">格式:<span class="built_in">COPY</span> &lt;src&gt; &lt;dest&gt;</span><br></pre></td></tr></table></figure>

<p>8, <strong>ENTRYPOINT</strong></p>
<p>ENTRYPOINT与CMD非常类似</p>
<p>相同点：<br>一个Dockerfile只写一条，如果写了多条，那么只有最后一条生效<br>都是容器启动时才运行</p>
<p>不同点：<br>如果用户启动容器时候指定了运行的命令，ENTRYPOINT不会被运行的命令覆盖，而CMD则会被覆盖</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">格式有两种:</span><br><span class="line">ENTRYPOINT [<span class="string">&quot;executable&quot;</span>, <span class="string">&quot;param1&quot;</span>, <span class="string">&quot;param2&quot;</span>]</span><br><span class="line">ENTRYPOINT command param1 param2</span><br></pre></td></tr></table></figure>

<p>9,  <strong>VOLUME</strong></p>
<p>VOLUME指令用于把宿主机里的目录与容器里的目录映射. </p>
<p>只指定挂载点,docker宿主机映射的目录为自动生成的。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">格式:VOLUME [<span class="string">&quot;&lt;mountpoint&gt;&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>10, <strong>USER</strong></p>
<p>USER指令设置启动容器的用户(像hadoop需要hadoop用户操作，oracle需要oracle用户操作),可以是用户名或UID</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">USER daemon</span><br><span class="line">USER <span class="number">1001</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：如果设置了容器以daemon用户去运行，那么RUN,CMD和ENTRYPOINT都会以这个用户去运行<br>镜像构建完成后，通过docker run运行容器时，可以通过-u参数来覆盖所指定的用户</p>
<p>11, <strong>WORKDIR</strong></p>
<p>WORKDIR指令设置工作目录,类似于cd命令。不建议使用<code>RUN cd /root</code> ,建议使用WORKDIR</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">WORKDIR /root</span><br></pre></td></tr></table></figure>





<h3 id="4-4-3-Dockerfile基本构成"><a href="#4-4-3-Dockerfile基本构成" class="headerlink" title="4.4.3 Dockerfile基本构成"></a>4.4.3 Dockerfile基本构成</h3><ul>
<li><p>基础镜像信息</p>
</li>
<li><p>维护者信息</p>
</li>
<li><p>镜像操作指令</p>
</li>
<li><p>容器启动时执行指令</p>
</li>
</ul>
<h3 id="4-4-4-Dockerfile生成容器镜像方法"><a href="#4-4-4-Dockerfile生成容器镜像方法" class="headerlink" title="4.4.4 Dockerfile生成容器镜像方法"></a>4.4.4 Dockerfile生成容器镜像方法</h3><p><img src="/images/Docker/Dockerfile%E7%B2%BE%E8%AE%B2%E5%8F%8A%E6%96%B0%E5%9E%8B%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA%E6%8A%80%E6%9C%AF.assets/image-20220210132232826.png" alt="image-20220210132232826"></p>
<h3 id="4-4-5-Dockerfile生成容器镜像案例"><a href="#4-4-5-Dockerfile生成容器镜像案例" class="headerlink" title="4.4.5 Dockerfile生成容器镜像案例"></a>4.4.5 Dockerfile生成容器镜像案例</h3><h4 id="4-4-5-0-使用Dockerfile生成容器镜像步骤"><a href="#4-4-5-0-使用Dockerfile生成容器镜像步骤" class="headerlink" title="4.4.5.0 使用Dockerfile生成容器镜像步骤"></a>4.4.5.0 使用Dockerfile生成容器镜像步骤</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">第一步：创建一个文件夹（目录）</span><br><span class="line"></span><br><span class="line">第二步：在文件夹（目录）中创建Dockerfile文件(并编写)及其它文件</span><br><span class="line"></span><br><span class="line">第三步：使用`docker build`命令构建镜像</span><br><span class="line"></span><br><span class="line">第四步：使用构建的镜像启动容器</span><br></pre></td></tr></table></figure>





<h4 id="4-4-5-1-使用Dockerfile生成Nginx容器镜像"><a href="#4-4-5-1-使用Dockerfile生成Nginx容器镜像" class="headerlink" title="4.4.5.1 使用Dockerfile生成Nginx容器镜像"></a>4.4.5.1 使用Dockerfile生成Nginx容器镜像</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># mkdir nginxroot</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># cd nginxroot</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">nginxroot</span>]<span class="comment">#</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">nginxroot</span>]<span class="comment"># echo &quot;nginx&#x27;s running&quot; &gt;&gt; index.html</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">nginxroot</span>]<span class="comment"># ls</span></span><br><span class="line">index.html</span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">nginxroot</span>]<span class="comment"># cat index.html</span></span><br><span class="line">nginx<span class="string">&#x27;s running</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">nginxroot</span>]<span class="comment"># vim Dockerfile</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">nginxroot</span>]<span class="comment"># cat Dockerfile</span></span><br><span class="line">FROM centos:centos7</span><br><span class="line"></span><br><span class="line">MAINTAINER <span class="string">&quot;www.kubelixiang.com&quot;</span></span><br><span class="line"></span><br><span class="line">RUN yum <span class="literal">-y</span> install <span class="built_in">wget</span></span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">wget</span> <span class="literal">-O</span> /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel<span class="literal">-7</span>.repo</span><br><span class="line"></span><br><span class="line">RUN yum <span class="literal">-y</span> install nginx</span><br><span class="line"></span><br><span class="line">ADD index.html /usr/share/nginx/html/</span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">&quot;daemon off;&quot;</span> &gt;&gt; /etc/nginx/nginx.conf</span><br><span class="line"></span><br><span class="line">EXPOSE <span class="number">80</span></span><br><span class="line"></span><br><span class="line">CMD /usr/sbin/nginx</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">nginxroot</span>]<span class="comment"># docker build -t centos7-nginx:v1 .</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">输出：</span><br><span class="line">Sending build context to Docker daemon  <span class="number">3.072</span>kB</span><br><span class="line">第一步：下载基础镜像</span><br><span class="line">Step <span class="number">1</span>/<span class="number">9</span> : FROM centos:centos7</span><br><span class="line"> ---&gt; eeb6ee3f44bd</span><br><span class="line">第二步：维护者信息</span><br><span class="line">Step <span class="number">2</span>/<span class="number">9</span> : MAINTAINER <span class="string">&quot;www.kubelixiang.com&quot;</span></span><br><span class="line"> ---&gt; <span class="keyword">Using</span> cache</span><br><span class="line"> ---&gt; f978e524772c</span><br><span class="line"> </span><br><span class="line">第三步：安装<span class="built_in">wget</span></span><br><span class="line">Step <span class="number">3</span>/<span class="number">9</span> : RUN yum <span class="literal">-y</span> install <span class="built_in">wget</span></span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> <span class="number">4</span>e0fc3854088</span><br><span class="line">Loaded plugins: fastestmirror, ovl</span><br><span class="line">Determining fastest mirrors</span><br><span class="line"> * base: mirrors.huaweicloud.com</span><br><span class="line"> * extras: mirrors.tuna.tsinghua.edu.cn</span><br><span class="line"> * updates: mirrors.tuna.tsinghua.edu.cn</span><br><span class="line">Resolving Dependencies</span><br><span class="line">--&gt; Running transaction check</span><br><span class="line">---&gt; Package wget.x86_64 <span class="number">0</span>:<span class="number">1.14</span><span class="literal">-18</span>.el7_6.<span class="number">1</span> will be installed</span><br><span class="line">--&gt; Finished Dependency Resolution</span><br><span class="line"></span><br><span class="line">Dependencies Resolved</span><br><span class="line"></span><br><span class="line">================================================================================</span><br><span class="line"> Package        Arch             Version                   Repository      Size</span><br><span class="line">================================================================================</span><br><span class="line">Installing:</span><br><span class="line"> <span class="built_in">wget</span>           x86_64           <span class="number">1.14</span><span class="literal">-18</span>.el7_6.<span class="number">1</span>           base           <span class="number">547</span> k</span><br><span class="line"></span><br><span class="line">Transaction Summary</span><br><span class="line">================================================================================</span><br><span class="line">Install  <span class="number">1</span> Package</span><br><span class="line"></span><br><span class="line">Total download size: <span class="number">547</span> k</span><br><span class="line">Installed size: <span class="number">2.0</span> M</span><br><span class="line">Downloading packages:</span><br><span class="line">warning: /var/cache/yum/x86_64/<span class="number">7</span>/base/packages/w<span class="built_in">get-1</span>.<span class="number">14</span><span class="literal">-18</span>.el7_6.<span class="number">1</span>.x86_64.rpm: Header V3 RSA/SHA256 Signature, key ID f4a80eb5: NOKEY</span><br><span class="line">Public key <span class="keyword">for</span> w<span class="built_in">get-1</span>.<span class="number">14</span><span class="literal">-18</span>.el7_6.<span class="number">1</span>.x86_64.rpm is not installed</span><br><span class="line">Retrieving key from file:///etc/pki/rpm<span class="literal">-gpg</span>/RPM<span class="literal">-GPG</span><span class="literal">-KEY</span><span class="literal">-CentOS</span><span class="literal">-7</span></span><br><span class="line">Importing GPG key <span class="number">0</span>xF4A80EB5:</span><br><span class="line"> Userid     : <span class="string">&quot;CentOS-7 Key (CentOS 7 Official Signing Key) &lt;security@centos.org&gt;&quot;</span></span><br><span class="line"> Fingerprint: <span class="number">6341</span> ab27 <span class="number">53</span>d7 <span class="number">8</span>a78 a7c2 <span class="number">7</span>bb1 <span class="number">24</span>c6 a8a7 f4a8 <span class="number">0</span>eb5</span><br><span class="line"> Package    : centos<span class="literal">-release</span><span class="literal">-7</span><span class="literal">-9</span>.<span class="number">2009.0</span>.el7.centos.x86_64 (@CentOS)</span><br><span class="line"> From       : /etc/pki/rpm<span class="literal">-gpg</span>/RPM<span class="literal">-GPG</span><span class="literal">-KEY</span><span class="literal">-CentOS</span><span class="literal">-7</span></span><br><span class="line">Running transaction check</span><br><span class="line">Running transaction test</span><br><span class="line">Transaction test succeeded</span><br><span class="line">Running transaction</span><br><span class="line">  Installing : w<span class="built_in">get-1</span>.<span class="number">14</span><span class="literal">-18</span>.el7_6.<span class="number">1</span>.x86_64                                  <span class="number">1</span>/<span class="number">1</span></span><br><span class="line"><span class="built_in">install-info</span>: No such file or directory <span class="keyword">for</span> /usr/share/info/wget.info.gz</span><br><span class="line">  Verifying  : w<span class="built_in">get-1</span>.<span class="number">14</span><span class="literal">-18</span>.el7_6.<span class="number">1</span>.x86_64                                  <span class="number">1</span>/<span class="number">1</span></span><br><span class="line"></span><br><span class="line">Installed:</span><br><span class="line">  wget.x86_64 <span class="number">0</span>:<span class="number">1.14</span><span class="literal">-18</span>.el7_6.<span class="number">1</span></span><br><span class="line"></span><br><span class="line">Complete!</span><br><span class="line">Removing intermediate container <span class="number">4</span>e0fc3854088</span><br><span class="line"> ---&gt; <span class="number">369</span>e33a2152a</span><br><span class="line"> </span><br><span class="line">第四步：使用<span class="built_in">wget</span>下载YUM源</span><br><span class="line">Step <span class="number">4</span>/<span class="number">9</span> : RUN <span class="built_in">wget</span> <span class="literal">-O</span> /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel<span class="literal">-7</span>.repo</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> <span class="number">4</span>bdfc0a1c844</span><br><span class="line">-<span class="literal">-2022</span><span class="literal">-02</span><span class="literal">-10</span> <span class="number">06</span>:<span class="number">18</span>:<span class="number">07</span>--  http://mirrors.aliyun.com/repo/epel<span class="literal">-7</span>.repo</span><br><span class="line">Resolving mirrors.aliyun.com (mirrors.aliyun.com)... <span class="number">221.195</span>.<span class="number">209.65</span>, <span class="number">221.195</span>.<span class="number">209.64</span>, <span class="number">221.195</span>.<span class="number">209.70</span>, ...</span><br><span class="line">Connecting to mirrors.aliyun.com (mirrors.aliyun.com)|<span class="number">221.195</span>.<span class="number">209.65</span>|:<span class="number">80</span>... connected.</span><br><span class="line">HTTP request sent, awaiting response... <span class="number">200</span> OK</span><br><span class="line">Length: <span class="number">664</span> [<span class="type">application</span>/<span class="type">octet</span>-<span class="type">stream</span>]</span><br><span class="line">Saving to: <span class="string">&#x27;/etc/yum.repos.d/epel.repo&#x27;</span></span><br><span class="line"></span><br><span class="line">     <span class="number">0</span>K                                                       <span class="number">100</span>%  <span class="number">158</span>M=<span class="number">0</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2022</span><span class="literal">-02</span><span class="literal">-10</span> <span class="number">06</span>:<span class="number">18</span>:<span class="number">07</span> (<span class="number">158</span> MB/s) - <span class="string">&#x27;/etc/yum.repos.d/epel.repo&#x27;</span> saved [<span class="number">664</span>/<span class="number">664</span>]</span><br><span class="line"></span><br><span class="line">Removing intermediate container <span class="number">4</span>bdfc0a1c844</span><br><span class="line"> ---&gt; <span class="number">1</span>d73faa62447</span><br><span class="line"> </span><br><span class="line">第五步：安装Nginx</span><br><span class="line">Step <span class="number">5</span>/<span class="number">9</span> : RUN yum <span class="literal">-y</span> install nginx</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> <span class="number">51</span>b50c2ce841</span><br><span class="line">Loaded plugins: fastestmirror, ovl</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirrors.huaweicloud.com</span><br><span class="line"> * extras: mirrors.tuna.tsinghua.edu.cn</span><br><span class="line"> * updates: mirrors.tuna.tsinghua.edu.cn</span><br><span class="line">Resolving Dependencies</span><br><span class="line">--&gt; Running transaction check</span><br><span class="line">---&gt; Package nginx.x86_64 <span class="number">1</span>:<span class="number">1.20</span>.<span class="number">1</span><span class="literal">-9</span>.el7 will be installed</span><br><span class="line">--&gt; Processing Dependency: nginx<span class="literal">-filesystem</span> = <span class="number">1</span>:<span class="number">1.20</span>.<span class="number">1</span><span class="literal">-9</span>.el7 <span class="keyword">for</span> package: <span class="number">1</span>:nginx<span class="literal">-1</span>.<span class="number">20.1</span><span class="literal">-9</span>.el7.x86_64</span><br><span class="line">--&gt; Processing Dependency: libcrypto.so.<span class="number">1.1</span>(OPENSSL_1_1_0)(<span class="number">64</span>bit) <span class="keyword">for</span> package: <span class="number">1</span>:nginx<span class="literal">-1</span>.<span class="number">20.1</span><span class="literal">-9</span>.el7.x86_64</span><br><span class="line">--&gt; Processing Dependency: libssl.so.<span class="number">1.1</span>(OPENSSL_1_1_0)(<span class="number">64</span>bit) <span class="keyword">for</span> package: <span class="number">1</span>:nginx<span class="literal">-1</span>.<span class="number">20.1</span><span class="literal">-9</span>.el7.x86_64</span><br><span class="line">--&gt; Processing Dependency: libssl.so.<span class="number">1.1</span>(OPENSSL_1_1_1)(<span class="number">64</span>bit) <span class="keyword">for</span> package: <span class="number">1</span>:nginx<span class="literal">-1</span>.<span class="number">20.1</span><span class="literal">-9</span>.el7.x86_64</span><br><span class="line">--&gt; Processing Dependency: nginx<span class="literal">-filesystem</span> <span class="keyword">for</span> package: <span class="number">1</span>:nginx<span class="literal">-1</span>.<span class="number">20.1</span><span class="literal">-9</span>.el7.x86_64</span><br><span class="line">--&gt; Processing Dependency: openssl <span class="keyword">for</span> package: <span class="number">1</span>:nginx<span class="literal">-1</span>.<span class="number">20.1</span><span class="literal">-9</span>.el7.x86_64</span><br><span class="line">--&gt; Processing Dependency: redhat<span class="literal">-indexhtml</span> <span class="keyword">for</span> package: <span class="number">1</span>:nginx<span class="literal">-1</span>.<span class="number">20.1</span><span class="literal">-9</span>.el7.x86_64</span><br><span class="line">--&gt; Processing Dependency: system<span class="literal">-logos</span> <span class="keyword">for</span> package: <span class="number">1</span>:nginx<span class="literal">-1</span>.<span class="number">20.1</span><span class="literal">-9</span>.el7.x86_64</span><br><span class="line">--&gt; Processing Dependency: libcrypto.so.<span class="number">1.1</span>()(<span class="number">64</span>bit) <span class="keyword">for</span> package: <span class="number">1</span>:nginx<span class="literal">-1</span>.<span class="number">20.1</span><span class="literal">-9</span>.el7.x86_64</span><br><span class="line">--&gt; Processing Dependency: libprofiler.so.<span class="number">0</span>()(<span class="number">64</span>bit) <span class="keyword">for</span> package: <span class="number">1</span>:nginx<span class="literal">-1</span>.<span class="number">20.1</span><span class="literal">-9</span>.el7.x86_64</span><br><span class="line">--&gt; Processing Dependency: libssl.so.<span class="number">1.1</span>()(<span class="number">64</span>bit) <span class="keyword">for</span> package: <span class="number">1</span>:nginx<span class="literal">-1</span>.<span class="number">20.1</span><span class="literal">-9</span>.el7.x86_64</span><br><span class="line">--&gt; Running transaction check</span><br><span class="line">---&gt; Package centos<span class="literal">-indexhtml</span>.noarch <span class="number">0</span>:<span class="number">7</span><span class="literal">-9</span>.el7.centos will be installed</span><br><span class="line">---&gt; Package centos<span class="literal">-logos</span>.noarch <span class="number">0</span>:<span class="number">70.0</span>.<span class="number">6</span><span class="literal">-3</span>.el7.centos will be installed</span><br><span class="line">---&gt; Package gperftools<span class="literal">-libs</span>.x86_64 <span class="number">0</span>:<span class="number">2.6</span>.<span class="number">1</span><span class="literal">-1</span>.el7 will be installed</span><br><span class="line">---&gt; Package nginx<span class="literal">-filesystem</span>.noarch <span class="number">1</span>:<span class="number">1.20</span>.<span class="number">1</span><span class="literal">-9</span>.el7 will be installed</span><br><span class="line">---&gt; Package openssl.x86_64 <span class="number">1</span>:<span class="number">1.0</span>.<span class="number">2</span>k<span class="literal">-24</span>.el7_9 will be installed</span><br><span class="line">--&gt; Processing Dependency: openssl<span class="literal">-libs</span>(x86<span class="literal">-64</span>) = <span class="number">1</span>:<span class="number">1.0</span>.<span class="number">2</span>k<span class="literal">-24</span>.el7_9 <span class="keyword">for</span> package: <span class="number">1</span>:openssl<span class="literal">-1</span>.<span class="number">0.2</span>k<span class="literal">-24</span>.el7_9.x86_64</span><br><span class="line">--&gt; Processing Dependency: make <span class="keyword">for</span> package: <span class="number">1</span>:openssl<span class="literal">-1</span>.<span class="number">0.2</span>k<span class="literal">-24</span>.el7_9.x86_64</span><br><span class="line">---&gt; Package openssl11<span class="literal">-libs</span>.x86_64 <span class="number">1</span>:<span class="number">1.1</span>.<span class="number">1</span>k<span class="literal">-2</span>.el7 will be installed</span><br><span class="line">--&gt; Running transaction check</span><br><span class="line">---&gt; Package make.x86_64 <span class="number">1</span>:<span class="number">3.82</span><span class="literal">-24</span>.el7 will be installed</span><br><span class="line">---&gt; Package openssl<span class="literal">-libs</span>.x86_64 <span class="number">1</span>:<span class="number">1.0</span>.<span class="number">2</span>k<span class="literal">-19</span>.el7 will be updated</span><br><span class="line">---&gt; Package openssl<span class="literal">-libs</span>.x86_64 <span class="number">1</span>:<span class="number">1.0</span>.<span class="number">2</span>k<span class="literal">-24</span>.el7_9 will be an update</span><br><span class="line">--&gt; Finished Dependency Resolution</span><br><span class="line"></span><br><span class="line">Dependencies Resolved</span><br><span class="line"></span><br><span class="line">================================================================================</span><br><span class="line"> Package               Arch        Version                   Repository    Size</span><br><span class="line">================================================================================</span><br><span class="line">Installing:</span><br><span class="line"> nginx                 x86_64      <span class="number">1</span>:<span class="number">1.20</span>.<span class="number">1</span><span class="literal">-9</span>.el7            epel         <span class="number">587</span> k</span><br><span class="line">Installing <span class="keyword">for</span> dependencies:</span><br><span class="line"> centos<span class="literal">-indexhtml</span>      noarch      <span class="number">7</span><span class="literal">-9</span>.el7.centos            base          <span class="number">92</span> k</span><br><span class="line"> centos<span class="literal">-logos</span>          noarch      <span class="number">70.0</span>.<span class="number">6</span><span class="literal">-3</span>.el7.centos       base          <span class="number">21</span> M</span><br><span class="line"> gperftools<span class="literal">-libs</span>       x86_64      <span class="number">2.6</span>.<span class="number">1</span><span class="literal">-1</span>.el7               base         <span class="number">272</span> k</span><br><span class="line"> make                  x86_64      <span class="number">1</span>:<span class="number">3.82</span><span class="literal">-24</span>.el7             base         <span class="number">421</span> k</span><br><span class="line"> nginx<span class="literal">-filesystem</span>      noarch      <span class="number">1</span>:<span class="number">1.20</span>.<span class="number">1</span><span class="literal">-9</span>.el7            epel          <span class="number">24</span> k</span><br><span class="line"> openssl               x86_64      <span class="number">1</span>:<span class="number">1.0</span>.<span class="number">2</span>k<span class="literal">-24</span>.el7_9         updates      <span class="number">494</span> k</span><br><span class="line"> openssl11<span class="literal">-libs</span>        x86_64      <span class="number">1</span>:<span class="number">1.1</span>.<span class="number">1</span>k<span class="literal">-2</span>.el7            epel         <span class="number">1.5</span> M</span><br><span class="line">Updating <span class="keyword">for</span> dependencies:</span><br><span class="line"> openssl<span class="literal">-libs</span>          x86_64      <span class="number">1</span>:<span class="number">1.0</span>.<span class="number">2</span>k<span class="literal">-24</span>.el7_9         updates      <span class="number">1.2</span> M</span><br><span class="line"></span><br><span class="line">Transaction Summary</span><br><span class="line">================================================================================</span><br><span class="line">Install  <span class="number">1</span> Package  (+<span class="number">7</span> Dependent packages)</span><br><span class="line">Upgrade             ( <span class="number">1</span> Dependent package)</span><br><span class="line"></span><br><span class="line">Total download size: <span class="number">26</span> M</span><br><span class="line">Downloading packages:</span><br><span class="line">Delta RPMs disabled because /usr/bin/applydeltarpm not installed.</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">Total                                              <span class="number">3.1</span> MB/s |  <span class="number">26</span> MB  <span class="number">00</span>:<span class="number">08</span></span><br><span class="line">Running transaction check</span><br><span class="line">Running transaction test</span><br><span class="line">Transaction test succeeded</span><br><span class="line">Running transaction</span><br><span class="line">  Installing : centos<span class="literal">-logos</span><span class="literal">-70</span>.<span class="number">0.6</span><span class="literal">-3</span>.el7.centos.noarch                     <span class="number">1</span>/<span class="number">10</span></span><br><span class="line">  Installing : centos<span class="literal">-indexhtml</span><span class="literal">-7</span><span class="literal">-9</span>.el7.centos.noarch                      <span class="number">2</span>/<span class="number">10</span></span><br><span class="line">  Installing : <span class="number">1</span>:make<span class="literal">-3</span>.<span class="number">82</span><span class="literal">-24</span>.el7.x86_64                                   <span class="number">3</span>/<span class="number">10</span></span><br><span class="line">  Installing : gperftools<span class="literal">-libs</span><span class="literal">-2</span>.<span class="number">6.1</span><span class="literal">-1</span>.el7.x86_64                          <span class="number">4</span>/<span class="number">10</span></span><br><span class="line">  Installing : <span class="number">1</span>:openssl11<span class="literal">-libs</span><span class="literal">-1</span>.<span class="number">1.1</span>k<span class="literal">-2</span>.el7.x86_64                        <span class="number">5</span>/<span class="number">10</span></span><br><span class="line">  Updating   : <span class="number">1</span>:openssl<span class="literal">-libs</span><span class="literal">-1</span>.<span class="number">0.2</span>k<span class="literal">-24</span>.el7_9.x86_64                       <span class="number">6</span>/<span class="number">10</span></span><br><span class="line">  Installing : <span class="number">1</span>:openssl<span class="literal">-1</span>.<span class="number">0.2</span>k<span class="literal">-24</span>.el7_9.x86_64                            <span class="number">7</span>/<span class="number">10</span></span><br><span class="line">  Installing : <span class="number">1</span>:nginx<span class="literal">-filesystem</span><span class="literal">-1</span>.<span class="number">20.1</span><span class="literal">-9</span>.el7.noarch                      <span class="number">8</span>/<span class="number">10</span></span><br><span class="line">  Installing : <span class="number">1</span>:nginx<span class="literal">-1</span>.<span class="number">20.1</span><span class="literal">-9</span>.el7.x86_64                                 <span class="number">9</span>/<span class="number">10</span></span><br><span class="line">  Cleanup    : <span class="number">1</span>:openssl<span class="literal">-libs</span><span class="literal">-1</span>.<span class="number">0.2</span>k<span class="literal">-19</span>.el7.x86_64                        <span class="number">10</span>/<span class="number">10</span></span><br><span class="line">  Verifying  : <span class="number">1</span>:nginx<span class="literal">-filesystem</span><span class="literal">-1</span>.<span class="number">20.1</span><span class="literal">-9</span>.el7.noarch                      <span class="number">1</span>/<span class="number">10</span></span><br><span class="line">  Verifying  : <span class="number">1</span>:nginx<span class="literal">-1</span>.<span class="number">20.1</span><span class="literal">-9</span>.el7.x86_64                                 <span class="number">2</span>/<span class="number">10</span></span><br><span class="line">  Verifying  : <span class="number">1</span>:openssl<span class="literal">-libs</span><span class="literal">-1</span>.<span class="number">0.2</span>k<span class="literal">-24</span>.el7_9.x86_64                       <span class="number">3</span>/<span class="number">10</span></span><br><span class="line">  Verifying  : <span class="number">1</span>:openssl11<span class="literal">-libs</span><span class="literal">-1</span>.<span class="number">1.1</span>k<span class="literal">-2</span>.el7.x86_64                        <span class="number">4</span>/<span class="number">10</span></span><br><span class="line">  Verifying  : gperftools<span class="literal">-libs</span><span class="literal">-2</span>.<span class="number">6.1</span><span class="literal">-1</span>.el7.x86_64                          <span class="number">5</span>/<span class="number">10</span></span><br><span class="line">  Verifying  : <span class="number">1</span>:make<span class="literal">-3</span>.<span class="number">82</span><span class="literal">-24</span>.el7.x86_64                                   <span class="number">6</span>/<span class="number">10</span></span><br><span class="line">  Verifying  : <span class="number">1</span>:openssl<span class="literal">-1</span>.<span class="number">0.2</span>k<span class="literal">-24</span>.el7_9.x86_64                            <span class="number">7</span>/<span class="number">10</span></span><br><span class="line">  Verifying  : centos<span class="literal">-indexhtml</span><span class="literal">-7</span><span class="literal">-9</span>.el7.centos.noarch                      <span class="number">8</span>/<span class="number">10</span></span><br><span class="line">  Verifying  : centos<span class="literal">-logos</span><span class="literal">-70</span>.<span class="number">0.6</span><span class="literal">-3</span>.el7.centos.noarch                     <span class="number">9</span>/<span class="number">10</span></span><br><span class="line">  Verifying  : <span class="number">1</span>:openssl<span class="literal">-libs</span><span class="literal">-1</span>.<span class="number">0.2</span>k<span class="literal">-19</span>.el7.x86_64                        <span class="number">10</span>/<span class="number">10</span></span><br><span class="line"></span><br><span class="line">Installed:</span><br><span class="line">  nginx.x86_64 <span class="number">1</span>:<span class="number">1.20</span>.<span class="number">1</span><span class="literal">-9</span>.el7</span><br><span class="line"></span><br><span class="line">Dependency Installed:</span><br><span class="line">  centos<span class="literal">-indexhtml</span>.noarch <span class="number">0</span>:<span class="number">7</span><span class="literal">-9</span>.el7.centos</span><br><span class="line">  centos<span class="literal">-logos</span>.noarch <span class="number">0</span>:<span class="number">70.0</span>.<span class="number">6</span><span class="literal">-3</span>.el7.centos</span><br><span class="line">  gperftools<span class="literal">-libs</span>.x86_64 <span class="number">0</span>:<span class="number">2.6</span>.<span class="number">1</span><span class="literal">-1</span>.el7</span><br><span class="line">  make.x86_64 <span class="number">1</span>:<span class="number">3.82</span><span class="literal">-24</span>.el7</span><br><span class="line">  nginx<span class="literal">-filesystem</span>.noarch <span class="number">1</span>:<span class="number">1.20</span>.<span class="number">1</span><span class="literal">-9</span>.el7</span><br><span class="line">  openssl.x86_64 <span class="number">1</span>:<span class="number">1.0</span>.<span class="number">2</span>k<span class="literal">-24</span>.el7_9</span><br><span class="line">  openssl11<span class="literal">-libs</span>.x86_64 <span class="number">1</span>:<span class="number">1.1</span>.<span class="number">1</span>k<span class="literal">-2</span>.el7</span><br><span class="line"></span><br><span class="line">Dependency Updated:</span><br><span class="line">  openssl<span class="literal">-libs</span>.x86_64 <span class="number">1</span>:<span class="number">1.0</span>.<span class="number">2</span>k<span class="literal">-24</span>.el7_9</span><br><span class="line"></span><br><span class="line">Complete!</span><br><span class="line">Removing intermediate container <span class="number">51</span>b50c2ce841</span><br><span class="line"> ---&gt; <span class="number">88</span>a7d7a2c522</span><br><span class="line"> </span><br><span class="line">第六步：添加文件至容器</span><br><span class="line">Step <span class="number">6</span>/<span class="number">9</span> : ADD index.html /usr/share/nginx/html/</span><br><span class="line"> ---&gt; a2226a4d6720</span><br><span class="line">第七步：设置nginx服务运行方式</span><br><span class="line">Step <span class="number">7</span>/<span class="number">9</span> : RUN <span class="built_in">echo</span> <span class="string">&quot;daemon off;&quot;</span> &gt;&gt; /etc/nginx/nginx.conf</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> <span class="number">01</span>d623937807</span><br><span class="line">Removing intermediate container <span class="number">01</span>d623937807</span><br><span class="line"> ---&gt; <span class="number">53</span>fddea5b491</span><br><span class="line"> </span><br><span class="line">第八步：暴露端口</span><br><span class="line">Step <span class="number">8</span>/<span class="number">9</span> : EXPOSE <span class="number">80</span></span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> <span class="number">9</span>b73fcf7ee1b</span><br><span class="line">Removing intermediate container <span class="number">9</span>b73fcf7ee1b</span><br><span class="line"> ---&gt; <span class="number">903377216</span>b23</span><br><span class="line">第九步：运行命令，执行nginx二进制文件</span><br><span class="line">Step <span class="number">9</span>/<span class="number">9</span> : CMD /usr/sbin/nginx</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> <span class="number">58037652952</span>c</span><br><span class="line">Removing intermediate container <span class="number">58037652952</span>c</span><br><span class="line"> ---&gt; <span class="number">944</span>d27b80f1f</span><br><span class="line"> </span><br><span class="line">生成镜像，并为镜像打标记：</span><br><span class="line">Successfully built <span class="number">944</span>d27b80f1f</span><br><span class="line">Successfully tagged centos7<span class="literal">-nginx</span>:v1</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">nginxroot</span>]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY        TAG       IMAGE ID       CREATED             SIZE</span><br><span class="line">centos7<span class="literal">-nginx</span>     v1        <span class="number">944</span>d27b80f1f   <span class="number">3</span> minutes ago       <span class="number">587</span>MB</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># docker run -d -p 8081:80 centos7-nginx:v1</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># curl http://localhost:8081</span></span><br><span class="line">nginx<span class="string">&#x27;s running</span></span><br></pre></td></tr></table></figure>





<h4 id="4-4-5-2-使用Dockerfile生成Tomcat容器镜像"><a href="#4-4-5-2-使用Dockerfile生成Tomcat容器镜像" class="headerlink" title="4.4.5.2 使用Dockerfile生成Tomcat容器镜像"></a>4.4.5.2 使用Dockerfile生成Tomcat容器镜像</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># mkdir tomcatdir</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># cd tomcatdir/</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">tomcatdir</span>]<span class="comment">#</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">tomcatdir</span>]<span class="comment"># echo &quot;tomcat is running&quot; &gt;&gt; index.html</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">tomcatdir</span>]<span class="comment"># ls</span></span><br><span class="line">Dockerfile  jdk index.html</span><br><span class="line">jdk为目录</span><br><span class="line">index.html 网站首页</span><br></pre></td></tr></table></figure>





<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">tomcatdir</span>]<span class="comment"># vim Dockerfile</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">tomcatdir</span>]<span class="comment"># cat Dockerfile</span></span><br><span class="line">FROM centos:centos7</span><br><span class="line"></span><br><span class="line">MAINTAINER <span class="string">&quot;www.kubelixiang.com&quot;</span></span><br><span class="line"></span><br><span class="line">ENV VERSION=<span class="number">8.5</span>.<span class="number">75</span></span><br><span class="line">ENV JAVA_HOME=/usr/local/jdk</span><br><span class="line">ENV TOMCAT_HOME=/usr/local/tomcat</span><br><span class="line"></span><br><span class="line">RUN yum <span class="literal">-y</span> install <span class="built_in">wget</span></span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">wget</span> https://dlcdn.apache.org/tomcat/tomcat<span class="literal">-8</span>/v<span class="variable">$</span>&#123;VERSION&#125;/bin/apache<span class="literal">-tomcat</span>-<span class="variable">$</span>&#123;VERSION&#125;.tar.gz</span><br><span class="line"></span><br><span class="line">RUN tar xf apache<span class="literal">-tomcat</span>-<span class="variable">$</span>&#123;VERSION&#125;.tar.gz</span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">mv</span> apache<span class="literal">-tomcat</span>-<span class="variable">$</span>&#123;VERSION&#125; /usr/local/tomcat</span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">rm</span> <span class="literal">-rf</span> apache<span class="literal">-tomcat</span>-<span class="variable">$</span>&#123;VERSION&#125;.tar.gz /usr/local/tomcat/webapps/*</span><br><span class="line"></span><br><span class="line">RUN mkdir /usr/local/tomcat/webapps/ROOT</span><br><span class="line"></span><br><span class="line">ADD ./index.html /usr/local/tomcat/webapps/ROOT/</span><br><span class="line"></span><br><span class="line">ADD ./jdk /usr/local/jdk</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">&quot;export TOMCAT_HOME=/usr/local/tomcat&quot;</span> &gt;&gt; /etc/profile</span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">&quot;export JAVA_HOME=/usr/local/jdk&quot;</span> &gt;&gt; /etc/profile</span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">&quot;export PATH=<span class="variable">$</span>&#123;TOMCAT_HOME&#125;/bin:<span class="variable">$</span>&#123;JAVA_HOME&#125;/bin:<span class="variable">$PATH</span>&quot;</span> &gt;&gt; /etc/profile</span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">&quot;export CLASSPATH=.:<span class="variable">$</span>&#123;JAVA_HOME&#125;/lib/dt.jar:<span class="variable">$</span>&#123;JAVA_HOME&#125;/lib/tools.jar&quot;</span> &gt;&gt; /etc/profile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RUN source /etc/profile</span><br><span class="line"></span><br><span class="line">EXPOSE <span class="number">8080</span></span><br><span class="line"></span><br><span class="line">CMD [<span class="string">&quot;/usr/local/tomcat/bin/catalina.sh&quot;</span>,<span class="string">&quot;run&quot;</span>]</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">tomcatdir</span>]<span class="comment"># docker build -t centos-tomcat:v1 .                           </span></span><br><span class="line"></span><br><span class="line">Sending build context to Docker daemon  <span class="number">398.9</span>MB</span><br><span class="line">Step <span class="number">1</span>/<span class="number">20</span> : FROM centos:centos7</span><br><span class="line"> ---&gt; eeb6ee3f44bd</span><br><span class="line">Step <span class="number">2</span>/<span class="number">20</span> : MAINTAINER <span class="string">&quot;www.kubelixiang.com&quot;</span></span><br><span class="line"> ---&gt; <span class="keyword">Using</span> cache</span><br><span class="line"> ---&gt; f978e524772c</span><br><span class="line">Step <span class="number">3</span>/<span class="number">20</span> : ENV VERSION=<span class="number">8.5</span>.<span class="number">75</span></span><br><span class="line"> ---&gt; <span class="keyword">Using</span> cache</span><br><span class="line"> ---&gt; <span class="number">792767</span>bbdb22</span><br><span class="line">Step <span class="number">4</span>/<span class="number">20</span> : ENV JAVA_HOME=/usr/local/jdk</span><br><span class="line"> ---&gt; <span class="keyword">Using</span> cache</span><br><span class="line"> ---&gt; <span class="number">6</span>eb3855650f0</span><br><span class="line">Step <span class="number">5</span>/<span class="number">20</span> : ENV TOMCAT_HOME=/usr/local/tomcat</span><br><span class="line"> ---&gt; <span class="keyword">Using</span> cache</span><br><span class="line"> ---&gt; e38bdbbfd19d</span><br><span class="line">Step <span class="number">6</span>/<span class="number">20</span> : RUN yum <span class="literal">-y</span> install <span class="built_in">wget</span></span><br><span class="line"> ---&gt; <span class="keyword">Using</span> cache</span><br><span class="line"> ---&gt; <span class="number">4</span>c6aafa6d8ba</span><br><span class="line">Step <span class="number">7</span>/<span class="number">20</span> : RUN <span class="built_in">wget</span> http://dlcdn.apache.org/tomcat/tomcat<span class="literal">-8</span>/v<span class="variable">$</span>&#123;VERSION&#125;/bin/apache<span class="literal">-tomcat</span>-<span class="variable">$</span>&#123;VERSION&#125;.tar.gz</span><br><span class="line"> ---&gt; <span class="keyword">Using</span> cache</span><br><span class="line"> ---&gt; <span class="number">9</span>bdb6f636a5f</span><br><span class="line">Step <span class="number">8</span>/<span class="number">20</span> : RUN tar xf apache<span class="literal">-tomcat</span>-<span class="variable">$</span>&#123;VERSION&#125;.tar.gz</span><br><span class="line"> ---&gt; <span class="keyword">Using</span> cache</span><br><span class="line"> ---&gt; <span class="number">6</span>abe5cb0ef26</span><br><span class="line">Step <span class="number">9</span>/<span class="number">20</span> : RUN <span class="built_in">mv</span> apache<span class="literal">-tomcat</span>-<span class="variable">$</span>&#123;VERSION&#125; /usr/local/tomcat</span><br><span class="line"> ---&gt; <span class="keyword">Using</span> cache</span><br><span class="line"> ---&gt; b3907af15c22</span><br><span class="line">Step <span class="number">10</span>/<span class="number">20</span> : RUN <span class="built_in">rm</span> <span class="literal">-rf</span> apache<span class="literal">-tomcat</span>-<span class="variable">$</span>&#123;VERSION&#125;.tar.gz /usr/local/tomcat/webapps/*</span><br><span class="line"> ---&gt; <span class="keyword">Using</span> cache</span><br><span class="line"> ---&gt; b775439344e3</span><br><span class="line">Step <span class="number">11</span>/<span class="number">20</span> : RUN mkdir /usr/local/tomcat/webapps/ROOT</span><br><span class="line"> ---&gt; <span class="keyword">Using</span> cache</span><br><span class="line"> ---&gt; <span class="number">149</span>ad46776eb</span><br><span class="line">Step <span class="number">12</span>/<span class="number">20</span> : ADD ./index.html /usr/local/tomcat/webapps/ROOT/</span><br><span class="line"> ---&gt; <span class="number">064579</span>c39a46</span><br><span class="line">Step <span class="number">13</span>/<span class="number">20</span> : ADD ./jdk /usr/local/jdk</span><br><span class="line"> ---&gt; <span class="number">477</span>fd38dfbcf</span><br><span class="line">Step <span class="number">14</span>/<span class="number">20</span> : RUN <span class="built_in">echo</span> <span class="string">&quot;export TOMCAT_HOME=/usr/local/tomcat&quot;</span> &gt;&gt; /etc/profile</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> <span class="number">3</span>fc9bc5e8ba5</span><br><span class="line">Removing intermediate container <span class="number">3</span>fc9bc5e8ba5</span><br><span class="line"> ---&gt; <span class="number">3</span>c43bccd5779</span><br><span class="line">Step <span class="number">15</span>/<span class="number">20</span> : RUN <span class="built_in">echo</span> <span class="string">&quot;export JAVA_HOME=/usr/local/jdk&quot;</span> &gt;&gt; /etc/profile</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> <span class="number">80</span>f8150f0e80</span><br><span class="line">Removing intermediate container <span class="number">80</span>f8150f0e80</span><br><span class="line"> ---&gt; e01307ccb02a</span><br><span class="line">Step <span class="number">16</span>/<span class="number">20</span> : RUN <span class="built_in">echo</span> <span class="string">&quot;export PATH=<span class="variable">$</span>&#123;TOMCAT_HOME&#125;/bin:<span class="variable">$</span>&#123;JAVA_HOME&#125;/bin:<span class="variable">$PATH</span>&quot;</span> &gt;&gt; /etc/profile</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> <span class="number">92</span>a6a4fd1cbc</span><br><span class="line">Removing intermediate container <span class="number">92</span>a6a4fd1cbc</span><br><span class="line"> ---&gt; <span class="number">1</span>d26f53b7095</span><br><span class="line">Step <span class="number">17</span>/<span class="number">20</span> : RUN <span class="built_in">echo</span> <span class="string">&quot;export CLASSPATH=.:<span class="variable">$</span>&#123;JAVA_HOME&#125;/lib/dt.jar:<span class="variable">$</span>&#123;JAVA_HOME&#125;/lib/tools.jar&quot;</span> &gt;&gt; /etc/profile</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> fb5ee1710c36</span><br><span class="line">Removing intermediate container fb5ee1710c36</span><br><span class="line"> ---&gt; d2eaff35dce3</span><br><span class="line">Step <span class="number">18</span>/<span class="number">20</span> : RUN source /etc/profile</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> <span class="number">0422</span>af810b35</span><br><span class="line">Removing intermediate container <span class="number">0422</span>af810b35</span><br><span class="line"> ---&gt; fc6d285288ca</span><br><span class="line">Step <span class="number">19</span>/<span class="number">20</span> : EXPOSE <span class="number">8080</span></span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> eeb64d4f9e94</span><br><span class="line">Removing intermediate container eeb64d4f9e94</span><br><span class="line"> ---&gt; <span class="number">05</span>ec1c6d06cf</span><br><span class="line">Step <span class="number">20</span>/<span class="number">20</span> : CMD [<span class="string">&quot;/usr/local/tomcat/bin/catalina.sh&quot;</span>,<span class="string">&quot;run&quot;</span>]</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> <span class="number">66</span>b7851e2772</span><br><span class="line">Removing intermediate container <span class="number">66</span>b7851e2772</span><br><span class="line"> ---&gt; ad338289055c</span><br><span class="line">Successfully built ad338289055c</span><br><span class="line">Successfully tagged centos<span class="literal">-tomcat</span>:v1</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker images</span></span><br><span class="line">REPOSITORY        TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">centos<span class="literal">-tomcat</span>     v1        ad338289055c   <span class="number">6</span> minutes ago    <span class="number">797</span>MB</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker run -d -p 8082:8080 centos-tomcat:v1</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl http://localhost:8082</span></span><br><span class="line">tomcat is running</span><br></pre></td></tr></table></figure>





<h3 id="4-4-6-使用Dockerfile生成容器镜像优化"><a href="#4-4-6-使用Dockerfile生成容器镜像优化" class="headerlink" title="4.4.6 使用Dockerfile生成容器镜像优化"></a>4.4.6 使用Dockerfile生成容器镜像优化</h3><h4 id="4-4-6-1-减少镜像分层"><a href="#4-4-6-1-减少镜像分层" class="headerlink" title="4.4.6.1 减少镜像分层"></a>4.4.6.1 减少镜像分层</h4><p>Dockerfile中包含多种指令，如果涉及到部署最多使用的算是RUN命令了，使用RUN命令时，不建议每次安装都使用一条单独的RUN命令，可以把能够合并安装指令合并为一条，这样就可以减少镜像分层。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">FROM centos:latest</span><br><span class="line">MAINTAINER www.kubelixiang.com</span><br><span class="line">RUN yum install epel<span class="literal">-release</span> <span class="literal">-y</span> </span><br><span class="line">RUN yum install <span class="literal">-y</span> gcc gcc<span class="literal">-c</span>++ make <span class="literal">-y</span></span><br><span class="line">RUN <span class="built_in">wget</span> http://docs.php.net/distributions/php<span class="literal">-5</span>.<span class="number">6.36</span>.tar.gz</span><br><span class="line">RUN tar zxf php<span class="literal">-5</span>.<span class="number">6.36</span>.tar.gz</span><br><span class="line">RUN <span class="built_in">cd</span> php<span class="literal">-5</span>.<span class="number">6.36</span></span><br><span class="line">RUN ./configure -<span class="literal">-prefix</span>=/usr/local/php </span><br><span class="line">RUN make <span class="literal">-j</span> <span class="number">4</span> </span><br><span class="line">RUN make install</span><br><span class="line">EXPOSE <span class="number">9000</span></span><br><span class="line">CMD [<span class="string">&quot;php-fpm&quot;</span>]</span><br></pre></td></tr></table></figure>



<p><strong>优化内容如下：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">FROM centos:latest</span><br><span class="line">MAINTAINER www.kubelixiang.com</span><br><span class="line">RUN yum install epel<span class="literal">-release</span> <span class="literal">-y</span> &amp;&amp; \</span><br><span class="line">    yum install <span class="literal">-y</span> gcc gcc<span class="literal">-c</span>++ make</span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">wget</span> http://docs.php.net/distributions/php<span class="literal">-5</span>.<span class="number">6.36</span>.tar.gz &amp;&amp; \</span><br><span class="line">    tar zxf php<span class="literal">-5</span>.<span class="number">6.36</span>.tar.gz &amp;&amp; \</span><br><span class="line">    <span class="built_in">cd</span> php<span class="literal">-5</span>.<span class="number">6.36</span> &amp;&amp; \</span><br><span class="line">    ./configure -<span class="literal">-prefix</span>=/usr/local/php &amp;&amp; \</span><br><span class="line">    make <span class="literal">-j</span> <span class="number">4</span> &amp;&amp; make install</span><br><span class="line">EXPOSE <span class="number">9000</span></span><br><span class="line">CMD [<span class="string">&quot;php-fpm&quot;</span>]</span><br></pre></td></tr></table></figure>



<h4 id="4-4-6-2-清理无用数据"><a href="#4-4-6-2-清理无用数据" class="headerlink" title="4.4.6.2 清理无用数据"></a>4.4.6.2 清理无用数据</h4><ul>
<li>一次RUN形成新的一层，如果没有在同一层删除，无论文件是否最后删除，都会带到下一层，所以要在每一层清理对应的残留数据，减小镜像大小。</li>
<li>把生成容器镜像过程中部署的应用软件包做删除处理</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">FROM centos:latest</span><br><span class="line">MAINTAINER www.kubelixiang.com</span><br><span class="line">RUN yum install epel<span class="literal">-release</span> <span class="literal">-y</span> &amp;&amp; \</span><br><span class="line">    yum install <span class="literal">-y</span> gcc gcc<span class="literal">-c</span>++ make gd<span class="literal">-devel</span> libxml2<span class="literal">-devel</span> \</span><br><span class="line">    libcurl<span class="literal">-devel</span> libjpeg<span class="literal">-devel</span> libpng<span class="literal">-devel</span> openssl<span class="literal">-devel</span> \</span><br><span class="line">    libmcrypt<span class="literal">-devel</span> libxslt<span class="literal">-devel</span> libtidy<span class="literal">-devel</span> autoconf \</span><br><span class="line">    iproute net<span class="literal">-tools</span> telnet <span class="built_in">wget</span> <span class="built_in">curl</span> &amp;&amp; \</span><br><span class="line">    yum clean all &amp;&amp; \</span><br><span class="line">    <span class="built_in">rm</span> <span class="literal">-rf</span> /var/cache/yum/*</span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">wget</span> http://docs.php.net/distributions/php<span class="literal">-5</span>.<span class="number">6.36</span>.tar.gz &amp;&amp; \</span><br><span class="line">    tar zxf php<span class="literal">-5</span>.<span class="number">6.36</span>.tar.gz &amp;&amp; \</span><br><span class="line">    <span class="built_in">cd</span> php<span class="literal">-5</span>.<span class="number">6.36</span> &amp;&amp; \</span><br><span class="line">    ./configure -<span class="literal">-prefix</span>=/usr/local/php \</span><br><span class="line">    make <span class="literal">-j</span> <span class="number">4</span> &amp;&amp; make install &amp;&amp; \</span><br><span class="line">    <span class="built_in">cd</span> / &amp;&amp; <span class="built_in">rm</span> <span class="literal">-rf</span> php*</span><br></pre></td></tr></table></figure>



<h4 id="4-4-6-3-多阶段构建镜像"><a href="#4-4-6-3-多阶段构建镜像" class="headerlink" title="4.4.6.3 多阶段构建镜像"></a>4.4.6.3 多阶段构建镜像</h4><p>项目容器镜像有两种，一种直接把项目代码复制到容器镜像中，下次使用容器镜像时即可直接启动；另一种把需要对项目源码进行编译，再复制到容器镜像中使用。</p>
<p>不论是哪种方法都会让制作镜像复杂了些，并也会让容器镜像比较大，建议采用分阶段构建镜像的方法实现。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> git clone https://github.com/kubelixiang/tomcat<span class="literal">-java</span><span class="literal">-demo</span></span><br><span class="line"><span class="variable">$</span> <span class="built_in">cd</span> tomcat<span class="literal">-java</span><span class="literal">-demo</span></span><br><span class="line"><span class="variable">$</span> vi Dockerfile</span><br><span class="line">FROM maven AS build</span><br><span class="line">ADD ./pom.xml pom.xml</span><br><span class="line">ADD ./src src/</span><br><span class="line">RUN mvn clean package</span><br><span class="line"></span><br><span class="line">FROM kubelixiang/tomcat</span><br><span class="line">RUN <span class="built_in">rm</span> <span class="literal">-rf</span> /usr/local/tomcat/webapps/ROOT</span><br><span class="line"><span class="built_in">COPY</span> -<span class="literal">-from</span>=build target/*.war /usr/local/tomcat/webapps/ROOT.war</span><br><span class="line"></span><br><span class="line"><span class="variable">$</span> docker build <span class="literal">-t</span> demo:v1 .</span><br><span class="line"><span class="variable">$</span> docker container run <span class="literal">-d</span> <span class="literal">-v</span> demo:v1</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">第一个 FROM 后边多了个 AS 关键字，可以给这个阶段起个名字</span><br><span class="line">第二个 FROM 使用上面构建的 Tomcat 镜像，<span class="built_in">COPY</span> 关键字增加了 —from 参数，用于拷贝某个阶段的文件到当前阶段。</span><br></pre></td></tr></table></figure>





<h1 id="五、新型容器镜像构建技术-BuildPacks"><a href="#五、新型容器镜像构建技术-BuildPacks" class="headerlink" title="五、新型容器镜像构建技术 BuildPacks"></a>五、新型容器镜像构建技术 BuildPacks</h1>]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker容器网络与通信原理</title>
    <url>/2023/08/06/%E4%BA%91%E5%8E%9F%E7%94%9F/Docker/Docker%E5%AE%B9%E5%99%A8%E7%BD%91%E7%BB%9C%E4%B8%8E%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="一、Docker容器默认网络模型"><a href="#一、Docker容器默认网络模型" class="headerlink" title="一、Docker容器默认网络模型"></a>一、Docker容器默认网络模型</h1><h2 id="1-1-原理图"><a href="#1-1-原理图" class="headerlink" title="1.1 原理图"></a>1.1 原理图</h2><p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E7%BD%91%E7%BB%9C%E4%B8%8E%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90.assets/image-20220208180516669.png" alt="image-20220208180516669"></p>
<h2 id="1-2-名词解释"><a href="#1-2-名词解释" class="headerlink" title="1.2 名词解释"></a>1.2 名词解释</h2><ul>
<li>docker0<ul>
<li>是一个二层网络设备，即网桥</li>
<li>通过网桥可以将Linux支持的不同的端口连接起来</li>
<li>实现类交换机多对多的通信</li>
</ul>
</li>
<li>veth pair<ul>
<li>虚拟以太网（Ethernet）设备</li>
<li>成对出现,用于解决网络命名空间之间的隔离</li>
<li>一端连接Container network namespace，另一端连接host network namespace</li>
</ul>
</li>
</ul>
<h1 id="二、Docker容器默认网络模型工作原理"><a href="#二、Docker容器默认网络模型工作原理" class="headerlink" title="二、Docker容器默认网络模型工作原理"></a>二、Docker容器默认网络模型工作原理</h1><h2 id="2-1-容器访问外网"><a href="#2-1-容器访问外网" class="headerlink" title="2.1 容器访问外网"></a>2.1 容器访问外网</h2><p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E7%BD%91%E7%BB%9C%E4%B8%8E%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90.assets/image-20220208190823162.png" alt="image-20220208190823162"></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker run -d --name web1 -p 8081:80 nginx:latest</span></span><br></pre></td></tr></table></figure>





<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># iptables -t nat -vnL POSTROUTING</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">输出：</span><br><span class="line">Chain POSTROUTING (policy ACCEPT <span class="number">7</span> packets, <span class="number">766</span> bytes)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     source               destination</span><br><span class="line">    <span class="number">0</span>     <span class="number">0</span> MASQUERADE  tcp  --  *      *       <span class="number">172.17</span>.<span class="number">0.2</span>           <span class="number">172.17</span>.<span class="number">0.2</span>           tcp dpt:<span class="number">80</span></span><br></pre></td></tr></table></figure>





<h2 id="2-2-外网访问容器"><a href="#2-2-外网访问容器" class="headerlink" title="2.2 外网访问容器"></a>2.2 外网访问容器</h2><p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E7%BD%91%E7%BB%9C%E4%B8%8E%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90.assets/image-20220208191400324.png" alt="image-20220208191400324"></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># iptables -t nat -vnL DOCKER</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">输出：</span><br><span class="line">Chain DOCKER (<span class="number">2</span> references)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     source               destination</span><br><span class="line">    <span class="number">0</span>     <span class="number">0</span> DNAT       tcp  --  !docker0 *       <span class="number">0.0</span>.<span class="number">0.0</span>/<span class="number">0</span>            <span class="number">0.0</span>.<span class="number">0.0</span>/<span class="number">0</span>            tcp dpt:<span class="number">8081</span> to:<span class="number">172.17</span>.<span class="number">0.2</span>:<span class="number">80</span></span><br></pre></td></tr></table></figure>





<h1 id="三、Docker容器四种网络模型"><a href="#三、Docker容器四种网络模型" class="headerlink" title="三、Docker容器四种网络模型"></a>三、Docker容器四种网络模型</h1><p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E7%BD%91%E7%BB%9C%E4%B8%8E%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90.assets/image-20220209120452509.png" alt="image-20220209120452509"></p>
<table>
<thead>
<tr>
<th>模式</th>
<th>使用方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>bridge [桥接式网络(Bridge container A)]</td>
<td>–network    bridge</td>
<td>桥接容器，除了有一块本地回环接口(Loopback interface)外，还有一块私有接口(Private interface)通过容器虚拟接口(Container virtual interface)连接到桥接虚拟接口(Docker bridge virtual interface)，之后通过逻辑主机接口(Logical host interface)连接到主机物理网络(Physical network interface)。<br>桥接网卡默认会分配到172.17.0.0/16的IP地址段。<br>如果我们在创建容器时没有指定网络模型，默认就是(Nat)桥接网络，这也就是为什么我们在登录到一个容器后，发现IP地址段都在172.17.0.0/16网段的原因。</td>
</tr>
<tr>
<td>host  [开放式容器(Open container)]</td>
<td>–network  host</td>
<td>比联盟式网络更开放，我们知道联盟式网络是多个容器共享网络(Net),而开放式容器(Open contaner)就直接共享了宿主机的名称空间。因此物理网卡有多少个，那么该容器就能看到多少网卡信息。我们可以说Open container是联盟式容器的衍生。</td>
</tr>
<tr>
<td>none [封闭式网络(Closed container)]</td>
<td>–network   none</td>
<td>封闭式容器，只有本地回环接口(Loopback interface，和咱们服务器看到的lo接口类似)，无法与外界进行通信。</td>
</tr>
<tr>
<td>container [联盟式网络(Joined container A | Joined container B ]</td>
<td>–network   container:c1(容器名称或容器ID)</td>
<td>每个容器都各有一部分名称空间(Mount,PID,User)，另外一部分名称空间是共享的(UTS,Net,IPC)。<br>由于它们的网络是共享的，因此各个容器可以通过本地回环接口(Loopback interface)进行通信。<br>除了共享同一组本地回环接口(Loopback interface)外，还有一块一块私有接口(Private interface)通过联合容器虚拟接口(Joined container virtual interface)连接到桥接虚拟接口(Docker bridge virtual interface)，之后通过逻辑主机接口(Logical host interface)连接到主机物理网络(Physical network interface)。</td>
</tr>
</tbody></table>
<h1 id="四、Docker容器四种网络模型应用案例"><a href="#四、Docker容器四种网络模型应用案例" class="headerlink" title="四、Docker容器四种网络模型应用案例"></a>四、Docker容器四种网络模型应用案例</h1><h2 id="4-1-查看已有的网络模型"><a href="#4-1-查看已有的网络模型" class="headerlink" title="4.1 查看已有的网络模型"></a>4.1 查看已有的网络模型</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">查看已有的网络模型</span><br><span class="line"><span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">a26c79961d8c   bridge    bridge    local</span><br><span class="line">d04ce0d0e6ca   host      host      local</span><br><span class="line">a369d8e58a41   none      null      local</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">查看已有网络模型详细信息</span><br><span class="line"><span class="comment"># docker network inspect bridge</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;bridge&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Id&quot;</span>: <span class="string">&quot;a26c79961d8c3a5f66a7de782b773291e4902badc60d0614745e01b18f506907&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Created&quot;</span>: <span class="string">&quot;2022-02-08T11:45:25.607195911+08:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;bridge&quot;</span>,</span><br><span class="line">        <span class="string">&quot;EnableIPv6&quot;</span>: <span class="type">false</span>,</span><br><span class="line">        <span class="string">&quot;IPAM&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Options&quot;</span>: <span class="type">null</span>,</span><br><span class="line">            <span class="string">&quot;Config&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;Subnet&quot;</span>: <span class="string">&quot;172.17.0.0/16&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;172.17.0.1&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Internal&quot;</span>: <span class="type">false</span>,</span><br><span class="line">        <span class="string">&quot;Attachable&quot;</span>: <span class="type">false</span>,</span><br><span class="line">        <span class="string">&quot;Ingress&quot;</span>: <span class="type">false</span>,</span><br><span class="line">        <span class="string">&quot;ConfigFrom&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Network&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;ConfigOnly&quot;</span>: <span class="type">false</span>,</span><br><span class="line">        <span class="string">&quot;Containers&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;dbac5dd601b960c91bee8fafcabc0a6e6091bff14d5fccfa80ca2c74df8891ad&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;web1&quot;</span>,</span><br><span class="line">                <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;2c1d8c66f7f46d6d76e5c384b1729a90441e1398496b3112124ba65d255432a1&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:11:00:02&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;172.17.0.2/16&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.default_bridge&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.enable_icc&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.enable_ip_masquerade&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.host_binding_ipv4&quot;</span>: <span class="string">&quot;0.0.0.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.name&quot;</span>: <span class="string">&quot;docker0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.driver.mtu&quot;</span>: <span class="string">&quot;1500&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">查看docker支持的网络模型</span><br><span class="line"><span class="comment"># docker info | grep Network</span></span><br><span class="line">  Network: bridge host ipvlan macvlan null overlay</span><br></pre></td></tr></table></figure>





<h2 id="4-2-创建指定类型的网络模型"><a href="#4-2-创建指定类型的网络模型" class="headerlink" title="4.2 创建指定类型的网络模型"></a>4.2 创建指定类型的网络模型</h2><h3 id="4-2-1-bridge"><a href="#4-2-1-bridge" class="headerlink" title="4.2.1 bridge"></a>4.2.1 bridge</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">查看创建网络模型的帮助方法</span><br><span class="line"><span class="comment"># docker network create --help</span></span><br></pre></td></tr></table></figure>





<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">创建一个名称为mybr0的网络</span><br><span class="line"><span class="comment"># docker network create -d bridge --subnet &quot;192.168.100.0/24&quot; --gateway &quot;192.168.100.1&quot; -o com.docker.network.bridge.name=docker1 mybr0</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">查看已创建网络</span><br><span class="line"><span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">......</span><br><span class="line">a6a1ad36c3c0   mybr0     bridge    local</span><br><span class="line">......</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">在docker host主机上可以看到多了一个网桥docker1</span><br><span class="line"><span class="comment"># ifconfig</span></span><br><span class="line">docker1: flags=<span class="number">4099</span>&lt;UP,BROADCAST,MULTICAST&gt;  mtu <span class="number">1500</span></span><br><span class="line">        inet <span class="number">192.168</span>.<span class="number">100.1</span>  netmask <span class="number">255.255</span>.<span class="number">255.0</span>  broadcast <span class="number">192.168</span>.<span class="number">100.255</span></span><br><span class="line">        ether <span class="number">02</span>:<span class="number">42</span>:<span class="number">14</span>:aa:f5:<span class="number">04</span>  txqueuelen <span class="number">0</span>  (Ethernet)</span><br><span class="line">        RX packets <span class="number">0</span>  bytes <span class="number">0</span> (<span class="number">0.0</span> B)</span><br><span class="line">        RX errors <span class="number">0</span>  dropped <span class="number">0</span>  overruns <span class="number">0</span>  frame <span class="number">0</span></span><br><span class="line">        TX packets <span class="number">20</span>  bytes <span class="number">1598</span> (<span class="number">1.5</span> KiB)</span><br><span class="line">        TX errors <span class="number">0</span>  dropped <span class="number">0</span> overruns <span class="number">0</span>  carrier <span class="number">0</span>  collisions <span class="number">0</span></span><br></pre></td></tr></table></figure>





<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">启动一个容器并连接到已创建mybr0网络</span><br><span class="line"><span class="comment"># docker run -it --network mybr0 --rm busybox</span></span><br><span class="line">/ <span class="comment"># ifconfig</span></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr <span class="number">02</span>:<span class="number">42</span>:C0:A8:<span class="number">65</span>:<span class="number">02</span></span><br><span class="line">          inet addr:<span class="number">192.168</span>.<span class="number">100.2</span>  Bcast:<span class="number">192.168</span>.<span class="number">100.255</span>  Mask:<span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:<span class="number">1500</span>  Metric:<span class="number">1</span></span><br><span class="line">          RX packets:<span class="number">18</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> frame:<span class="number">0</span></span><br><span class="line">          TX packets:<span class="number">0</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> carrier:<span class="number">0</span></span><br><span class="line">          collisions:<span class="number">0</span> txqueuelen:<span class="number">0</span></span><br><span class="line">          RX bytes:<span class="number">2185</span> (<span class="number">2.1</span> KiB)  TX bytes:<span class="number">0</span> (<span class="number">0.0</span> B)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback</span><br><span class="line">          inet addr:<span class="number">127.0</span>.<span class="number">0.1</span>  Mask:<span class="number">255.0</span>.<span class="number">0.0</span></span><br><span class="line">          UP LOOPBACK RUNNING  MTU:<span class="number">65536</span>  Metric:<span class="number">1</span></span><br><span class="line">          RX packets:<span class="number">0</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> frame:<span class="number">0</span></span><br><span class="line">          TX packets:<span class="number">0</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> carrier:<span class="number">0</span></span><br><span class="line">          collisions:<span class="number">0</span> txqueuelen:<span class="number">1000</span></span><br><span class="line">          RX bytes:<span class="number">0</span> (<span class="number">0.0</span> B)  TX bytes:<span class="number">0</span> (<span class="number">0.0</span> B)</span><br><span class="line"></span><br><span class="line">/ <span class="comment"># exit</span></span><br></pre></td></tr></table></figure>



<h3 id="4-2-2-host"><a href="#4-2-2-host" class="headerlink" title="4.2.2 host"></a>4.2.2 host</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">查看host类型的网络模型</span><br><span class="line"><span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">......</span><br><span class="line">d04ce0d0e6ca   host      host      local</span><br><span class="line">......</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">查看host网络模型的详细信息</span><br><span class="line"><span class="comment"># docker network inspect host</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;host&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Id&quot;</span>: <span class="string">&quot;d04ce0d0e6ca8e6226937f19033ef2c3f05b47ed63e06492d5c3071904fbb80b&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Created&quot;</span>: <span class="string">&quot;2022-01-21T16:12:05.30970114+08:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;host&quot;</span>,</span><br><span class="line">        <span class="string">&quot;EnableIPv6&quot;</span>: <span class="type">false</span>,</span><br><span class="line">        <span class="string">&quot;IPAM&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Options&quot;</span>: <span class="type">null</span>,</span><br><span class="line">            <span class="string">&quot;Config&quot;</span>: []</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Internal&quot;</span>: <span class="type">false</span>,</span><br><span class="line">        <span class="string">&quot;Attachable&quot;</span>: <span class="type">false</span>,</span><br><span class="line">        <span class="string">&quot;Ingress&quot;</span>: <span class="type">false</span>,</span><br><span class="line">        <span class="string">&quot;ConfigFrom&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Network&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;ConfigOnly&quot;</span>: <span class="type">false</span>,</span><br><span class="line">        <span class="string">&quot;Containers&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>







<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">创建容器使用host网络模型，并查看其网络信息</span><br><span class="line"><span class="comment"># docker run -it --network host --rm busybox</span></span><br><span class="line">/ <span class="comment"># ifconfig</span></span><br><span class="line">docker0   Link encap:Ethernet  HWaddr <span class="number">02</span>:<span class="number">42</span>:<span class="number">11</span>:B8:<span class="number">9</span>A:C5</span><br><span class="line">          inet addr:<span class="number">172.17</span>.<span class="number">0.1</span>  Bcast:<span class="number">172.17</span>.<span class="number">255.255</span>  Mask:<span class="number">255.255</span>.<span class="number">0.0</span></span><br><span class="line">          inet6 addr: fe80::<span class="number">42</span>:<span class="number">11</span>ff:feb8:<span class="number">9</span>ac5/<span class="number">64</span> Scope:Link</span><br><span class="line">          UP BROADCAST MULTICAST  MTU:<span class="number">1500</span>  Metric:<span class="number">1</span></span><br><span class="line">          RX packets:<span class="number">53</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> frame:<span class="number">0</span></span><br><span class="line">          TX packets:<span class="number">94</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> carrier:<span class="number">0</span></span><br><span class="line">          collisions:<span class="number">0</span> txqueuelen:<span class="number">0</span></span><br><span class="line">          RX bytes:<span class="number">6924</span> (<span class="number">6.7</span> KiB)  TX bytes:<span class="number">7868</span> (<span class="number">7.6</span> KiB)</span><br><span class="line"></span><br><span class="line">docker1   Link encap:Ethernet  HWaddr <span class="number">02</span>:<span class="number">42</span>:<span class="number">14</span>:AA:F5:<span class="number">04</span></span><br><span class="line">          inet addr:<span class="number">192.168</span>.<span class="number">100.1</span>  Bcast:<span class="number">192.168</span>.<span class="number">100.255</span>  Mask:<span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line">          UP BROADCAST MULTICAST  MTU:<span class="number">1500</span>  Metric:<span class="number">1</span></span><br><span class="line">          RX packets:<span class="number">0</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> frame:<span class="number">0</span></span><br><span class="line">          TX packets:<span class="number">0</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> carrier:<span class="number">0</span></span><br><span class="line">          collisions:<span class="number">0</span> txqueuelen:<span class="number">0</span></span><br><span class="line">          RX bytes:<span class="number">0</span> (<span class="number">0.0</span> B)  TX bytes:<span class="number">0</span> (<span class="number">0.0</span> B)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ens33     Link encap:Ethernet  HWaddr <span class="number">00</span>:<span class="number">0</span>C:<span class="number">29</span>:AF:<span class="number">89</span>:<span class="number">0</span>B</span><br><span class="line">          inet addr:<span class="number">192.168</span>.<span class="number">255.161</span>  Bcast:<span class="number">192.168</span>.<span class="number">255.255</span>  Mask:<span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line">          inet6 addr: fe80::<span class="number">44</span><span class="built_in">fc</span>:<span class="number">2662</span>:bfab:<span class="number">2</span>b93/<span class="number">64</span> Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:<span class="number">1500</span>  Metric:<span class="number">1</span></span><br><span class="line">          RX packets:<span class="number">157763</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> frame:<span class="number">0</span></span><br><span class="line">          TX packets:<span class="number">50865</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> carrier:<span class="number">0</span></span><br><span class="line">          collisions:<span class="number">0</span> txqueuelen:<span class="number">1000</span></span><br><span class="line">          RX bytes:<span class="number">205504721</span> (<span class="number">195.9</span> MiB)  TX bytes:<span class="number">3626119</span> (<span class="number">3.4</span> MiB)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback</span><br><span class="line">          inet addr:<span class="number">127.0</span>.<span class="number">0.1</span>  Mask:<span class="number">255.0</span>.<span class="number">0.0</span></span><br><span class="line">          inet6 addr: ::<span class="number">1</span>/<span class="number">128</span> Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:<span class="number">65536</span>  Metric:<span class="number">1</span></span><br><span class="line">          RX packets:<span class="number">88</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> frame:<span class="number">0</span></span><br><span class="line">          TX packets:<span class="number">88</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> carrier:<span class="number">0</span></span><br><span class="line">          collisions:<span class="number">0</span> txqueuelen:<span class="number">1000</span></span><br><span class="line">          RX bytes:<span class="number">8196</span> (<span class="number">8.0</span> KiB)  TX bytes:<span class="number">8196</span> (<span class="number">8.0</span> KiB)</span><br><span class="line"></span><br><span class="line">virbr0    Link encap:Ethernet  HWaddr <span class="number">52</span>:<span class="number">54</span>:<span class="number">00</span>:EB:<span class="number">01</span>:E5</span><br><span class="line">          inet addr:<span class="number">192.168</span>.<span class="number">122.1</span>  Bcast:<span class="number">192.168</span>.<span class="number">122.255</span>  Mask:<span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line">          UP BROADCAST MULTICAST  MTU:<span class="number">1500</span>  Metric:<span class="number">1</span></span><br><span class="line">          RX packets:<span class="number">0</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> frame:<span class="number">0</span></span><br><span class="line">          TX packets:<span class="number">0</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> carrier:<span class="number">0</span></span><br><span class="line">          collisions:<span class="number">0</span> txqueuelen:<span class="number">1000</span></span><br><span class="line">          RX bytes:<span class="number">0</span> (<span class="number">0.0</span> B)  TX bytes:<span class="number">0</span> (<span class="number">0.0</span> B)</span><br><span class="line"></span><br><span class="line">/ <span class="comment"># exit</span></span><br></pre></td></tr></table></figure>



<p><strong>运行Nginx服务</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">创建用于运行nginx应用的容器，使用host网络模型</span><br><span class="line"><span class="comment"># docker run -d --network host nginx:latest</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">查看容器运行状态</span><br><span class="line"><span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE          COMMAND                  CREATED         STATUS         PORTS     NAMES</span><br><span class="line">f6677b213271   nginx:latest   <span class="string">&quot;/docker-entrypoint.…&quot;</span>   <span class="number">7</span> seconds ago   Up <span class="number">6</span> seconds             youthful_shtern</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">查看docker host <span class="number">80</span>端口状态</span><br><span class="line"><span class="comment"># ss -anput | grep &quot;:80&quot;</span></span><br><span class="line">tcp    LISTEN     <span class="number">0</span>      <span class="number">511</span>       *:<span class="number">80</span>                    *:*                   users:((<span class="string">&quot;nginx&quot;</span>,pid=<span class="number">42866</span>,fd=<span class="number">7</span>),(<span class="string">&quot;nginx&quot;</span>,pid=<span class="number">42826</span>,fd=<span class="number">7</span>))</span><br><span class="line">tcp    LISTEN     <span class="number">0</span>      <span class="number">511</span>      :::<span class="number">80</span>                   :::*                   users:((<span class="string">&quot;nginx&quot;</span>,pid=<span class="number">42866</span>,fd=<span class="number">8</span>),(<span class="string">&quot;nginx&quot;</span>,pid=<span class="number">42826</span>,fd=<span class="number">8</span>))</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">使用<span class="built_in">curl</span>命令访问docker host主机IP地址，验证是否可以对nginx进行访问，如可访问，则说明容器与docker host共享网络命名空间</span><br><span class="line"><span class="comment"># curl http://192.168.255.161</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">html &#123; color<span class="literal">-scheme</span>: light dark; &#125;</span><br><span class="line">body &#123; width: <span class="number">35</span>em; margin: <span class="number">0</span> auto;</span><br><span class="line">font<span class="literal">-family</span>: Tahoma, Verdana, Arial, sans<span class="literal">-serif</span>; &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;<span class="keyword">If</span> you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;<span class="keyword">For</span> online documentation and support please refer to</span><br><span class="line">&lt;a href=<span class="string">&quot;http://nginx.org/&quot;</span>&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href=<span class="string">&quot;http://nginx.com/&quot;</span>&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you <span class="keyword">for</span> <span class="keyword">using</span> nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<img src="/images/Docker/Docker容器网络与通信原理深度解析.assets/image-20220209152555577.png" alt="image-20220209152555577">





<h3 id="4-2-3-none"><a href="#4-2-3-none" class="headerlink" title="4.2.3 none"></a>4.2.3 none</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">查看none类型的网络模型</span><br><span class="line"><span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">......</span><br><span class="line">a369d8e58a41   none      null      local</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">查看none网络模型详细信息</span><br><span class="line"><span class="comment"># docker network inspect none</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Id&quot;</span>: <span class="string">&quot;a369d8e58a41ce2e3c25f2273b059e984dd561bfa7e79077a0cce9b3a925b9c9&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Created&quot;</span>: <span class="string">&quot;2022-01-21T16:12:05.217801814+08:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;null&quot;</span>,</span><br><span class="line">        <span class="string">&quot;EnableIPv6&quot;</span>: <span class="type">false</span>,</span><br><span class="line">        <span class="string">&quot;IPAM&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Options&quot;</span>: <span class="type">null</span>,</span><br><span class="line">            <span class="string">&quot;Config&quot;</span>: []</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Internal&quot;</span>: <span class="type">false</span>,</span><br><span class="line">        <span class="string">&quot;Attachable&quot;</span>: <span class="type">false</span>,</span><br><span class="line">        <span class="string">&quot;Ingress&quot;</span>: <span class="type">false</span>,</span><br><span class="line">        <span class="string">&quot;ConfigFrom&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Network&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;ConfigOnly&quot;</span>: <span class="type">false</span>,</span><br><span class="line">        <span class="string">&quot;Containers&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">创建容器使用none网络模型，并查看其网络状态</span><br><span class="line"><span class="comment"># docker run -it --network none --rm busybox:latest</span></span><br><span class="line">/ <span class="comment"># ifconfig</span></span><br><span class="line">lo        Link encap:Local Loopback</span><br><span class="line">          inet addr:<span class="number">127.0</span>.<span class="number">0.1</span>  Mask:<span class="number">255.0</span>.<span class="number">0.0</span></span><br><span class="line">          UP LOOPBACK RUNNING  MTU:<span class="number">65536</span>  Metric:<span class="number">1</span></span><br><span class="line">          RX packets:<span class="number">0</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> frame:<span class="number">0</span></span><br><span class="line">          TX packets:<span class="number">0</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> carrier:<span class="number">0</span></span><br><span class="line">          collisions:<span class="number">0</span> txqueuelen:<span class="number">1000</span></span><br><span class="line">          RX bytes:<span class="number">0</span> (<span class="number">0.0</span> B)  TX bytes:<span class="number">0</span> (<span class="number">0.0</span> B)</span><br><span class="line"></span><br><span class="line">/ <span class="comment"># exit</span></span><br></pre></td></tr></table></figure>



<h3 id="4-2-4-联盟网络"><a href="#4-2-4-联盟网络" class="headerlink" title="4.2.4 联盟网络"></a>4.2.4 联盟网络</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">创建c1容器，使用默认网络模型</span><br><span class="line"><span class="comment"># docker run -it --name c1 --rm busybox:latest</span></span><br><span class="line">/ <span class="comment"># ifconfig</span></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr <span class="number">02</span>:<span class="number">42</span>:<span class="built_in">AC</span>:<span class="number">11</span>:<span class="number">00</span>:<span class="number">02</span></span><br><span class="line">          inet addr:<span class="number">172.17</span>.<span class="number">0.2</span>  Bcast:<span class="number">172.17</span>.<span class="number">255.255</span>  Mask:<span class="number">255.255</span>.<span class="number">0.0</span></span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:<span class="number">1500</span>  Metric:<span class="number">1</span></span><br><span class="line">          RX packets:<span class="number">16</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> frame:<span class="number">0</span></span><br><span class="line">          TX packets:<span class="number">0</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> carrier:<span class="number">0</span></span><br><span class="line">          collisions:<span class="number">0</span> txqueuelen:<span class="number">0</span></span><br><span class="line">          RX bytes:<span class="number">1916</span> (<span class="number">1.8</span> KiB)  TX bytes:<span class="number">0</span> (<span class="number">0.0</span> B)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback</span><br><span class="line">          inet addr:<span class="number">127.0</span>.<span class="number">0.1</span>  Mask:<span class="number">255.0</span>.<span class="number">0.0</span></span><br><span class="line">          UP LOOPBACK RUNNING  MTU:<span class="number">65536</span>  Metric:<span class="number">1</span></span><br><span class="line">          RX packets:<span class="number">0</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> frame:<span class="number">0</span></span><br><span class="line">          TX packets:<span class="number">0</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> carrier:<span class="number">0</span></span><br><span class="line">          collisions:<span class="number">0</span> txqueuelen:<span class="number">1000</span></span><br><span class="line">          RX bytes:<span class="number">0</span> (<span class="number">0.0</span> B)  TX bytes:<span class="number">0</span> (<span class="number">0.0</span> B)</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">查看c1容器状态</span><br><span class="line"><span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE            COMMAND   CREATED          STATUS          PORTS     NAMES</span><br><span class="line"><span class="number">0905</span>bc8ebfb6   busybox:latest   <span class="string">&quot;sh&quot;</span>      <span class="number">13</span> seconds ago   Up <span class="number">11</span> seconds             c1</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">创建c2容器，与c1容器共享网络命名空间</span><br><span class="line"><span class="comment"># docker run -it --name c2 --network container:c1 --rm busybox:latest</span></span><br><span class="line">/ <span class="comment"># ifconfig</span></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr <span class="number">02</span>:<span class="number">42</span>:<span class="built_in">AC</span>:<span class="number">11</span>:<span class="number">00</span>:<span class="number">02</span></span><br><span class="line">          inet addr:<span class="number">172.17</span>.<span class="number">0.2</span>  Bcast:<span class="number">172.17</span>.<span class="number">255.255</span>  Mask:<span class="number">255.255</span>.<span class="number">0.0</span></span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:<span class="number">1500</span>  Metric:<span class="number">1</span></span><br><span class="line">          RX packets:<span class="number">22</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> frame:<span class="number">0</span></span><br><span class="line">          TX packets:<span class="number">0</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> carrier:<span class="number">0</span></span><br><span class="line">          collisions:<span class="number">0</span> txqueuelen:<span class="number">0</span></span><br><span class="line">          RX bytes:<span class="number">2574</span> (<span class="number">2.5</span> KiB)  TX bytes:<span class="number">0</span> (<span class="number">0.0</span> B)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback</span><br><span class="line">          inet addr:<span class="number">127.0</span>.<span class="number">0.1</span>  Mask:<span class="number">255.0</span>.<span class="number">0.0</span></span><br><span class="line">          UP LOOPBACK RUNNING  MTU:<span class="number">65536</span>  Metric:<span class="number">1</span></span><br><span class="line">          RX packets:<span class="number">0</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> frame:<span class="number">0</span></span><br><span class="line">          TX packets:<span class="number">0</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> carrier:<span class="number">0</span></span><br><span class="line">          collisions:<span class="number">0</span> txqueuelen:<span class="number">1000</span></span><br><span class="line">          RX bytes:<span class="number">0</span> (<span class="number">0.0</span> B)  TX bytes:<span class="number">0</span> (<span class="number">0.0</span> B)</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">在c2容器中创建文件并开启httpd服务</span><br><span class="line">/ <span class="comment"># echo &quot;hello world&quot; &gt;&gt; /tmp/index.html</span></span><br><span class="line">/ <span class="comment"># ls /tmp</span></span><br><span class="line">index.html</span><br><span class="line">/ <span class="comment"># httpd -h /tmp</span></span><br><span class="line"></span><br><span class="line">验证<span class="number">80</span>端口是否打开</span><br><span class="line">/ <span class="comment"># netstat -npl</span></span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv<span class="literal">-Q</span> <span class="built_in">Send-Q</span> Local Address           Foreign Address         State       PID/Program name</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> :::<span class="number">80</span>                   :::*                    LISTEN      <span class="number">10</span>/httpd</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">在c1容器中进行访问验证</span><br><span class="line"><span class="comment"># docker exec c1 wget -O - -q 127.0.0.1</span></span><br><span class="line">hello world</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">查看c1容器/tmp目录，发现没有在c2容器中创建的文件，说明c1与c2仅共享了网络命名空间，没有共享文件系统</span><br><span class="line"><span class="comment"># docker exec c1 ls /tmp</span></span><br></pre></td></tr></table></figure>







<h1 id="五、跨Docker-Host容器间通信实现"><a href="#五、跨Docker-Host容器间通信实现" class="headerlink" title="五、跨Docker Host容器间通信实现"></a>五、跨Docker Host容器间通信实现</h1><h2 id="5-1-跨Docker-Host容器间通信必要性"><a href="#5-1-跨Docker-Host容器间通信必要性" class="headerlink" title="5.1  跨Docker Host容器间通信必要性"></a>5.1  跨Docker Host容器间通信必要性</h2><ul>
<li>由于Docker容器运行的环境类似于在局域网中运行服务一样，无法直接被外界访问，如果采用在Docker Host利用端口映射方式会导致端口被严重消耗。</li>
<li>能够实现不同的Docker Host方便访问其它Docker Host之上的容器提供的服务</li>
</ul>
<h2 id="5-2-跨Docker-Host容器间通信实现方案"><a href="#5-2-跨Docker-Host容器间通信实现方案" class="headerlink" title="5.2 跨Docker Host容器间通信实现方案"></a>5.2 跨Docker Host容器间通信实现方案</h2><h3 id="5-2-1-Docker原生方案"><a href="#5-2-1-Docker原生方案" class="headerlink" title="5.2.1 Docker原生方案"></a>5.2.1 Docker原生方案</h3><ul>
<li>overlay<ul>
<li>基于VXLAN封装实现Docker原生overlay网络</li>
</ul>
</li>
<li>macvlan<ul>
<li>Docker主机网卡接口逻辑上分为多个子接口，每个子接口标识一个VLAN，容器接口直接连接Docker Host</li>
</ul>
</li>
<li>网卡接口<ul>
<li>通过路由策略转发到另一台Docker Host</li>
</ul>
</li>
</ul>
<h3 id="5-2-2-第三方方案"><a href="#5-2-2-第三方方案" class="headerlink" title="5.2.2 第三方方案"></a>5.2.2 第三方方案</h3><h4 id="5-2-2-1-隧道方案"><a href="#5-2-2-1-隧道方案" class="headerlink" title="5.2.2.1 隧道方案"></a>5.2.2.1 隧道方案</h4><ul>
<li>Flannel<ul>
<li>支持UDP和VLAN封装传输方式</li>
</ul>
</li>
<li>Weave<ul>
<li>支持UDP和VXLAN</li>
</ul>
</li>
<li>OpenvSwitch<ul>
<li>支持VXLAN和GRE协议</li>
</ul>
</li>
</ul>
<h4 id="5-2-2-2-路由方案"><a href="#5-2-2-2-路由方案" class="headerlink" title="5.2.2.2 路由方案"></a>5.2.2.2 路由方案</h4><ul>
<li>Calico<ul>
<li>支持BGP协议和IPIP隧道</li>
<li>每台宿主机作为虚拟路由，通过BGP协议实现不同主机容器间通信。</li>
</ul>
</li>
</ul>
<h2 id="5-3-Flannel"><a href="#5-3-Flannel" class="headerlink" title="5.3 Flannel"></a>5.3 Flannel</h2><h3 id="5-3-1-overlay-network介绍"><a href="#5-3-1-overlay-network介绍" class="headerlink" title="5.3.1 overlay network介绍"></a>5.3.1 overlay network介绍</h3><p>Overlay网络是指在不改变现有网络基础设施的前提下，通过某种约定通信协议，把二层报文封装在IP报文之上的新的数据格式。这样不但能够充分利用成熟的IP路由协议进程数据分发；而且在Overlay技术中采用扩展的隔离标识位数，能够突破VLAN的4000数量限制支持高达16M的用户，并在必要时可将广播流量转化为组播流量，避免广播数据泛滥。</p>
<p>　　因此，Overlay网络实际上是目前最主流的容器跨节点数据传输和路由方案。</p>
<h3 id="5-3-2-Flannel介绍"><a href="#5-3-2-Flannel介绍" class="headerlink" title="5.3.2 Flannel介绍"></a>5.3.2 Flannel介绍</h3><p>Flannel是 CoreOS 团队针对 Kubernetes 设计的一个覆盖网络（Overlay Network）工具，其目的在于帮助每一个使用 Kuberentes 的 CoreOS 主机拥有一个完整的子网。 Flannel通过给每台宿主机分配一个子网的方式为容器提供虚拟网络，它基于Linux TUN/TAP，使用UDP封装IP包来创建overlay网络，并借助etcd维护网络的分配情况。 Flannel is a simple and easy way to configure a layer 3 network fabric designed for Kubernetes.</p>
<h3 id="5-3-3-Flannel工作原理"><a href="#5-3-3-Flannel工作原理" class="headerlink" title="5.3.3 Flannel工作原理"></a>5.3.3 Flannel工作原理</h3><p>Flannel是CoreOS团队针对Kubernetes设计的一个网络规划服务，简单来说，它的功能是让集群中的不同节点主机创建的Docker容器都具有全集群唯一的虚拟IP地址。但在默认的Docker配置中，每个Node的Docker服务会分别负责所在节点容器的IP分配。Node内部的容器之间可以相互访问,但是跨主机(Node)网络相互间是不能通信。Flannel设计目的就是为集群中所有节点重新规划IP地址的使用规则，从而使得不同节点上的容器能够获得”同属一个内网”且”不重复的”IP地址，并让属于不同节点上的容器能够直接通过内网IP通信。 Flannel 使用etcd存储配置数据和子网分配信息。flannel 启动之后，后台进程首先检索配置和正在使用的子网列表，然后选择一个可用的子网，然后尝试去注册它。etcd也存储这个每个主机对应的ip。flannel 使用etcd的watch机制监视<code>/coreos.com/network/subnets</code>下面所有元素的变化信息，并且根据它来维护一个路由表。为了提高性能，flannel优化了Universal TAP/TUN设备，对TUN和UDP之间的ip分片做了代理。 如下原理图：</p>
<p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E7%BD%91%E7%BB%9C%E4%B8%8E%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90.assets/image-20220209230459054.png" alt="image-20220209230459054"></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">1、数据从源容器中发出后，经由所在主机的docker0虚拟网卡转发到flannel0虚拟网卡，这是个P2P的虚拟网卡，flanneld服务监听在网卡的另外一端。</span><br><span class="line">2、Flannel通过Etcd服务维护了一张节点间的路由表，该张表里保存了各个节点主机的子网网段信息。</span><br><span class="line">3、源主机的flanneld服务将原本的数据内容UDP封装后根据自己的路由表投递给目的节点的flanneld服务，数据到达以后被解包，然后直接进入目的节点的flannel0虚拟网卡，然后被转发到目的主机的docker0虚拟网卡，最后就像本机容器通信一样的由docker0路由到达目标容器。</span><br></pre></td></tr></table></figure>





<h2 id="5-4-ETCD"><a href="#5-4-ETCD" class="headerlink" title="5.4 ETCD"></a>5.4 ETCD</h2><p>etcd是CoreOS团队于2013年6月发起的开源项目，它的目标是构建一个高可用的分布式键值(key-value)数据库。etcd内部采用<code>raft</code>协议作为一致性算法，etcd基于Go语言实现。</p>
<p>etcd作为服务发现系统，特点：</p>
<ul>
<li>简单：安装配置简单，而且提供了HTTP API进行交互，使用也很简单</li>
<li>安全：支持SSL证书验证</li>
<li>快速：根据官方提供的benchmark数据，单实例支持每秒2k+读操作</li>
<li>可靠：采用raft算法，实现分布式系统数据的可用性和一致性</li>
</ul>
<h2 id="5-5-ETCD部署"><a href="#5-5-ETCD部署" class="headerlink" title="5.5 ETCD部署"></a>5.5 ETCD部署</h2><blockquote>
<p>主机防火墙及SELINUX均关闭。</p>
</blockquote>
<h3 id="5-5-1-主机名称配置"><a href="#5-5-1-主机名称配置" class="headerlink" title="5.5.1  主机名称配置"></a>5.5.1  主机名称配置</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hostnamectl set-hostname node1</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hostnamectl set-hostname node2</span></span><br></pre></td></tr></table></figure>





<h3 id="5-5-2-主机IP地址配置"><a href="#5-5-2-主机IP地址配置" class="headerlink" title="5.5.2 主机IP地址配置"></a>5.5.2 主机IP地址配置</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/sysconfig/network-scripts/ifcfg-ens33</span></span><br><span class="line"><span class="comment"># cat /etc/sysconfig/network-scripts/ifcfg-ens33</span></span><br><span class="line"><span class="built_in">TYPE</span>=<span class="string">&quot;Ethernet&quot;</span></span><br><span class="line">PROXY_METHOD=<span class="string">&quot;none&quot;</span></span><br><span class="line">BROWSER_ONLY=<span class="string">&quot;no&quot;</span></span><br><span class="line">BOOTPROTO=<span class="string">&quot;none&quot;</span></span><br><span class="line">DEFROUTE=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV4_FAILURE_FATAL=<span class="string">&quot;no&quot;</span></span><br><span class="line">IPV6INIT=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV6_AUTOCONF=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV6_DEFROUTE=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV6_FAILURE_FATAL=<span class="string">&quot;no&quot;</span></span><br><span class="line">IPV6_ADDR_GEN_MODE=<span class="string">&quot;stable-privacy&quot;</span></span><br><span class="line">NAME=<span class="string">&quot;ens33&quot;</span></span><br><span class="line">UUID=<span class="string">&quot;6c020cf7-4c6e-4276-9aa6-0661670da705&quot;</span></span><br><span class="line">DEVICE=<span class="string">&quot;ens33&quot;</span></span><br><span class="line">ONBOOT=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPADDR=<span class="string">&quot;192.168.255.154&quot;</span></span><br><span class="line">PREFIX=<span class="string">&quot;24&quot;</span></span><br><span class="line">GATEWAY=<span class="string">&quot;192.168.255.2&quot;</span></span><br><span class="line">DNS1=<span class="string">&quot;119.29.29.29&quot;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/sysconfig/network-scripts/ifcfg-ens33</span></span><br><span class="line"><span class="comment"># cat /etc/sysconfig/network-scripts/ifcfg-ens33</span></span><br><span class="line"><span class="built_in">TYPE</span>=<span class="string">&quot;Ethernet&quot;</span></span><br><span class="line">PROXY_METHOD=<span class="string">&quot;none&quot;</span></span><br><span class="line">BROWSER_ONLY=<span class="string">&quot;no&quot;</span></span><br><span class="line">BOOTPROTO=<span class="string">&quot;none&quot;</span></span><br><span class="line">DEFROUTE=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV4_FAILURE_FATAL=<span class="string">&quot;no&quot;</span></span><br><span class="line">IPV6INIT=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV6_AUTOCONF=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV6_DEFROUTE=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV6_FAILURE_FATAL=<span class="string">&quot;no&quot;</span></span><br><span class="line">IPV6_ADDR_GEN_MODE=<span class="string">&quot;stable-privacy&quot;</span></span><br><span class="line">NAME=<span class="string">&quot;ens33&quot;</span></span><br><span class="line">UUID=<span class="string">&quot;6c020cf7-4c6e-4276-9aa6-0661670da705&quot;</span></span><br><span class="line">DEVICE=<span class="string">&quot;ens33&quot;</span></span><br><span class="line">ONBOOT=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPADDR=<span class="string">&quot;192.168.255.155&quot;</span></span><br><span class="line">PREFIX=<span class="string">&quot;24&quot;</span></span><br><span class="line">GATEWAY=<span class="string">&quot;192.168.255.2&quot;</span></span><br><span class="line">DNS1=<span class="string">&quot;119.29.29.29&quot;</span></span><br></pre></td></tr></table></figure>





<h3 id="5-5-3-主机名与IP地址解析"><a href="#5-5-3-主机名与IP地址解析" class="headerlink" title="5.5.3 主机名与IP地址解析"></a>5.5.3 主机名与IP地址解析</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/hosts</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">node1</span> ~]<span class="comment"># cat /etc/hosts</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::<span class="number">1</span>         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line"><span class="number">192.168</span>.<span class="number">255.154</span> node1</span><br><span class="line"><span class="number">192.168</span>.<span class="number">255.155</span> node2</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/hosts</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">node2</span> ~]<span class="comment"># cat /etc/hosts</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::<span class="number">1</span>         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line"><span class="number">192.168</span>.<span class="number">255.154</span> node1</span><br><span class="line"><span class="number">192.168</span>.<span class="number">255.155</span> node2</span><br></pre></td></tr></table></figure>



<h3 id="5-5-4-开启内核转发"><a href="#5-5-4-开启内核转发" class="headerlink" title="5.5.4 开启内核转发"></a>5.5.4 开启内核转发</h3><blockquote>
<p>所有Docker Host</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/sysctl.conf</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">node1</span> ~]<span class="comment"># cat /etc/sysctl.conf</span></span><br><span class="line">......</span><br><span class="line">net.ipv4.ip_forward=<span class="number">1</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sysctl -p</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/sysctl.conf</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">node2</span> ~]<span class="comment"># cat /etc/sysctl.conf</span></span><br><span class="line">......</span><br><span class="line">net.ipv4.ip_forward=<span class="number">1</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sysctl -p</span></span><br></pre></td></tr></table></figure>





<h3 id="5-5-5-etcd安装"><a href="#5-5-5-etcd安装" class="headerlink" title="5.5.5 etcd安装"></a>5.5.5 etcd安装</h3><blockquote>
<p>etcd集群</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">node1</span> ~]<span class="comment"># yum -y install etcd</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">node2</span> ~]<span class="comment"># yum -y install etcd</span></span><br></pre></td></tr></table></figure>



<h3 id="5-5-6-etcd配置"><a href="#5-5-6-etcd配置" class="headerlink" title="5.5.6 etcd配置"></a>5.5.6 etcd配置</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/etcd/etcd.conf</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">node1</span> ~]<span class="comment"># cat /etc/etcd/etcd.conf</span></span><br><span class="line"><span class="comment">#[Member]</span></span><br><span class="line"><span class="comment">#ETCD_CORS=&quot;&quot;</span></span><br><span class="line">ETCD_DATA_DIR=<span class="string">&quot;/var/lib/etcd/node1.etcd&quot;</span></span><br><span class="line"><span class="comment">#ETCD_WAL_DIR=&quot;&quot;</span></span><br><span class="line">ETCD_LISTEN_PEER_URLS=<span class="string">&quot;http://0.0.0.0:2380&quot;</span></span><br><span class="line">ETCD_LISTEN_CLIENT_URLS=<span class="string">&quot;http://0.0.0.0:2379,http://0.0.0.0:4001&quot;</span></span><br><span class="line"><span class="comment">#ETCD_MAX_SNAPSHOTS=&quot;5&quot;</span></span><br><span class="line"><span class="comment">#ETCD_MAX_WALS=&quot;5&quot;</span></span><br><span class="line">ETCD_NAME=<span class="string">&quot;node1&quot;</span></span><br><span class="line"><span class="comment">#ETCD_SNAPSHOT_COUNT=&quot;100000&quot;</span></span><br><span class="line"><span class="comment">#ETCD_HEARTBEAT_INTERVAL=&quot;100&quot;</span></span><br><span class="line"><span class="comment">#ETCD_ELECTION_TIMEOUT=&quot;1000&quot;</span></span><br><span class="line"><span class="comment">#ETCD_QUOTA_BACKEND_BYTES=&quot;0&quot;</span></span><br><span class="line"><span class="comment">#ETCD_MAX_REQUEST_BYTES=&quot;1572864&quot;</span></span><br><span class="line"><span class="comment">#ETCD_GRPC_KEEPALIVE_MIN_TIME=&quot;5s&quot;</span></span><br><span class="line"><span class="comment">#ETCD_GRPC_KEEPALIVE_INTERVAL=&quot;2h0m0s&quot;</span></span><br><span class="line"><span class="comment">#ETCD_GRPC_KEEPALIVE_TIMEOUT=&quot;20s&quot;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#[Clustering]</span></span><br><span class="line">ETCD_INITIAL_ADVERTISE_PEER_URLS=<span class="string">&quot;http://192.168.255.154:2380&quot;</span></span><br><span class="line">ETCD_ADVERTISE_CLIENT_URLS=<span class="string">&quot;http://192.168.255.154:2379,http://192.168.255.155:4001&quot;</span></span><br><span class="line"><span class="comment">#ETCD_DISCOVERY=&quot;&quot;</span></span><br><span class="line"><span class="comment">#ETCD_DISCOVERY_FALLBACK=&quot;proxy&quot;</span></span><br><span class="line"><span class="comment">#ETCD_DISCOVERY_PROXY=&quot;&quot;</span></span><br><span class="line"><span class="comment">#ETCD_DISCOVERY_SRV=&quot;&quot;</span></span><br><span class="line">ETCD_INITIAL_CLUSTER=<span class="string">&quot;node1=http://192.168.255.154:2380,node2=http://192.168.255.155:2380&quot;</span></span><br><span class="line"><span class="comment">#ETCD_INITIAL_CLUSTER_TOKEN=&quot;etcd-cluster&quot;</span></span><br><span class="line"><span class="comment">#ETCD_INITIAL_CLUSTER_STATE=&quot;new&quot;</span></span><br><span class="line"><span class="comment">#ETCD_STRICT_RECONFIG_CHECK=&quot;true&quot;</span></span><br><span class="line"><span class="comment">#ETCD_ENABLE_V2=&quot;true&quot;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#[Proxy]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/etcd/etcd.conf</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">node2</span> ~]<span class="comment"># cat /etc/etcd/etcd.conf</span></span><br><span class="line"><span class="comment">#[Member]</span></span><br><span class="line"><span class="comment">#ETCD_CORS=&quot;&quot;</span></span><br><span class="line">ETCD_DATA_DIR=<span class="string">&quot;/var/lib/etcd/node2.etcd&quot;</span></span><br><span class="line"><span class="comment">#ETCD_WAL_DIR=&quot;&quot;</span></span><br><span class="line">ETCD_LISTEN_PEER_URLS=<span class="string">&quot;http://0.0.0.0:2380&quot;</span></span><br><span class="line">ETCD_LISTEN_CLIENT_URLS=<span class="string">&quot;http://0.0.0.0:2379,http://0.0.0.0:4001&quot;</span></span><br><span class="line"><span class="comment">#ETCD_MAX_SNAPSHOTS=&quot;5&quot;</span></span><br><span class="line"><span class="comment">#ETCD_MAX_WALS=&quot;5&quot;</span></span><br><span class="line">ETCD_NAME=<span class="string">&quot;node2&quot;</span></span><br><span class="line"><span class="comment">#ETCD_SNAPSHOT_COUNT=&quot;100000&quot;</span></span><br><span class="line"><span class="comment">#ETCD_HEARTBEAT_INTERVAL=&quot;100&quot;</span></span><br><span class="line"><span class="comment">#ETCD_ELECTION_TIMEOUT=&quot;1000&quot;</span></span><br><span class="line"><span class="comment">#ETCD_QUOTA_BACKEND_BYTES=&quot;0&quot;</span></span><br><span class="line"><span class="comment">#ETCD_MAX_REQUEST_BYTES=&quot;1572864&quot;</span></span><br><span class="line"><span class="comment">#ETCD_GRPC_KEEPALIVE_MIN_TIME=&quot;5s&quot;</span></span><br><span class="line"><span class="comment">#ETCD_GRPC_KEEPALIVE_INTERVAL=&quot;2h0m0s&quot;</span></span><br><span class="line"><span class="comment">#ETCD_GRPC_KEEPALIVE_TIMEOUT=&quot;20s&quot;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#[Clustering]</span></span><br><span class="line">ETCD_INITIAL_ADVERTISE_PEER_URLS=<span class="string">&quot;http://192.168.255.155:2380&quot;</span></span><br><span class="line">ETCD_ADVERTISE_CLIENT_URLS=<span class="string">&quot;http://192.168.255.155:2379,http://192.168.255.155:4001&quot;</span></span><br><span class="line"><span class="comment">#ETCD_DISCOVERY=&quot;&quot;</span></span><br><span class="line"><span class="comment">#ETCD_DISCOVERY_FALLBACK=&quot;proxy&quot;</span></span><br><span class="line"><span class="comment">#ETCD_DISCOVERY_PROXY=&quot;&quot;</span></span><br><span class="line"><span class="comment">#ETCD_DISCOVERY_SRV=&quot;&quot;</span></span><br><span class="line">ETCD_INITIAL_CLUSTER=<span class="string">&quot;node1=http://192.168.255.154:2380,node2=http://192.168.255.155:2380&quot;</span></span><br><span class="line"><span class="comment">#ETCD_INITIAL_CLUSTER_TOKEN=&quot;etcd-cluster&quot;</span></span><br><span class="line"><span class="comment">#ETCD_INITIAL_CLUSTER_STATE=&quot;new&quot;</span></span><br><span class="line"><span class="comment">#ETCD_STRICT_RECONFIG_CHECK=&quot;true&quot;</span></span><br><span class="line"><span class="comment">#ETCD_ENABLE_V2=&quot;true&quot;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#[Proxy]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="5-5-7-启动etcd服务"><a href="#5-5-7-启动etcd服务" class="headerlink" title="5.5.7 启动etcd服务"></a>5.5.7 启动etcd服务</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">node1</span> ~]<span class="comment"># systemctl enable etcd</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">node1</span> ~]<span class="comment"># systemctl start etcd</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">node2</span> ~]<span class="comment"># systemctl enable etcd</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">node2</span> ~]<span class="comment"># systemctl start etcd</span></span><br></pre></td></tr></table></figure>





<h3 id="5-5-8-检查端口状态"><a href="#5-5-8-检查端口状态" class="headerlink" title="5.5.8 检查端口状态"></a>5.5.8 检查端口状态</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># netstat -tnlp | grep -E  &quot;4001|2380&quot;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">输出结果：</span><br><span class="line">tcp6       <span class="number">0</span>      <span class="number">0</span> :::<span class="number">2380</span>                 :::*                    LISTEN      <span class="number">65318</span>/etcd</span><br><span class="line">tcp6       <span class="number">0</span>      <span class="number">0</span> :::<span class="number">4001</span>                 :::*                    LISTEN      <span class="number">65318</span>/etcd</span><br></pre></td></tr></table></figure>



<h3 id="5-5-9-检查etcd集群是否健康"><a href="#5-5-9-检查etcd集群是否健康" class="headerlink" title="5.5.9 检查etcd集群是否健康"></a>5.5.9 检查etcd集群是否健康</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># etcdctl -C http://192.168.255.154:2379 cluster-health</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">输出：</span><br><span class="line">member <span class="number">5</span>be09658727c5574 is healthy: got healthy result from http://<span class="number">192.168</span>.<span class="number">255.154</span>:<span class="number">2379</span></span><br><span class="line">member c48e6c7a65e5ca43 is healthy: got healthy result from http://<span class="number">192.168</span>.<span class="number">255.155</span>:<span class="number">2379</span></span><br><span class="line">cluster is healthy</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># etcdctl member list</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">输出：</span><br><span class="line"><span class="number">5</span>be09658727c5574: name=node1 peerURLs=http://<span class="number">192.168</span>.<span class="number">255.154</span>:<span class="number">2380</span> clientURLs=http://<span class="number">192.168</span>.<span class="number">255.154</span>:<span class="number">2379</span>,http://<span class="number">192.168</span>.<span class="number">255.155</span>:<span class="number">4001</span> isLeader=true</span><br><span class="line">c48e6c7a65e5ca43: name=node2 peerURLs=http://<span class="number">192.168</span>.<span class="number">255.155</span>:<span class="number">2380</span> clientURLs=http://<span class="number">192.168</span>.<span class="number">255.155</span>:<span class="number">2379</span>,http://<span class="number">192.168</span>.<span class="number">255.155</span>:<span class="number">4001</span> isLeader=false</span><br></pre></td></tr></table></figure>





<h2 id="5-6-Flannel部署"><a href="#5-6-Flannel部署" class="headerlink" title="5.6 Flannel部署"></a>5.6 Flannel部署</h2><h3 id="5-6-1-Flannel安装"><a href="#5-6-1-Flannel安装" class="headerlink" title="5.6.1 Flannel安装"></a>5.6.1 Flannel安装</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">node1</span> ~]<span class="comment"># yum -y install flannel</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">node2</span> ~]<span class="comment"># yum -y install flannel</span></span><br></pre></td></tr></table></figure>



<h3 id="5-6-2-修改Flannel配置文件"><a href="#5-6-2-修改Flannel配置文件" class="headerlink" title="5.6.2 修改Flannel配置文件"></a>5.6.2 修改Flannel配置文件</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">node1</span> ~]<span class="comment"># vim /etc/sysconfig/flanneld</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">node1</span> ~]<span class="comment"># cat /etc/sysconfig/flanneld</span></span><br><span class="line"><span class="comment"># Flanneld configuration options</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># etcd url location.  Point this to the server where etcd runs</span></span><br><span class="line">FLANNEL_ETCD_ENDPOINTS=<span class="string">&quot;http://192.168.255.154:2379,http://192.168.255.155:2379&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># etcd config key.  This is the configuration key that flannel queries</span></span><br><span class="line"><span class="comment"># For address range assignment</span></span><br><span class="line">FLANNEL_ETCD_PREFIX=<span class="string">&quot;/atomic.io/network&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Any additional options that you want to pass</span></span><br><span class="line"><span class="comment">#FLANNEL_OPTIONS=&quot;&quot;</span></span><br><span class="line">FLANNEL_OPTIONS=<span class="string">&quot;--logtostderr=false --log_dir=/var/log/ --etcd endpoints=http://192.168.255.154:2379,http://192.168.255.155:2379 --iface=ens33&quot;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">node2</span> ~]<span class="comment"># vim /etc/sysconfig/flanneld</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">node2</span> ~]<span class="comment"># cat /etc/sysconfig/flanneld</span></span><br><span class="line"><span class="comment"># Flanneld configuration options</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># etcd url location.  Point this to the server where etcd runs</span></span><br><span class="line">FLANNEL_ETCD_ENDPOINTS=<span class="string">&quot;http://192.168.255.154:2379,http://192.168.255.155:2379&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># etcd config key.  This is the configuration key that flannel queries</span></span><br><span class="line"><span class="comment"># For address range assignment</span></span><br><span class="line">FLANNEL_ETCD_PREFIX=<span class="string">&quot;/atomic.io/network&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Any additional options that you want to pass</span></span><br><span class="line"><span class="comment">#FLANNEL_OPTIONS=&quot;&quot;</span></span><br><span class="line">FLANNEL_OPTIONS=<span class="string">&quot;--logtostderr=false --log_dir=/var/log/ --etcd-endpoints=http://192.168.255.154:2379,http://192.168.255.155:2379 --iface=ens33&quot;</span></span><br></pre></td></tr></table></figure>



<h3 id="5-6-3-配置etcd中关于flannel的key"><a href="#5-6-3-配置etcd中关于flannel的key" class="headerlink" title="5.6.3 配置etcd中关于flannel的key"></a>5.6.3 配置etcd中关于flannel的key</h3><p>Flannel使用Etcd进行配置，来保证多个Flannel实例之间的配置一致性，所以需要在etcd上进行如下配置（**’/<a href="https://link.zhihu.com/?target=http://atomic.io/network/config">http://atomic.io/network/config</a>**’这个key与上面的/etc/sysconfig/flannel中的配置项FLANNEL_ETCD_PREFIX是相对应的，错误的话启动就会出错）</p>
<blockquote>
<p>该ip网段可以任意设定，随便设定一个网段都可以。容器的ip就是根据这个网段进行自动分配的，ip分配后，容器一般是可以对外联网的（网桥模式，只要Docker Host能上网即可。）</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">node1</span> ~]<span class="comment"># etcdctl mk /atomic.io/network/config &#x27;&#123;&quot;Network&quot;:&quot;172.21.0.0/16&quot;&#125;&#x27;</span></span><br><span class="line">&#123;<span class="string">&quot;Network&quot;</span>:<span class="string">&quot;172.21.0.0/16&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">node1</span> ~]<span class="comment"># etcdctl set /atomic.io/network/config &#x27;&#123;&quot;Network&quot;:&quot;172.21.0.0/16&quot;&#125;&#x27;</span></span><br><span class="line">&#123;<span class="string">&quot;Network&quot;</span>:<span class="string">&quot;172.21.0.0/16&quot;</span>&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">node1</span> ~]<span class="comment"># etcdctl get /atomic.io/network/config</span></span><br><span class="line">&#123;<span class="string">&quot;Network&quot;</span>:<span class="string">&quot;172.21.0.0/16&quot;</span>&#125;</span><br></pre></td></tr></table></figure>





<h3 id="5-6-4-启动Flannel服务"><a href="#5-6-4-启动Flannel服务" class="headerlink" title="5.6.4 启动Flannel服务"></a>5.6.4 启动Flannel服务</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">node1</span> ~]<span class="comment"># systemctl enable flanneld;systemctl start flanneld</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">node2</span> ~]<span class="comment"># systemctl enable flanneld;systemctl start flanneld</span></span><br></pre></td></tr></table></figure>



<h3 id="5-6-5-查看各node中flannel产生的配置信息"><a href="#5-6-5-查看各node中flannel产生的配置信息" class="headerlink" title="5.6.5 查看各node中flannel产生的配置信息"></a>5.6.5 查看各node中flannel产生的配置信息</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">node1</span> ~]<span class="comment"># ls /run/flannel/</span></span><br><span class="line">docker  subnet.env</span><br><span class="line">[<span class="type">root</span>@<span class="type">node1</span> ~]<span class="comment"># cat /run/flannel/subnet.env</span></span><br><span class="line">FLANNEL_NETWORK=<span class="number">172.21</span>.<span class="number">0.0</span>/<span class="number">16</span></span><br><span class="line">FLANNEL_SUBNET=<span class="number">172.21</span>.<span class="number">31.1</span>/<span class="number">24</span></span><br><span class="line">FLANNEL_MTU=<span class="number">1472</span></span><br><span class="line">FLANNEL_IPMASQ=false</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">node1</span> ~]<span class="comment"># ip a s</span></span><br><span class="line">......</span><br><span class="line"><span class="number">5</span>: docker0: &lt;NO<span class="literal">-CARRIER</span>,BROADCAST,MULTICAST,UP&gt; mtu <span class="number">1500</span> qdisc noqueue state DOWN <span class="built_in">group</span> default</span><br><span class="line">    link/ether <span class="number">02</span>:<span class="number">42</span>:<span class="number">63</span>:d1:<span class="number">9</span>e:<span class="number">0</span>b brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet <span class="number">172.17</span>.<span class="number">0.1</span>/<span class="number">16</span> brd <span class="number">172.17</span>.<span class="number">255.255</span> scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"><span class="number">6</span>: flannel0: &lt;POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP&gt; mtu <span class="number">1472</span> qdisc pfifo_fast state UNKNOWN <span class="built_in">group</span> default qlen <span class="number">500</span></span><br><span class="line">    link/none</span><br><span class="line">    inet <span class="number">172.21</span>.<span class="number">31.0</span>/<span class="number">16</span> scope global flannel0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::edfa:d8b0:<span class="number">3351</span>:<span class="number">4126</span>/<span class="number">64</span> scope link flags <span class="number">800</span></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">node2</span> ~]<span class="comment"># ls /run/flannel/</span></span><br><span class="line">docker  subnet.env</span><br><span class="line">[<span class="type">root</span>@<span class="type">node2</span> ~]<span class="comment"># cat /run/flannel/subnet.env</span></span><br><span class="line">FLANNEL_NETWORK=<span class="number">172.21</span>.<span class="number">0.0</span>/<span class="number">16</span></span><br><span class="line">FLANNEL_SUBNET=<span class="number">172.21</span>.<span class="number">55.1</span>/<span class="number">24</span></span><br><span class="line">FLANNEL_MTU=<span class="number">1472</span></span><br><span class="line">FLANNEL_IPMASQ=false</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">node2</span> ~]<span class="comment"># ip a s</span></span><br><span class="line">......</span><br><span class="line"><span class="number">5</span>: docker0: &lt;NO<span class="literal">-CARRIER</span>,BROADCAST,MULTICAST,UP&gt; mtu <span class="number">1500</span> qdisc noqueue state DOWN <span class="built_in">group</span> default</span><br><span class="line">    link/ether <span class="number">02</span>:<span class="number">42</span>:e1:<span class="number">16</span>:<span class="number">68</span>:de brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet <span class="number">172.17</span>.<span class="number">0.1</span>/<span class="number">16</span> brd <span class="number">172.17</span>.<span class="number">255.255</span> scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"><span class="number">6</span>: flannel0: &lt;POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP&gt; mtu <span class="number">1472</span> qdisc pfifo_fast state UNKNOWN <span class="built_in">group</span> default qlen <span class="number">500</span></span><br><span class="line">    link/none</span><br><span class="line">    inet <span class="number">172.21</span>.<span class="number">55.0</span>/<span class="number">16</span> scope global flannel0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::f895:<span class="number">9</span>b5a:<span class="number">92</span>b1:<span class="number">78</span>aa/<span class="number">64</span> scope link flags <span class="number">800</span></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>







<h2 id="5-7-Docker网络配置"><a href="#5-7-Docker网络配置" class="headerlink" title="5.7 Docker网络配置"></a>5.7 Docker网络配置</h2><blockquote>
<p>–bip=172.21.31.1/24 –ip-masq=true –mtu=1472 放置于启动程序后</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">node1</span> ~]<span class="comment"># vim /usr/lib/systemd/system/docker.service</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">node1</span> ~]<span class="comment"># cat /usr/lib/systemd/system/docker.service</span></span><br><span class="line">[<span class="type">Unit</span>]</span><br><span class="line">Description=Docker Application Container Engine</span><br><span class="line">Documentation=https://docs.docker.com</span><br><span class="line">After=network<span class="literal">-online</span>.target firewalld.service containerd.service</span><br><span class="line">Wants=network<span class="literal">-online</span>.target</span><br><span class="line">Requires=docker.socket containerd.service</span><br><span class="line"></span><br><span class="line">[<span class="type">Service</span>]</span><br><span class="line"><span class="built_in">Type</span>=notify</span><br><span class="line"><span class="comment"># the default is not to use systemd for cgroups because the delegate issues still</span></span><br><span class="line"><span class="comment"># exists and systemd currently does not support the cgroup feature set required</span></span><br><span class="line"><span class="comment"># for containers run by docker</span></span><br><span class="line">ExecStart=/usr/bin/dockerd <span class="literal">-H</span> fd:// -<span class="literal">-containerd</span>=/run/containerd/containerd.sock -<span class="literal">-bip</span>=<span class="number">172.21</span>.<span class="number">31.1</span>/<span class="number">24</span> -<span class="literal">-ip</span><span class="literal">-masq</span>=true -<span class="literal">-mtu</span>=<span class="number">1472</span></span><br><span class="line">ExecReload=/bin/<span class="built_in">kill</span> <span class="literal">-s</span> HUP <span class="variable">$MAINPID</span></span><br><span class="line">TimeoutSec=<span class="number">0</span></span><br><span class="line">RestartSec=<span class="number">2</span></span><br><span class="line">Restart=always</span><br><span class="line"></span><br><span class="line"><span class="comment"># Note that StartLimit* options were moved from &quot;Service&quot; to &quot;Unit&quot; in systemd 229.</span></span><br><span class="line"><span class="comment"># Both the old, and new location are accepted by systemd 229 and up, so using the old location</span></span><br><span class="line"><span class="comment"># to make them work for either version of systemd.</span></span><br><span class="line">StartLimitBurst=<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Note that StartLimitInterval was renamed to StartLimitIntervalSec in systemd 230.</span></span><br><span class="line"><span class="comment"># Both the old, and new name are accepted by systemd 230 and up, so using the old name to make</span></span><br><span class="line"><span class="comment"># this option work for either version of systemd.</span></span><br><span class="line">StartLimitInterval=<span class="number">60</span>s</span><br><span class="line"></span><br><span class="line"><span class="comment"># Having non-zero Limit*s causes performance problems due to accounting overhead</span></span><br><span class="line"><span class="comment"># in the kernel. We recommend using cgroups to do container-local accounting.</span></span><br><span class="line">LimitNOFILE=infinity</span><br><span class="line">LimitNPROC=infinity</span><br><span class="line">LimitCORE=infinity</span><br><span class="line"></span><br><span class="line"><span class="comment"># Comment TasksMax if your systemd version does not support it.</span></span><br><span class="line"><span class="comment"># Only systemd 226 and above support this option.</span></span><br><span class="line">TasksMax=infinity</span><br><span class="line"></span><br><span class="line"><span class="comment"># set delegate yes so that systemd does not reset the cgroups of docker containers</span></span><br><span class="line">Delegate=yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># kill only the docker process, not all processes in the cgroup</span></span><br><span class="line">KillMode=<span class="keyword">process</span></span><br><span class="line">OOMScoreAdjust=<span class="literal">-500</span></span><br><span class="line"></span><br><span class="line">[<span class="type">Install</span>]</span><br><span class="line">WantedBy=multi<span class="literal">-user</span>.target</span><br></pre></td></tr></table></figure>





<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">node2</span> ~]<span class="comment"># vim /usr/lib/systemd/system/docker.service</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">node2</span> ~]<span class="comment"># cat /usr/lib/systemd/system/docker.service</span></span><br><span class="line">[<span class="type">Unit</span>]</span><br><span class="line">Description=Docker Application Container Engine</span><br><span class="line">Documentation=https://docs.docker.com</span><br><span class="line">After=network<span class="literal">-online</span>.target firewalld.service containerd.service</span><br><span class="line">Wants=network<span class="literal">-online</span>.target</span><br><span class="line">Requires=docker.socket containerd.service</span><br><span class="line"></span><br><span class="line">[<span class="type">Service</span>]</span><br><span class="line"><span class="built_in">Type</span>=notify</span><br><span class="line"><span class="comment"># the default is not to use systemd for cgroups because the delegate issues still</span></span><br><span class="line"><span class="comment"># exists and systemd currently does not support the cgroup feature set required</span></span><br><span class="line"><span class="comment"># for containers run by docker</span></span><br><span class="line">ExecStart=/usr/bin/dockerd <span class="literal">-H</span> fd:// -<span class="literal">-containerd</span>=/run/containerd/containerd.sock -<span class="literal">-bip</span>=<span class="number">172.21</span>.<span class="number">55.1</span>/<span class="number">24</span> -<span class="literal">-ip</span><span class="literal">-masq</span>=true -<span class="literal">-mtu</span>=<span class="number">1472</span></span><br><span class="line">ExecReload=/bin/<span class="built_in">kill</span> <span class="literal">-s</span> HUP <span class="variable">$MAINPID</span></span><br><span class="line">TimeoutSec=<span class="number">0</span></span><br><span class="line">RestartSec=<span class="number">2</span></span><br><span class="line">Restart=always</span><br><span class="line"></span><br><span class="line"><span class="comment"># Note that StartLimit* options were moved from &quot;Service&quot; to &quot;Unit&quot; in systemd 229.</span></span><br><span class="line"><span class="comment"># Both the old, and new location are accepted by systemd 229 and up, so using the old location</span></span><br><span class="line"><span class="comment"># to make them work for either version of systemd.</span></span><br><span class="line">StartLimitBurst=<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Note that StartLimitInterval was renamed to StartLimitIntervalSec in systemd 230.</span></span><br><span class="line"><span class="comment"># Both the old, and new name are accepted by systemd 230 and up, so using the old name to make</span></span><br><span class="line"><span class="comment"># this option work for either version of systemd.</span></span><br><span class="line">StartLimitInterval=<span class="number">60</span>s</span><br><span class="line"></span><br><span class="line"><span class="comment"># Having non-zero Limit*s causes performance problems due to accounting overhead</span></span><br><span class="line"><span class="comment"># in the kernel. We recommend using cgroups to do container-local accounting.</span></span><br><span class="line">LimitNOFILE=infinity</span><br><span class="line">LimitNPROC=infinity</span><br><span class="line">LimitCORE=infinity</span><br><span class="line"></span><br><span class="line"><span class="comment"># Comment TasksMax if your systemd version does not support it.</span></span><br><span class="line"><span class="comment"># Only systemd 226 and above support this option.</span></span><br><span class="line">TasksMax=infinity</span><br><span class="line"></span><br><span class="line"><span class="comment"># set delegate yes so that systemd does not reset the cgroups of docker containers</span></span><br><span class="line">Delegate=yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># kill only the docker process, not all processes in the cgroup</span></span><br><span class="line">KillMode=<span class="keyword">process</span></span><br><span class="line">OOMScoreAdjust=<span class="literal">-500</span></span><br><span class="line"></span><br><span class="line">[<span class="type">Install</span>]</span><br><span class="line">WantedBy=multi<span class="literal">-user</span>.target</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">node1</span> ~]<span class="comment"># systemctl daemon-reload</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">node1</span> ~]<span class="comment"># systemctl restart docker</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">node1</span> ~]<span class="comment"># ip a s</span></span><br><span class="line">......</span><br><span class="line"><span class="number">5</span>: docker0: &lt;NO<span class="literal">-CARRIER</span>,BROADCAST,MULTICAST,UP&gt; mtu <span class="number">1500</span> qdisc noqueue state DOWN <span class="built_in">group</span> default</span><br><span class="line">    link/ether <span class="number">02</span>:<span class="number">42</span>:<span class="number">63</span>:d1:<span class="number">9</span>e:<span class="number">0</span>b brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet <span class="number">172.21</span>.<span class="number">31.1</span>/<span class="number">24</span> brd <span class="number">172.21</span>.<span class="number">31.255</span> scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"><span class="number">6</span>: flannel0: &lt;POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP&gt; mtu <span class="number">1472</span> qdisc pfifo_fast state UNKNOWN <span class="built_in">group</span> default qlen <span class="number">500</span></span><br><span class="line">    link/none</span><br><span class="line">    inet <span class="number">172.21</span>.<span class="number">31.0</span>/<span class="number">16</span> scope global flannel0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::edfa:d8b0:<span class="number">3351</span>:<span class="number">4126</span>/<span class="number">64</span> scope link flags <span class="number">800</span></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>





<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">node2</span> ~]<span class="comment"># systemctl daemon-reload</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">node2</span> ~]<span class="comment"># systemctl restart docker</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">node2</span> ~]<span class="comment"># ip a s</span></span><br><span class="line">......</span><br><span class="line"><span class="number">5</span>: docker0: &lt;NO<span class="literal">-CARRIER</span>,BROADCAST,MULTICAST,UP&gt; mtu <span class="number">1500</span> qdisc noqueue state DOWN <span class="built_in">group</span> default</span><br><span class="line">    link/ether <span class="number">02</span>:<span class="number">42</span>:e1:<span class="number">16</span>:<span class="number">68</span>:de brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet <span class="number">172.21</span>.<span class="number">55.1</span>/<span class="number">24</span> brd <span class="number">172.21</span>.<span class="number">55.255</span> scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"><span class="number">6</span>: flannel0: &lt;POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP&gt; mtu <span class="number">1472</span> qdisc pfifo_fast state UNKNOWN <span class="built_in">group</span> default qlen <span class="number">500</span></span><br><span class="line">    link/none</span><br><span class="line">    inet <span class="number">172.21</span>.<span class="number">55.0</span>/<span class="number">16</span> scope global flannel0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::f895:<span class="number">9</span>b5a:<span class="number">92</span>b1:<span class="number">78</span>aa/<span class="number">64</span> scope link flags <span class="number">800</span></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>





<h2 id="5-8-跨Docker-Host容器间通信验证"><a href="#5-8-跨Docker-Host容器间通信验证" class="headerlink" title="5.8 跨Docker Host容器间通信验证"></a>5.8 跨Docker Host容器间通信验证</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">node1</span> ~]<span class="comment"># docker run -it --rm busybox:latest</span></span><br><span class="line"></span><br><span class="line">/ <span class="comment"># ifconfig</span></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr <span class="number">02</span>:<span class="number">42</span>:<span class="built_in">AC</span>:<span class="number">15</span>:<span class="number">1</span>F:<span class="number">02</span></span><br><span class="line">          inet addr:<span class="number">172.21</span>.<span class="number">31.2</span>  Bcast:<span class="number">172.21</span>.<span class="number">31.255</span>  Mask:<span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:<span class="number">1472</span>  Metric:<span class="number">1</span></span><br><span class="line">          RX packets:<span class="number">21</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> frame:<span class="number">0</span></span><br><span class="line">          TX packets:<span class="number">0</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> carrier:<span class="number">0</span></span><br><span class="line">          collisions:<span class="number">0</span> txqueuelen:<span class="number">0</span></span><br><span class="line">          RX bytes:<span class="number">2424</span> (<span class="number">2.3</span> KiB)  TX bytes:<span class="number">0</span> (<span class="number">0.0</span> B)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback</span><br><span class="line">          inet addr:<span class="number">127.0</span>.<span class="number">0.1</span>  Mask:<span class="number">255.0</span>.<span class="number">0.0</span></span><br><span class="line">          UP LOOPBACK RUNNING  MTU:<span class="number">65536</span>  Metric:<span class="number">1</span></span><br><span class="line">          RX packets:<span class="number">0</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> frame:<span class="number">0</span></span><br><span class="line">          TX packets:<span class="number">0</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> carrier:<span class="number">0</span></span><br><span class="line">          collisions:<span class="number">0</span> txqueuelen:<span class="number">1000</span></span><br><span class="line">          RX bytes:<span class="number">0</span> (<span class="number">0.0</span> B)  TX bytes:<span class="number">0</span> (<span class="number">0.0</span> B)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/ <span class="comment"># ping 172.21.55.2</span></span><br><span class="line">PING <span class="number">172.21</span>.<span class="number">55.2</span> (<span class="number">172.21</span>.<span class="number">55.2</span>): <span class="number">56</span> <span class="keyword">data</span> bytes</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">172.21</span>.<span class="number">55.2</span>: seq=<span class="number">0</span> ttl=<span class="number">60</span> time=<span class="number">2.141</span> ms</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">172.21</span>.<span class="number">55.2</span>: seq=<span class="number">1</span> ttl=<span class="number">60</span> time=<span class="number">1.219</span> ms</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">172.21</span>.<span class="number">55.2</span>: seq=<span class="number">2</span> ttl=<span class="number">60</span> time=<span class="number">0.730</span> ms</span><br><span class="line">^C</span><br><span class="line">--- <span class="number">172.21</span>.<span class="number">55.2</span> ping statistics ---</span><br><span class="line"><span class="number">3</span> packets transmitted, <span class="number">3</span> packets received, <span class="number">0</span>% packet loss</span><br><span class="line">round<span class="literal">-trip</span> min/avg/max = <span class="number">0.730</span>/<span class="number">1.363</span>/<span class="number">2.141</span> ms</span><br></pre></td></tr></table></figure>





<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">node2</span> ~]<span class="comment"># docker run -it --rm busybox:latest</span></span><br><span class="line"></span><br><span class="line">/ <span class="comment"># ifconfig</span></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr <span class="number">02</span>:<span class="number">42</span>:<span class="built_in">AC</span>:<span class="number">15</span>:<span class="number">37</span>:<span class="number">02</span></span><br><span class="line">          inet addr:<span class="number">172.21</span>.<span class="number">55.2</span>  Bcast:<span class="number">172.21</span>.<span class="number">55.255</span>  Mask:<span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:<span class="number">1472</span>  Metric:<span class="number">1</span></span><br><span class="line">          RX packets:<span class="number">19</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> frame:<span class="number">0</span></span><br><span class="line">          TX packets:<span class="number">0</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> carrier:<span class="number">0</span></span><br><span class="line">          collisions:<span class="number">0</span> txqueuelen:<span class="number">0</span></span><br><span class="line">          RX bytes:<span class="number">2246</span> (<span class="number">2.1</span> KiB)  TX bytes:<span class="number">0</span> (<span class="number">0.0</span> B)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback</span><br><span class="line">          inet addr:<span class="number">127.0</span>.<span class="number">0.1</span>  Mask:<span class="number">255.0</span>.<span class="number">0.0</span></span><br><span class="line">          UP LOOPBACK RUNNING  MTU:<span class="number">65536</span>  Metric:<span class="number">1</span></span><br><span class="line">          RX packets:<span class="number">0</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> frame:<span class="number">0</span></span><br><span class="line">          TX packets:<span class="number">0</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> carrier:<span class="number">0</span></span><br><span class="line">          collisions:<span class="number">0</span> txqueuelen:<span class="number">1000</span></span><br><span class="line">          RX bytes:<span class="number">0</span> (<span class="number">0.0</span> B)  TX bytes:<span class="number">0</span> (<span class="number">0.0</span> B)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/ <span class="comment"># ping 172.21.31.2</span></span><br><span class="line">PING <span class="number">172.21</span>.<span class="number">31.2</span> (<span class="number">172.21</span>.<span class="number">31.2</span>): <span class="number">56</span> <span class="keyword">data</span> bytes</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">172.21</span>.<span class="number">31.2</span>: seq=<span class="number">0</span> ttl=<span class="number">60</span> time=<span class="number">1.286</span> ms</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">172.21</span>.<span class="number">31.2</span>: seq=<span class="number">1</span> ttl=<span class="number">60</span> time=<span class="number">0.552</span> ms</span><br><span class="line">^C</span><br><span class="line">--- <span class="number">172.21</span>.<span class="number">31.2</span> ping statistics ---</span><br><span class="line"><span class="number">2</span> packets transmitted, <span class="number">2</span> packets received, <span class="number">0</span>% packet loss</span><br><span class="line">round<span class="literal">-trip</span> min/avg/max = <span class="number">0.552</span>/<span class="number">0.919</span>/<span class="number">1.286</span> ms</span><br><span class="line"></span><br></pre></td></tr></table></figure>

























]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker容器数据持久化存储机制</title>
    <url>/2023/08/09/%E4%BA%91%E5%8E%9F%E7%94%9F/Docker/Docker%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%98%E5%82%A8%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="一、Docker容器数据持久化存储介绍"><a href="#一、Docker容器数据持久化存储介绍" class="headerlink" title="一、Docker容器数据持久化存储介绍"></a>一、Docker容器数据持久化存储介绍</h1><ul>
<li>物理机或虚拟机数据持久化存储<ul>
<li>由于物理机或虚拟机本身就拥有大容量的磁盘，所以可以直接把数据存储在物理机或虚拟机本地文件系统中，亦或者也可以通过使用额外的存储系统（NFS、GlusterFS、Ceph等）来完成数据持久化存储。</li>
</ul>
</li>
</ul>
<ul>
<li>Docker容器数据持久化存储<ul>
<li>由于Docker容器是由容器镜像生成的，所以一般容器镜像中包含什么文件或目录，在容器启动后，我们依旧可以看到相同的文件或目录。</li>
<li>由于Docker容器属于“用后即焚”型计算资源，因此Docker容器不适合做数据持久化存储</li>
</ul>
</li>
</ul>
<h1 id="二、Docker容器数据持久化存储方式"><a href="#二、Docker容器数据持久化存储方式" class="headerlink" title="二、Docker容器数据持久化存储方式"></a>二、Docker容器数据持久化存储方式</h1><p>Docker提供三种方式将数据从宿主机挂载到容器中：</p>
<ul>
<li>docker run -v<ul>
<li>运行容器时，直接挂载本地目录至容器中</li>
</ul>
</li>
<li>volumes<ul>
<li>Docker管理宿主机文件系统的一部分(/var/lib/docker/volumes)</li>
<li>是Docker默认存储数据方式</li>
</ul>
</li>
<li>bind mounts<ul>
<li>将宿主机上的任意位置文件或目录挂载到容器中</li>
</ul>
</li>
</ul>
<h1 id="三、Docker容器数据持久化存储方式应用案例演示"><a href="#三、Docker容器数据持久化存储方式应用案例演示" class="headerlink" title="三、Docker容器数据持久化存储方式应用案例演示"></a>三、Docker容器数据持久化存储方式应用案例演示</h1><h2 id="3-1-docker-run-v"><a href="#3-1-docker-run-v" class="headerlink" title="3.1 docker run -v"></a>3.1 docker run -v</h2><h3 id="3-1-1-未挂载本地目录"><a href="#3-1-1-未挂载本地目录" class="headerlink" title="3.1.1 未挂载本地目录"></a>3.1.1 未挂载本地目录</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">运行一个容器，未挂载本地目录</span><br><span class="line"><span class="comment"># docker run -d --name web1 nginx:latest</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS     NAMES</span><br><span class="line">c4ad9f2c15fa   nginx:latest   <span class="string">&quot;/docker-entrypoint.…&quot;</span>   <span class="number">46</span> seconds ago   Up <span class="number">44</span> seconds   <span class="number">80</span>/tcp    web1</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">使用<span class="built_in">curl</span>命令访问容器</span><br><span class="line"><span class="comment"># curl http://172.17.0.2</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">html &#123; color<span class="literal">-scheme</span>: light dark; &#125;</span><br><span class="line">body &#123; width: <span class="number">35</span>em; margin: <span class="number">0</span> auto;</span><br><span class="line">font<span class="literal">-family</span>: Tahoma, Verdana, Arial, sans<span class="literal">-serif</span>; &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;<span class="keyword">If</span> you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;<span class="keyword">For</span> online documentation and support please refer to</span><br><span class="line">&lt;a href=<span class="string">&quot;http://nginx.org/&quot;</span>&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href=<span class="string">&quot;http://nginx.com/&quot;</span>&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you <span class="keyword">for</span> <span class="keyword">using</span> nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">查看容器中/usr/share/nginx/html目录中目录或子目录</span><br><span class="line"><span class="comment"># docker exec web ls /usr/share/nginx/html</span></span><br><span class="line"><span class="number">50</span>x.html</span><br><span class="line">index.html</span><br></pre></td></tr></table></figure>



<h3 id="3-1-2-挂载本地目录"><a href="#3-1-2-挂载本地目录" class="headerlink" title="3.1.2 挂载本地目录"></a>3.1.2 挂载本地目录</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">创建本地目录</span><br><span class="line"><span class="comment"># mkdir /opt/wwwroot</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">向本地目录中添加index.html文件</span><br><span class="line"><span class="comment"># echo &#x27;kubelixiang&#x27; &gt; /opt/wwwroot/index.html</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">运行web2容器，把/opt/wwwroot目录挂载到/usr/share/nginx/html目录中</span><br><span class="line"><span class="comment"># docker run -d --name web2 -v /opt/wwwroot/:/usr/share/nginx/html/ nginx:latest</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">查看容器IP地址</span><br><span class="line"><span class="comment"># docker inspect web2</span></span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"> <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;172.17.0.3&quot;</span>,</span><br><span class="line"> ......</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">使用<span class="built_in">curl</span>命令访问容器</span><br><span class="line"><span class="comment"># curl http://172.17.0.3</span></span><br><span class="line">kubelixiang</span><br></pre></td></tr></table></figure>



<h3 id="3-1-3-未创建本地目录"><a href="#3-1-3-未创建本地目录" class="headerlink" title="3.1.3 未创建本地目录"></a>3.1.3 未创建本地目录</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">运行web3容器，挂载未创建的本地目录，启动容器时将自动创建本地目录</span><br><span class="line"><span class="comment"># docker run -d --name web3 -v /opt/web3root/:/usr/share/nginx/html/ nginx:latest</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">往自动创建的目录中添加一个index.html文件</span><br><span class="line"><span class="comment"># echo &quot;kubelixiang web3&quot; &gt; /opt/web3root/index.html</span></span><br></pre></td></tr></table></figure>





<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">在容器中执行查看文件命令</span><br><span class="line"><span class="comment"># docker exec web3 cat /usr/share/nginx/html/index.html</span></span><br><span class="line">kubelixiang web3</span><br></pre></td></tr></table></figure>





<h2 id="3-2-volumes"><a href="#3-2-volumes" class="headerlink" title="3.2 volumes"></a>3.2 volumes</h2><h3 id="3-2-1-创建数据卷"><a href="#3-2-1-创建数据卷" class="headerlink" title="3.2.1 创建数据卷"></a>3.2.1 创建数据卷</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">创建一个名称为nginx<span class="literal">-vol</span>的数据卷</span><br><span class="line"><span class="comment"># docker volume create nginx-vol</span></span><br><span class="line">nginx<span class="literal">-vol</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">确认数据卷创建后的位置</span><br><span class="line"><span class="comment"># ls /var/lib/docker/volumes/</span></span><br><span class="line">backingFsBlockDev  metadata.db  nginx<span class="literal">-vol</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">查看已经创建数据卷</span><br><span class="line"><span class="comment"># docker volume ls</span></span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line">local     nginx<span class="literal">-vol</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">查看数据卷详细信息</span><br><span class="line"><span class="comment"># docker volume inspect nginx-vol</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;CreatedAt&quot;</span>: <span class="string">&quot;2022-02-08T14:36:16+08:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;Mountpoint&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/nginx-vol/_data&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;nginx-vol&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>





<h3 id="3-2-2-使用数据卷"><a href="#3-2-2-使用数据卷" class="headerlink" title="3.2.2 使用数据卷"></a>3.2.2 使用数据卷</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">运行web4容器，使用-<span class="literal">-mount</span>选项，实现数据卷挂载</span><br><span class="line"><span class="comment"># docker run -d --name web4 --mount src=nginx-vol,dst=/usr/share/nginx/html nginx:latest</span></span><br></pre></td></tr></table></figure>



<p>或</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">运行web4容器，使用<span class="literal">-v</span>选项，实现数据卷挂载</span><br><span class="line"><span class="comment"># docker run -d --name web4 -v nginx-vol:/usr/share/nginx/html/ nginx:latest</span></span><br></pre></td></tr></table></figure>





<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">查看容器运行后数据卷中文件或子目录</span><br><span class="line"><span class="comment"># ls /var/lib/docker/volumes/nginx-vol/_data/</span></span><br><span class="line"><span class="number">50</span>x.html  index.html</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">使用<span class="built_in">curl</span>命令访问容器</span><br><span class="line"><span class="comment"># curl http://172.17.0.2</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">html &#123; color<span class="literal">-scheme</span>: light dark; &#125;</span><br><span class="line">body &#123; width: <span class="number">35</span>em; margin: <span class="number">0</span> auto;</span><br><span class="line">font<span class="literal">-family</span>: Tahoma, Verdana, Arial, sans<span class="literal">-serif</span>; &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;<span class="keyword">If</span> you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;<span class="keyword">For</span> online documentation and support please refer to</span><br><span class="line">&lt;a href=<span class="string">&quot;http://nginx.org/&quot;</span>&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href=<span class="string">&quot;http://nginx.com/&quot;</span>&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you <span class="keyword">for</span> <span class="keyword">using</span> nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">修改index.html文件内容</span><br><span class="line"><span class="comment"># echo &quot;web4&quot; &gt; /var/lib/docker/volumes/nginx-vol/_data/index.html</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">再次使用<span class="built_in">curl</span>命令访问容器</span><br><span class="line"><span class="comment"># curl http://172.17.0.2</span></span><br><span class="line">web4</span><br></pre></td></tr></table></figure>





<h2 id="3-3-bind-mounts"><a href="#3-3-bind-mounts" class="headerlink" title="3.3 bind mounts"></a>3.3 bind mounts</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">创建用于容器挂载的目录web5root</span><br><span class="line"><span class="comment"># mkdir /opt/web5root</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">运行web5容器并使用bind <span class="built_in">mount</span>方法实现本地任意目录挂载</span><br><span class="line"><span class="comment"># docker run -d --name web5 --mount type=bind,src=/opt/web5root,dst=/usr/share/nginx/html nginx:latest</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">查看已挂载目录，里面没有任何数据</span><br><span class="line"><span class="comment"># ls /opt/web5root/</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">添加内容至/opt/web5root/index.html中</span><br><span class="line"><span class="comment"># echo &quot;web5&quot; &gt; /opt/web5root/index.html</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">使用<span class="built_in">curl</span>命令访问容器</span><br><span class="line"><span class="comment"># curl http://172.17.0.3</span></span><br><span class="line">web5</span><br></pre></td></tr></table></figure>




]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker容器服务编排利器Docker Compose</title>
    <url>/2023/08/13/%E4%BA%91%E5%8E%9F%E7%94%9F/Docker/Docker%E5%AE%B9%E5%99%A8%E6%9C%8D%E5%8A%A1%E7%BC%96%E6%8E%92%E5%88%A9%E5%99%A8Docker%20Compose/</url>
    <content><![CDATA[<h1 id="一、使用Docker-Compose必要性及定义"><a href="#一、使用Docker-Compose必要性及定义" class="headerlink" title="一、使用Docker Compose必要性及定义"></a>一、使用Docker Compose必要性及定义</h1><p>用容器运行一个服务,需要使用<code>docker run</code>命令。但如果我要运行多个服务呢?</p>
<p>假设我要运行一个web服务,还要运行一个db服务,那么是用一个容器运行,还是用多个容器运行呢?</p>
<p>一个容器运行多个服务会造成镜像的复杂度提高,<strong>docker倾向于一个容器运行一个应用</strong>。</p>
<p>那么复杂的架构就会需要很多的容器,并且需要它们之间有关联(容器之间的依赖和连接)就更复杂了。</p>
<p>这个复杂的问题需要解决,这就涉及到了**==容器编排==**的问题了。</p>
<ul>
<li>Compose<ul>
<li>编排<ul>
<li>是对多个容器进行启动和管理的方法</li>
<li>例如：LNMT，先启动MySQL,再启动Tomcat，最后启动Nginx</li>
</ul>
</li>
</ul>
</li>
<li>服务架构的演进<ul>
<li>单体服务架构</li>
<li>分布式服务架构</li>
<li>微服务架构</li>
<li>超微服务架构</li>
</ul>
</li>
<li>容器编排工具<ul>
<li>docker machine<ul>
<li>在虚拟机中部署docker容器引擎的工具</li>
</ul>
</li>
<li>docker compose<ul>
<li>是一个用于定义和运行多容器Docker的应用程序工具</li>
</ul>
</li>
<li>docker swarm<ul>
<li>是Docker Host主机批量管理及资源调度管理工具</li>
</ul>
</li>
<li>mesos+marathon<ul>
<li>mesos 对计算机计算资源进行管理和调度</li>
<li>marathon 服务发现及负载均衡的功能</li>
</ul>
</li>
<li>kubernetes<ul>
<li>google开源的容器编排工具</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="二、Docker-Compose应用参考资料"><a href="#二、Docker-Compose应用参考资料" class="headerlink" title="二、Docker Compose应用参考资料"></a>二、Docker Compose应用参考资料</h1><ul>
<li>网址<ul>
<li><a href="https://docs.docker.com/compose/">https://docs.docker.com/compose/</a></li>
</ul>
</li>
</ul>
<p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E6%9C%8D%E5%8A%A1%E7%BC%96%E6%8E%92%E5%88%A9%E5%99%A8DockerCompose%E5%BA%94%E7%94%A8%E5%AE%9E%E6%88%98.assets/image-20220215214445753.png" alt="image-20220215214445753"></p>
<ul>
<li>yaml格式<ul>
<li><a href="https://yaml.org/">https://yaml.org/</a></li>
</ul>
</li>
</ul>
<h1 id="三、Docker-Compose应用最佳实践步骤"><a href="#三、Docker-Compose应用最佳实践步骤" class="headerlink" title="三、Docker Compose应用最佳实践步骤"></a>三、Docker Compose应用最佳实践步骤</h1><h2 id="3-1-概念"><a href="#3-1-概念" class="headerlink" title="3.1 概念"></a>3.1 概念</h2><ul>
<li>工程（project）</li>
<li>服务 (Service)</li>
<li>容器 (Container)</li>
</ul>
<h2 id="3-2-步骤"><a href="#3-2-步骤" class="headerlink" title="3.2 步骤"></a>3.2 步骤</h2><p>1.定义应用的Dockerfile文件，为了anywhere进行构建。</p>
<p>2.使用docker-compose.yaml定义一套服务，这套服务可以一起在一个隔离环境中运行。</p>
<p>3.使用docker-compose up就可以启动整套服务。</p>
<h1 id="四、Docker-Compose安装"><a href="#四、Docker-Compose安装" class="headerlink" title="四、Docker Compose安装"></a>四、Docker Compose安装</h1><p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E6%9C%8D%E5%8A%A1%E7%BC%96%E6%8E%92%E5%88%A9%E5%99%A8DockerCompose%E5%BA%94%E7%94%A8%E5%AE%9E%E6%88%98.assets/image-20220215215146472.png" alt="image-20220215215146472"></p>
<p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E6%9C%8D%E5%8A%A1%E7%BC%96%E6%8E%92%E5%88%A9%E5%99%A8DockerCompose%E5%BA%94%E7%94%A8%E5%AE%9E%E6%88%98.assets/image-20220215215216047.png" alt="image-20220215215216047"></p>
<p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E6%9C%8D%E5%8A%A1%E7%BC%96%E6%8E%92%E5%88%A9%E5%99%A8DockerCompose%E5%BA%94%E7%94%A8%E5%AE%9E%E6%88%98.assets/image-20220215215239151.png" alt="image-20220215215239151"></p>
<p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E6%9C%8D%E5%8A%A1%E7%BC%96%E6%8E%92%E5%88%A9%E5%99%A8DockerCompose%E5%BA%94%E7%94%A8%E5%AE%9E%E6%88%98.assets/image-20220215215359944.png" alt="image-20220215215359944"></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wget https://github.com/docker/compose/releases/download/v2.2.3/docker-compose-linux-x86_64</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mv docker-compose-linux-x86_64 /usr/bin/docker-compose</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># chmod +x /usr/bin/docker-compose</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker-compose version</span></span><br><span class="line">Docker Compose version v2.<span class="number">2.3</span></span><br></pre></td></tr></table></figure>



<h1 id="五、Docker-Compose应用案例"><a href="#五、Docker-Compose应用案例" class="headerlink" title="五、Docker Compose应用案例"></a>五、Docker Compose应用案例</h1><blockquote>
<p>运行Python语言开发的网站</p>
</blockquote>
<h2 id="5-1-网站文件准备"><a href="#5-1-网站文件准备" class="headerlink" title="5.1 网站文件准备"></a>5.1 网站文件准备</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkdir flaskproject</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># cd flaskproject/</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">flaskproject</span>]<span class="comment">#</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">flaskproject</span>]<span class="comment"># vim app.py</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">flaskproject</span>]<span class="comment"># cat app.py</span></span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">import redis</span><br><span class="line">from flask import Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">cache = redis.Redis(host=<span class="string">&#x27;redis&#x27;</span>, port=<span class="number">6379</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_hit_count():</span><br><span class="line">    retries = <span class="number">5</span></span><br><span class="line">    <span class="keyword">while</span> True:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> cache.incr(<span class="string">&#x27;hits&#x27;</span>)</span><br><span class="line">        except redis.exceptions.ConnectionError as exc:</span><br><span class="line">            <span class="keyword">if</span> retries == <span class="number">0</span>:</span><br><span class="line">                raise exc</span><br><span class="line">            retries -= <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">def hello():</span><br><span class="line">    count = get_hit_count()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World! I have been seen &#123;&#125; times.\n&#x27;</span>.format(count)</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">flaskproject</span>]<span class="comment"># vim requirements.txt</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">flaskproject</span>]<span class="comment"># cat requirements.txt</span></span><br><span class="line">flask</span><br><span class="line">redis</span><br></pre></td></tr></table></figure>





<h2 id="5-2-Dockerfile文件准备"><a href="#5-2-Dockerfile文件准备" class="headerlink" title="5.2 Dockerfile文件准备"></a>5.2 Dockerfile文件准备</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">flaskproject</span>]<span class="comment"># vim Dockerfile</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">flaskproject</span>]<span class="comment"># cat Dockerfile</span></span><br><span class="line">FROM python:<span class="number">3.7</span><span class="literal">-alpine</span></span><br><span class="line">WORKDIR /code</span><br><span class="line">ENV FLASK_APP app.py</span><br><span class="line">ENV FLASK_RUN_HOST <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line">RUN apk add -<span class="literal">-no</span><span class="literal">-cache</span> gcc musl<span class="literal">-dev</span> linux<span class="literal">-headers</span></span><br><span class="line"><span class="built_in">COPY</span> requirements.txt requirements.txt</span><br><span class="line">RUN pip install <span class="literal">-r</span> requirements.txt</span><br><span class="line"><span class="built_in">COPY</span> . .</span><br><span class="line">CMD [<span class="string">&quot;flask&quot;</span>, <span class="string">&quot;run&quot;</span>]</span><br></pre></td></tr></table></figure>





<h2 id="5-3-Compose文件准备"><a href="#5-3-Compose文件准备" class="headerlink" title="5.3 Compose文件准备"></a>5.3 Compose文件准备</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">flaskproject</span>]<span class="comment"># vim docker-compose.yaml</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">flaskproject</span>]<span class="comment"># cat docker-compose.yaml</span></span><br><span class="line">version: <span class="string">&#x27;3&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    build: .</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;5000:5000&quot;</span></span><br><span class="line">  redis:</span><br><span class="line">    image: <span class="string">&quot;redis:alpine&quot;</span></span><br></pre></td></tr></table></figure>





<h2 id="5-4-使用docker-compose-up启动容器"><a href="#5-4-使用docker-compose-up启动容器" class="headerlink" title="5.4 使用docker-compose up启动容器"></a>5.4 使用docker-compose up启动容器</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">flaskproject</span>]<span class="comment"># ls</span></span><br><span class="line">app.py  docker<span class="literal">-compose</span>.yaml  Dockerfile  requirements.txt</span><br></pre></td></tr></table></figure>





<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">flaskproject</span>]<span class="comment"># docker-compose up</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">输出：</span><br><span class="line">[+] Running <span class="number">7</span>/<span class="number">7</span></span><br><span class="line"> ⠿ redis Pulled                                                                         <span class="number">15.8</span>s</span><br><span class="line">   ⠿ <span class="number">59</span>bf1c3509f3 Pull complete                                                          <span class="number">2.9</span>s</span><br><span class="line">   ⠿ <span class="number">719</span>adce26c52 Pull complete                                                          <span class="number">3.0</span>s</span><br><span class="line">   ⠿ b8f35e378c31 Pull complete                                                          <span class="number">5.8</span>s</span><br><span class="line">   ⠿ d034517f789c Pull complete                                                          <span class="number">6.5</span>s</span><br><span class="line">   ⠿ <span class="number">3772</span>d4d76753 Pull complete                                                          <span class="number">6.6</span>s</span><br><span class="line">   ⠿ <span class="number">211</span>a7f52febb Pull complete                                                          <span class="number">6.8</span>s</span><br><span class="line">Sending build context to Docker daemon     <span class="number">714</span>B</span><br><span class="line">Step <span class="number">1</span>/<span class="number">9</span> : FROM python:<span class="number">3.7</span><span class="literal">-alpine</span></span><br><span class="line"><span class="number">3.7</span><span class="literal">-alpine</span>: Pulling from library/python</span><br><span class="line"><span class="number">59</span>bf1c3509f3: Already exists</span><br><span class="line"><span class="number">07</span>a400e93df3: Already exists</span><br><span class="line">bdabb07397e1: Already exists</span><br><span class="line">cd0af01c7b70: Already exists</span><br><span class="line">d0f18e022200: Already exists</span><br><span class="line">Digest: sha256:<span class="number">5</span>a776e3b5336827faf7a1c3a191b73b5b2eef4cdcfe8b94f59b79cb749a2b5d8</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> python:<span class="number">3.7</span><span class="literal">-alpine</span></span><br><span class="line"> ---&gt; e72b511ad78e</span><br><span class="line">Step <span class="number">2</span>/<span class="number">9</span> : WORKDIR /code</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> <span class="number">2</span>b9d07bef719</span><br><span class="line">Removing intermediate container <span class="number">2</span>b9d07bef719</span><br><span class="line"> ---&gt; <span class="number">7</span>d39e96fadf1</span><br><span class="line">Step <span class="number">3</span>/<span class="number">9</span> : ENV FLASK_APP app.py</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> <span class="number">9</span>bcb28bd632a</span><br><span class="line">Removing intermediate container <span class="number">9</span>bcb28bd632a</span><br><span class="line"> ---&gt; <span class="number">79</span>f656a616d5</span><br><span class="line">Step <span class="number">4</span>/<span class="number">9</span> : ENV FLASK_RUN_HOST <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> <span class="number">8470</span>c2dbd6c2</span><br><span class="line">Removing intermediate container <span class="number">8470</span>c2dbd6c2</span><br><span class="line"> ---&gt; e212ba688fcd</span><br><span class="line">Step <span class="number">5</span>/<span class="number">9</span> : RUN apk add -<span class="literal">-no</span><span class="literal">-cache</span> gcc musl<span class="literal">-dev</span> linux<span class="literal">-headers</span></span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> <span class="number">6</span>e9ca0766bc8</span><br><span class="line">fetch https://dl<span class="literal">-cdn</span>.alpinelinux.org/alpine/v3.<span class="number">15</span>/main/x86_64/APKINDEX.tar.gz</span><br><span class="line">fetch https://dl<span class="literal">-cdn</span>.alpinelinux.org/alpine/v3.<span class="number">15</span>/community/x86_64/APKINDEX.tar.gz</span><br><span class="line">(<span class="number">1</span>/<span class="number">13</span>) Installing libgcc (<span class="number">10.3</span>.<span class="number">1</span>_git20211027<span class="literal">-r0</span>)</span><br><span class="line">(<span class="number">2</span>/<span class="number">13</span>) Installing libstdc++ (<span class="number">10.3</span>.<span class="number">1</span>_git20211027<span class="literal">-r0</span>)</span><br><span class="line">(<span class="number">3</span>/<span class="number">13</span>) Installing binutils (<span class="number">2.37</span><span class="literal">-r3</span>)</span><br><span class="line">(<span class="number">4</span>/<span class="number">13</span>) Installing libgomp (<span class="number">10.3</span>.<span class="number">1</span>_git20211027<span class="literal">-r0</span>)</span><br><span class="line">(<span class="number">5</span>/<span class="number">13</span>) Installing libatomic (<span class="number">10.3</span>.<span class="number">1</span>_git20211027<span class="literal">-r0</span>)</span><br><span class="line">(<span class="number">6</span>/<span class="number">13</span>) Installing libgphobos (<span class="number">10.3</span>.<span class="number">1</span>_git20211027<span class="literal">-r0</span>)</span><br><span class="line">(<span class="number">7</span>/<span class="number">13</span>) Installing gmp (<span class="number">6.2</span>.<span class="number">1</span><span class="literal">-r1</span>)</span><br><span class="line">(<span class="number">8</span>/<span class="number">13</span>) Installing isl22 (<span class="number">0.22</span><span class="literal">-r0</span>)</span><br><span class="line">(<span class="number">9</span>/<span class="number">13</span>) Installing mpfr4 (<span class="number">4.1</span>.<span class="number">0</span><span class="literal">-r0</span>)</span><br><span class="line">(<span class="number">10</span>/<span class="number">13</span>) Installing mpc1 (<span class="number">1.2</span>.<span class="number">1</span><span class="literal">-r0</span>)</span><br><span class="line">(<span class="number">11</span>/<span class="number">13</span>) Installing gcc (<span class="number">10.3</span>.<span class="number">1</span>_git20211027<span class="literal">-r0</span>)</span><br><span class="line">(<span class="number">12</span>/<span class="number">13</span>) Installing linux<span class="literal">-headers</span> (<span class="number">5.10</span>.<span class="number">41</span><span class="literal">-r0</span>)</span><br><span class="line">(<span class="number">13</span>/<span class="number">13</span>) Installing musl<span class="literal">-dev</span> (<span class="number">1.2</span>.<span class="number">2</span><span class="literal">-r7</span>)</span><br><span class="line">Executing busybox<span class="literal">-1</span>.<span class="number">34.1</span><span class="literal">-r3</span>.trigger</span><br><span class="line">OK: <span class="number">143</span> MiB <span class="keyword">in</span> <span class="number">49</span> packages</span><br><span class="line">Removing intermediate container <span class="number">6</span>e9ca0766bc8</span><br><span class="line"> ---&gt; <span class="number">273</span>d4f04dfbc</span><br><span class="line">Step <span class="number">6</span>/<span class="number">9</span> : <span class="built_in">COPY</span> requirements.txt requirements.txt</span><br><span class="line"> ---&gt; daf51c54e8ba</span><br><span class="line">Step <span class="number">7</span>/<span class="number">9</span> : RUN pip install <span class="literal">-r</span> requirements.txt</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> <span class="number">2</span>aa2d30c5311</span><br><span class="line">Collecting flask</span><br><span class="line">  Downloading Flask<span class="literal">-2</span>.<span class="number">0.3</span><span class="literal">-py3</span><span class="literal">-none</span><span class="literal">-any</span>.whl (<span class="number">95</span> kB)</span><br><span class="line">Collecting redis</span><br><span class="line">  Downloading redis<span class="literal">-4</span>.<span class="number">1.3</span><span class="literal">-py3</span><span class="literal">-none</span><span class="literal">-any</span>.whl (<span class="number">173</span> kB)</span><br><span class="line">Collecting Jinja2&gt;=<span class="number">3.0</span></span><br><span class="line">  Downloading Jinja2<span class="literal">-3</span>.<span class="number">0.3</span><span class="literal">-py3</span><span class="literal">-none</span><span class="literal">-any</span>.whl (<span class="number">133</span> kB)</span><br><span class="line">Collecting itsdangerous&gt;=<span class="number">2.0</span></span><br><span class="line">  Downloading itsdangerous<span class="literal">-2</span>.<span class="number">0.1</span><span class="literal">-py3</span><span class="literal">-none</span><span class="literal">-any</span>.whl (<span class="number">18</span> kB)</span><br><span class="line">Collecting click&gt;=<span class="number">7.1</span>.<span class="number">2</span></span><br><span class="line">  Downloading click<span class="literal">-8</span>.<span class="number">0.3</span><span class="literal">-py3</span><span class="literal">-none</span><span class="literal">-any</span>.whl (<span class="number">97</span> kB)</span><br><span class="line">Collecting Werkzeug&gt;=<span class="number">2.0</span></span><br><span class="line">  Downloading Werkzeug<span class="literal">-2</span>.<span class="number">0.3</span><span class="literal">-py3</span><span class="literal">-none</span><span class="literal">-any</span>.whl (<span class="number">289</span> kB)</span><br><span class="line">Collecting deprecated&gt;=<span class="number">1.2</span>.<span class="number">3</span></span><br><span class="line">  Downloading Deprecated<span class="literal">-1</span>.<span class="number">2.13</span><span class="literal">-py2</span>.py3<span class="literal">-none</span><span class="literal">-any</span>.whl (<span class="number">9.6</span> kB)</span><br><span class="line">Collecting packaging&gt;=<span class="number">20.4</span></span><br><span class="line">  Downloading packaging<span class="literal">-21</span>.<span class="number">3</span><span class="literal">-py3</span><span class="literal">-none</span><span class="literal">-any</span>.whl (<span class="number">40</span> kB)</span><br><span class="line">Collecting importlib<span class="literal">-metadata</span>&gt;=<span class="number">1.0</span></span><br><span class="line">  Downloading importlib_metadata<span class="literal">-4</span>.<span class="number">11.1</span><span class="literal">-py3</span><span class="literal">-none</span><span class="literal">-any</span>.whl (<span class="number">17</span> kB)</span><br><span class="line">Collecting wrapt&lt;<span class="number">2</span>,&gt;=<span class="number">1.10</span></span><br><span class="line">  Downloading wrapt<span class="literal">-1</span>.<span class="number">13.3</span><span class="literal">-cp37</span><span class="literal">-cp37m</span><span class="literal">-musllinux_1_1_x86_64</span>.whl (<span class="number">78</span> kB)</span><br><span class="line">Collecting ty<span class="built_in">ping-extensions</span>&gt;=<span class="number">3.6</span>.<span class="number">4</span></span><br><span class="line">  Downloading typing_extensions<span class="literal">-4</span>.<span class="number">1.1</span><span class="literal">-py3</span><span class="literal">-none</span><span class="literal">-any</span>.whl (<span class="number">26</span> kB)</span><br><span class="line">Collecting zipp&gt;=<span class="number">0.5</span></span><br><span class="line">  Downloading zipp<span class="literal">-3</span>.<span class="number">7.0</span><span class="literal">-py3</span><span class="literal">-none</span><span class="literal">-any</span>.whl (<span class="number">5.3</span> kB)</span><br><span class="line">Collecting MarkupSafe&gt;=<span class="number">2.0</span></span><br><span class="line">  Downloading MarkupSafe<span class="literal">-2</span>.<span class="number">0.1</span><span class="literal">-cp37</span><span class="literal">-cp37m</span><span class="literal">-musllinux_1_1_x86_64</span>.whl (<span class="number">30</span> kB)</span><br><span class="line">Collecting pyparsing!=<span class="number">3.0</span>.<span class="number">5</span>,&gt;=<span class="number">2.0</span>.<span class="number">2</span></span><br><span class="line">  Downloading pyparsing<span class="literal">-3</span>.<span class="number">0.7</span><span class="literal">-py3</span><span class="literal">-none</span><span class="literal">-any</span>.whl (<span class="number">98</span> kB)</span><br><span class="line">Installing collected packages: zipp, ty<span class="built_in">ping-extensions</span>, wrapt, pyparsing, MarkupSafe, importlib<span class="literal">-metadata</span>, Werkzeug, packaging, Jinja2, itsdangerous, deprecated, click, redis, flask</span><br><span class="line">Successfully installed Jinja2<span class="literal">-3</span>.<span class="number">0.3</span> MarkupSafe<span class="literal">-2</span>.<span class="number">0.1</span> Werkzeug<span class="literal">-2</span>.<span class="number">0.3</span> click<span class="literal">-8</span>.<span class="number">0.3</span> deprecated<span class="literal">-1</span>.<span class="number">2.13</span> flask<span class="literal">-2</span>.<span class="number">0.3</span> importlib<span class="literal">-metadata</span><span class="literal">-4</span>.<span class="number">11.1</span> itsdangerous<span class="literal">-2</span>.<span class="number">0.1</span> packaging<span class="literal">-21</span>.<span class="number">3</span> pyparsing<span class="literal">-3</span>.<span class="number">0.7</span> redis<span class="literal">-4</span>.<span class="number">1.3</span> ty<span class="built_in">ping-extensions</span><span class="literal">-4</span>.<span class="number">1.1</span> wrapt<span class="literal">-1</span>.<span class="number">13.3</span> zipp<span class="literal">-3</span>.<span class="number">7.0</span></span><br><span class="line">WARNING: Running pip as the <span class="string">&#x27;root&#x27;</span> user can result <span class="keyword">in</span> broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv</span><br><span class="line">WARNING: You are <span class="keyword">using</span> pip version 21.2.4; however, version 22.0.3 is available.</span><br><span class="line">You should consider upgrading via the <span class="string">&#x27;/usr/local/bin/python -m pip install --upgrade pip&#x27;</span> command.</span><br><span class="line">Removing intermediate container <span class="number">2</span>aa2d30c5311</span><br><span class="line"> ---&gt; dd8f52b132f8</span><br><span class="line">Step <span class="number">8</span>/<span class="number">9</span> : <span class="built_in">COPY</span> . .</span><br><span class="line"> ---&gt; b36938a26cf5</span><br><span class="line">Step <span class="number">9</span>/<span class="number">9</span> : CMD [<span class="string">&quot;flask&quot;</span>, <span class="string">&quot;run&quot;</span>]</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> <span class="number">260</span>cbfa02959</span><br><span class="line">Removing intermediate container <span class="number">260</span>cbfa02959</span><br><span class="line"> ---&gt; fa04dfec6ff2</span><br><span class="line">Successfully built fa04dfec6ff2</span><br><span class="line">Successfully tagged flaskproject_web:latest</span><br><span class="line"></span><br><span class="line">Use <span class="string">&#x27;docker scan&#x27;</span> to run Snyk tests against images to find vulnerabilities and learn how to fix them</span><br><span class="line">[+] Running <span class="number">3</span>/<span class="number">3</span></span><br><span class="line"> ⠿ Network flaskproject_default    Created                                               <span class="number">0.1</span>s</span><br><span class="line"> ⠿ Container flaskproject<span class="literal">-redis</span><span class="literal">-1</span>  Created                                               <span class="number">0.1</span>s</span><br><span class="line"> ⠿ Container flaskproject<span class="literal">-web</span><span class="literal">-1</span>    Created                                               <span class="number">0.1</span>s</span><br><span class="line">Attaching to flaskproject<span class="literal">-redis</span><span class="literal">-1</span>, flaskproject<span class="literal">-web</span><span class="literal">-1</span></span><br><span class="line">flaskproject<span class="literal">-redis</span><span class="literal">-1</span>  | <span class="number">1</span>:C <span class="number">15</span> Feb <span class="number">2022</span> <span class="number">14</span>:<span class="number">14</span>:<span class="number">21.696</span> <span class="comment"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span></span><br><span class="line">flaskproject<span class="literal">-redis</span><span class="literal">-1</span>  | <span class="number">1</span>:C <span class="number">15</span> Feb <span class="number">2022</span> <span class="number">14</span>:<span class="number">14</span>:<span class="number">21.696</span> <span class="comment"># Redis version=6.2.6, bits=64, commit=00000000, modified=0, pid=1, just started</span></span><br><span class="line">flaskproject<span class="literal">-redis</span><span class="literal">-1</span>  | <span class="number">1</span>:C <span class="number">15</span> Feb <span class="number">2022</span> <span class="number">14</span>:<span class="number">14</span>:<span class="number">21.696</span> <span class="comment"># Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf</span></span><br><span class="line">flaskproject<span class="literal">-redis</span><span class="literal">-1</span>  | <span class="number">1</span>:M <span class="number">15</span> Feb <span class="number">2022</span> <span class="number">14</span>:<span class="number">14</span>:<span class="number">21.697</span> * monotonic clock: POSIX clock_gettime</span><br><span class="line">flaskproject<span class="literal">-redis</span><span class="literal">-1</span>  | <span class="number">1</span>:M <span class="number">15</span> Feb <span class="number">2022</span> <span class="number">14</span>:<span class="number">14</span>:<span class="number">21.698</span> * Running mode=standalone, port=<span class="number">6379</span>.</span><br><span class="line">flaskproject<span class="literal">-redis</span><span class="literal">-1</span>  | <span class="number">1</span>:M <span class="number">15</span> Feb <span class="number">2022</span> <span class="number">14</span>:<span class="number">14</span>:<span class="number">21.698</span> <span class="comment"># WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span></span><br><span class="line">flaskproject<span class="literal">-redis</span><span class="literal">-1</span>  | <span class="number">1</span>:M <span class="number">15</span> Feb <span class="number">2022</span> <span class="number">14</span>:<span class="number">14</span>:<span class="number">21.698</span> <span class="comment"># Server initialized</span></span><br><span class="line">flaskproject<span class="literal">-redis</span><span class="literal">-1</span>  | <span class="number">1</span>:M <span class="number">15</span> Feb <span class="number">2022</span> <span class="number">14</span>:<span class="number">14</span>:<span class="number">21.698</span> <span class="comment"># WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add &#x27;vm.overcommit_memory = 1&#x27; to /etc/sysctl.conf and then reboot or run the command &#x27;sysctl vm.overcommit_memory=1&#x27; for this to take effect.</span></span><br><span class="line">flaskproject<span class="literal">-redis</span><span class="literal">-1</span>  | <span class="number">1</span>:M <span class="number">15</span> Feb <span class="number">2022</span> <span class="number">14</span>:<span class="number">14</span>:<span class="number">21.698</span> * Ready to accept connections</span><br><span class="line">flaskproject<span class="literal">-web</span><span class="literal">-1</span>    |  * Serving Flask app <span class="string">&#x27;app.py&#x27;</span> (lazy loading)</span><br><span class="line">flaskproject<span class="literal">-web</span><span class="literal">-1</span>    |  * Environment: production</span><br><span class="line">flaskproject<span class="literal">-web</span><span class="literal">-1</span>    |    WARNING: This is a development server. <span class="keyword">Do</span> not use it <span class="keyword">in</span> a production deployment.</span><br><span class="line">flaskproject<span class="literal">-web</span><span class="literal">-1</span>    |    Use a production WSGI server instead.</span><br><span class="line">flaskproject<span class="literal">-web</span><span class="literal">-1</span>    |  * Debug mode: off</span><br><span class="line">flaskproject<span class="literal">-web</span><span class="literal">-1</span>    |  * Running on all addresses.</span><br><span class="line">flaskproject<span class="literal">-web</span><span class="literal">-1</span>    |    WARNING: This is a development server. <span class="keyword">Do</span> not use it <span class="keyword">in</span> a production deployment.</span><br><span class="line">flaskproject<span class="literal">-web</span><span class="literal">-1</span>    |  * Running on http://<span class="number">172.18</span>.<span class="number">0.2</span>:<span class="number">5000</span>/ (Press CTRL+C to quit)</span><br></pre></td></tr></table></figure>





<h2 id="5-5-访问"><a href="#5-5-访问" class="headerlink" title="5.5 访问"></a>5.5 访问</h2><p><img src="/images/Docker/Docker%E5%AE%B9%E5%99%A8%E6%9C%8D%E5%8A%A1%E7%BC%96%E6%8E%92%E5%88%A9%E5%99%A8DockerCompose%E5%BA%94%E7%94%A8%E5%AE%9E%E6%88%98.assets/image-20220215221648195.png" alt="image-20220215221648195"></p>
]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker主机集群化方案Docker Swarm</title>
    <url>/2023/08/17/%E4%BA%91%E5%8E%9F%E7%94%9F/Docker/Docker%E4%B8%BB%E6%9C%BA%E9%9B%86%E7%BE%A4%E5%8C%96Docker%20Swarm/</url>
    <content><![CDATA[<h1 id="一、docker-swarm介绍"><a href="#一、docker-swarm介绍" class="headerlink" title="一、docker swarm介绍"></a>一、docker swarm介绍</h1><p>Docker Swarm是Docker官方提供的一款集群管理工具，其主要作用是把若干台Docker主机抽象为一个整体，并且通过一个入口统一管理这些Docker主机上的各种Docker资源。Swarm和Kubernetes比较类似，但是更加轻，具有的功能也较kubernetes更少一些。</p>
<ul>
<li>是docker host集群管理工具</li>
<li>docker官方提供的</li>
<li>docker 1.12版本以后</li>
<li>用来统一集群管理的，把整个集群资源做统一调度</li>
<li>比kubernetes要轻量化</li>
<li>实现scaling 规模扩大或缩小</li>
<li>实现rolling update 滚动更新或版本回退</li>
<li>实现service discovery 服务发现</li>
<li>实现load balance 负载均衡</li>
<li>实现route mesh 路由网格，服务治理</li>
</ul>
<h1 id="二、docker-swarm概念与架构"><a href="#二、docker-swarm概念与架构" class="headerlink" title="二、docker swarm概念与架构"></a>二、docker swarm概念与架构</h1><blockquote>
<p>参考网址：<a href="https://docs.docker.com/swarm/overview/">https://docs.docker.com/swarm/overview/</a></p>
</blockquote>
<h2 id="2-1-架构"><a href="#2-1-架构" class="headerlink" title="2.1 架构"></a>2.1 架构</h2><p>![](/images/Docker/Docker主机集群化方案DockerSwarm.assets/docker swarm架构图.png)</p>
<p><img src="/images/Docker/Docker%E4%B8%BB%E6%9C%BA%E9%9B%86%E7%BE%A4%E5%8C%96%E6%96%B9%E6%A1%88DockerSwarm.assets/image-20220216093807929.png" alt="image-20220216093807929"></p>
<h2 id="2-2-概念"><a href="#2-2-概念" class="headerlink" title="2.2 概念"></a>2.2 概念</h2><p><strong>节点 (node):</strong> 就是一台docker host上面运行了docker engine.节点分为两类:</p>
<ul>
<li>管理节点(manager node) 负责管理集群中的节点并向工作节点分配任务</li>
<li>工作节点(worker node) 接收管理节点分配的任务，运行任务</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker node ls</span></span><br></pre></td></tr></table></figure>





<p><strong>服务(services):</strong> 在工作节点运行的，由多个任务共同组成</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker service ls</span></span><br></pre></td></tr></table></figure>





<p><strong>任务(task):</strong> 运行在工作节点上容器或容器中包含应用，是集群中调度最小管理单元</p>
<p><img src="/images/Docker/Docker%E4%B8%BB%E6%9C%BA%E9%9B%86%E7%BE%A4%E5%8C%96%E6%96%B9%E6%A1%88DockerSwarm.assets/image-20220216093706989.png" alt="image-20220216093706989"></p>
<h1 id="三、docker-swarm集群部署"><a href="#三、docker-swarm集群部署" class="headerlink" title="三、docker swarm集群部署"></a>三、docker swarm集群部署</h1><blockquote>
<p>部署3主2从节点集群，另需提前准备1台本地容器镜像仓库服务器(Harbor)</p>
</blockquote>
<h2 id="3-1-容器镜像仓库-Harbor准备"><a href="#3-1-容器镜像仓库-Harbor准备" class="headerlink" title="3.1 容器镜像仓库 Harbor准备"></a>3.1 容器镜像仓库 Harbor准备</h2><p><img src="/images/Docker/Docker%E4%B8%BB%E6%9C%BA%E9%9B%86%E7%BE%A4%E5%8C%96%E6%96%B9%E6%A1%88DockerSwarm.assets/image-20220216111914692.png" alt="image-20220216111914692"></p>
<h2 id="3-2-主机准备"><a href="#3-2-主机准备" class="headerlink" title="3.2 主机准备"></a>3.2 主机准备</h2><h3 id="3-2-1-主机名"><a href="#3-2-1-主机名" class="headerlink" title="3.2.1 主机名"></a>3.2.1 主机名</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hostnamectl set-hostname xxx</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">说明：</span><br><span class="line">sm1 管理节点<span class="number">1</span></span><br><span class="line">sm2 管理节点<span class="number">2</span></span><br><span class="line">sm3 管理节点<span class="number">3</span></span><br><span class="line">sw1 工作节点<span class="number">1</span></span><br><span class="line">sw2 工作节点<span class="number">2</span></span><br></pre></td></tr></table></figure>



<h3 id="3-2-2-IP地址"><a href="#3-2-2-IP地址" class="headerlink" title="3.2.2 IP地址"></a>3.2.2 IP地址</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">编辑网卡配置文件</span><br><span class="line"><span class="comment"># vim /etc/sysconfig/network-scripts/ifcfg-ens33</span></span><br><span class="line"><span class="comment"># cat /etc/sysconfig/network-scripts/ifcfg-ens33</span></span><br><span class="line"><span class="built_in">TYPE</span>=<span class="string">&quot;Ethernet&quot;</span></span><br><span class="line">PROXY_METHOD=<span class="string">&quot;none&quot;</span></span><br><span class="line">BROWSER_ONLY=<span class="string">&quot;no&quot;</span></span><br><span class="line">BOOTPROTO=<span class="string">&quot;none&quot;</span> 修改为静态</span><br><span class="line">DEFROUTE=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV4_FAILURE_FATAL=<span class="string">&quot;no&quot;</span></span><br><span class="line">IPV6INIT=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV6_AUTOCONF=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV6_DEFROUTE=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV6_FAILURE_FATAL=<span class="string">&quot;no&quot;</span></span><br><span class="line">IPV6_ADDR_GEN_MODE=<span class="string">&quot;stable-privacy&quot;</span></span><br><span class="line">NAME=<span class="string">&quot;ens33&quot;</span></span><br><span class="line"></span><br><span class="line">DEVICE=<span class="string">&quot;ens33&quot;</span></span><br><span class="line">ONBOOT=<span class="string">&quot;yes&quot;</span></span><br><span class="line"></span><br><span class="line">添加如下内容：</span><br><span class="line">IPADDR=<span class="string">&quot;192.168.10.xxx&quot;</span></span><br><span class="line">PREFIX=<span class="string">&quot;24&quot;</span></span><br><span class="line">GATEWAY=<span class="string">&quot;192.168.10.2&quot;</span></span><br><span class="line">DNS1=<span class="string">&quot;119.29.29.29&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">说明：</span><br><span class="line">sm1 管理节点<span class="number">1</span> <span class="number">192.168</span>.<span class="number">10.10</span></span><br><span class="line">sm2 管理节点<span class="number">2</span> <span class="number">192.168</span>.<span class="number">10.11</span></span><br><span class="line">sm3 管理节点<span class="number">3</span> <span class="number">192.168</span>.<span class="number">10.12</span></span><br><span class="line">sw1 工作节点<span class="number">1</span> <span class="number">192.168</span>.<span class="number">10.13</span></span><br><span class="line">sw2 工作节点<span class="number">2</span> <span class="number">192.168</span>.<span class="number">10.14</span></span><br></pre></td></tr></table></figure>



<h3 id="3-2-3-主机名与IP地址解析"><a href="#3-2-3-主机名与IP地址解析" class="headerlink" title="3.2.3 主机名与IP地址解析"></a>3.2.3 主机名与IP地址解析</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">编辑主机/etc/hosts文件，添加主机名解析</span><br><span class="line"><span class="comment"># vim /etc/hosts</span></span><br><span class="line"><span class="comment"># cat /etc/hosts</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::<span class="number">1</span>         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line"><span class="number">192.168</span>.<span class="number">10.10</span> sm1</span><br><span class="line"><span class="number">192.168</span>.<span class="number">10.11</span> sm2</span><br><span class="line"><span class="number">192.168</span>.<span class="number">10.12</span> sm3</span><br><span class="line"><span class="number">192.168</span>.<span class="number">10.13</span> sw1</span><br><span class="line"><span class="number">192.168</span>.<span class="number">10.14</span> sw2</span><br></pre></td></tr></table></figure>



<h3 id="3-3-4-主机时间同步"><a href="#3-3-4-主机时间同步" class="headerlink" title="3.3.4 主机时间同步"></a>3.3.4 主机时间同步</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">添加计划任务，实现时间同步，同步服务器为time1.aliyun.com</span><br><span class="line"><span class="comment"># crontab -e</span></span><br><span class="line">no crontab <span class="keyword">for</span> root - <span class="keyword">using</span> an empty one</span><br><span class="line">crontab: installing new crontab</span><br><span class="line"></span><br><span class="line">查看添加后计划任务</span><br><span class="line"><span class="comment"># crontab -l</span></span><br><span class="line"><span class="number">0</span> */<span class="number">1</span> * * * ntpdate time1.aliyun.com</span><br></pre></td></tr></table></figure>



<h3 id="3-2-5-主机安全设置"><a href="#3-2-5-主机安全设置" class="headerlink" title="3.2.5 主机安全设置"></a>3.2.5 主机安全设置</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">关闭防火墙并查看其运行状态</span><br><span class="line"><span class="comment"># systemctl stop firewalld;systemctl disable firewalld</span></span><br><span class="line"><span class="comment"># firewall-cmd --state</span></span><br><span class="line">not running</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">使用非交互式修改selinux配置文件</span><br><span class="line"><span class="comment"># sed -ri &#x27;s/SELINUX=enforcing/SELINUX=disabled/&#x27; /etc/selinux/config</span></span><br><span class="line"></span><br><span class="line">重启所有的主机系统</span><br><span class="line"><span class="comment"># reboot</span></span><br><span class="line"></span><br><span class="line">重启后验证selinux是否关闭</span><br><span class="line"><span class="comment"># sestatus</span></span><br><span class="line">SELinux status:                 disabled</span><br></pre></td></tr></table></figure>





<h2 id="3-3-docker安装"><a href="#3-3-docker安装" class="headerlink" title="3.3 docker安装"></a>3.3 docker安装</h2><h3 id="3-3-1-docker安装"><a href="#3-3-1-docker安装" class="headerlink" title="3.3.1 docker安装"></a>3.3.1 docker安装</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">下载YUM源</span><br><span class="line"><span class="comment"># wget -O /etc/yum.repos.d/docker-ce.repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">安装docker<span class="literal">-ce</span></span><br><span class="line"><span class="comment"># yum -y install docker-ce</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">启动docker服务并设置为开机自启动</span><br><span class="line"><span class="comment"># systemctl enable docker;systemctl start docker</span></span><br></pre></td></tr></table></figure>



<h3 id="3-3-2-配置docker-daemon使用harbor"><a href="#3-3-2-配置docker-daemon使用harbor" class="headerlink" title="3.3.2 配置docker daemon使用harbor"></a>3.3.2 配置docker daemon使用harbor</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">添加daemon.json文件，配置docker daemon使用harbor</span><br><span class="line"><span class="comment"># vim /etc/docker/daemon.json</span></span><br><span class="line"><span class="comment"># cat /etc/docker/daemon.json</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;insecure-registries&quot;</span>: [<span class="string">&quot;http://192.168.10.15&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">重启docker服务</span><br><span class="line"><span class="comment"># ystemctl restart docker</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">深度登录harbor</span><br><span class="line"><span class="comment"># docker login 192.168.10.15</span></span><br><span class="line">Username: admin</span><br><span class="line">Password: <span class="number">12345</span></span><br><span class="line">WARNING! Your password will be stored unencrypted <span class="keyword">in</span> /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/<span class="comment">#credentials-store</span></span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure>



<h2 id="3-4-docker-swarm集群初始化"><a href="#3-4-docker-swarm集群初始化" class="headerlink" title="3.4 docker swarm集群初始化"></a>3.4 docker swarm集群初始化</h2><h3 id="3-4-1-获取docker-swarm命令帮助"><a href="#3-4-1-获取docker-swarm命令帮助" class="headerlink" title="3.4.1 获取docker swarm命令帮助"></a>3.4.1 获取docker swarm命令帮助</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">获取docker swarm命令使用帮助</span><br><span class="line"><span class="comment"># docker swarm --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker swarm COMMAND</span><br><span class="line"></span><br><span class="line">Manage Swarm</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  ca          Display and rotate the root CA</span><br><span class="line">  init        Initialize a swarm                    初始化</span><br><span class="line">  join        Join a swarm as a node and/or manager 加入集群</span><br><span class="line">  <span class="built_in">join-token</span>  Manage join tokens                    集群加入时token管理</span><br><span class="line">  leave       Leave the swarm                       离开集群</span><br><span class="line">  unlock      Unlock swarm</span><br><span class="line">  <span class="built_in">unlock-key</span>  Manage the unlock key</span><br><span class="line">  update      Update the swarm                      更新集群</span><br></pre></td></tr></table></figure>







<h3 id="3-4-2-在管理节点初始化"><a href="#3-4-2-在管理节点初始化" class="headerlink" title="3.4.2 在管理节点初始化"></a>3.4.2 在管理节点初始化</h3><blockquote>
<p>本次在sm1上初始化</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">初始化集群</span><br><span class="line"><span class="comment"># docker swarm init --advertise-addr 192.168.10.10 --listen-addr 192.168.10.10:2377</span></span><br><span class="line">Swarm initialized: current node (j42cwubrr70pwxdpmesn1cuo6) is now a manager.</span><br><span class="line"></span><br><span class="line">To add a worker to this swarm, run the following command:</span><br><span class="line"></span><br><span class="line">    docker swarm join -<span class="literal">-token</span> SWMTKN<span class="literal">-1</span><span class="literal">-297iry1n2jeh30oopsjecvsco1uuvl15t2jz6jxabdpf0xkry4</span><span class="literal">-6pddlyiq5f1i35w8d7q4bl1co</span> <span class="number">192.168</span>.<span class="number">10.10</span>:<span class="number">2377</span></span><br><span class="line"></span><br><span class="line">To add a manager to this swarm, run <span class="string">&#x27;docker swarm join-token manager&#x27;</span> and follow the instructions.</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">说明：</span><br><span class="line">-<span class="literal">-advertise</span><span class="literal">-addr</span> 当主机有多块网卡时使用其选择其中一块用于广播,用于其它节点连接管理节点使用</span><br><span class="line">-<span class="literal">-listen</span><span class="literal">-addr</span>    监听地址，用于承载集群流量使用</span><br></pre></td></tr></table></figure>





<h3 id="3-4-3-添加工作节点到集群"><a href="#3-4-3-添加工作节点到集群" class="headerlink" title="3.4.3 添加工作节点到集群"></a>3.4.3 添加工作节点到集群</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">使用初始化过程中生成的token加入集群</span><br><span class="line">[<span class="type">root</span>@<span class="type">sw1</span> ~]<span class="comment"># docker swarm join --token SWMTKN-1-297iry1n2jeh30oopsjecvsco1uuvl15t2jz6jxabdpf0xkry4-6pddlyiq5f1i35w8d7q4bl1co 192.168.10.10:2377</span></span><br><span class="line">This node joined a swarm as a worker.</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">查看已加入的集群</span><br><span class="line"><span class="comment"># docker node ls</span></span><br><span class="line">ID                            HOSTNAME   STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION</span><br><span class="line">j42cwubrr70pwxdpmesn1cuo6 *   sm1        Ready     Active         Leader           <span class="number">20.10</span>.<span class="number">12</span></span><br><span class="line"><span class="number">4</span>yb34kuma6i9g5hf30vkxm9yc     sw1        Ready     Active                          <span class="number">20.10</span>.<span class="number">12</span></span><br></pre></td></tr></table></figure>







<blockquote>
<p>如果使用的token已过期，可以再次生成新的加入集群的方法，如下命令所示。</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">重新生成用于添加工作点的token</span><br><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker swarm join-token worker</span></span><br><span class="line">To add a worker to this swarm, run the following command:</span><br><span class="line"></span><br><span class="line">    docker swarm join -<span class="literal">-token</span> SWMTKN<span class="literal">-1</span><span class="literal">-297iry1n2jeh30oopsjecvsco1uuvl15t2jz6jxabdpf0xkry4</span><span class="literal">-6pddlyiq5f1i35w8d7q4bl1co</span> <span class="number">192.168</span>.<span class="number">10.10</span>:<span class="number">2377</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">加入至集群</span><br><span class="line">[<span class="type">root</span>@<span class="type">sw2</span> ~]<span class="comment"># docker swarm join --token SWMTKN-1-297iry1n2jeh30oopsjecvsco1uuvl15t2jz6jxabdpf0xkry4-6pddlyiq5f1i35w8d7q4bl1co 192.168.10.10:2377</span></span><br><span class="line">This node joined a swarm as a worker.</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">查看node状态</span><br><span class="line"><span class="comment"># docker node ls</span></span><br><span class="line">ID                            HOSTNAME   STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION</span><br><span class="line">j42cwubrr70pwxdpmesn1cuo6 *   sm1        Ready     Active         Leader           <span class="number">20.10</span>.<span class="number">12</span></span><br><span class="line"><span class="number">4</span>yb34kuma6i9g5hf30vkxm9yc     sw1        Ready     Active                          <span class="number">20.10</span>.<span class="number">12</span></span><br><span class="line">mekitdu1xbpcttgupwuoiwg91     sw2        Ready     Active                          <span class="number">20.10</span>.<span class="number">12</span></span><br></pre></td></tr></table></figure>





<h3 id="3-4-4-添加管理节点到集群"><a href="#3-4-4-添加管理节点到集群" class="headerlink" title="3.4.4 添加管理节点到集群"></a>3.4.4 添加管理节点到集群</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">生成用于添加管理节点加入集群所使用的token</span><br><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker swarm join-token manager</span></span><br><span class="line">To add a manager to this swarm, run the following command:</span><br><span class="line"></span><br><span class="line">    docker swarm join -<span class="literal">-token</span> SWMTKN<span class="literal">-1</span><span class="literal">-297iry1n2jeh30oopsjecvsco1uuvl15t2jz6jxabdpf0xkry4</span><span class="literal">-7g85apo82mwz8ttmgdr7onfhu</span> <span class="number">192.168</span>.<span class="number">10.10</span>:<span class="number">2377</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">加入集群</span><br><span class="line">[<span class="type">root</span>@<span class="type">sm2</span> ~]<span class="comment"># docker swarm join --token SWMTKN-1-297iry1n2jeh30oopsjecvsco1uuvl15t2jz6jxabdpf0xkry4-7g85apo82mwz8ttmgdr7onfhu 192.168.10.10:2377</span></span><br><span class="line">This node joined a swarm as a manager.</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">加入集群</span><br><span class="line">[<span class="type">root</span>@<span class="type">sm3</span> ~]<span class="comment"># docker swarm join --token SWMTKN-1-297iry1n2jeh30oopsjecvsco1uuvl15t2jz6jxabdpf0xkry4-7g85apo82mwz8ttmgdr7onfhu 192.168.10.10:2377</span></span><br><span class="line">This node joined a swarm as a manager.</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">查看节点状态</span><br><span class="line"><span class="comment"># docker node ls</span></span><br><span class="line">ID                            HOSTNAME   STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION</span><br><span class="line">j42cwubrr70pwxdpmesn1cuo6 *   sm1        Ready     Active         Leader           <span class="number">20.10</span>.<span class="number">12</span></span><br><span class="line">nzpmehm8n87b9a17or2el10lc     sm2        Ready     Active         Reachable        <span class="number">20.10</span>.<span class="number">12</span></span><br><span class="line">xc2x9z1b33rwdfxc5sdpobf0i     sm3        Ready     Active         Reachable        <span class="number">20.10</span>.<span class="number">12</span></span><br><span class="line"><span class="number">4</span>yb34kuma6i9g5hf30vkxm9yc     sw1        Ready     Active                          <span class="number">20.10</span>.<span class="number">12</span></span><br><span class="line">mekitdu1xbpcttgupwuoiwg91     sw2        Ready     Active                          <span class="number">20.10</span>.<span class="number">12</span></span><br></pre></td></tr></table></figure>



<h3 id="3-4-5-模拟管理节点出现故障"><a href="#3-4-5-模拟管理节点出现故障" class="headerlink" title="3.4.5 模拟管理节点出现故障"></a>3.4.5 模拟管理节点出现故障</h3><h4 id="3-4-5-1-停止docker服务并查看结果"><a href="#3-4-5-1-停止docker服务并查看结果" class="headerlink" title="3.4.5.1 停止docker服务并查看结果"></a>3.4.5.1 停止docker服务并查看结果</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">停止docker服务</span><br><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># systemctl stop docker</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">查看node状态，发现sm1不可达，状态为未知，并重启选择出leader</span><br><span class="line">[<span class="type">root</span>@<span class="type">sm2</span> ~]<span class="comment"># docker node ls</span></span><br><span class="line">ID                            HOSTNAME   STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION</span><br><span class="line">j42cwubrr70pwxdpmesn1cuo6     sm1        Unknown   Active         Unreachable      <span class="number">20.10</span>.<span class="number">12</span></span><br><span class="line">nzpmehm8n87b9a17or2el10lc *   sm2        Ready     Active         Leader           <span class="number">20.10</span>.<span class="number">12</span></span><br><span class="line">xc2x9z1b33rwdfxc5sdpobf0i     sm3        Ready     Active         Reachable        <span class="number">20.10</span>.<span class="number">12</span></span><br><span class="line"><span class="number">4</span>yb34kuma6i9g5hf30vkxm9yc     sw1        Ready     Active                          <span class="number">20.10</span>.<span class="number">12</span></span><br><span class="line">mekitdu1xbpcttgupwuoiwg91     sw2        Ready     Active                          <span class="number">20.10</span>.<span class="number">12</span></span><br></pre></td></tr></table></figure>



<h4 id="3-4-5-2-启动docker服务并查看结果"><a href="#3-4-5-2-启动docker服务并查看结果" class="headerlink" title="3.4.5.2 启动docker服务并查看结果"></a>3.4.5.2 启动docker服务并查看结果</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">再次重动docker</span><br><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># systemctl start docker</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">观察可以得知sm1是可达状态，但并不是Leader</span><br><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker node ls</span></span><br><span class="line">ID                            HOSTNAME   STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION</span><br><span class="line">j42cwubrr70pwxdpmesn1cuo6 *   sm1        Ready     Active         Reachable        <span class="number">20.10</span>.<span class="number">12</span></span><br><span class="line">nzpmehm8n87b9a17or2el10lc     sm2        Ready     Active         Leader           <span class="number">20.10</span>.<span class="number">12</span></span><br><span class="line">xc2x9z1b33rwdfxc5sdpobf0i     sm3        Ready     Active         Reachable        <span class="number">20.10</span>.<span class="number">12</span></span><br><span class="line"><span class="number">4</span>yb34kuma6i9g5hf30vkxm9yc     sw1        Ready     Active                          <span class="number">20.10</span>.<span class="number">12</span></span><br><span class="line">mekitdu1xbpcttgupwuoiwg91     sw2        Ready     Active                          <span class="number">20.10</span>.<span class="number">12</span></span><br></pre></td></tr></table></figure>





<h1 id="四、docker-swarm集群应用"><a href="#四、docker-swarm集群应用" class="headerlink" title="四、docker swarm集群应用"></a>四、docker swarm集群应用</h1><h2 id="4-1-容器镜像准备"><a href="#4-1-容器镜像准备" class="headerlink" title="4.1 容器镜像准备"></a>4.1 容器镜像准备</h2><blockquote>
<p>准备多个版本的容器镜像，以便于后期使用测试。</p>
</blockquote>
<h3 id="4-1-1-v1版本"><a href="#4-1-1-v1版本" class="headerlink" title="4.1.1 v1版本"></a>4.1.1 v1版本</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">生成网站文件v1版</span><br><span class="line">[<span class="type">root</span>@<span class="type">harbor</span> <span class="type">nginximg</span>]<span class="comment"># vim index.html</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">harbor</span> <span class="type">nginximg</span>]<span class="comment"># cat index.html</span></span><br><span class="line">v1</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">编写Dockerfile文件，用于构建容器镜像</span><br><span class="line">[<span class="type">root</span>@<span class="type">harbor</span> <span class="type">nginximg</span>]<span class="comment"># vim Dockerfile</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">harbor</span> <span class="type">nginximg</span>]<span class="comment"># cat Dockerfile</span></span><br><span class="line">FROM nginx:latest</span><br><span class="line"></span><br><span class="line">MAINTAINER  <span class="string">&#x27;tom&lt;tom@kubelixiang.com&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">ADD index.html /usr/share/nginx/html</span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">&quot;daemon off;&quot;</span> &gt;&gt; /etc/nginx/nginx.conf</span><br><span class="line"></span><br><span class="line">EXPOSE <span class="number">80</span></span><br><span class="line"></span><br><span class="line">CMD /usr/sbin/nginx</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">使用docker build构建容器镜像</span><br><span class="line">[<span class="type">root</span>@<span class="type">harbor</span> <span class="type">nginximg</span>]<span class="comment"># docker build -t 192.168.10.15/library/nginx:v1 .</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">登录harbor</span><br><span class="line"><span class="comment"># docker login 192.168.10.15</span></span><br><span class="line">Username: admin</span><br><span class="line">Password: <span class="number">12345</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">推送容器镜像至harbor</span><br><span class="line"><span class="comment"># docker push 192.168.10.15/library/nginx:v1</span></span><br></pre></td></tr></table></figure>





<h3 id="4-1-2-v2版本"><a href="#4-1-2-v2版本" class="headerlink" title="4.1.2 v2版本"></a>4.1.2 v2版本</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">生成网站文件v2版</span><br><span class="line">[<span class="type">root</span>@<span class="type">harbor</span> <span class="type">nginximg</span>]<span class="comment"># vim index.html</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">harbor</span> <span class="type">nginximg</span>]<span class="comment"># cat index.html</span></span><br><span class="line">v2</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">编写Dockerfile文件，用于构建容器镜像</span><br><span class="line">[<span class="type">root</span>@<span class="type">harbor</span> <span class="type">nginximg</span>]<span class="comment"># vim Dockerfile</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">harbor</span> <span class="type">nginximg</span>]<span class="comment"># cat Dockerfile</span></span><br><span class="line">FROM nginx:latest</span><br><span class="line"></span><br><span class="line">MAINTAINER  <span class="string">&#x27;tom&lt;tom@kubelixiang.com&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">ADD index.html /usr/share/nginx/html</span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">&quot;daemon off;&quot;</span> &gt;&gt; /etc/nginx/nginx.conf</span><br><span class="line"></span><br><span class="line">EXPOSE <span class="number">80</span></span><br><span class="line"></span><br><span class="line">CMD /usr/sbin/nginx</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">使用docker build构建容器镜像</span><br><span class="line">[<span class="type">root</span>@<span class="type">harbor</span> <span class="type">nginximg</span>]<span class="comment"># docker build -t 192.168.10.15/library/nginx:v2 .</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">推送镜像至Harbor</span><br><span class="line">[<span class="type">root</span>@<span class="type">harbor</span> <span class="type">nginximg</span>]<span class="comment"># docker push 192.168.10.15/library/nginx:v2</span></span><br></pre></td></tr></table></figure>



<p><img src="/images/Docker/Docker%E4%B8%BB%E6%9C%BA%E9%9B%86%E7%BE%A4%E5%8C%96%E6%96%B9%E6%A1%88DockerSwarm.assets/image-20220216163257339.png" alt="image-20220216163257339"></p>
<h2 id="4-2-发布服务"><a href="#4-2-发布服务" class="headerlink" title="4.2 发布服务"></a>4.2 发布服务</h2><p>在docker swarm中,对外暴露的是服务（service)，而不是容器。</p>
<p>为了保持高可用架构，它准许同时启动多个容器共同支撑一个服务，如果一个容器挂了，它会自动使用另一个容器</p>
<h3 id="4-2-1-使用docker-service-ls查看服务"><a href="#4-2-1-使用docker-service-ls查看服务" class="headerlink" title="4.2.1 使用docker service ls查看服务"></a>4.2.1 使用<code>docker service ls</code>查看服务</h3><blockquote>
<p>在管理节点（manager node）上操作</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker service ls</span></span><br><span class="line">ID        NAME      MODE      REPLICAS   IMAGE     PORTS</span><br></pre></td></tr></table></figure>



<h3 id="4-2-2-发布服务"><a href="#4-2-2-发布服务" class="headerlink" title="4.2.2 发布服务"></a>4.2.2 发布服务</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker service create --name nginx-svc-1 --replicas 1 --publish 80:80  192.168.10.15/library/nginx:v1</span></span><br><span class="line">ucif0ibkjqrd7meal6vqwnduz</span><br><span class="line">overall progress: <span class="number">1</span> out of <span class="number">1</span> tasks</span><br><span class="line"><span class="number">1</span>/<span class="number">1</span>: running   [==================================================&gt;]</span><br><span class="line">verify: Service converged</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">说明</span><br><span class="line">* 创建一个服务,名为nginx_svc<span class="literal">-1</span></span><br><span class="line">* replicas <span class="number">1</span>指定<span class="number">1</span>个副本</span><br><span class="line">* -<span class="literal">-publish</span> <span class="number">80</span>:<span class="number">80</span>  将服务内部的<span class="number">80</span>端口发布到外部网络的<span class="number">80</span>端口</span><br><span class="line">* 使用的镜像为`192.<span class="number">168.10</span>.<span class="number">15</span>/library/nginx:v1`</span><br></pre></td></tr></table></figure>







<h3 id="4-2-3-查看已发布服务"><a href="#4-2-3-查看已发布服务" class="headerlink" title="4.2.3 查看已发布服务"></a>4.2.3 查看已发布服务</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker service ls</span></span><br><span class="line">ID             NAME          MODE         REPLICAS   IMAGE                            PORTS</span><br><span class="line">ucif0ibkjqrd   nginx<span class="literal">-svc</span><span class="literal">-1</span>   replicated   <span class="number">1</span>/<span class="number">1</span>        <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v1   *:<span class="number">80</span>-&gt;<span class="number">80</span>/tcp</span><br></pre></td></tr></table></figure>



<h3 id="4-2-4-查看已发布服务容器"><a href="#4-2-4-查看已发布服务容器" class="headerlink" title="4.2.4 查看已发布服务容器"></a>4.2.4 查看已发布服务容器</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker service ps  nginx-svc-1</span></span><br><span class="line">ID             NAME            IMAGE                            NODE      DESIRED STATE   CURRENT STATE            ERROR     PORTS</span><br><span class="line"><span class="number">47</span>t0s0egf6xf   nginx<span class="literal">-svc</span><span class="literal">-1</span>.<span class="number">1</span>   <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v1   sw1       Running         Running <span class="number">48</span> minutes ago</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sw1</span> ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                            COMMAND                  CREATED          STATUS          PORTS     NAMES</span><br><span class="line"><span class="number">1</span>bdf8981f511   <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v1   <span class="string">&quot;/docker-entrypoint.…&quot;</span>   <span class="number">53</span> minutes ago   Up <span class="number">53</span> minutes   <span class="number">80</span>/tcp    nginx<span class="literal">-svc</span><span class="literal">-1</span>.<span class="number">1.47</span>t0s0egf6xf1n8m0c0jez3q0</span><br></pre></td></tr></table></figure>



<h3 id="4-2-5-访问已发布的服务"><a href="#4-2-5-访问已发布的服务" class="headerlink" title="4.2.5 访问已发布的服务"></a>4.2.5 访问已发布的服务</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># curl http://192.168.10.10</span></span><br><span class="line">v1</span><br><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># curl http://192.168.10.11</span></span><br><span class="line">v1</span><br><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># curl http://192.168.10.12</span></span><br><span class="line">v1</span><br><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># curl http://192.168.10.13</span></span><br><span class="line">v1</span><br><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># curl http://192.168.10.14</span></span><br><span class="line">v1</span><br></pre></td></tr></table></figure>



<p><strong>在集群之外的主机访问</strong></p>
<p><img src="/images/Docker/Docker%E4%B8%BB%E6%9C%BA%E9%9B%86%E7%BE%A4%E5%8C%96%E6%96%B9%E6%A1%88DockerSwarm.assets/image-20220216174612048.png" alt="image-20220216174612048"></p>
<h2 id="4-3-服务扩展"><a href="#4-3-服务扩展" class="headerlink" title="4.3 服务扩展"></a>4.3 服务扩展</h2><p>使用scale指定副本数来扩展</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker service scale nginx-svc-1=2</span></span><br><span class="line">nginx<span class="literal">-svc</span><span class="literal">-1</span> scaled to <span class="number">2</span></span><br><span class="line">overall progress: <span class="number">2</span> out of <span class="number">2</span> tasks</span><br><span class="line"><span class="number">1</span>/<span class="number">2</span>: running   [==================================================&gt;]</span><br><span class="line"><span class="number">2</span>/<span class="number">2</span>: running   [==================================================&gt;]</span><br><span class="line">verify: Service converged</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker service ls</span></span><br><span class="line">ID             NAME          MODE         REPLICAS   IMAGE                            PORTS</span><br><span class="line">ucif0ibkjqrd   nginx<span class="literal">-svc</span><span class="literal">-1</span>   replicated   <span class="number">2</span>/<span class="number">2</span>        <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v1   *:<span class="number">80</span>-&gt;<span class="number">80</span>/tcp</span><br></pre></td></tr></table></figure>





<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker service ps nginx-svc-1</span></span><br><span class="line">ID             NAME            IMAGE                            NODE      DESIRED STATE   CURRENT STATE               ERROR     PORTS</span><br><span class="line"><span class="number">47</span>t0s0egf6xf   nginx<span class="literal">-svc</span><span class="literal">-1</span>.<span class="number">1</span>   <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v1   sw1       Running         Running about an hour ago</span><br><span class="line">oy16nuh5udn0   nginx<span class="literal">-svc</span><span class="literal">-1</span>.<span class="number">2</span>   <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v1   sw2       Running         Running <span class="number">57</span> seconds ago</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sw1</span> ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                            COMMAND                  CREATED             STATUS             PORTS     NAMES</span><br><span class="line"><span class="number">1</span>bdf8981f511   <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v1   <span class="string">&quot;/docker-entrypoint.…&quot;</span>   About an hour ago   Up About an hour   <span class="number">80</span>/tcp    nginx<span class="literal">-svc</span><span class="literal">-1</span>.<span class="number">1.47</span>t0s0egf6xf1n8m0c0jez3q0</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sw2</span> ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                            COMMAND                  CREATED              STATUS              PORTS     NAMES</span><br><span class="line"><span class="number">0923</span>c0d10223   <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v1   <span class="string">&quot;/docker-entrypoint.…&quot;</span>   About a minute ago   Up About a minute   <span class="number">80</span>/tcp    nginx<span class="literal">-svc</span><span class="literal">-1</span>.<span class="number">2</span>.oy16nuh5udn0s1hda5bcpr9hd</span><br></pre></td></tr></table></figure>



<p><strong>问题：现在仅扩展为2个副本，如果把服务扩展到3个副本，集群会如何分配主机呢？</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker service scale nginx-svc-1=3</span></span><br><span class="line">nginx<span class="literal">-svc</span><span class="literal">-1</span> scaled to <span class="number">3</span></span><br><span class="line">overall progress: <span class="number">3</span> out of <span class="number">3</span> tasks</span><br><span class="line"><span class="number">1</span>/<span class="number">3</span>: running   [==================================================&gt;]</span><br><span class="line"><span class="number">2</span>/<span class="number">3</span>: running   [==================================================&gt;]</span><br><span class="line"><span class="number">3</span>/<span class="number">3</span>: running   [==================================================&gt;]</span><br><span class="line">verify: Service converged</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker service ps nginx-svc-1</span></span><br><span class="line">ID             NAME            IMAGE                            NODE      DESIRED STATE   CURRENT STATE               ERROR     PORTS</span><br><span class="line"><span class="number">47</span>t0s0egf6xf   nginx<span class="literal">-svc</span><span class="literal">-1</span>.<span class="number">1</span>   <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v1   sw1       Running         Running about an hour ago</span><br><span class="line">oy16nuh5udn0   nginx<span class="literal">-svc</span><span class="literal">-1</span>.<span class="number">2</span>   <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v1   sw2       Running         Running <span class="number">12</span> minutes ago</span><br><span class="line">mn9fwxqbc9d1   nginx<span class="literal">-svc</span><span class="literal">-1</span>.<span class="number">3</span>   <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v1   sm1       Running         Running <span class="number">9</span> minutes ago</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">说明：</span><br><span class="line">当把服务扩展到一定数量时，管理节点也会参与到负载运行中来。</span><br></pre></td></tr></table></figure>





<h2 id="4-4-服务裁减"><a href="#4-4-服务裁减" class="headerlink" title="4.4 服务裁减"></a>4.4 服务裁减</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker service scale nginx-svc-1=2</span></span><br><span class="line">nginx<span class="literal">-svc</span><span class="literal">-1</span> scaled to <span class="number">2</span></span><br><span class="line">overall progress: <span class="number">2</span> out of <span class="number">2</span> tasks</span><br><span class="line"><span class="number">1</span>/<span class="number">2</span>: running   [==================================================&gt;]</span><br><span class="line"><span class="number">2</span>/<span class="number">2</span>: running   [==================================================&gt;]</span><br><span class="line">verify: Service converged</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker service ls</span></span><br><span class="line">ID             NAME          MODE         REPLICAS   IMAGE                            PORTS</span><br><span class="line">ucif0ibkjqrd   nginx<span class="literal">-svc</span><span class="literal">-1</span>   replicated   <span class="number">2</span>/<span class="number">2</span>        <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v1   *:<span class="number">80</span>-&gt;<span class="number">80</span>/tcp</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker service ps nginx-svc-1</span></span><br><span class="line">ID             NAME            IMAGE                            NODE      DESIRED STATE   CURRENT STATE            ERROR     PORTS</span><br><span class="line"><span class="number">47</span>t0s0egf6xf   nginx<span class="literal">-svc</span><span class="literal">-1</span>.<span class="number">1</span>   <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v1   sw1       Running         Running <span class="number">2</span> hours ago</span><br><span class="line">oy16nuh5udn0   nginx<span class="literal">-svc</span><span class="literal">-1</span>.<span class="number">2</span>   <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v1   sw2       Running         Running <span class="number">29</span> minutes ago</span><br></pre></td></tr></table></figure>



<h2 id="4-5-负载均衡"><a href="#4-5-负载均衡" class="headerlink" title="4.5 负载均衡"></a>4.5 负载均衡</h2><blockquote>
<p>服务中包含多个容器时，每次访问将以轮询的方式访问到每个容器</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">修改sw1主机中容器网页文件</span><br><span class="line">[<span class="type">root</span>@<span class="type">sw1</span> ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                            COMMAND                  CREATED             STATUS             PORTS     NAMES</span><br><span class="line"><span class="number">1</span>bdf8981f511   <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v1   <span class="string">&quot;/docker-entrypoint.…&quot;</span>   About an hour ago   Up About an hour   <span class="number">80</span>/tcp    nginx<span class="literal">-svc</span><span class="literal">-1</span>.<span class="number">1.47</span>t0s0egf6xf1n8m0c0jez3q0</span><br><span class="line">[<span class="type">root</span>@<span class="type">sw1</span> ~]<span class="comment"># docker exec -it 1bdf bash</span></span><br><span class="line">root@<span class="number">1</span>bdf8981f511:/<span class="comment"># echo &quot;sw1 web&quot; &gt; /usr/share/nginx/html/index.html</span></span><br><span class="line">root@<span class="number">1</span>bdf8981f511:/<span class="comment"># exit</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">修改sw2主机中容器网页文件</span><br><span class="line">[<span class="type">root</span>@<span class="type">sw2</span> ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                            COMMAND                  CREATED          STATUS          PORTS     NAMES</span><br><span class="line"><span class="number">0923</span>c0d10223   <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v1   <span class="string">&quot;/docker-entrypoint.…&quot;</span>   <span class="number">42</span> minutes ago   Up <span class="number">42</span> minutes   <span class="number">80</span>/tcp    nginx<span class="literal">-svc</span><span class="literal">-1</span>.<span class="number">2</span>.oy16nuh5udn0s1hda5bcpr9hd</span><br><span class="line">[<span class="type">root</span>@<span class="type">sw2</span> ~]<span class="comment"># docker exec -it 0923 bash</span></span><br><span class="line">root@<span class="number">0923</span>c0d10223:/<span class="comment"># echo &quot;sw2 web&quot; &gt; /usr/share/nginx/html/index.html</span></span><br><span class="line">root@<span class="number">0923</span>c0d10223:/<span class="comment"># exit</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># curl http://192.168.10.10</span></span><br><span class="line">sw1 web</span><br><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># curl http://192.168.10.10</span></span><br><span class="line">sw2 web</span><br><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># curl http://192.168.10.10</span></span><br><span class="line">sw1 web</span><br><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># curl http://192.168.10.10</span></span><br><span class="line">sw2 web</span><br></pre></td></tr></table></figure>



<h2 id="4-6-删除服务"><a href="#4-6-删除服务" class="headerlink" title="4.6  删除服务"></a>4.6  删除服务</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker service ls</span></span><br><span class="line">ID             NAME          MODE         REPLICAS   IMAGE                            PORTS</span><br><span class="line">ucif0ibkjqrd   nginx<span class="literal">-svc</span><span class="literal">-1</span>   replicated   <span class="number">2</span>/<span class="number">2</span>        <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v1   *:<span class="number">80</span>-&gt;<span class="number">80</span>/tcp</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker service rm nginx-svc-1</span></span><br><span class="line">nginx<span class="literal">-svc</span><span class="literal">-1</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker service ls</span></span><br><span class="line">ID        NAME      MODE      REPLICAS   IMAGE     PORTS</span><br></pre></td></tr></table></figure>



<h2 id="4-7-服务版本更新"><a href="#4-7-服务版本更新" class="headerlink" title="4.7 服务版本更新"></a>4.7 服务版本更新</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker service create --name nginx-svc --replicas=1 --publish 80:80 192.168.10.15/library/nginx:v1</span></span><br><span class="line">yz3wq6f1cgf10vtq5ne4qfwjz</span><br><span class="line">overall progress: <span class="number">1</span> out of <span class="number">1</span> tasks</span><br><span class="line"><span class="number">1</span>/<span class="number">1</span>: running   [==================================================&gt;]</span><br><span class="line">verify: Service converged</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># curl http://192.168.10.10</span></span><br><span class="line">v1</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker service update nginx-svc --image 192.168.10.15/library/nginx:v2</span></span><br><span class="line">nginx<span class="literal">-svc</span></span><br><span class="line">overall progress: <span class="number">1</span> out of <span class="number">1</span> tasks</span><br><span class="line"><span class="number">1</span>/<span class="number">1</span>: running   [==================================================&gt;]</span><br><span class="line">verify: Service converged</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># curl http://192.168.10.10</span></span><br><span class="line">v2</span><br></pre></td></tr></table></figure>





<h2 id="4-8-服务版本回退"><a href="#4-8-服务版本回退" class="headerlink" title="4.8 服务版本回退"></a>4.8 服务版本回退</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker service update nginx-svc --image 192.168.10.15/library/nginx:v1</span></span><br><span class="line">nginx<span class="literal">-svc</span></span><br><span class="line">overall progress: <span class="number">1</span> out of <span class="number">1</span> tasks</span><br><span class="line"><span class="number">1</span>/<span class="number">1</span>: running   [==================================================&gt;]</span><br><span class="line">verify: Service converged</span><br></pre></td></tr></table></figure>



<h2 id="4-9-服务版本滚动间隔更新"><a href="#4-9-服务版本滚动间隔更新" class="headerlink" title="4.9 服务版本滚动间隔更新"></a>4.9 服务版本滚动间隔更新</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker service create --name nginx-svc --replicas 60 --publish 80:80 192.168.10.15/library/nginx:v1</span></span><br><span class="line">pqrt561dckg2wfpect3vf9ll0</span><br><span class="line">overall progress: <span class="number">60</span> out of <span class="number">60</span> tasks</span><br><span class="line">verify: Service converged</span><br></pre></td></tr></table></figure>





<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker service update --replicas 60 --image 192.168.10.15/library/nginx:v2 --update-parallelism 5 --update-delay 30s nginx-svc</span></span><br><span class="line">nginx<span class="literal">-svc</span></span><br><span class="line">overall progress: <span class="number">3</span> out of <span class="number">3</span> tasks</span><br><span class="line"><span class="number">1</span>/<span class="number">3</span>: running   [==================================================&gt;]</span><br><span class="line"><span class="number">2</span>/<span class="number">3</span>: running   [==================================================&gt;]</span><br><span class="line"><span class="number">3</span>/<span class="number">3</span>: running   [==================================================&gt;]</span><br><span class="line">verify: Service converged</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">说明</span><br><span class="line">* -<span class="literal">-update</span><span class="literal">-parallelism</span> <span class="number">5</span> 指定并行更新数量</span><br><span class="line">* -<span class="literal">-update</span><span class="literal">-delay</span> <span class="number">30</span>s 指定更新间隔时间</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">docker swarm滚动更新会造成节点上有<span class="keyword">exit</span>状态的容器,可以考虑清除</span><br><span class="line">命令如下：</span><br><span class="line">[<span class="type">root</span>@<span class="type">sw1</span> ~]<span class="comment"># docker container prune</span></span><br><span class="line">WARNING! This will remove all stopped containers.</span><br><span class="line">Are you sure you want to <span class="keyword">continue</span>? [<span class="type">y</span>/<span class="type">N</span>] y</span><br></pre></td></tr></table></figure>



<h2 id="4-10-副本控制器"><a href="#4-10-副本控制器" class="headerlink" title="4.10 副本控制器"></a>4.10 副本控制器</h2><blockquote>
<p>副本控制器</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker service ls</span></span><br><span class="line">ID             NAME        MODE         REPLICAS   IMAGE                            PORTS</span><br><span class="line">yz3wq6f1cgf1   nginx<span class="literal">-svc</span>   replicated   <span class="number">3</span>/<span class="number">3</span>        <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v2   *:<span class="number">80</span>-&gt;<span class="number">80</span>/tcp</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker service ps nginx-svc</span></span><br><span class="line">ID             NAME              IMAGE                            NODE      DESIRED STATE   CURRENT STATE          ERROR     PORTS</span><br><span class="line">x78l0santsbb   nginx<span class="literal">-svc</span>.<span class="number">1</span>       <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v2   sw2       Running         Running <span class="number">3</span> hours ago</span><br><span class="line">ura9isskfxku    \_ nginx<span class="literal">-svc</span>.<span class="number">1</span>   <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v1   sm1       Shutdown        Shutdown <span class="number">3</span> hours ago</span><br><span class="line">z738gvgazish    \_ nginx<span class="literal">-svc</span>.<span class="number">1</span>   <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v2   sw1       Shutdown        Shutdown <span class="number">3</span> hours ago</span><br><span class="line"><span class="number">3</span>qsrkkxn32bl    \_ nginx<span class="literal">-svc</span>.<span class="number">1</span>   <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v1   sm3       Shutdown        Shutdown <span class="number">3</span> hours ago</span><br><span class="line">psbi0mxu3amy   nginx<span class="literal">-svc</span>.<span class="number">2</span>       <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v2   sw1       Running         Running <span class="number">3</span> hours ago</span><br><span class="line">zpjw39bwhd78   nginx<span class="literal">-svc</span>.<span class="number">3</span>       <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v2   sm1       Running         Running <span class="number">3</span> hours ago</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                            COMMAND                  CREATED       STATUS       PORTS     NAMES</span><br><span class="line"><span class="number">81</span>fffd9132d8   <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v2   <span class="string">&quot;/docker-entrypoint.…&quot;</span>   <span class="number">3</span> hours ago   Up <span class="number">3</span> hours   <span class="number">80</span>/tcp    nginx<span class="literal">-svc</span>.<span class="number">3</span>.zpjw39bwhd78pw49svpy4q8zd</span><br><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker stop 81fffd9132d8;docker rm 81fffd9132d8</span></span><br><span class="line"><span class="number">81</span>fffd9132d8</span><br><span class="line"><span class="number">81</span>fffd9132d8</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker service ls</span></span><br><span class="line">ID             NAME        MODE         REPLICAS   IMAGE                            PORTS</span><br><span class="line">yz3wq6f1cgf1   nginx<span class="literal">-svc</span>   replicated   <span class="number">3</span>/<span class="number">3</span>        <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v2   *:<span class="number">80</span>-&gt;<span class="number">80</span>/tcp</span><br><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker service ps nginx-svc</span></span><br><span class="line">ID             NAME              IMAGE                            NODE      DESIRED STATE   CURRENT STATE            ERROR                         PORTS</span><br><span class="line">x78l0santsbb   nginx<span class="literal">-svc</span>.<span class="number">1</span>       <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v2   sw2       Running         Running <span class="number">3</span> hours ago</span><br><span class="line">ura9isskfxku    \_ nginx<span class="literal">-svc</span>.<span class="number">1</span>   <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v1   sm1       Shutdown        Shutdown <span class="number">3</span> hours ago</span><br><span class="line">z738gvgazish    \_ nginx<span class="literal">-svc</span>.<span class="number">1</span>   <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v2   sw1       Shutdown        Shutdown <span class="number">3</span> hours ago</span><br><span class="line"><span class="number">3</span>qsrkkxn32bl    \_ nginx<span class="literal">-svc</span>.<span class="number">1</span>   <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v1   sm3       Shutdown        Shutdown <span class="number">3</span> hours ago</span><br><span class="line">psbi0mxu3amy   nginx<span class="literal">-svc</span>.<span class="number">2</span>       <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v2   sw1       Running         Running <span class="number">3</span> hours ago</span><br><span class="line">qv6ya3crz1fj   nginx<span class="literal">-svc</span>.<span class="number">3</span>       <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v2   sm1       Running         Running <span class="number">13</span> seconds ago</span><br><span class="line">zpjw39bwhd78    \_ nginx<span class="literal">-svc</span>.<span class="number">3</span>   <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v2   sm1       Shutdown        Failed <span class="number">19</span> seconds ago    <span class="string">&quot;task: non-zero exit (137)&quot;</span></span><br></pre></td></tr></table></figure>



<h2 id="4-11-在指定网络中发布服务"><a href="#4-11-在指定网络中发布服务" class="headerlink" title="4.11 在指定网络中发布服务"></a>4.11 在指定网络中发布服务</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker network create -d overlay tomcat-net</span></span><br><span class="line">mrkgccdfddy8zg92ja6fpox7p</span><br><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID     NAME              DRIVER    SCOPE</span><br><span class="line"><span class="number">5</span>ba369c13795   bridge            bridge    local</span><br><span class="line"><span class="number">54568</span>abb541a   docker_gwbridge   bridge    local</span><br><span class="line"><span class="number">4</span>edcb5c4a324   host              host      local</span><br><span class="line">l6xmfxiiseqk   ingress           overlay   swarm</span><br><span class="line"><span class="number">5</span>d06d748c9c7   none              null      local</span><br><span class="line">mrkgccdfddy8   tomcat<span class="literal">-net</span>        overlay   swarm</span><br><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker network inspect tomcat-net</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;tomcat-net&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Id&quot;</span>: <span class="string">&quot;mrkgccdfddy8zg92ja6fpox7p&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Created&quot;</span>: <span class="string">&quot;2022-02-16T13:56:52.338589006Z&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;swarm&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;overlay&quot;</span>,</span><br><span class="line">        <span class="string">&quot;EnableIPv6&quot;</span>: <span class="type">false</span>,</span><br><span class="line">        <span class="string">&quot;IPAM&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Options&quot;</span>: <span class="type">null</span>,</span><br><span class="line">            <span class="string">&quot;Config&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;Subnet&quot;</span>: <span class="string">&quot;10.0.1.0/24&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;10.0.1.1&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Internal&quot;</span>: <span class="type">false</span>,</span><br><span class="line">        <span class="string">&quot;Attachable&quot;</span>: <span class="type">false</span>,</span><br><span class="line">        <span class="string">&quot;Ingress&quot;</span>: <span class="type">false</span>,</span><br><span class="line">        <span class="string">&quot;ConfigFrom&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Network&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;ConfigOnly&quot;</span>: <span class="type">false</span>,</span><br><span class="line">        <span class="string">&quot;Containers&quot;</span>: <span class="type">null</span>,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;com.docker.network.driver.overlay.vxlanid_list&quot;</span>: <span class="string">&quot;4097&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: <span class="type">null</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">说明：</span><br><span class="line">创建名为tomcat<span class="literal">-net</span>的覆盖网络(Overlay Netowork)，这是个二层网络，处于该网络下的docker容器，即使宿主机不一样，也能相互访问</span><br></pre></td></tr></table></figure>









<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker service create --name tomcat \</span></span><br><span class="line">-<span class="literal">-network</span> tomcat<span class="literal">-net</span> \</span><br><span class="line"><span class="literal">-p</span> <span class="number">8080</span>:<span class="number">8080</span> \</span><br><span class="line">-<span class="literal">-replicas</span> <span class="number">2</span> \</span><br><span class="line">tomcat:<span class="number">7.0</span>.<span class="number">96</span><span class="literal">-jdk8</span><span class="literal">-openjdk</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">说明：</span><br><span class="line">创建名为tomcat的服务，使用了刚才创建的覆盖网络</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker service ls</span></span><br><span class="line">ID             NAME      MODE         REPLICAS   IMAGE                        PORTS</span><br><span class="line">wgqkz8vymxkr   tomcat    replicated   <span class="number">2</span>/<span class="number">2</span>        tomcat:<span class="number">7.0</span>.<span class="number">96</span><span class="literal">-jdk8</span><span class="literal">-openjdk</span>   *:<span class="number">8080</span>-&gt;<span class="number">8080</span>/tcp</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker service ps tomcat</span></span><br><span class="line">ID             NAME       IMAGE                        NODE      DESIRED STATE   CURRENT STATE            ERROR     PORTS</span><br><span class="line">fsx1fnssbmtg   tomcat.<span class="number">1</span>   tomcat:<span class="number">7.0</span>.<span class="number">96</span><span class="literal">-jdk8</span><span class="literal">-openjdk</span>   sm3       Running         Running <span class="number">49</span> seconds ago</span><br><span class="line">gq0ogycj7orb   tomcat.<span class="number">2</span>   tomcat:<span class="number">7.0</span>.<span class="number">96</span><span class="literal">-jdk8</span><span class="literal">-openjdk</span>   sm2       Running         Running <span class="number">58</span> seconds ago</span><br></pre></td></tr></table></figure>







<p><img src="/images/Docker/Docker%E4%B8%BB%E6%9C%BA%E9%9B%86%E7%BE%A4%E5%8C%96%E6%96%B9%E6%A1%88DockerSwarm.assets/image-20220216222436884.png" alt="image-20220216222436884"></p>
<h2 id="4-12-服务网络模式"><a href="#4-12-服务网络模式" class="headerlink" title="4.12 服务网络模式"></a>4.12 服务网络模式</h2><ul>
<li><p>服务模式一共有两种：Ingress和Host，如果不指定，则默认的是Ingress；</p>
<ul>
<li>Ingress模式下，到达Swarm任何节点的8080端口的流量，都会映射到任何服务副本的内部80端口，就算该节点上没有tomcat服务副本也会映射；</li>
</ul>
</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker service create --name tomcat \</span></span><br><span class="line">-<span class="literal">-network</span> tomcat<span class="literal">-net</span> \</span><br><span class="line"><span class="literal">-p</span> <span class="number">8080</span>:<span class="number">8080</span> \</span><br><span class="line">-<span class="literal">-replicas</span> <span class="number">2</span> \</span><br><span class="line">tomcat:<span class="number">7.0</span>.<span class="number">96</span><span class="literal">-jdk8</span><span class="literal">-openjdk</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker service ps tomcat</span></span><br><span class="line">ID             NAME       IMAGE                        NODE      DESIRED STATE   CURRENT STATE           ERROR     PORTS</span><br><span class="line">fsx1fnssbmtg   tomcat.<span class="number">1</span>   tomcat:<span class="number">7.0</span>.<span class="number">96</span><span class="literal">-jdk8</span><span class="literal">-openjdk</span>   sm3       Running         Running <span class="number">8</span> minutes ago</span><br><span class="line">gq0ogycj7orb   tomcat.<span class="number">2</span>   tomcat:<span class="number">7.0</span>.<span class="number">96</span><span class="literal">-jdk8</span><span class="literal">-openjdk</span>   sm2       Running         Running <span class="number">8</span> minutes ago</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm2</span> ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                        COMMAND             CREATED         STATUS         PORTS      NAMES</span><br><span class="line">f650498c8e71   tomcat:<span class="number">7.0</span>.<span class="number">96</span><span class="literal">-jdk8</span><span class="literal">-openjdk</span>   <span class="string">&quot;catalina.sh run&quot;</span>   <span class="number">9</span> minutes ago   Up <span class="number">9</span> minutes   <span class="number">8080</span>/tcp   tomcat.<span class="number">2</span>.gq0ogycj7orbu4ua1dwk140as</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">sm2</span> ~]<span class="comment"># docker inspect f650498c8e71 | grep IPAddress</span></span><br><span class="line">            <span class="string">&quot;SecondaryIPAddresses&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;10.0.0.24&quot;</span>, ingress IP地址</span><br><span class="line">                    <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;10.0.1.9&quot;</span>,  容器IP地址</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm3</span> ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                        COMMAND             CREATED         STATUS         PORTS      NAMES</span><br><span class="line"><span class="number">9</span>d0c412717d7   tomcat:<span class="number">7.0</span>.<span class="number">96</span><span class="literal">-jdk8</span><span class="literal">-openjdk</span>   <span class="string">&quot;catalina.sh run&quot;</span>   <span class="number">9</span> minutes ago   Up <span class="number">9</span> minutes   <span class="number">8080</span>/tcp   tomcat.<span class="number">1</span>.fsx1fnssbmtgv3qh84fgqknlh</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">sm3</span> ~]<span class="comment"># docker inspect 9d0c412717d7 | grep IPAddress</span></span><br><span class="line">            <span class="string">&quot;SecondaryIPAddresses&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;10.0.0.23&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;10.0.1.8&quot;</span>,</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># ss -anput | grep &quot;:8080&quot;</span></span><br><span class="line">tcp    LISTEN     <span class="number">0</span>      <span class="number">128</span>    [::]:<span class="number">8080</span>               [::]:*                   users:((<span class="string">&quot;dockerd&quot;</span>,pid=<span class="number">2727</span>,fd=<span class="number">54</span>))</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm2</span> ~]<span class="comment"># ss -anput | grep &quot;:8080&quot;</span></span><br><span class="line">tcp    LISTEN     <span class="number">0</span>      <span class="number">128</span>    [::]:<span class="number">8080</span>               [::]:*                   users:((<span class="string">&quot;dockerd&quot;</span>,pid=<span class="number">1229</span>,fd=<span class="number">26</span>))</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm3</span> ~]<span class="comment"># ss -anput | grep &quot;:8080&quot;</span></span><br><span class="line">tcp    LISTEN     <span class="number">0</span>      <span class="number">128</span>    [::]:<span class="number">8080</span>               [::]:*                   users:((<span class="string">&quot;dockerd&quot;</span>,pid=<span class="number">1226</span>,fd=<span class="number">22</span>))</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sw1</span> ~]<span class="comment"># ss -anput | grep &quot;:8080&quot;</span></span><br><span class="line">tcp    LISTEN     <span class="number">0</span>      <span class="number">128</span>    [::]:<span class="number">8080</span>               [::]:*                   users:((<span class="string">&quot;dockerd&quot;</span>,pid=<span class="number">1229</span>,fd=<span class="number">39</span>))</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sw2</span> ~]<span class="comment"># ss -anput | grep &quot;:8080&quot;</span></span><br><span class="line">tcp    LISTEN     <span class="number">0</span>      <span class="number">128</span>    [::]:<span class="number">8080</span>               [::]:*                   users:((<span class="string">&quot;dockerd&quot;</span>,pid=<span class="number">1229</span>,fd=<span class="number">22</span>))</span><br></pre></td></tr></table></figure>





<ul>
<li>Host模式下，仅在运行有容器副本的机器上开放端口，使用Host模式的命令如下：</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker service create --name tomcat \</span></span><br><span class="line">-<span class="literal">-network</span> tomcat<span class="literal">-net</span> \</span><br><span class="line">-<span class="literal">-publish</span> published=<span class="number">8080</span>,target=<span class="number">8080</span>,mode=host \</span><br><span class="line">-<span class="literal">-replicas</span> <span class="number">3</span> \</span><br><span class="line">tomcat:<span class="number">7.0</span>.<span class="number">96</span><span class="literal">-jdk8</span><span class="literal">-openjdk</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker service ps tomcat</span></span><br><span class="line">ID             NAME       IMAGE                        NODE      DESIRED STATE   CURRENT STATE            ERROR     PORTS</span><br><span class="line">x6022h0oungs   tomcat.<span class="number">1</span>   tomcat:<span class="number">7.0</span>.<span class="number">96</span><span class="literal">-jdk8</span><span class="literal">-openjdk</span>   sw1       Running         Running <span class="number">19</span> seconds ago             *:<span class="number">8080</span>-&gt;<span class="number">8080</span>/tcp,*:<span class="number">8080</span>-&gt;<span class="number">8080</span>/tcp</span><br><span class="line">jmnthwqi6ubf   tomcat.<span class="number">2</span>   tomcat:<span class="number">7.0</span>.<span class="number">96</span><span class="literal">-jdk8</span><span class="literal">-openjdk</span>   sm1       Running         Running <span class="number">18</span> seconds ago             *:<span class="number">8080</span>-&gt;<span class="number">8080</span>/tcp,*:<span class="number">8080</span>-&gt;<span class="number">8080</span>/tcp</span><br><span class="line">nvcbijnfy2es   tomcat.<span class="number">3</span>   tomcat:<span class="number">7.0</span>.<span class="number">96</span><span class="literal">-jdk8</span><span class="literal">-openjdk</span>   sw2       Running         Running <span class="number">19</span> seconds ago             *:<span class="number">8080</span>-&gt;<span class="number">8080</span>/tcp,*:<span class="number">8080</span>-&gt;<span class="number">8080</span>/tcp</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># ss -anput | grep &quot;:8080&quot;</span></span><br><span class="line">tcp    LISTEN     <span class="number">0</span>      <span class="number">128</span>       *:<span class="number">8080</span>                  *:*                   users:((<span class="string">&quot;docker-proxy&quot;</span>,pid=<span class="number">20963</span>,fd=<span class="number">4</span>))</span><br><span class="line">tcp    LISTEN     <span class="number">0</span>      <span class="number">128</span>    [::]:<span class="number">8080</span>               [::]:*                   users:((<span class="string">&quot;docker-proxy&quot;</span>,pid=<span class="number">20967</span>,fd=<span class="number">4</span>))</span><br></pre></td></tr></table></figure>





<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sw1</span> ~]<span class="comment"># ss -anput | grep &quot;:8080&quot;</span></span><br><span class="line">tcp    LISTEN     <span class="number">0</span>      <span class="number">128</span>       *:<span class="number">8080</span>                  *:*                   users:((<span class="string">&quot;docker-proxy&quot;</span>,pid=<span class="number">20459</span>,fd=<span class="number">4</span>))</span><br><span class="line">tcp    LISTEN     <span class="number">0</span>      <span class="number">128</span>    [::]:<span class="number">8080</span>               [::]:*                   users:((<span class="string">&quot;docker-proxy&quot;</span>,pid=<span class="number">20463</span>,fd=<span class="number">4</span>))</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sw2</span> ~]<span class="comment"># ss -anput | grep &quot;:8080&quot;</span></span><br><span class="line">tcp    LISTEN     <span class="number">0</span>      <span class="number">128</span>       *:<span class="number">8080</span>                  *:*                   users:((<span class="string">&quot;docker-proxy&quot;</span>,pid=<span class="number">19938</span>,fd=<span class="number">4</span>))</span><br><span class="line">tcp    LISTEN     <span class="number">0</span>      <span class="number">128</span>    [::]:<span class="number">8080</span>               [::]:*                   users:((<span class="string">&quot;docker-proxy&quot;</span>,pid=<span class="number">19942</span>,fd=<span class="number">4</span>))</span><br></pre></td></tr></table></figure>





<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">没有被映射端口</span><br><span class="line">[<span class="type">root</span>@<span class="type">sm2</span> ~]<span class="comment"># ss -anput | grep &quot;:8080&quot;</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">sm3</span> ~]<span class="comment"># ss -anput | grep &quot;:8080&quot;</span></span><br></pre></td></tr></table></figure>



<h2 id="4-13-服务数据持久化存储"><a href="#4-13-服务数据持久化存储" class="headerlink" title="4.13 服务数据持久化存储"></a>4.13 服务数据持久化存储</h2><h3 id="4-13-1-本地存储"><a href="#4-13-1-本地存储" class="headerlink" title="4.13.1 本地存储"></a>4.13.1 本地存储</h3><h4 id="4-13-1-1-在集群所有主机上创建本地目录"><a href="#4-13-1-1-在集群所有主机上创建本地目录" class="headerlink" title="4.13.1.1 在集群所有主机上创建本地目录"></a>4.13.1.1 在集群所有主机上创建本地目录</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkdir -p /data/nginxdata</span></span><br></pre></td></tr></table></figure>



<h4 id="4-13-1-2-发布服务时挂载本地目录到容器中"><a href="#4-13-1-2-发布服务时挂载本地目录到容器中" class="headerlink" title="4.13.1.2 发布服务时挂载本地目录到容器中"></a>4.13.1.2 发布服务时挂载本地目录到容器中</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker service create --name nginx-svc --replicas 3 --mount &quot;type=bind,source=/data/nginxdata,target=/usr/share/nginx/html&quot; --publish 80:80  192.168.10.15/library/nginx:v1</span></span><br><span class="line"></span><br><span class="line">s31z75rniv4p53ycbqch3xbqm</span><br><span class="line">overall progress: <span class="number">3</span> out of <span class="number">3</span> tasks</span><br><span class="line"><span class="number">1</span>/<span class="number">3</span>: running   [==================================================&gt;]</span><br><span class="line"><span class="number">2</span>/<span class="number">3</span>: running   [==================================================&gt;]</span><br><span class="line"><span class="number">3</span>/<span class="number">3</span>: running   [==================================================&gt;]</span><br><span class="line">verify: Service converged</span><br></pre></td></tr></table></figure>



<h4 id="4-13-1-3-验证是否使用本地目录"><a href="#4-13-1-3-验证是否使用本地目录" class="headerlink" title="4.13.1.3 验证是否使用本地目录"></a>4.13.1.3 验证是否使用本地目录</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker service ls</span></span><br><span class="line">ID             NAME        MODE         REPLICAS   IMAGE                            PORTS</span><br><span class="line">s31z75rniv4p   nginx<span class="literal">-svc</span>   replicated   <span class="number">3</span>/<span class="number">3</span>        <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v1   *:<span class="number">80</span>-&gt;<span class="number">80</span>/tcp</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker service ps nginx-svc</span></span><br><span class="line">ID             NAME          IMAGE                            NODE      DESIRED STATE   CURRENT STATE            ERROR     PORTS</span><br><span class="line">vgfhk4lksbtp   nginx<span class="literal">-svc</span>.<span class="number">1</span>   <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v1   sm2       Running         Running <span class="number">54</span> seconds ago</span><br><span class="line">v2bs9araxeuc   nginx<span class="literal">-svc</span>.<span class="number">2</span>   <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v1   sw2       Running         Running <span class="number">59</span> seconds ago</span><br><span class="line"><span class="number">1</span>m7fobr3cscz   nginx<span class="literal">-svc</span>.<span class="number">3</span>   <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v1   sm3       Running         Running <span class="number">59</span> seconds ago</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm2</span> ~]<span class="comment"># ls /data/nginxdata/</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">sm2</span> ~]<span class="comment"># echo &quot;sm2 web&quot; &gt; /data/nginxdata/index.html</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm3</span> ~]<span class="comment"># ls /data/nginxdata/</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">sm3</span> ~]<span class="comment"># echo &quot;sm3 web&quot; &gt; /data/nginxdata/index.html</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sw2</span> ~]<span class="comment"># ls /data/nginxdata</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">sw2</span> ~]<span class="comment"># echo &quot;sw2 web&quot; &gt; /data/nginxdata/index.html</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># curl http://192.168.10.10</span></span><br><span class="line">sm2 web</span><br><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># curl http://192.168.10.10</span></span><br><span class="line">sm3 web</span><br><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># curl http://192.168.10.10</span></span><br><span class="line">sw2 web</span><br></pre></td></tr></table></figure>



<blockquote>
<p>存在数据一致性问题</p>
</blockquote>
<h3 id="4-13-2-网络存储"><a href="#4-13-2-网络存储" class="headerlink" title="4.13.2 网络存储"></a>4.13.2 网络存储</h3><ul>
<li>网络存储卷可以实现跨docker宿主机的数据共享,数据持久保存到网络存储卷中</li>
<li>在创建service时添加卷的挂载参数,网络存储卷可以帮助自动挂载(<strong>但需要集群节点都创建该网络存储卷</strong>)</li>
</ul>
<h4 id="4-13-2-1-部署NFS存储"><a href="#4-13-2-1-部署NFS存储" class="headerlink" title="4.13.2.1 部署NFS存储"></a>4.13.2.1 部署NFS存储</h4><blockquote>
<p>本案例以NFS提供远程存储为例</p>
</blockquote>
<blockquote>
<p>在192.168.10.15服务器上部署NFS服务，共享目录为docker swarm集群主机使用。</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">harbor</span> ~]<span class="comment"># mkdir /opt/dockervolume</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">harbor</span> ~]<span class="comment"># yum -y install nfs-utils</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">harbor</span> ~]<span class="comment"># vim /etc/exports</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">harbor</span> ~]<span class="comment"># cat /etc/exports</span></span><br><span class="line">/opt/dockervolume       *(rw,sync,no_root_squash)</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">harbor</span> ~]<span class="comment"># systemctl enable nfs-server</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">harbor</span> ~]<span class="comment"># systemctl start nfs-server</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">harbor</span> ~]<span class="comment"># showmount -e</span></span><br><span class="line">Export list <span class="keyword">for</span> harbor:</span><br><span class="line">/opt/dockervolume *</span><br></pre></td></tr></table></figure>



<h4 id="4-13-2-2-为集群所有主机安装nfs-utils软件"><a href="#4-13-2-2-为集群所有主机安装nfs-utils软件" class="headerlink" title="4.13.2.2 为集群所有主机安装nfs-utils软件"></a>4.13.2.2 为集群所有主机安装nfs-utils软件</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum -y install nfs-utils</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># showmount -e 192.168.10.15</span></span><br><span class="line">Export list <span class="keyword">for</span> <span class="number">192.168</span>.<span class="number">10.15</span>:</span><br><span class="line">/opt/dockervolume *</span><br></pre></td></tr></table></figure>



<h4 id="4-13-2-3-创建存储卷"><a href="#4-13-2-3-创建存储卷" class="headerlink" title="4.13.2.3 创建存储卷"></a>4.13.2.3 创建存储卷</h4><blockquote>
<p>集群中所有节点</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker volume create  --driver local --opt type=nfs --opt o=addr=192.168.10.15,rw --opt device=:/opt/dockervolume nginx_volume</span></span><br><span class="line">nginx_volume</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker volume ls</span></span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line">local     nginx_volume</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker volume inspect nginx_volume</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;CreatedAt&quot;</span>: <span class="string">&quot;2022-02-16T23:29:11+08:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;Mountpoint&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/nginx_volume/_data&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;nginx_volume&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;device&quot;</span>: <span class="string">&quot;:/opt/dockervolume&quot;</span>,</span><br><span class="line">            <span class="string">&quot;o&quot;</span>: <span class="string">&quot;addr=192.168.10.15,rw&quot;</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;nfs&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<h4 id="4-13-2-4-发布服务"><a href="#4-13-2-4-发布服务" class="headerlink" title="4.13.2.4 发布服务"></a>4.13.2.4 发布服务</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker service create  --name nginx-svc --replicas 3 --publish 80:80 --mount &quot;type=volume,source=nginx_volume,target=/usr/share/nginx/html&quot;  192.168.10.15/library/nginx:v1</span></span><br><span class="line">uh6k84b87n8vciuirln4zqb4v</span><br><span class="line">overall progress: <span class="number">3</span> out of <span class="number">3</span> tasks</span><br><span class="line"><span class="number">1</span>/<span class="number">3</span>: running   [==================================================&gt;]</span><br><span class="line"><span class="number">2</span>/<span class="number">3</span>: running   [==================================================&gt;]</span><br><span class="line"><span class="number">3</span>/<span class="number">3</span>: running   [==================================================&gt;]</span><br><span class="line">verify: Service converged</span><br></pre></td></tr></table></figure>



<h4 id="4-13-2-5-验证"><a href="#4-13-2-5-验证" class="headerlink" title="4.13.2.5 验证"></a>4.13.2.5 验证</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker service ls</span></span><br><span class="line">ID             NAME        MODE         REPLICAS   IMAGE                            PORTS</span><br><span class="line">uh6k84b87n8v   nginx<span class="literal">-svc</span>   replicated   <span class="number">3</span>/<span class="number">3</span>        <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v1   *:<span class="number">80</span>-&gt;<span class="number">80</span>/tcp</span><br><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker service ps nginx-svc</span></span><br><span class="line">ID             NAME          IMAGE                            NODE      DESIRED STATE   CURRENT STATE            ERROR     PORTS</span><br><span class="line">k2vxpav5oadf   nginx<span class="literal">-svc</span>.<span class="number">1</span>   <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v1   sw2       Running         Running <span class="number">43</span> seconds ago</span><br><span class="line">v8fh0r89wt5i   nginx<span class="literal">-svc</span>.<span class="number">2</span>   <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v1   sw1       Running         Running <span class="number">43</span> seconds ago</span><br><span class="line">xb0nyft8ou4d   nginx<span class="literal">-svc</span>.<span class="number">3</span>   <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v1   sm1       Running         Running <span class="number">43</span> seconds ago</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># df -Th | grep nfs</span></span><br><span class="line">:/opt/dockervolume      nfs        <span class="number">50</span>G  <span class="number">8.9</span>G   <span class="number">42</span>G   <span class="number">18</span>% /var/lib/docker/volumes/nginx_volume/_data</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sw1</span> ~]<span class="comment"># df -Th | grep nfs</span></span><br><span class="line">:/opt/dockervolume      nfs        <span class="number">50</span>G  <span class="number">8.9</span>G   <span class="number">42</span>G   <span class="number">18</span>% /var/lib/docker/volumes/nginx_volume/_data</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sw2</span> ~]<span class="comment"># df -Th | grep nfs</span></span><br><span class="line">:/opt/dockervolume      nfs        <span class="number">50</span>G  <span class="number">8.9</span>G   <span class="number">42</span>G   <span class="number">18</span>% /var/lib/docker/volumes/nginx_volume/_data</span><br></pre></td></tr></table></figure>





<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">harbor</span> ~]<span class="comment"># echo &quot;nfs test&quot; &gt; /opt/dockervolume/index.html</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># curl http://192.168.10.10</span></span><br><span class="line">nfs test</span><br><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># curl http://192.168.10.11</span></span><br><span class="line">nfs test</span><br><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># curl http://192.168.10.12</span></span><br><span class="line">nfs test</span><br><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># curl http://192.168.10.13</span></span><br><span class="line">nfs test</span><br><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># curl http://192.168.10.14</span></span><br><span class="line">nfs test</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="4-14-服务互联与服务发现"><a href="#4-14-服务互联与服务发现" class="headerlink" title="4.14 服务互联与服务发现"></a>4.14 服务互联与服务发现</h2><p>如果一个nginx服务与一个mysql服务之间需要连接,在docker swarm如何实现呢?</p>
<p><strong>方法1:</strong></p>
<p>把mysql服务也使用 <code>--publish</code>参数发布到外网,但这样做的缺点是:mysql这种服务发布到外网不安全</p>
<p><strong>方法2:</strong></p>
<p>将mysql服务等运行在内部网络,只需要nginx服务能够连接mysql就可以了,在docker swarm中可以使用==<strong>overlay</strong>==网络来实现。</p>
<p>但现在还有个问题,服务副本数发生变化时,容器内部的IP发生变化时,我们希望仍然能够访问到这个服务, 这就是**==服务发现（service discovery)==**.</p>
<p><strong>通过服务发现, service的使用者都不需要知道service运行在哪里,IP是多少,有多少个副本,就能让service通信</strong></p>
<p>下面使用<code>docker network ls</code>查看到的ingress网络就是一个overlay类型的网络,但它不支持服务发现</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID     NAME              DRIVER    SCOPE</span><br><span class="line"><span class="number">5</span>ba369c13795   bridge            bridge    local</span><br><span class="line"><span class="number">54568</span>abb541a   docker_gwbridge   bridge    local</span><br><span class="line"><span class="number">4</span>edcb5c4a324   host              host      local</span><br><span class="line">l6xmfxiiseqk   ingress           overlay   swarm 此处</span><br><span class="line"><span class="number">5</span>d06d748c9c7   none              null      local</span><br><span class="line">mrkgccdfddy8   tomcat<span class="literal">-net</span>        overlay   swarm</span><br></pre></td></tr></table></figure>

<p>我们<strong>需要自建一个overlay网络来实现服务发现, 需要相互通信的service也必须属于同一个overlay网络</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker network create --driver overlay --subnet 192.168.100.0/24 self-network</span></span><br><span class="line">ejpf8zzig5rjsgefqucopcsdt</span><br></pre></td></tr></table></figure>

<p>说明:</p>
<ul>
<li>–driver overlay指定为overlay类型</li>
<li>–subnet 分配网段</li>
<li>self-network  为自定义的网络名称</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID     NAME              DRIVER    SCOPE</span><br><span class="line"><span class="number">5</span>ba369c13795   bridge            bridge    local</span><br><span class="line"><span class="number">54568</span>abb541a   docker_gwbridge   bridge    local</span><br><span class="line"><span class="number">4</span>edcb5c4a324   host              host      local</span><br><span class="line">l6xmfxiiseqk   ingress           overlay   swarm</span><br><span class="line"><span class="number">5</span>d06d748c9c7   none              null      local</span><br><span class="line">ejpf8zzig5rj   self<span class="literal">-network</span>      overlay   swarm 此处</span><br><span class="line">mrkgccdfddy8   tomcat<span class="literal">-net</span>        overlay   swarm</span><br></pre></td></tr></table></figure>



<p><strong>验证自动发现</strong></p>
<p>1, 发布nignx-svc服务,指定在自建的overlay网络</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker service create --name nginx-svc --replicas 3 --network self-network --publish 80:80  192.168.10.15/library/nginx:v1</span></span><br><span class="line">rr21tvm1xpi6vk3ic83tfy9e5</span><br><span class="line">overall progress: <span class="number">3</span> out of <span class="number">3</span> tasks</span><br><span class="line"><span class="number">1</span>/<span class="number">3</span>: running   [==================================================&gt;]</span><br><span class="line"><span class="number">2</span>/<span class="number">3</span>: running   [==================================================&gt;]</span><br><span class="line"><span class="number">3</span>/<span class="number">3</span>: running   [==================================================&gt;]</span><br><span class="line">verify: Service converged</span><br></pre></td></tr></table></figure>

<p>2, 发布一个busybox服务,也指定在自建的overlay网络</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker service create --name test --network self-network  busybox sleep 100000</span></span><br><span class="line">w14lzhhzdyqwt18lrby4euw98</span><br><span class="line">overall progress: <span class="number">1</span> out of <span class="number">1</span> tasks</span><br><span class="line"><span class="number">1</span>/<span class="number">1</span>: running   [==================================================&gt;]</span><br><span class="line">verify: Service converged</span><br></pre></td></tr></table></figure>

<p>说明:</p>
<ul>
<li><p>服务名为test</p>
</li>
<li><p>busybox是一个集成了linux常用命令的软件,这里使用它可以比较方便的测试与nginx_service的连通性</p>
</li>
<li><p>没有指定副本,默认1个副本</p>
</li>
<li><p>因为它并不是长时间运行的daemon守护进程,所以运行一下就会退出.sleep 100000是指定一个长的运行时间,让它有足够的时间给我们测试</p>
</li>
</ul>
<p>3, 查出test服务在哪个节点运行的容器</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker service ps test</span></span><br><span class="line">ID             NAME      IMAGE            NODE      DESIRED STATE   CURRENT STATE                ERROR     PORTS</span><br><span class="line">x8nkifpdtyw5   test.<span class="number">1</span>    busybox:latest   sm2       Running         Running about a minute ago</span><br></pre></td></tr></table></figure>

<p>4, 去运行test服务的容器节点查找容器的名称</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm2</span> ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE            COMMAND          CREATED              STATUS              PORTS     NAMES</span><br><span class="line"><span class="number">8</span>df13819bd5c   busybox:latest   <span class="string">&quot;sleep 100000&quot;</span>   About a minute ago   Up About a minute             test.<span class="number">1</span>.x8nkifpdtyw5177zhr0r1lxad</span><br></pre></td></tr></table></figure>

<p>5, 使用查找出来的容器名称,执行命令测试</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm2</span> ~]<span class="comment"># docker exec -it test.1.x8nkifpdtyw5177zhr0r1lxad ping -c 2 nginx-svc</span></span><br><span class="line">PING nginx<span class="literal">-svc</span> (<span class="number">192.168</span>.<span class="number">100.2</span>): <span class="number">56</span> <span class="keyword">data</span> bytes</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">192.168</span>.<span class="number">100.2</span>: seq=<span class="number">0</span> ttl=<span class="number">64</span> time=<span class="number">0.093</span> ms</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">192.168</span>.<span class="number">100.2</span>: seq=<span class="number">1</span> ttl=<span class="number">64</span> time=<span class="number">0.162</span> ms</span><br><span class="line"></span><br><span class="line">--- nginx<span class="literal">-svc</span> ping statistics ---</span><br><span class="line"><span class="number">2</span> packets transmitted, <span class="number">2</span> packets received, <span class="number">0</span>% packet loss</span><br><span class="line">round<span class="literal">-trip</span> min/avg/max = <span class="number">0.093</span>/<span class="number">0.127</span>/<span class="number">0.162</span> ms</span><br></pre></td></tr></table></figure>

<p><strong>测试的结果为: test服务可以ping通nginx_service服务,并且返回的IP为自建网络的一个IP(192.168.100.2)</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker service inspect nginx-svc</span></span><br><span class="line">[</span><br><span class="line">  <span class="type">......</span></span><br><span class="line">            <span class="string">&quot;VirtualIPs&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;NetworkID&quot;</span>: <span class="string">&quot;l6xmfxiiseqkl57wnsm4cykps&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Addr&quot;</span>: <span class="string">&quot;10.0.0.36/24&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;NetworkID&quot;</span>: <span class="string">&quot;ejpf8zzig5rjsgefqucopcsdt&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Addr&quot;</span>: <span class="string">&quot;192.168.100.2/24&quot;</span> 与此处<span class="type">IP</span>地址保持一致。</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>





<p>6, 分别去各个节点查找nginx_service服务的各个容器(3个副本),发现它们的IP与上面ping的IP都不同</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker inspect nginx-svc.1.6nxixaw3tn2ld3vklfjldnpl5 | grep IPAddress</span></span><br><span class="line">            <span class="string">&quot;SecondaryIPAddresses&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;10.0.0.37&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;192.168.100.3&quot;</span>,</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sw1</span> ~]<span class="comment"># docker inspect nginx-svc.3.steywkaxfboynglx4bsji6jd1 | grep -i ipaddress</span></span><br><span class="line">            <span class="string">&quot;SecondaryIPAddresses&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;10.0.0.39&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;192.168.100.5&quot;</span>,</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sw2</span> ~]<span class="comment"># docker inspect nginx-svc.2.rz1iifb9eg0tos7r59cbesucd | grep -i ipaddress</span></span><br><span class="line">            <span class="string">&quot;SecondaryIPAddresses&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;10.0.0.38&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;192.168.100.4&quot;</span>,</span><br></pre></td></tr></table></figure>



<p>7, 后续测试, 将nginx_service服务扩展,裁减,更新,回退.都不影响test服务访问nginx-svc。</p>
<p><strong>结论: 在自建的overlay网络内,通过服务发现可以实现服务之间通过服务名(不用知道对方的IP)互联,而且不会受服务内副本个数和容器内IP变化等的影响。</strong></p>
<h2 id="4-15-docker-swarm网络"><a href="#4-15-docker-swarm网络" class="headerlink" title="4.15 docker swarm网络"></a>4.15 docker swarm网络</h2><p>在 Swarm Service 中有三个重要的网络概念：</p>
<ul>
<li> <strong>Overlay networks</strong> 管理 Swarm 中 Docker 守护进程间的通信。你可以将服务附加到一个或多个已存在的 <code>overlay</code> 网络上，使得服务与服务之间能够通信。</li>
<li><strong>ingress network</strong> 是一个特殊的 <code>overlay</code> 网络，用于服务节点间的负载均衡。当任何 Swarm 节点在发布的端口上接收到请求时，它将该请求交给一个名为 <code>IPVS</code> 的模块。<code>IPVS</code> 跟踪参与该服务的所有IP地址，选择其中的一个，并通过 <code>ingress</code> 网络将请求路由到它。<br> 初始化或加入 Swarm 集群时会自动创建 <code>ingress</code> 网络，大多数情况下，用户不需要自定义配置，但是 docker 17.05 和更高版本允许你自定义。</li>
<li><strong>docker_gwbridge</strong>是一种桥接网络，将 <code>overlay</code> 网络（包括 <code>ingress</code> 网络）连接到一个单独的 Docker 守护进程的物理网络。默认情况下，服务正在运行的每个容器都连接到本地 Docker 守护进程主机的 <code>docker_gwbridge</code> 网络。<br> <code>docker_gwbridge</code> 网络在初始化或加入 Swarm 时自动创建。大多数情况下，用户不需要自定义配置，但是 Docker 允许自定义。</li>
</ul>
<table>
<thead>
<tr>
<th>名称</th>
<th>类型</th>
<th>注释</th>
</tr>
</thead>
<tbody><tr>
<td>docker_gwbridge</td>
<td>bridge</td>
<td>none</td>
</tr>
<tr>
<td>ingress</td>
<td>overlay</td>
<td>none</td>
</tr>
<tr>
<td>custom-network</td>
<td>overlay</td>
<td>none</td>
</tr>
</tbody></table>
<ul>
<li><p>docker_gwbridge和ingress是swarm自动创建的，当用户执行了docker swarm init/connect之后。</p>
</li>
<li><p>docker_gwbridge是bridge类型的负责本机container和主机直接的连接</p>
</li>
<li><p>ingress负责service在多个主机container之间的路由。</p>
</li>
<li><p>custom-network是用户自己创建的overlay网络，通常我们都需要创建自己的network并把service挂在上面。</p>
<p><img src="/images/Docker/Docker%E4%B8%BB%E6%9C%BA%E9%9B%86%E7%BE%A4%E5%8C%96%E6%96%B9%E6%A1%88DockerSwarm.assets/ingress-routing-mesh.png" alt="service ingress image"></p>
</li>
</ul>
<h1 id="五、docker-stack"><a href="#五、docker-stack" class="headerlink" title="五、docker stack"></a>五、docker stack</h1><h2 id="5-1-docker-stack介绍"><a href="#5-1-docker-stack介绍" class="headerlink" title="5.1 docker stack介绍"></a>5.1 docker stack介绍</h2><p>早期使用service发布，每次只能发布一个service。</p>
<p>yaml可以发布多个服务，但是使用docker-compose只能在一台主机发布。</p>
<p>一个stack就是一组有关联的服务的组合，可以一起编排，一起发布, 一起管理</p>
<h2 id="5-2-docker-stack与docker-compose区别"><a href="#5-2-docker-stack与docker-compose区别" class="headerlink" title="5.2 docker stack与docker compose区别"></a>5.2 docker stack与docker compose区别</h2><ul>
<li>Docker stack会忽略了“构建”指令，无法使用stack命令构建新镜像，它是需要镜像是预先已经构建好的。 所以docker-compose更适合于开发场景；</li>
<li>Docker Compose是一个Python项目，在内部，它使用Docker API规范来操作容器。所以需要安装Docker -compose，以便与Docker一起在您的计算机上使用；</li>
<li>Docker Stack功能包含在Docker引擎中。你不需要安装额外的包来使用它，docker stacks 只是swarm mode的一部分。</li>
<li>Docker stack不支持基于第2版写的docker-compose.yml ，也就是version版本至少为3。然而Docker Compose对版本为2和3的 文件仍然可以处理；</li>
<li>docker stack把docker compose的所有工作都做完了，因此docker stack将占主导地位。同时，对于大多数用户来说，切换到使用docker stack既不困难，也不需要太多的开销。如果您是Docker新手，或正在选择用于新项目的技术，请使用docker stack。</li>
</ul>
<h2 id="5-3-docker-stack常用命令"><a href="#5-3-docker-stack常用命令" class="headerlink" title="5.3 docker stack常用命令"></a>5.3 docker stack常用命令</h2><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>docker stack deploy</td>
<td>部署新的堆栈或更新现有堆栈</td>
</tr>
<tr>
<td>docker stack ls</td>
<td>列出现有堆栈</td>
</tr>
<tr>
<td>docker stack ps</td>
<td>列出堆栈中的任务</td>
</tr>
<tr>
<td>docker stack rm</td>
<td>删除一个或多个堆栈</td>
</tr>
<tr>
<td>docker stack services</td>
<td>列出堆栈中的服务</td>
</tr>
</tbody></table>
<h2 id="5-4-部署wordpress案例"><a href="#5-4-部署wordpress案例" class="headerlink" title="5.4 部署wordpress案例"></a>5.4 部署wordpress案例</h2><p>1, 编写YAML文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># vim stack1.yaml</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># cat stack1.yaml</span></span><br><span class="line">version: <span class="string">&#x27;3&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  db:</span><br><span class="line">    image: mysql:<span class="number">5.7</span></span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: somewordpress</span><br><span class="line">      MYSQL_DATABASE: wordpress</span><br><span class="line">      MYSQL_USER: wordpress</span><br><span class="line">      MYSQL_PASSWORD: wordpress</span><br><span class="line">    deploy:</span><br><span class="line">      replicas: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  wordpress:</span><br><span class="line">    depends_on:</span><br><span class="line">      - db</span><br><span class="line">    image: wordpress:latest</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;8010:80&quot;</span></span><br><span class="line">    environment:</span><br><span class="line">      WORDPRESS_DB_HOST: db:<span class="number">3306</span></span><br><span class="line">      WORDPRESS_DB_USER: wordpress</span><br><span class="line">      WORDPRESS_DB_PASSWORD: wordpress</span><br><span class="line">      WORDPRESS_DB_NAME: wordpress</span><br><span class="line">    deploy:</span><br><span class="line">      replicas: <span class="number">1</span></span><br><span class="line">      placement:</span><br><span class="line">        constraints: [<span class="type">node.role</span> == <span class="type">manager</span>]</span><br></pre></td></tr></table></figure>

<p>说明:</p>
<ul>
<li>placement的constraints限制此容器在manager节点</li>
</ul>
<p>2, 使用docker stack发布</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker stack deploy -c stack1.yaml stack1</span></span><br><span class="line">Creating network stack1_default						创建自建的overlay网络</span><br><span class="line">Creating service stack1_db							创建stack1_db服务</span><br><span class="line">Creating service stack1_wordpress					创建stack1_wordpress服务</span><br></pre></td></tr></table></figure>

<p><strong>如果报错,使用<code>docker stack rm stack1</code>删除.排完错再启动</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker stack ls</span></span><br><span class="line">NAME      SERVICES   ORCHESTRATOR</span><br><span class="line">stack1    <span class="number">2</span>          Swarm</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker service ls</span></span><br><span class="line">ID             NAME               MODE         REPLICAS   IMAGE              PORTS</span><br><span class="line">tw1a8rnde2yr   stack1_db          replicated   <span class="number">1</span>/<span class="number">1</span>        mysql:<span class="number">5.7</span></span><br><span class="line">zf1h2r4m12li   stack1_wordpress   replicated   <span class="number">1</span>/<span class="number">1</span>        wordpress:latest   *:<span class="number">8010</span>-&gt;<span class="number">80</span>/tcp</span><br></pre></td></tr></table></figure>







<p>3, 验证</p>
<p><img src="/images/Docker/Docker%E4%B8%BB%E6%9C%BA%E9%9B%86%E7%BE%A4%E5%8C%96%E6%96%B9%E6%A1%88DockerSwarm.assets/image-20220217102033645.png" alt="image-20220217102033645"></p>
<h2 id="5-5-部署nginx与web管理服务案例"><a href="#5-5-部署nginx与web管理服务案例" class="headerlink" title="5.5  部署nginx与web管理服务案例"></a>5.5  部署nginx与web管理服务案例</h2><p>1, 编写YAML文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># vim stack2.yaml</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># cat stack2.yaml</span></span><br><span class="line">version: <span class="string">&quot;3&quot;</span></span><br><span class="line">services:</span><br><span class="line">  nginx:</span><br><span class="line">    image: <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v1</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">80</span>:<span class="number">80</span></span><br><span class="line">    deploy:</span><br><span class="line">      mode: replicated</span><br><span class="line">      replicas: <span class="number">3</span></span><br><span class="line"></span><br><span class="line">  visualizer:</span><br><span class="line">    image: dockersamples/visualizer</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;9001:8080&quot;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - <span class="string">&quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span></span><br><span class="line">    deploy:</span><br><span class="line">      replicas: <span class="number">1</span></span><br><span class="line">      placement:</span><br><span class="line">        constraints: [<span class="type">node.role</span> == <span class="type">manager</span>]</span><br><span class="line"></span><br><span class="line">  portainer:</span><br><span class="line">    image: portainer/portainer</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;9000:9000&quot;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - <span class="string">&quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span></span><br><span class="line">    deploy:</span><br><span class="line">      replicas: <span class="number">1</span></span><br><span class="line">      placement:</span><br><span class="line">        constraints: [<span class="type">node.role</span> == <span class="type">manager</span>]</span><br></pre></td></tr></table></figure>

<p>说明: stack中共有3个service</p>
<ul>
<li>nginx服务,3个副本</li>
<li>visualizer服务: 图形查看docker swarm集群</li>
<li>portainer服务: 图形管理docker swarm集群</li>
</ul>
<p>2,使用docker stack发布</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker stack deploy -c stack2.yaml stack2</span></span><br><span class="line">Creating network stack2_default</span><br><span class="line">Creating service stack2_portainer</span><br><span class="line">Creating service stack2_nginx</span><br><span class="line">Creating service stack2_visualizer</span><br><span class="line"></span><br><span class="line">如果报错,使用docker stack <span class="built_in">rm</span> stack2删除.排完错再启动</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># docker stack ps stack2</span></span><br><span class="line">ID             NAME                  IMAGE                             NODE      DESIRED STATE   CURRENT STATE             ERROR     PORTS</span><br><span class="line">zpkt1780g2nr   stack2_nginx.<span class="number">1</span>        <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v1    sm2       Running         Running <span class="number">54</span> seconds ago</span><br><span class="line"><span class="number">9</span>iqdgw2fxk0s   stack2_nginx.<span class="number">2</span>        <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v1    sm3       Running         Running <span class="number">54</span> seconds ago</span><br><span class="line"><span class="number">4</span>h0ob7b4ho2a   stack2_nginx.<span class="number">3</span>        <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v1    sw2       Running         Running <span class="number">54</span> seconds ago</span><br><span class="line">jpp7h6qheh4j   stack2_portainer.<span class="number">1</span>    portainer/portainer:latest        sm1       Running         Running <span class="number">21</span> seconds ago</span><br><span class="line">ty0mktx60typ   stack2_visualizer.<span class="number">1</span>   dockersamples/visualizer:latest   sm1       Running         Starting <span class="number">22</span> seconds ago</span><br></pre></td></tr></table></figure>





<p>3,验证</p>
<p><img src="/images/Docker/Docker%E4%B8%BB%E6%9C%BA%E9%9B%86%E7%BE%A4%E5%8C%96%E6%96%B9%E6%A1%88DockerSwarm.assets/image-20220217102606092.png" alt="image-20220217102606092"></p>
<p><img src="/images/Docker/Docker%E4%B8%BB%E6%9C%BA%E9%9B%86%E7%BE%A4%E5%8C%96%E6%96%B9%E6%A1%88DockerSwarm.assets/image-20220217102654303.png" alt="image-20220217102654303"></p>
<h2 id="5-6-nginx-haproxy-nfs案例"><a href="#5-6-nginx-haproxy-nfs案例" class="headerlink" title="5.6 nginx+haproxy+nfs案例"></a>5.6 nginx+haproxy+nfs案例</h2><p>1,在docker swarm管理节点上准备配置文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># mkdir -p /docker-stack/haproxy</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> ~]<span class="comment"># cd /docker-stack/haproxy/</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> <span class="type">haproxy</span>]<span class="comment"># vim haproxy.cfg</span></span><br><span class="line">global</span><br><span class="line">  log <span class="number">127.0</span>.<span class="number">0.1</span> local0</span><br><span class="line">  log <span class="number">127.0</span>.<span class="number">0.1</span> local1 notice</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">  log global</span><br><span class="line">  mode http</span><br><span class="line">  option httplog</span><br><span class="line">  option dontlognull</span><br><span class="line">  timeout connect <span class="number">5000</span>ms</span><br><span class="line">  timeout client <span class="number">50000</span>ms</span><br><span class="line">  timeout server <span class="number">50000</span>ms</span><br><span class="line">  stats uri /status</span><br><span class="line"></span><br><span class="line">frontend balancer</span><br><span class="line">    bind *:<span class="number">8080</span></span><br><span class="line">    mode http</span><br><span class="line">    default_backend web_backends</span><br><span class="line"></span><br><span class="line">backend web_backends</span><br><span class="line">    mode http</span><br><span class="line">    option forwardfor</span><br><span class="line">    balance roundrobin</span><br><span class="line">    server web1 nginx1:<span class="number">80</span> check</span><br><span class="line">    server web2 nginx2:<span class="number">80</span> check</span><br><span class="line">    server web3 nginx3:<span class="number">80</span> check</span><br><span class="line">    option httpchk GET /</span><br><span class="line">    http<span class="literal">-check</span> expect status <span class="number">200</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2, 编写YAML编排文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> <span class="type">haproxy</span>]<span class="comment"># vim stack3.yml</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> <span class="type">haproxy</span>]<span class="comment"># vim stack3.yaml</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> <span class="type">haproxy</span>]<span class="comment"># cat stack3.yaml</span></span><br><span class="line">version: <span class="string">&quot;3&quot;</span></span><br><span class="line">services:</span><br><span class="line">  nginx1:</span><br><span class="line">    image: <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v1</span><br><span class="line">    deploy:</span><br><span class="line">      mode: replicated</span><br><span class="line">      replicas: <span class="number">1</span></span><br><span class="line">      restart_policy:</span><br><span class="line">        condition: on<span class="literal">-failure</span></span><br><span class="line">    volumes:</span><br><span class="line">    - <span class="string">&quot;nginx_vol:/usr/share/nginx/html&quot;</span></span><br><span class="line"></span><br><span class="line">  nginx2:</span><br><span class="line">    image: <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v1</span><br><span class="line">    deploy:</span><br><span class="line">      mode: replicated</span><br><span class="line">      replicas: <span class="number">1</span></span><br><span class="line">      restart_policy:</span><br><span class="line">        condition: on<span class="literal">-failure</span></span><br><span class="line">    volumes:</span><br><span class="line">    - <span class="string">&quot;nginx_vol:/usr/share/nginx/html&quot;</span></span><br><span class="line"></span><br><span class="line">  nginx3:</span><br><span class="line">    image: <span class="number">192.168</span>.<span class="number">10.15</span>/library/nginx:v1</span><br><span class="line">    deploy:</span><br><span class="line">      mode: replicated</span><br><span class="line">      replicas: <span class="number">1</span></span><br><span class="line">      restart_policy:</span><br><span class="line">        condition: on<span class="literal">-failure</span></span><br><span class="line">    volumes:</span><br><span class="line">    - <span class="string">&quot;nginx_vol:/usr/share/nginx/html&quot;</span></span><br><span class="line"></span><br><span class="line">  haproxy:</span><br><span class="line">    image: haproxy:latest</span><br><span class="line">    volumes:</span><br><span class="line">      - <span class="string">&quot;./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro&quot;</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">    deploy:</span><br><span class="line">      replicas: <span class="number">1</span></span><br><span class="line">      placement:</span><br><span class="line">        constraints: [<span class="type">node.role</span> == <span class="type">manager</span>]</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  nginx_vol:</span><br><span class="line">    driver: local</span><br><span class="line">    driver_opts:</span><br><span class="line">      <span class="built_in">type</span>: <span class="string">&quot;nfs&quot;</span></span><br><span class="line">      o: <span class="string">&quot;addr=192.168.10.15,rw&quot;</span></span><br><span class="line">      device: <span class="string">&quot;:/opt/dockervolume&quot;</span></span><br></pre></td></tr></table></figure>

<p>3, 发布</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sm1</span> <span class="type">haproxy</span>]<span class="comment"># docker stack deploy -c stack3.yml stack3</span></span><br><span class="line">Creating network stack3_default</span><br><span class="line">Creating service stack3_nginx3</span><br><span class="line">Creating service stack3_haproxy</span><br><span class="line">Creating service stack3_nginx1</span><br><span class="line">Creating service stack3_nginx2</span><br></pre></td></tr></table></figure>

<p>4, 验证</p>
<p><img src="/images/Docker/Docker%E4%B8%BB%E6%9C%BA%E9%9B%86%E7%BE%A4%E5%8C%96%E6%96%B9%E6%A1%88DockerSwarm.assets/image-20220217120725646.png" alt="image-20220217120725646"></p>
<p><img src="/images/Docker/Docker%E4%B8%BB%E6%9C%BA%E9%9B%86%E7%BE%A4%E5%8C%96%E6%96%B9%E6%A1%88DockerSwarm.assets/image-20220217120746215.png" alt="image-20220217120746215"></p>
]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes集群客户端命令 kubectl</title>
    <url>/2024/02/13/%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/kubernetes%E9%9B%86%E7%BE%A4%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%91%BD%E4%BB%A4%20kubectl/</url>
    <content><![CDATA[<h1 id="一、kubectl命令帮助"><a href="#一、kubectl命令帮助" class="headerlink" title="一、kubectl命令帮助"></a>一、kubectl命令帮助</h1><p>集群中的管理操作几乎都可以使用<code>kubectl</code>命令完成</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl -h</span></span><br></pre></td></tr></table></figure>



<h1 id="二、kubectl命令说明"><a href="#二、kubectl命令说明" class="headerlink" title="二、kubectl命令说明"></a>二、kubectl命令说明</h1><p><img src="/images/Kubernetes/kubernetes%E9%9B%86%E7%BE%A4%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%91%BD%E4%BB%A4kubectl.assets/kubectl%E5%91%BD%E4%BB%A4%E5%B8%AE%E5%8A%A91.png" alt="kubectl命令帮助1"></p>
<p><img src="/images/Kubernetes/kubernetes%E9%9B%86%E7%BE%A4%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%91%BD%E4%BB%A4kubectl.assets/kubectl%E5%91%BD%E4%BB%A4%E5%B8%AE%E5%8A%A92.png" alt="kubectl命令帮助2"></p>
<h1 id="三、kubectl命令补全"><a href="#三、kubectl命令补全" class="headerlink" title="三、kubectl命令补全"></a>三、kubectl命令补全</h1><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">yum install <span class="literal">-y</span> bash<span class="literal">-completion</span></span><br><span class="line">source /usr/share/bash<span class="literal">-completion</span>/bash_completion</span><br><span class="line">source &lt;(kubectl completion bash)</span><br><span class="line">kubectl completion bash &gt; ~/.kube/completion.bash.inc</span><br><span class="line">source <span class="string">&#x27;/root/.kube/completion.bash.inc&#x27;</span>  </span><br><span class="line">source <span class="variable">$HOME</span>/.bash_profile</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes核心概念</title>
    <url>/2024/02/11/%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes%E9%9B%86%E7%BE%A4%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h2 id="1-1-Pod"><a href="#1-1-Pod" class="headerlink" title="1.1 Pod"></a>1.1 Pod</h2><p>Pod是可以在 Kubernetes 中创建和管理的、最小的可部署的计算单元。<br>Pod就像豌豆荚一样，其中包含着一组（一个或多个）容器； 这些容器共享存储、网络、以及怎样运行这些容器的声明。</p>
<p><img src="/images/Kubernetes/Kubernetes%E9%9B%86%E7%BE%A4%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5.assets/image-20220330113151804.png" alt="image-20220330113151804"></p>
<p>Pod就像一台物理服务器一样，其中包含一个或多个应用容器， 这些容器中运行着用户应用程序。<br><strong>举例说明Pod、Container、应用程序三者之间的关系：麻屋子,红帐子,里面住着白胖子。Pod就是麻屋子,Container就是红帐子,应用程序就是里面的白胖子。</strong></p>
<p><img src="/images/Kubernetes/Kubernetes%E9%9B%86%E7%BE%A4%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5.assets/image-20220330113046572.png" alt="image-20220330113046572"></p>
<h2 id="1-2-Controller"><a href="#1-2-Controller" class="headerlink" title="1.2 Controller"></a>1.2 Controller</h2><p>在 Kubernetes 中，用于管理和运行Pod的对象<br>在 Kubernetes 中，控制器通过监控集群的公共状态，并致力于将当前状态转变为期望的状态</p>
<p><strong>举例说明Controller(控制器)作用：房间里的温度自动调节器</strong></p>
<p><strong>当你设置了温度，告诉了温度自动调节器你的<em>期望状态（Desired State）</em>。 房间的实际温度是<em>当前状态（Current State）</em>。 通过对设备的开关控制，温度自动调节器让其当前状态接近期望状态。</strong></p>
<p>一个控制器至少追踪一种类型的 Kubernetes 资源。这些对象有一个代表期望状态的 <code>spec</code> 字段。 该资源的控制器负责确保其当前状态接近期望状态。</p>
<p>不同的类型的控制器所实现的控制方式不一样，例如：</p>
<ul>
<li>deployment <ul>
<li>部署无状态应用</li>
<li>部署无状态应用: 认为pod 都一样，没有顺序要求， 不用考虑在哪个node 运行，随意进行扩展和伸缩</li>
<li>管理Pod和 ReplicaSet</li>
<li>部署、滚动升级等</li>
<li>典型的像web服务、分布式服务等</li>
</ul>
</li>
<li>StatefulSet <ul>
<li>部署有状态应用</li>
<li>有状态应用，每个pod 都独立运行，保持pod 启动顺序和唯一性； 有唯一的网络标识符，持久存储； 有序，比如mysql 主从； 主机名称固定。 而且其扩容以及升级等操作也是按顺序进行的操作。</li>
</ul>
</li>
<li>DaemonSet <ul>
<li>部署守护进程</li>
<li>DaemonSet保证在每个Node上都运行一个容器副本，常用来部署一些集群的日志、监控或者其他系统管理应用。 新加入的node 也同样运行在一个pod 里面。</li>
</ul>
</li>
<li>job <ul>
<li>一次性任务</li>
<li>Job负责批量处理短暂的一次性任务 (short lived one-off tasks)，即仅执行一次的任务，它保证批处理任务的一个或多个Pod成功结束。</li>
</ul>
</li>
<li>Cronjob <ul>
<li>周期性定时任务</li>
</ul>
</li>
</ul>
<h2 id="1-3-Label"><a href="#1-3-Label" class="headerlink" title="1.3 Label"></a>1.3 Label</h2><h3 id="1-3-1-Label介绍"><a href="#1-3-1-Label介绍" class="headerlink" title="1.3.1 Label介绍"></a>1.3.1 Label介绍</h3><p>Label是附着到object上（例如Pod）的键值对。可以在创建object的时候指定，也可以在object创建后随时指定。Labels的值对系统本身并没有什么含义，只是对用户才有意义。</p>
<p>一个Label是一个key=value的键值对，其中key与value由用户自己指定。</p>
<p>Label可以附加到各种资源对象上，例如Node、Pod、Service、RC等，一个资源对象可以定义任意数量的Label，同一个Label也可以被添加到任意数量的资源对象上去，Label通常在资源对象定义时确定，也可以在对象创建后动态添加或者删除。</p>
<p>我们可以通过指定的资源对象捆绑一个或多个不同的Label来实现多维度的资源分组管理功能，以便于灵活、方便地进行资源分配、调度、配置、部署等管理工作。例如：部署不同版本的应用到不同的环境中；或者监控和分析应用（日志记录、监控、告警）等。</p>
<p>一些常用abel示例如下所示:</p>
<p>版本标签：”release” : “stable” , “release” : “canary”…</p>
<p>环境标签：”environment” : “dev” , “environment” : “production”</p>
<p>架构标签：”tier” : “frontend” , “tier” : “backend” , “tier” : “middleware”</p>
<p>分区标签：”partition” : “customerA” , “partition” : “customerB”…</p>
<p>质量管控标签：”track” : “daily” , “track” : “weekly”</p>
<p>Label相当于我们熟悉的“标签”，给某个资源对象定义一个Label，就相当于给它打了一个标签，随后可以通过Label Selector（标签选择器）查询和筛选拥有某些Label的资源对象，Kubernetes通过这种方式实现了类似SQL的简单又通用的对象查询机制。</p>
<h3 id="1-3-2-Label语法及字符集"><a href="#1-3-2-Label语法及字符集" class="headerlink" title="1.3.2 Label语法及字符集"></a>1.3.2 Label语法及字符集</h3><p>Label key的组成：</p>
<ul>
<li>不得超过63个字符</li>
<li>可以使用前缀，使用/分隔，前缀必须是DNS子域，不得超过253个字符，系统中的自动化组件创建的label必须指定前缀，<code>kubernetes.io/</code>由kubernetes保留</li>
<li>起始必须是字母（大小写都可以）或数字，中间可以有连字符、下划线和点</li>
</ul>
<p>Label value的组成：</p>
<ul>
<li>不得超过63个字符</li>
<li>起始必须是字母（大小写都可以）或数字，中间可以有连字符、下划线和点</li>
</ul>
<h2 id="1-4-Label-Selector"><a href="#1-4-Label-Selector" class="headerlink" title="1.4 Label Selector"></a>1.4 Label Selector</h2><p>通过label selector，客户端／用户可以指定一个object集合，通过label selector对object的集合进行操作。</p>
<p>Label selector有两种类型：</p>
<ul>
<li><em>equality-based（基于等式）</em> ：可以使用<code>=</code>、<code>==</code>、<code>!=</code>操作符，可以使用逗号分隔多个表达式</li>
<li><em>set-based</em>（基于集合） ：可以使用<code>in</code>、<code>notin</code>、<code>!</code>操作符，另外还可以没有操作符，直接写出某个label的key，表示过滤有某个key的object而不管该key的value是何值，<code>!</code>表示没有该label的object</li>
</ul>
<p><strong>举例说明Label Selector</strong></p>
<p>*<em>Label Selector可以被类比为SQL语句中的where查询条件，例如，name=redis-slave这个label Selector作用于Pod时，可以被类比为select * from pod where pod’s name = ‘redis-slave’这样的语句。*</em></p>
<h2 id="1-5-Service"><a href="#1-5-Service" class="headerlink" title="1.5 Service"></a>1.5 Service</h2><p>将运行在一组 Pods上的应用程序公开为网络服务的抽象方法。</p>
<p>由于Pod是非永久性资源对象，如果你使用Controller运行你的应用程序，你可以动态创建和销毁Pod，这样就会导致无法准确访问到所想要访问的Pod</p>
<p>例如：如果一组 Pod（称为“后端”）为集群内的其他 Pod（称为“前端”）提供功能， 那么前端如何找出并跟踪要连接的 IP 地址，以便前端可以使用提供工作负载的后端部分？</p>
<p>是一组iptables或ipvs规划，通过把客户端的请求转发到服务端（Pod）,如有多个Pod情况，亦可实现负载均衡的效果。</p>
<p>例如：一个图片处理后端，它运行了 3 个副本（Pod）。这些副本是可互换的 —— 前端不需要关心它们调用了哪个后端副本。 然而组成这一组后端程序的 Pod 实际上可能会发生变化， 前端客户端不应该也没必要知道，而且也不需要跟踪这一组后端的状态。</p>
<h2 id="1-6-Endpoints"><a href="#1-6-Endpoints" class="headerlink" title="1.6 Endpoints"></a>1.6 Endpoints</h2><p>为Service管理后端Pod，当后端Pod被创建或销毁时，endpoints列表会更新Pod对应的IP地址，以便Service访问请求能够确保被响应。</p>
<h2 id="1-7-DNS"><a href="#1-7-DNS" class="headerlink" title="1.7 DNS"></a>1.7 DNS</h2><p>为kubernetes集群内资源对象的访问提供名称解析，这样就可以实现通过DNS名称而非IP地址来访问服务。</p>
<ul>
<li>实现集群内Service名称解析</li>
<li>实现集群内Pod内Container中应用访问互联网提供域名解析</li>
</ul>
<h1 id="二、Kubernetes核心概念之间的关系"><a href="#二、Kubernetes核心概念之间的关系" class="headerlink" title="二、Kubernetes核心概念之间的关系"></a>二、Kubernetes核心概念之间的关系</h1><h2 id="2-1-Pod与Controller"><a href="#2-1-Pod与Controller" class="headerlink" title="2.1 Pod与Controller"></a>2.1 Pod与Controller</h2><p>pod 是通过Controller 实现应用的运维，比如伸缩，滚动升级等待。pod 和 controller 通过label 标签建立关系。</p>
<p><img src="/images/Kubernetes/Kubernetes%E9%9B%86%E7%BE%A4%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5.assets/controller%E4%B8%8Epod.gif"></p>
<h2 id="2-2-Pod与Service"><a href="#2-2-Pod与Service" class="headerlink" title="2.2 Pod与Service"></a>2.2 Pod与Service</h2><p>service 是为了防止pod 失联，提供的服务发现，类似于微服务的注册中心。定义一组pod 的访问策略。可以为一组具有相同功能的容器应用提供一个统一的入口地址，并将请求负载分发到后端的各个容器应用上。</p>
<p>service 通过selector 来管控对应的pod。根据label 和 selector 建立关联，通过service 实现pod 的负载均衡。</p>
<p><img src="/images/Kubernetes/Kubernetes%E9%9B%86%E7%BE%A4%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5.assets/image-20220330021556081.png" alt="image-20220330021556081"></p>
<h2 id="2-3-Service与DNS"><a href="#2-3-Service与DNS" class="headerlink" title="2.3 Service与DNS"></a>2.3 Service与DNS</h2><p>通过DNS实现对Service名称解析，以此达到访问后端Pod目的。</p>
<h1 id="三、基于kubernetes集群容器化应用的微服务"><a href="#三、基于kubernetes集群容器化应用的微服务" class="headerlink" title="三、基于kubernetes集群容器化应用的微服务"></a>三、基于kubernetes集群容器化应用的微服务</h1><h2 id="3-1-服务部署方式介绍"><a href="#3-1-服务部署方式介绍" class="headerlink" title="3.1 服务部署方式介绍"></a>3.1 服务部署方式介绍</h2><ul>
<li>单体服务架构<ul>
<li>所有服务进程运行在同一台主机内</li>
</ul>
</li>
<li>分布式服务架构<ul>
<li>服务进程分布于不同的主机，其中一台主机出现故障，不影响其它主机上的服务运行</li>
</ul>
</li>
<li>微服务架构<ul>
<li>使用容器化技术把分布式服务架构运行起来，并实现对不同的服务进程的高可用及快速发布等。</li>
</ul>
</li>
</ul>
<h2 id="3-2-微服务架构服务组件（kubernetes核心概念）之间关系举例说明"><a href="#3-2-微服务架构服务组件（kubernetes核心概念）之间关系举例说明" class="headerlink" title="3.2 微服务架构服务组件（kubernetes核心概念）之间关系举例说明"></a>3.2 微服务架构服务组件（kubernetes核心概念）之间关系举例说明</h2><p>以在kubernetes集群中运行LNMT应用为例：</p>
<p>把kubernetes集群看做是一个IDC机房，把LNMT Web架构应用以微服务（kubernetes集群资源对象）的方式部署到kubernetes集群中。</p>
<p><img src="/images/Kubernetes/Kubernetes%E9%9B%86%E7%BE%A4%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5.assets/kubernetes%E9%9B%86%E7%BE%A4%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84.png"></p>
]]></content>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes集群核心概念 Pod</title>
    <url>/2024/02/16/%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes%E9%9B%86%E7%BE%A4%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%20Pod/</url>
    <content><![CDATA[<h1 id="一、工作负载-workloads"><a href="#一、工作负载-workloads" class="headerlink" title="一、工作负载(workloads)"></a>一、工作负载(workloads)</h1><p>参考链接：<a href="https://kubernetes.io/zh/docs/concepts/workloads/">https://kubernetes.io/zh/docs/concepts/workloads/</a><br>工作负载（workload）是在kubernetes集群中运行的应用程序。无论你的工作负载是单一服务还是多个一同工作的服务构成，在kubernetes中都可以使用pod来运行它。</p>
<p><img src="/images/Kubernetes/kubernetes%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5Pod.assets/1" alt="1604285743110"></p>
<p>workloads分为pod与controllers</p>
<ul>
<li>pod通过控制器实现应用的运行，如何伸缩，升级等</li>
<li>controllers 在集群中管理pod</li>
<li>pod与控制器之间通过label-selector相关联，是唯一的关联方式</li>
</ul>
<p><img src="/images/Kubernetes/kubernetes%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5Pod.assets/workload.png" alt="1564844640416"></p>
<p>在pod的YAML里指定pod标签</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">定义标签</span><br><span class="line">  labels: </span><br><span class="line">	app: nginx</span><br></pre></td></tr></table></figure>



<p>在控制器的YAML里指定标签选择器匹配标签</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">通过标签选择器选择对应的pod</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br></pre></td></tr></table></figure>



<h1 id="二、pod介绍"><a href="#二、pod介绍" class="headerlink" title="二、pod介绍"></a>二、pod介绍</h1><h2 id="2-1-pod定义与分类"><a href="#2-1-pod定义与分类" class="headerlink" title="2.1 pod定义与分类"></a>2.1 pod定义与分类</h2><p>参考链接: <a href="https://kubernetes.io/zh/docs/concepts/workloads/pods/">https://kubernetes.io/zh/docs/concepts/workloads/pods/</a></p>
<h3 id="2-1-1-Pod定义"><a href="#2-1-1-Pod定义" class="headerlink" title="2.1.1 Pod定义"></a>2.1.1 Pod定义</h3><ul>
<li>Pod(豌豆荚) 是Kubernetes集群管理（创建、部署）与调度的最小计算单元，表示处于运行状态的一组容器。</li>
<li>Pod不是进程，而是容器运行的环境。</li>
<li>一个Pod可以封装<strong>一个容器或多个容器(主容器或sidecar边车容器)</strong></li>
<li>一个pod内的多个容器之间共享部分命名空间，例如：Net Namespace,UTS Namespace,IPC Namespace及存储资源</li>
<li>用户pod默认会被调度运行在node节点之上(不运行在master节点上，但也有例外情况)</li>
<li>pod内的IP不是固定的，集群外不能直接访问pod</li>
</ul>
<h3 id="2-1-2-Pod分类"><a href="#2-1-2-Pod分类" class="headerlink" title="2.1.2 Pod分类"></a>2.1.2 Pod分类</h3><ul>
<li><strong>静态Pod</strong>    也称之为“无控制器管理的自主式pod”，直接由特定节点上的 <code>kubelet</code> 守护进程管理， 不需要API 服务器看到它们，尽管大多数 Pod 都是通过控制面（例如，Deployment） 来管理的，对于静态 Pod 而言，<code>kubelet</code> 直接监控每个 Pod，并在其失效时重启之。</li>
<li><strong>控制器管理的pod</strong>   控制器可以控制pod的副本数，扩容与裁剪，版本更新与回滚等</li>
</ul>
<h2 id="2-2-查看pod方法"><a href="#2-2-查看pod方法" class="headerlink" title="2.2 查看pod方法"></a>2.2 查看pod方法</h2><p>pod是一种计算资源，可以通过<code>kubectl get pod</code>来查看</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pod		# pod或pods都可以，不指定namespace,默认是名为default的namespace</span></span><br><span class="line">	</span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pod -n kube-system</span></span><br></pre></td></tr></table></figure>



<h2 id="2-3-pod的YAML资源清单格式"><a href="#2-3-pod的YAML资源清单格式" class="headerlink" title="2.3 pod的YAML资源清单格式"></a>2.3 pod的YAML资源清单格式</h2><p>先看一个yaml格式的pod定义文件解释</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yaml格式的pod定义文件完整内容：</span></span><br><span class="line">apiVersion: v1       <span class="comment">#必选，api版本号，例如v1</span></span><br><span class="line">kind: Pod       	<span class="comment">#必选，Pod</span></span><br><span class="line">metadata:       	<span class="comment">#必选，元数据</span></span><br><span class="line">  name: string       <span class="comment">#必选，Pod名称</span></span><br><span class="line">  namespace: string    <span class="comment">#Pod所属的命名空间,默认在default的namespace</span></span><br><span class="line">  labels:     		 <span class="comment"># 自定义标签</span></span><br><span class="line">    name: string     <span class="comment">#自定义标签名字</span></span><br><span class="line">  annotations:        <span class="comment">#自定义注释列表</span></span><br><span class="line">    name: string</span><br><span class="line">spec:         <span class="comment">#必选，Pod中容器的详细定义(期望)</span></span><br><span class="line">  containers:      <span class="comment">#必选，Pod中容器列表</span></span><br><span class="line">  - name: string     <span class="comment">#必选，容器名称</span></span><br><span class="line">    image: string    <span class="comment">#必选，容器的镜像名称</span></span><br><span class="line">    imagePullPolicy: [<span class="type">Always</span> | <span class="type">Never</span> | <span class="type">IfNotPresent</span>] <span class="comment">#获取镜像的策略 Alawys表示下载镜像 IfnotPresent表示优先使用本地镜像，否则下载镜像，Nerver表示仅使用本地镜像</span></span><br><span class="line">    command: [<span class="built_in">string</span>]    <span class="comment">#容器的启动命令列表，如不指定，使用打包时使用的启动命令</span></span><br><span class="line">    args: [<span class="built_in">string</span>]     <span class="comment">#容器的启动命令参数列表</span></span><br><span class="line">    workingDir: string     <span class="comment">#容器的工作目录</span></span><br><span class="line">    volumeMounts:    <span class="comment">#挂载到容器内部的存储卷配置</span></span><br><span class="line">    - name: string     <span class="comment">#引用pod定义的共享存储卷的名称，需用volumes[]部分定义的的卷名</span></span><br><span class="line">      mountPath: string    <span class="comment">#存储卷在容器内mount的绝对路径，应少于512字符</span></span><br><span class="line">      readOnly: boolean    <span class="comment">#是否为只读模式</span></span><br><span class="line">    ports:       <span class="comment">#需要暴露的端口库号列表</span></span><br><span class="line">    - name: string     <span class="comment">#端口号名称</span></span><br><span class="line">      containerPort: int   <span class="comment">#容器需要监听的端口号</span></span><br><span class="line">      hostPort: int    <span class="comment">#容器所在主机需要监听的端口号，默认与Container相同</span></span><br><span class="line">      protocol: string     <span class="comment">#端口协议，支持TCP和UDP，默认TCP</span></span><br><span class="line">    env:       <span class="comment">#容器运行前需设置的环境变量列表</span></span><br><span class="line">    - name: string     <span class="comment">#环境变量名称</span></span><br><span class="line">      value: string    <span class="comment">#环境变量的值</span></span><br><span class="line">    resources:       <span class="comment">#资源限制和请求的设置</span></span><br><span class="line">      limits:      <span class="comment">#资源限制的设置</span></span><br><span class="line">        cpu: string    <span class="comment">#Cpu的限制，单位为core数，将用于docker run --cpu-shares参数</span></span><br><span class="line">        memory: string     <span class="comment">#内存限制，单位可以为Mib/Gib，将用于docker run --memory参数</span></span><br><span class="line">      requests:      <span class="comment">#资源请求的设置</span></span><br><span class="line">        cpu: string    <span class="comment">#Cpu请求，容器启动的初始可用数量</span></span><br><span class="line">        memory: string     <span class="comment">#内存清求，容器启动的初始可用数量</span></span><br><span class="line">    livenessProbe:     <span class="comment">#对Pod内个容器健康检查的设置，当探测无响应几次后将自动重启该容器，检查方法有exec、httpGet和tcpSocket，对一个容器只需设置其中一种方法即可</span></span><br><span class="line">      exec:      <span class="comment">#对Pod容器内检查方式设置为exec方式</span></span><br><span class="line">        command: [<span class="built_in">string</span>]  <span class="comment">#exec方式需要制定的命令或脚本</span></span><br><span class="line">      httpGet:       <span class="comment">#对Pod内个容器健康检查方法设置为HttpGet，需要制定Path、port</span></span><br><span class="line">        path: string</span><br><span class="line">        port: number</span><br><span class="line">        host: string</span><br><span class="line">        scheme: string</span><br><span class="line">        HttpHeaders:</span><br><span class="line">        - name: string</span><br><span class="line">          value: string</span><br><span class="line">      tcpSocket:     <span class="comment">#对Pod内个容器健康检查方式设置为tcpSocket方式</span></span><br><span class="line">         port: number</span><br><span class="line">       initialDelaySeconds: <span class="number">0</span>  <span class="comment">#容器启动完成后首次探测的时间，单位为秒</span></span><br><span class="line">       timeoutSeconds: <span class="number">0</span>   <span class="comment">#对容器健康检查探测等待响应的超时时间，单位秒，默认1秒</span></span><br><span class="line">       periodSeconds: <span class="number">0</span>    <span class="comment">#对容器监控检查的定期探测时间设置，单位秒，默认10秒一次</span></span><br><span class="line">       successThreshold: <span class="number">0</span></span><br><span class="line">       failureThreshold: <span class="number">0</span></span><br><span class="line">       securityContext:</span><br><span class="line">         privileged:false</span><br><span class="line">    restartPolicy: [<span class="type">Always</span> | <span class="type">Never</span> | <span class="type">OnFailure</span>] <span class="comment"># Pod的重启策略，Always表示一旦不管以何种方式终止运行，kubelet都将重启，OnFailure表示只有Pod以非0退出码退出才重启，Nerver表示不再重启该Pod</span></span><br><span class="line">    nodeSelector: obeject  <span class="comment"># 设置NodeSelector表示将该Pod调度到包含这个label的node上，以key：value的格式指定</span></span><br><span class="line">    imagePullSecrets:    <span class="comment">#Pull镜像时使用的secret名称，以key：secretkey格式指定</span></span><br><span class="line">    - name: string</span><br><span class="line">    hostNetwork: false     <span class="comment">#是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络</span></span><br><span class="line">    volumes:       <span class="comment">#在该pod上定义共享存储卷列表</span></span><br><span class="line">    - name: string     <span class="comment">#共享存储卷名称 （volumes类型有很多种）</span></span><br><span class="line">      emptyDir: &#123;&#125;     <span class="comment">#类型为emtyDir的存储卷，与Pod同生命周期的一个临时目录。为空值</span></span><br><span class="line">      hostPath: string     <span class="comment">#类型为hostPath的存储卷，表示挂载Pod所在宿主机的目录</span></span><br><span class="line">        path: string     <span class="comment">#Pod所在宿主机的目录，将被用于同期中mount的目录</span></span><br><span class="line">      secret:      <span class="comment">#类型为secret的存储卷，挂载集群与定义的secret对象到容器内部</span></span><br><span class="line">        scretname: string  </span><br><span class="line">        items:     </span><br><span class="line">        - key: string</span><br><span class="line">          path: string</span><br><span class="line">      configMap:     <span class="comment">#类型为configMap的存储卷，挂载预定义的configMap对象到容器内部</span></span><br><span class="line">        name: string</span><br><span class="line">        items:</span><br><span class="line">        - key: string</span><br><span class="line">          path: string</span><br></pre></td></tr></table></figure>



<p><strong>YAML格式查找帮助方法回顾</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl explain namespace</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl explain pod</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl explain pod.spec</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl explain pod.spec.containers</span></span><br></pre></td></tr></table></figure>



<h1 id="三、pod创建与验证"><a href="#三、pod创建与验证" class="headerlink" title="三、pod创建与验证"></a>三、pod创建与验证</h1><h2 id="3-1-命令创建pod-v1-18变化"><a href="#3-1-命令创建pod-v1-18变化" class="headerlink" title="3.1 命令创建pod(v1.18变化)"></a>3.1 命令创建pod(v1.18变化)</h2><ul>
<li>k8s之前版本中, kubectl run命令用于创建deployment控制器</li>
<li>在v1.18版本中, kubectl run命令改为创建pod</li>
</ul>
<h3 id="3-1-1-创建一个名为pod-nginx的pod"><a href="#3-1-1-创建一个名为pod-nginx的pod" class="headerlink" title="3.1.1 创建一个名为pod-nginx的pod"></a>3.1.1 创建一个名为pod-nginx的pod</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl run nginx1 --image=nginx:1.15-alpine</span></span><br><span class="line">pod/nginx1 created</span><br></pre></td></tr></table></figure>

<h3 id="3-1-2-验证"><a href="#3-1-2-验证" class="headerlink" title="3.1.2 验证"></a>3.1.2 验证</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pods</span></span><br><span class="line">NAME             READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx1           <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">41</span>s</span><br></pre></td></tr></table></figure>





<h2 id="3-2-YAML创建pod"><a href="#3-2-YAML创建pod" class="headerlink" title="3.2 YAML创建pod"></a>3.2 YAML创建pod</h2><h3 id="3-2-1-准备yaml文件"><a href="#3-2-1-准备yaml文件" class="headerlink" title="3.2.1 准备yaml文件"></a>3.2.1 准备yaml文件</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># vim pod1.yml</span></span><br><span class="line">apiVersion: v1					<span class="comment"># api版本</span></span><br><span class="line">kind: Pod						<span class="comment"># 资源类型为Pod</span></span><br><span class="line">metadata:						</span><br><span class="line">  name: pod<span class="literal">-stress</span>				<span class="comment"># 自定义pod的名称</span></span><br><span class="line">spec:</span><br><span class="line">  containers:					<span class="comment"># 定义pod里包含的容器</span></span><br><span class="line">  - name: c1					<span class="comment"># 自定义pod中的容器名</span></span><br><span class="line">    image: polinux/stress		<span class="comment"># 启动容器的镜像名</span></span><br><span class="line">    command: [<span class="string">&quot;stress&quot;</span>]			<span class="comment"># 自定义启动容器时要执行的命令(类似dockerfile里的CMD)</span></span><br><span class="line">    args: [<span class="string">&quot;--vm&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;--vm-bytes&quot;</span>, <span class="string">&quot;150M&quot;</span>, <span class="string">&quot;--vm-hang&quot;</span>, <span class="string">&quot;1&quot;</span>] <span class="comment"># 自定义启动容器执行命令的参数</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># polinux/stress这个镜像用于压力测试,在启动容器时传命令与参数就是相当于分配容器运行时需要的压力</span></span><br></pre></td></tr></table></figure>

<p>2, 通过yaml文件创建pod</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl apply -f pod1.yml</span></span><br><span class="line">pod/pod<span class="literal">-stress</span> created</span><br></pre></td></tr></table></figure>



<h3 id="3-2-2-查看pod信息"><a href="#3-2-2-查看pod信息" class="headerlink" title="3.2.2 查看pod信息"></a>3.2.2 查看pod信息</h3><p>查看pod信息</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pod</span></span><br><span class="line">NAME          READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod<span class="literal">-stress</span>    <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">45</span>s</span><br></pre></td></tr></table></figure>

<p>查看pod详细信息</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pods -o wide</span></span><br><span class="line">NAME         READY   STATUS    RESTARTS   AGE   IP              NODE          NOMINATED NODE   READINESS GATES</span><br><span class="line">pod<span class="literal">-stress</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">71</span>s   <span class="number">10.244</span>.<span class="number">194.72</span>   k8s<span class="literal">-worker1</span>   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>

<p>描述pod详细信息</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl describe pod pod-stress </span></span><br><span class="line">......</span><br><span class="line">Events:</span><br><span class="line">  <span class="built_in">Type</span>    Reason     Age   From               Message</span><br><span class="line">  ----    ------     ----  ----               -------</span><br><span class="line">  Normal  Scheduled  <span class="number">102</span>s  default<span class="literal">-scheduler</span>  Successfully assigned default/pod<span class="literal">-stress</span> to k8s<span class="literal">-worker1</span></span><br><span class="line">  Normal  Pulling    <span class="number">102</span>s  kubelet            Pulling image <span class="string">&quot;polinux/stress&quot;</span></span><br><span class="line">  Normal  Pulled     <span class="number">83</span>s   kubelet            Successfully pulled image <span class="string">&quot;polinux/stress&quot;</span> <span class="keyword">in</span> <span class="number">18.944533343</span>s</span><br><span class="line">  Normal  Created    <span class="number">83</span>s   kubelet            Created container c1</span><br><span class="line">  Normal  Started    <span class="number">82</span>s   kubelet            Started container c1</span><br></pre></td></tr></table></figure>



<h2 id="3-3-删除pod"><a href="#3-3-删除pod" class="headerlink" title="3.3 删除pod"></a>3.3 删除pod</h2><h3 id="3-3-1-单个pod删除"><a href="#3-3-1-单个pod删除" class="headerlink" title="3.3.1 单个pod删除"></a>3.3.1 单个pod删除</h3><p>方法1:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl delete pod pod-stress</span></span><br><span class="line">pod <span class="string">&quot;pod-stress&quot;</span> deleted</span><br></pre></td></tr></table></figure>

<p>方法2:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl delete -f pod1.yml</span></span><br></pre></td></tr></table></figure>



<h3 id="3-3-2-多个pod删除"><a href="#3-3-2-多个pod删除" class="headerlink" title="3.3.2 多个pod删除"></a>3.3.2 多个pod删除</h3><p>方法1: 后接多个pod名</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl delete pod pod名1 pod名2 pod名3 ......</span></span><br></pre></td></tr></table></figure>

<p>方法2: 通过awk截取要删除的pod名称，然后管道给xargs</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pods |awk &#x27;NR&gt;1 &#123;print $1&#125;&#x27; |xargs kubectl  delete pod</span></span><br></pre></td></tr></table></figure>

<p>方法3: 如果要删除的pod都在同一个非default的命名空间，则可直接删除命名空间</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl delete ns xxxx</span></span><br></pre></td></tr></table></figure>





<h2 id="3-4-镜像拉取策略"><a href="#3-4-镜像拉取策略" class="headerlink" title="3.4 镜像拉取策略"></a>3.4 镜像拉取策略</h2><p>由imagePullPolicy参数控制</p>
<ul>
<li>Always : 不管本地有没有镜像，都要从仓库中下载镜像</li>
<li>Never : 从来不从仓库下载镜像, 只用本地镜像,本地没有就算了</li>
<li>IfNotPresent: 如果本地存在就直接使用, 不存在才从仓库下载</li>
</ul>
<p>默认的策略是：</p>
<ul>
<li>当镜像标签版本是latest，默认策略就是Always</li>
<li>如果指定特定版本默认拉取策略就是IfNotPresent。</li>
</ul>
<p>1, 将上面的pod删除再创建，使用下面命令查看信息</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl apply -f pod1.yml</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl delete -f pod1.yml</span></span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl describe pod pod-stress</span></span><br><span class="line">......</span><br><span class="line">Events:</span><br><span class="line">  <span class="built_in">Type</span>    Reason     Age   From               Message</span><br><span class="line">  ----    ------     ----  ----               -------</span><br><span class="line">  Normal  Scheduled  <span class="number">102</span>s  default<span class="literal">-scheduler</span>  Successfully assigned default/pod<span class="literal">-stress</span> to k8s<span class="literal">-worker1</span></span><br><span class="line">  Normal  Pulling    <span class="number">102</span>s  kubelet            Pulling image <span class="string">&quot;polinux/stress&quot;</span></span><br><span class="line">  Normal  Pulled     <span class="number">83</span>s   kubelet            Successfully pulled image <span class="string">&quot;polinux/stress&quot;</span> <span class="keyword">in</span> <span class="number">18.944533343</span>s</span><br><span class="line">  Normal  Created    <span class="number">83</span>s   kubelet            Created container c1</span><br><span class="line">  Normal  Started    <span class="number">82</span>s   kubelet            Started container c1</span><br></pre></td></tr></table></figure>

<p><strong>说明: 可以看到第二行信息还是<code>pulling image</code>下载镜像</strong></p>
<p>2, 修改YAML</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># vim pod1.yml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: pod<span class="literal">-stress</span></span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: c1</span><br><span class="line">    image: polinux/stress</span><br><span class="line">    command: [<span class="string">&quot;stress&quot;</span>]</span><br><span class="line">    args: [<span class="string">&quot;--vm&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;--vm-bytes&quot;</span>, <span class="string">&quot;150M&quot;</span>, <span class="string">&quot;--vm-hang&quot;</span>, <span class="string">&quot;1&quot;</span>]</span><br><span class="line">    imagePullPolicy: IfNotPresent					<span class="comment">#  增加了这一句</span></span><br></pre></td></tr></table></figure>

<p>3，再次删除再创建</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl describe pod pod-stress</span></span><br><span class="line">......</span><br><span class="line">Events:</span><br><span class="line">  <span class="built_in">Type</span>    Reason     Age   From               Message</span><br><span class="line">  ----    ------     ----  ----               -------</span><br><span class="line">  Normal  Scheduled  <span class="number">17</span>s   default<span class="literal">-scheduler</span>  Successfully assigned default/pod<span class="literal">-stress</span> to k8s<span class="literal">-worker1</span></span><br><span class="line">  Normal  Pulled     <span class="number">17</span>s   kubelet            Container image <span class="string">&quot;polinux/stress&quot;</span> already present on machine</span><br><span class="line">  Normal  Created    <span class="number">17</span>s   kubelet            Created container c1</span><br><span class="line">  Normal  Started    <span class="number">17</span>s   kubelet            Started container c1</span><br></pre></td></tr></table></figure>

<p><strong>说明: 第二行信息是说镜像已经存在，直接使用了</strong></p>
<h2 id="3-5-pod的标签"><a href="#3-5-pod的标签" class="headerlink" title="3.5 pod的标签"></a>3.5 pod的标签</h2><ul>
<li>为pod设置label,用于控制器通过label与pod关联</li>
<li>语法与前面学的node标签几乎一致</li>
</ul>
<h3 id="3-5-1-通过命令管理Pod标签"><a href="#3-5-1-通过命令管理Pod标签" class="headerlink" title="3.5.1 通过命令管理Pod标签"></a>3.5.1 通过命令管理Pod标签</h3><ol>
<li>查看pod的标签</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pods --show-labels</span></span><br><span class="line">NAME          READY   STATUS    RESTARTS   AGE   LABELS</span><br><span class="line">pod<span class="literal">-stress</span>     <span class="number">1</span>/<span class="number">1</span>    Running   <span class="number">0</span>          <span class="number">7</span>m25s   &lt;none&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>打标签,再查看</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl label pod pod-stress region=huanai zone=A env=test bussiness=game</span></span><br><span class="line">pod/pod<span class="literal">-stress</span> labeled</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pods --show-labels</span></span><br><span class="line">NAME          READY   STATUS    RESTARTS   AGE     LABELS</span><br><span class="line">pod<span class="literal">-stress</span>    <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">8</span>m54s   bussiness=game,env=test,region=huanai,zone=A</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>通过等值关系标签查询</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pods -l zone=A</span></span><br><span class="line">NAME         READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod<span class="literal">-stress</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">9</span>m22s</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>通过集合关系标签查询</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pods -l &quot;zone in (A,B,C)&quot;</span></span><br><span class="line">NAME         READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod<span class="literal">-stress</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">9</span>m55s</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>删除标签后再验证</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl label pod pod-stress region- zone- env- bussiness-</span></span><br><span class="line">pod/pod<span class="literal">-stress</span> labeled</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pods --show-labels</span></span><br><span class="line">NAME          READY   STATUS    RESTARTS   AGE   LABELS</span><br><span class="line">pod<span class="literal">-stress</span>    <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">16</span>m     &lt;none&gt;</span><br></pre></td></tr></table></figure>

<p><strong>小结:</strong></p>
<ul>
<li>pod的label与node的label操作方式几乎相同</li>
<li>node的label用于pod调度到指定label的node节点</li>
<li>pod的label用于controller关联控制的pod</li>
</ul>
<h3 id="3-5-2-通过YAML创建Pod时添加标签"><a href="#3-5-2-通过YAML创建Pod时添加标签" class="headerlink" title="3.5.2 通过YAML创建Pod时添加标签"></a>3.5.2 通过YAML创建Pod时添加标签</h3><p>1, 修改yaml</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># vim pod1.yml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: pod<span class="literal">-stress</span></span><br><span class="line">  namespace: default</span><br><span class="line">  labels:</span><br><span class="line">    env: dev</span><br><span class="line">    app: nginx				<span class="comment"># 直接在原来的yaml里加上多个标签</span></span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: c1</span><br><span class="line">    image: polinux/stress</span><br><span class="line">    command: [<span class="string">&quot;stress&quot;</span>]</span><br><span class="line">    args: [<span class="string">&quot;--vm&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;--vm-bytes&quot;</span>, <span class="string">&quot;150M&quot;</span>, <span class="string">&quot;--vm-hang&quot;</span>, <span class="string">&quot;1&quot;</span>]</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br></pre></td></tr></table></figure>

<p>2, 直接apply应用</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl apply -f pod1.yaml</span></span><br><span class="line">pod/pod<span class="literal">-stress1</span> configured			  <span class="comment"># 这里是configured,表示修改了</span></span><br></pre></td></tr></table></figure>

<p>3, 验证</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pods --show-labels</span></span><br><span class="line">NAME          READY   STATUS             RESTARTS   AGE     LABELS</span><br><span class="line">pod<span class="literal">-stress</span>   <span class="number">1</span>/<span class="number">1</span>     Running            <span class="number">0</span>          <span class="number">3</span>m5s    app=nginx,env=dev		<span class="comment"># 标签有了</span></span><br></pre></td></tr></table></figure>





<h2 id="3-6-pod资源限制"><a href="#3-6-pod资源限制" class="headerlink" title="3.6 pod资源限制"></a>3.6 pod资源限制</h2><p>准备2个不同限制方式的创建pod的yaml文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># vim pod2.yml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Namespace</span><br><span class="line">metadata:</span><br><span class="line">  name: namespace1</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: pod<span class="literal">-stress2</span></span><br><span class="line">  namespace: namespace1</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: c1</span><br><span class="line">    image: polinux/stress</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    resources:</span><br><span class="line">      limits:</span><br><span class="line">        memory: <span class="string">&quot;200Mi&quot;</span></span><br><span class="line">      requests:</span><br><span class="line">        memory: <span class="string">&quot;100Mi&quot;</span></span><br><span class="line">    command: [<span class="string">&quot;stress&quot;</span>]				    <span class="comment"># 启动容器时执行的命令</span></span><br><span class="line">    args: [<span class="string">&quot;--vm&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;--vm-bytes&quot;</span>, <span class="string">&quot;150M&quot;</span>, <span class="string">&quot;--vm-hang&quot;</span>, <span class="string">&quot;1&quot;</span>]  <span class="comment"># 产生1个进程分配150M内存1秒后释放</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># vim pod3.yml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Namespace</span><br><span class="line">metadata:</span><br><span class="line">  name: namespace1</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: pod<span class="literal">-stress3</span></span><br><span class="line">  namespace: namespace1</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: c1</span><br><span class="line">    image: polinux/stress</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    resources:</span><br><span class="line">      limits:</span><br><span class="line">        memory: <span class="string">&quot;200Mi&quot;</span></span><br><span class="line">      requests:</span><br><span class="line">        memory: <span class="string">&quot;150Mi&quot;</span></span><br><span class="line">    command: [<span class="string">&quot;stress&quot;</span>]</span><br><span class="line">    args: [<span class="string">&quot;--vm&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;--vm-bytes&quot;</span>, <span class="string">&quot;250M&quot;</span>, <span class="string">&quot;--vm-hang&quot;</span>, <span class="string">&quot;1&quot;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl apply -f pod2.yml</span></span><br><span class="line">namespace/namespace1 created</span><br><span class="line">pod/pod<span class="literal">-stress2</span> created</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl apply -f pod3.yml</span></span><br><span class="line">namespace/namespace1 unchanged</span><br><span class="line">pod/pod<span class="literal">-stress3</span> created</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get namespace  |grep namespace1</span></span><br><span class="line">namespace1        Active   <span class="number">1</span>m28s</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pod -n namespace1</span></span><br><span class="line">NAME          READY   STATUS      RESTARTS   AGE</span><br><span class="line">pod<span class="literal">-stress2</span>   <span class="number">1</span>/<span class="number">1</span>     Running     <span class="number">0</span>          <span class="number">2</span>m2s</span><br><span class="line">pod<span class="literal">-stress3</span>   <span class="number">0</span>/<span class="number">1</span>     OOMKilled   <span class="number">4</span>          <span class="number">115</span>s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查看会发现pod<span class="literal">-stress3</span>这个pod状态变为OOMKilled，因为它是内存不足所以显示Container被杀死</span><br></pre></td></tr></table></figure>

<p>说明:  一旦pod中的容器挂了，容器会有重启策略， 如下：</p>
<ul>
<li><p> Always：表示容器挂了总是重启，这是默认策略 </p>
</li>
<li><p> OnFailures：表容器状态为错误时才重启，也就是容器正常终止时才重启 </p>
</li>
<li><p> Never：表示容器挂了不予重启 </p>
</li>
<li><p> 对于Always这种策略，容器只要挂了，就会立即重启，这样是很耗费资源的。所以Always重启策略是这么做的：第一次容器挂了立即重启，如果再挂了就要延时10s重启，第三次挂了就等20s重启…… 依次类推 </p>
</li>
</ul>
<p>测试完后删除</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl delete ns namespace1</span></span><br></pre></td></tr></table></figure>



<h2 id="3-7-pod包含多个容器"><a href="#3-7-pod包含多个容器" class="headerlink" title="3.7 pod包含多个容器"></a>3.7 pod包含多个容器</h2><p>1, 准备yml文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># vim pod4.yml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: pod<span class="literal">-stress4</span></span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: c1</span><br><span class="line">    image: polinux/stress</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    resources:</span><br><span class="line">      limits:</span><br><span class="line">        memory: <span class="string">&quot;200Mi&quot;</span></span><br><span class="line">      requests:</span><br><span class="line">        memory: <span class="string">&quot;100Mi&quot;</span></span><br><span class="line">    command: [<span class="string">&quot;stress&quot;</span>]</span><br><span class="line">    args: [<span class="string">&quot;--vm&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;--vm-bytes&quot;</span>, <span class="string">&quot;150M&quot;</span>, <span class="string">&quot;--vm-hang&quot;</span>, <span class="string">&quot;1&quot;</span>]</span><br><span class="line">    </span><br><span class="line">  - name: c2</span><br><span class="line">    image: polinux/stress</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    resources:</span><br><span class="line">      limits:</span><br><span class="line">        memory: <span class="string">&quot;200Mi&quot;</span></span><br><span class="line">      requests:</span><br><span class="line">        memory: <span class="string">&quot;100Mi&quot;</span></span><br><span class="line">    command: [<span class="string">&quot;stress&quot;</span>]</span><br><span class="line">    args: [<span class="string">&quot;--vm&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;--vm-bytes&quot;</span>, <span class="string">&quot;150M&quot;</span>, <span class="string">&quot;--vm-hang&quot;</span>, <span class="string">&quot;1&quot;</span>]</span><br></pre></td></tr></table></figure>

<p> 2, 应用yml文件创建pod</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl apply -f pod4.yml</span></span><br><span class="line">pod/pod<span class="literal">-stress4</span> created</span><br></pre></td></tr></table></figure>

<p>3, 查看pod在哪个节点</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pods  -o wide</span></span><br><span class="line">NAME          READY   STATUS    RESTARTS   AGE     IP               NODE          NOMINATED NODE   READINESS GATES</span><br><span class="line">pod<span class="literal">-stress4</span>   <span class="number">2</span>/<span class="number">2</span>     Running   <span class="number">0</span>          <span class="number">70</span>s     <span class="number">10.244</span>.<span class="number">159.136</span>   k8s<span class="literal">-master1</span>   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">可以看到有<span class="number">2</span>个容器,运行在k8s<span class="literal">-master1</span>节点</span><br></pre></td></tr></table></figure>

<p>4,在k8s-master1上验证,确实产生了2个容器</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># docker ps -a |grep stress</span></span><br><span class="line">d7827a963f9d        df58d15b053d              <span class="string">&quot;stress --vm 1 --vm-…&quot;</span>   <span class="number">2</span> hours ago         Up <span class="number">2</span> hours                                      k8s_c2_pod<span class="literal">-stress4_default_a534bce1</span><span class="literal">-3ffe</span><span class="literal">-45f5</span><span class="literal">-8128</span><span class="literal">-34657e289b44_0</span></span><br><span class="line">ae8e8f8d095b        df58d15b053d              <span class="string">&quot;stress --vm 1 --vm-…&quot;</span>   <span class="number">2</span> hours ago         Up <span class="number">2</span> hours                                      k8s_c1_pod<span class="literal">-stress4_default_a534bce1</span><span class="literal">-3ffe</span><span class="literal">-45f5</span><span class="literal">-8128</span><span class="literal">-34657e289b44_0</span></span><br><span class="line">e66461900426        easzlab/pa<span class="built_in">use-amd64</span>:<span class="number">3.2</span>   <span class="string">&quot;/pause&quot;</span>                 <span class="number">2</span> hours ago         Up <span class="number">2</span> hours                                      k8s_POD_pod<span class="literal">-stress4_default_a534bce1</span><span class="literal">-3ffe</span><span class="literal">-45f5</span><span class="literal">-8128</span><span class="literal">-34657e289b44_0</span></span><br></pre></td></tr></table></figure>

<p> 或</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># crictl ps</span></span><br><span class="line">CONTAINER           IMAGE               CREATED             STATE               NAME                   ATTEMPT             POD ID</span><br><span class="line"><span class="number">08</span>cd23ac9b416       df58d15b053d1       <span class="number">2</span> hours ago         Running             c2                     <span class="number">0</span>                   <span class="number">2</span>dd084491f019</span><br><span class="line"><span class="number">65</span>f0ecba8dec3       df58d15b053d1       <span class="number">2</span> hours ago         Running             c1                     <span class="number">0</span>                   <span class="number">2</span>dd084491f019</span><br><span class="line"></span><br></pre></td></tr></table></figure>







<h2 id="3-8-对pod里的容器进行操作"><a href="#3-8-对pod里的容器进行操作" class="headerlink" title="3.8 对pod里的容器进行操作"></a>3.8 对pod里的容器进行操作</h2><h3 id="3-8-1-命令帮助"><a href="#3-8-1-命令帮助" class="headerlink" title="3.8.1 命令帮助"></a>3.8.1 命令帮助</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl exec -h</span></span><br></pre></td></tr></table></figure>

<h3 id="3-8-2-不用交互直接执行命令"><a href="#3-8-2-不用交互直接执行命令" class="headerlink" title="3.8.2 不用交互直接执行命令"></a>3.8.2 不用交互直接执行命令</h3><p>格式为: <code>kubectl exec pod名 -c 容器名 -- 命令</code></p>
<p><strong>注意:</strong> </p>
<ul>
<li>-c 容器名为可选项,如果是1个pod中1个容器,则不用指定;</li>
<li>如果是1个pod中多个容器,不指定默认为第1个。</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl exec pod-stress4 -c c2  -- touch /111</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl exec pod-stress4 -c c2  -- ls /111</span></span><br><span class="line">/<span class="number">111</span></span><br></pre></td></tr></table></figure>

<p>不指定容器名,则默认为pod里的第1个容器</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl exec  pod-stress4  -- touch /222</span></span><br><span class="line">Defaulting container name to c1.</span><br><span class="line">Use <span class="string">&#x27;kubectl describe pod/pod-stress4 -n default&#x27;</span> to see all of the containers <span class="keyword">in</span> this pod.</span><br></pre></td></tr></table></figure>



<h3 id="3-8-3-和容器交互操作"><a href="#3-8-3-和容器交互操作" class="headerlink" title="3.8.3 和容器交互操作"></a>3.8.3 和容器交互操作</h3><p>和docker exec几乎一样</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl exec -it pod-stress4 -c c1 -- /bin/bash</span></span><br><span class="line">bash<span class="literal">-5</span>.<span class="number">0</span><span class="comment"># touch /333</span></span><br><span class="line">bash<span class="literal">-5</span>.<span class="number">0</span><span class="comment"># ls</span></span><br><span class="line"><span class="number">222</span>    bin    etc    lib    mnt    proc   run    srv    tmp    var</span><br><span class="line"><span class="number">333</span>    dev    home   media  opt    root   sbin   sys    usr</span><br><span class="line">bash<span class="literal">-5</span>.<span class="number">0</span><span class="comment"># exit</span></span><br><span class="line"><span class="keyword">exit</span>	   </span><br></pre></td></tr></table></figure>





<h2 id="3-9-验证pod中多个容器网络共享"><a href="#3-9-验证pod中多个容器网络共享" class="headerlink" title="3.9 验证pod中多个容器网络共享"></a>3.9 验证pod中多个容器网络共享</h2><p>1, 编写YAML</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># vim pod-nginx.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx2</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: c1</span><br><span class="line">    image: nginx:<span class="number">1.15</span><span class="literal">-alpine</span></span><br><span class="line"></span><br><span class="line">  - name: c2</span><br><span class="line">    image: nginx:<span class="number">1.15</span><span class="literal">-alpine</span></span><br></pre></td></tr></table></figure>

<p>2, 应用YAML</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl apply -f pod-nginx.yaml</span></span><br><span class="line">pod/nginx2 created</span><br></pre></td></tr></table></figure>

<p>3, 查看pod信息与状态</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl describe pod nginx2</span></span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">Events:</span><br><span class="line">  <span class="built_in">Type</span>    Reason     Age              From               Message</span><br><span class="line">  ----    ------     ----             ----               -------</span><br><span class="line">  Normal  Scheduled  <span class="number">25</span>s              default<span class="literal">-scheduler</span>  Successfully assigned default/nginx2 to k8s<span class="literal">-worker1</span></span><br><span class="line">  Normal  Pulling    <span class="number">24</span>s              kubelet            Pulling image <span class="string">&quot;nginx:1.15-alpine&quot;</span></span><br><span class="line">  Normal  Pulled     <span class="number">5</span>s               kubelet            Successfully pulled image <span class="string">&quot;nginx:1.15-alpine&quot;</span> <span class="keyword">in</span> <span class="number">18.928009025</span>s</span><br><span class="line">  Normal  Created    <span class="number">5</span>s               kubelet            Created container c1</span><br><span class="line">  Normal  Started    <span class="number">5</span>s               kubelet            Started container c1</span><br><span class="line">  Normal  Pulled     <span class="number">2</span>s (x2 over <span class="number">5</span>s)  kubelet            Container image <span class="string">&quot;nginx:1.15-alpine&quot;</span> already present on machine</span><br><span class="line">  Normal  Created    <span class="number">2</span>s (x2 over <span class="number">5</span>s)  kubelet            Created container c2</span><br><span class="line">  Normal  Started    <span class="number">2</span>s (x2 over <span class="number">5</span>s)  kubelet            Started container c2</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pods |grep nginx2</span></span><br><span class="line">nginx2   <span class="number">1</span>/<span class="number">2</span>     CrashLoopBackOff   <span class="number">3</span>          <span class="number">2</span>m40s</span><br><span class="line">有一个启不来，因为一个容器中两个pod是共用网络的，所以不能两个都占用<span class="number">80</span>端口</span><br></pre></td></tr></table></figure>

<p>有一个启不来，因为一个pod中两个容器是共用网络的，所以不能两个都占用80端口</p>
<p>通过查找<code>k8s-worker1</code>上面的容器，然后<code>docker logs或crictl logs containerID</code>查看，得到如下的报错，说明是端口被占用</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">worker1</span> ~]<span class="comment"># docker logs k8s_c2_nginx2_default_51fd8e81-1c4b-4557-9498-9b25ed8a4c99_4</span></span><br><span class="line"><span class="number">2020</span>/<span class="number">11</span>/<span class="number">21</span> <span class="number">04</span>:<span class="number">29</span>:<span class="number">12</span> [<span class="type">emerg</span>] <span class="number">1</span><span class="comment">#1: bind() to 0.0.0.0:80 failed (98: Address in use)</span></span><br><span class="line">nginx: <span class="function">[<span class="type">emerg</span>] <span class="title">bind</span></span>() to <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">80</span> failed (<span class="number">98</span>: Address <span class="keyword">in</span> use)</span><br><span class="line"><span class="number">2020</span>/<span class="number">11</span>/<span class="number">21</span> <span class="number">04</span>:<span class="number">29</span>:<span class="number">12</span> [<span class="type">emerg</span>] <span class="number">1</span><span class="comment">#1: bind() to 0.0.0.0:80 failed (98: Address in use)</span></span><br><span class="line">nginx: <span class="function">[<span class="type">emerg</span>] <span class="title">bind</span></span>() to <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">80</span> failed (<span class="number">98</span>: Address <span class="keyword">in</span> use)</span><br><span class="line"><span class="number">2020</span>/<span class="number">11</span>/<span class="number">21</span> <span class="number">04</span>:<span class="number">29</span>:<span class="number">12</span> [<span class="type">emerg</span>] <span class="number">1</span><span class="comment">#1: bind() to 0.0.0.0:80 failed (98: Address in use)</span></span><br><span class="line">nginx: <span class="function">[<span class="type">emerg</span>] <span class="title">bind</span></span>() to <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">80</span> failed (<span class="number">98</span>: Address <span class="keyword">in</span> use)</span><br><span class="line"><span class="number">2020</span>/<span class="number">11</span>/<span class="number">21</span> <span class="number">04</span>:<span class="number">29</span>:<span class="number">12</span> [<span class="type">emerg</span>] <span class="number">1</span><span class="comment">#1: bind() to 0.0.0.0:80 failed (98: Address in use)</span></span><br><span class="line">nginx: <span class="function">[<span class="type">emerg</span>] <span class="title">bind</span></span>() to <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">80</span> failed (<span class="number">98</span>: Address <span class="keyword">in</span> use)</span><br><span class="line"><span class="number">2020</span>/<span class="number">11</span>/<span class="number">21</span> <span class="number">04</span>:<span class="number">29</span>:<span class="number">12</span> [<span class="type">emerg</span>] <span class="number">1</span><span class="comment">#1: bind() to 0.0.0.0:80 failed (98: Address in use)</span></span><br><span class="line">nginx: <span class="function">[<span class="type">emerg</span>] <span class="title">bind</span></span>() to <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">80</span> failed (<span class="number">98</span>: Address <span class="keyword">in</span> use)</span><br><span class="line"><span class="number">2020</span>/<span class="number">11</span>/<span class="number">21</span> <span class="number">04</span>:<span class="number">29</span>:<span class="number">12</span> [<span class="type">emerg</span>] <span class="number">1</span><span class="comment">#1: still could not bind()</span></span><br><span class="line">nginx: [<span class="type">emerg</span>] still could not bind()</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h1 id="四、pod调度"><a href="#四、pod调度" class="headerlink" title="四、pod调度"></a>四、pod调度</h1><h2 id="4-1-pod调度流程"><a href="#4-1-pod调度流程" class="headerlink" title="4.1 pod调度流程"></a>4.1 pod调度流程</h2><p><img src="/images/Kubernetes/kubernetes%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5Pod.assets/pod%E8%B0%83%E5%BA%A6.png" alt="1564985023369"></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">Step1</span><br><span class="line">通过kubectl命令应用资源清单文件（yaml格式）向api server 发起一个create pod 请求</span><br><span class="line"></span><br><span class="line">Step2</span><br><span class="line">api server接收到pod创建请求后，生成一个包含创建信息资源清单文件</span><br><span class="line"></span><br><span class="line">Step3</span><br><span class="line">apiserver 将资源清单文件中信息写入etcd数据库</span><br><span class="line"></span><br><span class="line">Step4</span><br><span class="line">Scheduler启动后会一直watch API Server，获取 podSpec.NodeName为空的Pod,即判断pod.spec.Node == null? 若为null，表示这个Pod请求是新的，需要创建，因此先进行调度计算（共计<span class="number">2</span>步：<span class="number">1</span>、过滤不满足条件的，<span class="number">2</span>、选择优先级高的），找到合适的node，然后将信息在etcd数据库中更新分配结果：pod.spec.Node = nodeA (设置一个具体的节点)</span><br><span class="line"></span><br><span class="line">Step5</span><br><span class="line">kubelet 通过watch etcd数据库(即不停地看etcd中的记录)，发现有新的Node出现，如果这条记录中的Node与所在节点编号相同，即这个Pod由scheduler分配给自己，则调用node中的Container Runtime，进而创建container，并将创建后的结果返回到给api server用于更新etcd数据库中数据状态。</span><br></pre></td></tr></table></figure>





<h2 id="4-2-调度约束方法"><a href="#4-2-调度约束方法" class="headerlink" title="4.2 调度约束方法"></a>4.2 调度约束方法</h2><p>我们为了实现容器主机资源平衡使用, 可以使用约束把pod调度到指定的node节点</p>
<ul>
<li>nodeName 用于将pod调度到指定的node名称上</li>
<li>nodeSelector 用于将pod调度到匹配Label的node上</li>
</ul>
<h3 id="4-2-1-nodeName"><a href="#4-2-1-nodeName" class="headerlink" title="4.2.1  nodeName"></a>4.2.1  nodeName</h3><p>1, 编写YAML文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># vim pod-nodename.yml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: pod<span class="literal">-nodename</span></span><br><span class="line">spec:</span><br><span class="line">  nodeName: k8s<span class="literal">-worker1</span>                    <span class="comment"># 通过nodeName调度到k8s-worker1节点</span></span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx</span><br><span class="line">    image: nginx:<span class="number">1.15</span><span class="literal">-alpine</span></span><br></pre></td></tr></table></figure>

<p>2, 应用YAML文件创建pod</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl apply -f pod-nodename.yml</span></span><br><span class="line">pod/pod<span class="literal">-nodename</span> created</span><br></pre></td></tr></table></figure>

<p>3, 验证</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl describe pod pod-nodename |tail -6</span></span><br><span class="line">Events:</span><br><span class="line">  <span class="built_in">Type</span>    Reason   Age    From     Message</span><br><span class="line">  ----    ------   ----   ----     -------</span><br><span class="line">  Normal  Pulled   <span class="number">2</span>m47s  kubelet  Container image <span class="string">&quot;nginx:1.15-alpine&quot;</span> already present on machine</span><br><span class="line">  Normal  Created  <span class="number">2</span>m47s  kubelet  Created container nginx</span><br><span class="line">  Normal  Started  <span class="number">2</span>m47s  kubelet  Started container nginx</span><br><span class="line"></span><br><span class="line">倒数第<span class="number">3</span>行没有使用scheduler,而是直接给运行了,说明nodeName约束生效</span><br></pre></td></tr></table></figure>

<h3 id="4-2-2-nodeSelector"><a href="#4-2-2-nodeSelector" class="headerlink" title="4.2.2 nodeSelector"></a>4.2.2 nodeSelector</h3><p>1, 为k8s-worker1打标签</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl label nodes k8s-worker1 bussiness=game</span></span><br><span class="line">node/k8s<span class="literal">-worker1</span> labeled</span><br></pre></td></tr></table></figure>

<p>2, 编写YAML文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># vim pod-nodeselector.yml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: pod<span class="literal">-nodeselect</span></span><br><span class="line">spec:</span><br><span class="line">  nodeSelector:                         <span class="comment"># nodeSelector节点选择器</span></span><br><span class="line">    bussiness: game                     <span class="comment"># 指定调度到标签为bussiness=game的节点</span></span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx</span><br><span class="line">    image: nginx:<span class="number">1.15</span><span class="literal">-alpine</span></span><br></pre></td></tr></table></figure>

<p>3,  应用YAML文件创建pod</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl apply -f pod-nodeselector.yml</span></span><br><span class="line">pod/pod<span class="literal">-nodeselect</span> created</span><br></pre></td></tr></table></figure>

<p>4, 验证</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl describe pod pod-nodeselect |tail -6</span></span><br><span class="line"> <span class="built_in">Type</span>    Reason     Age   From               Message</span><br><span class="line">  ----    ------     ----  ----               -------</span><br><span class="line">  Normal  Scheduled  <span class="number">20</span>s   default<span class="literal">-scheduler</span>  Successfully assigned default/pod<span class="literal">-nodeselect</span> to k8s<span class="literal">-worker1</span></span><br><span class="line">  Normal  Pulled     <span class="number">19</span>s   kubelet            Container image <span class="string">&quot;nginx:1.15-alpine&quot;</span> already present on machine</span><br><span class="line">  Normal  Created    <span class="number">19</span>s   kubelet            Created container nginx</span><br><span class="line">  Normal  Started    <span class="number">19</span>s   kubelet            Started container nginx</span><br><span class="line"></span><br><span class="line">仍然经过了scheduler,但确实分配到了 k8s<span class="literal">-worker1</span>上</span><br></pre></td></tr></table></figure>

<p>有兴趣可以再删除后再创建,重复几次验证</p>
<h1 id="五、pod的生命周期"><a href="#五、pod的生命周期" class="headerlink" title="五、pod的生命周期"></a>五、pod的生命周期</h1><h2 id="5-1-Pod生命周期"><a href="#5-1-Pod生命周期" class="headerlink" title="5.1 Pod生命周期"></a>5.1 Pod生命周期</h2><ul>
<li>有些pod(比如运行httpd服务),正常情况下会一直运行中,但如果手动删除它,此pod会终止</li>
<li>也有些pod(比如执行计算任务)，任务计算完后就会自动终止</li>
</ul>
<p>上面两种场景中,pod从创建到终止的过程就是pod的生命周期。</p>
<p><img src="/images/Kubernetes/kubernetes%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5Pod.assets/pod%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="pod生命周期"></p>
<h3 id="5-1-1-容器启动"><a href="#5-1-1-容器启动" class="headerlink" title="5.1.1 容器启动"></a>5.1.1 容器启动</h3><ol>
<li><p>pod中的容器在创建前,有初始化容器(init container)来进行初始化环境</p>
</li>
<li><p>初化完后,主容器(main container)开始启动</p>
</li>
<li><p>主容器启动后,有一个<strong>post start</strong>的操作(启动后的触发型操作,或者叫启动后钩子)</p>
</li>
<li><p>post start后,就开始做健康检查</p>
<ul>
<li><p>第一个健康检查叫存活状态检查(liveness probe )，用来检查主容器存活状态的</p>
</li>
<li><p>第二个健康检查叫准备就绪检查(readiness probe)，用来检查主容器是否启动就绪</p>
</li>
</ul>
</li>
</ol>
<h3 id="5-1-2-容器终止"><a href="#5-1-2-容器终止" class="headerlink" title="5.1.2 容器终止"></a>5.1.2 容器终止</h3><ol>
<li>可以在容器终止前设置<strong>pre stop</strong>操作(终止前的触发型操作,或者叫终止前钩子)</li>
<li>当出现特殊情况不能正常销毁pod时,大概等待30秒会强制终止</li>
<li>终止容器后还可能会重启容器(视容器重启策略而定)。</li>
</ol>
<h3 id="5-1-3-回顾容器重启策略"><a href="#5-1-3-回顾容器重启策略" class="headerlink" title="5.1.3 回顾容器重启策略"></a>5.1.3 回顾容器重启策略</h3><ul>
<li><p> Always：表示容器挂了总是重启，这是默认策略 </p>
</li>
<li><p> OnFailures：表示容器状态为错误时才重启，也就是容器正常终止时不重启 </p>
</li>
<li><p> Never：表示容器挂了不予重启 </p>
</li>
<li><p> 对于Always这种策略，容器只要挂了，就会立即重启，这样是很耗费资源的。所以Always重启策略是这么做的：第一次容器挂了立即重启，如果再挂了就要延时10s重启，第三次挂了就等20s重启…… 依次类推 </p>
</li>
</ul>
<h2 id="5-2-HealthCheck健康检查"><a href="#5-2-HealthCheck健康检查" class="headerlink" title="5.2 HealthCheck健康检查"></a>5.2 HealthCheck健康检查</h2><p>当Pod启动时，容器可能会因为某种错误(服务未启动或端口不正确)而无法访问等。</p>
<h3 id="5-2-1-Health-Check方式"><a href="#5-2-1-Health-Check方式" class="headerlink" title="5.2.1 Health Check方式"></a>5.2.1 Health Check方式</h3><p>kubelet拥有两个检测器，它们分别对应不同的触发器(根据触发器的结构执行进一步的动作)</p>
<table>
<thead>
<tr>
<th>方式</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Liveness Probe(存活状态探测)</td>
<td>指示容器是否正在运行。如果存活态探测失败，则 kubelet 会杀死容器， 并且容器将根据其<a href="https://kubernetes.io/zh/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy">重启策略</a>决定未来。如果容器不提供存活探针， 则默认状态为 <code>Success</code>。</td>
</tr>
<tr>
<td>readiness Probe(就绪型探测)</td>
<td>指示容器是否准备好为请求提供服务。如果就绪态探测失败， 端点控制器将从与 Pod 匹配的所有服务的端点列表中删除该 Pod 的 IP 地址。 初始延迟之前的就绪态的状态值默认为 <code>Failure</code>。 如果容器不提供就绪态探针，则默认状态为 <code>Success</code>。注：检查后不健康，将容器设置为Notready;如果使用service来访问,流量不会转发给此种状态的pod</td>
</tr>
<tr>
<td>startup Probe</td>
<td>指示容器中的应用是否已经启动。如果提供了启动探针，则所有其他探针都会被 禁用，直到此探针成功为止。如果启动探测失败，<code>kubelet</code> 将杀死容器，而容器依其 <a href="https://kubernetes.io/zh/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy">重启策略</a>进行重启。 如果容器没有提供启动探测，则默认状态为 <code>Success</code>。</td>
</tr>
</tbody></table>
<h3 id="5-2-2-Probe探测方式"><a href="#5-2-2-Probe探测方式" class="headerlink" title="5.2.2 Probe探测方式"></a>5.2.2 Probe探测方式</h3><table>
<thead>
<tr>
<th>方式</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Exec</td>
<td>执行命令</td>
</tr>
<tr>
<td>HTTPGet</td>
<td>http请求某一个URL路径</td>
</tr>
<tr>
<td>TCP</td>
<td>tcp连接某一个端口</td>
</tr>
<tr>
<td>gRPC</td>
<td>使用 <a href="https://grpc.io/">gRPC</a> 执行一个远程过程调用。 目标应该实现 <a href="https://grpc.io/grpc/core/md_doc_health-checking.html">gRPC健康检查</a>。 如果响应的状态是 “SERVING”，则认为诊断成功。 gRPC 探针是一个 alpha 特性，只有在你启用了 “GRPCContainerProbe” <a href="https://kubernetes.io/zh/docs/reference/command-line-tools-reference/feature-gate/">特性门控</a>时才能使用。</td>
</tr>
</tbody></table>
<h3 id="5-2-3-liveness-exec案例"><a href="#5-2-3-liveness-exec案例" class="headerlink" title="5.2.3 liveness-exec案例"></a>5.2.3 liveness-exec案例</h3><p>1, 准备YAML文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># vim pod-liveness-exec.yml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: liveness<span class="literal">-exec</span></span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: liveness</span><br><span class="line">    image: busybox</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    args:</span><br><span class="line">    - /bin/sh</span><br><span class="line">    - <span class="literal">-c</span></span><br><span class="line">    - touch /tmp/healthy; <span class="built_in">sleep</span> <span class="number">30</span>; <span class="built_in">rm</span> <span class="literal">-rf</span> /tmp/healthy; <span class="built_in">sleep</span> <span class="number">600</span></span><br><span class="line">    livenessProbe:</span><br><span class="line">      exec:</span><br><span class="line">        command:</span><br><span class="line">        - <span class="built_in">cat</span></span><br><span class="line">        - /tmp/healthy</span><br><span class="line">      initialDelaySeconds: <span class="number">5</span> 				<span class="comment"># pod启动延迟5秒后探测</span></span><br><span class="line">      periodSeconds: <span class="number">5</span> 						<span class="comment"># 每5秒探测1次</span></span><br></pre></td></tr></table></figure>

<p>2, 应用YAML文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl apply -f pod-liveness-exec.yml</span></span><br></pre></td></tr></table></figure>

<p>3, 通过下面的命令观察</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl describe pod liveness-exec</span></span><br><span class="line">......</span><br><span class="line">Events:</span><br><span class="line">  <span class="built_in">Type</span>     Reason     Age   From               Message</span><br><span class="line">  ----     ------     ----  ----               -------</span><br><span class="line">  Normal   Scheduled  <span class="number">40</span>s   default<span class="literal">-scheduler</span>  Successfully assigned default/liveness<span class="literal">-exec</span> to k8s<span class="literal">-worker1</span></span><br><span class="line">  Normal   Pulled     <span class="number">38</span>s   kubelet    Container image <span class="string">&quot;busybox&quot;</span> already present on machine</span><br><span class="line">  Normal   Created    <span class="number">37</span>s   kubelet     Created container liveness</span><br><span class="line">  Normal   Started    <span class="number">37</span>s   kubelet     Started container liveness</span><br><span class="line">  Warning  Unhealthy  <span class="number">3</span>s    kubelet     Liveness probe failed: <span class="built_in">cat</span>: can<span class="string">&#x27;t open &#x27;</span>/tmp/healthy<span class="string">&#x27;: No such file or directory</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">看到40s前被调度以k8s-worker1节点,3s前健康检查出问题</span></span><br></pre></td></tr></table></figure>

<p>4, 过几分钟再观察</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl describe pod liveness-exec</span></span><br><span class="line">......</span><br><span class="line">Events:</span><br><span class="line">  <span class="built_in">Type</span>     Reason     Age                  From               Message</span><br><span class="line">  ----     ------     ----                 ----               -------</span><br><span class="line">  Normal   Scheduled  <span class="number">3</span>m42s                default<span class="literal">-scheduler</span>  Successfully assigned default/liveness<span class="literal">-exec</span> to k8s<span class="literal">-worker1</span></span><br><span class="line">  Normal   Pulled     <span class="number">70</span>s (x3 over <span class="number">3</span>m40s)  kubelet     Container image <span class="string">&quot;busybox&quot;</span> already present on machine</span><br><span class="line">  Normal   Created    <span class="number">70</span>s (x3 over <span class="number">3</span>m39s)  kubelet     Created container liveness</span><br><span class="line">  Normal   Started    <span class="number">69</span>s (x3 over <span class="number">3</span>m39s)  kubelet     Started container liveness</span><br><span class="line">  Warning  Unhealthy  <span class="number">26</span>s (x9 over <span class="number">3</span>m5s)   kubelet     Liveness probe failed: <span class="built_in">cat</span>: can<span class="string">&#x27;t open &#x27;</span>/tmp/healthy<span class="string">&#x27;: No such file or directory</span></span><br><span class="line"><span class="string">  Normal   Killing    26s (x3 over 2m55s)  kubelet     Container liveness failed liveness probe, will be restarted</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pod</span></span><br><span class="line">NAME            READY   STATUS    RESTARTS   AGE</span><br><span class="line">liveness<span class="literal">-exec</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">3</span>          <span class="number">4</span>m12s</span><br><span class="line"></span><br><span class="line">看到重启<span class="number">3</span>次,慢慢地重启间隔时间会越来越长</span><br></pre></td></tr></table></figure>



<h3 id="拓展-容器重启策略验证"><a href="#拓展-容器重启策略验证" class="headerlink" title="拓展: 容器重启策略验证"></a>拓展: 容器重启策略验证</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: liveness<span class="literal">-exec</span></span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  restartPolicy: Never					<span class="comment"># 把容器重启策略由默认的always改为Never</span></span><br><span class="line">  containers:</span><br><span class="line">  - name: liveness</span><br><span class="line">    image: busybox</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    args:</span><br><span class="line">    - /bin/sh</span><br><span class="line">    - <span class="literal">-c</span></span><br><span class="line">    - touch /tmp/healthy; <span class="built_in">sleep</span> <span class="number">30</span>; <span class="built_in">rm</span> <span class="literal">-rf</span> /tmp/healthy; <span class="built_in">sleep</span> <span class="number">600</span></span><br><span class="line">    livenessProbe:</span><br><span class="line">      exec:</span><br><span class="line">        command:</span><br><span class="line">        - <span class="built_in">cat</span></span><br><span class="line">        - /tmp/healthy</span><br><span class="line">      initialDelaySeconds: <span class="number">5</span>                         </span><br><span class="line">      periodSeconds: <span class="number">5</span>                                 </span><br></pre></td></tr></table></figure>

<p>请自行验证</p>
<p>验证结果为:</p>
<ul>
<li>容器健康检查出现问题后，不再重启，也不会继续sleep 600秒，而是直接关闭了</li>
</ul>
<h3 id="5-2-4-liveness-httpget案例"><a href="#5-2-4-liveness-httpget案例" class="headerlink" title="5.2.4  liveness-httpget案例"></a>5.2.4  liveness-httpget案例</h3><p>1, 编写YMAL文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># vim pod-liveness-httpget.yml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: liveness<span class="literal">-httpget</span></span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: liveness</span><br><span class="line">    image: nginx:<span class="number">1.15</span><span class="literal">-alpine</span></span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    ports:							    <span class="comment"># 指定容器端口，这一段不写也行，端口由镜像决定 </span></span><br><span class="line">    - name: http						<span class="comment"># 自定义名称，不需要与下面的port: http对应</span></span><br><span class="line">      containerPort: <span class="number">80</span>					<span class="comment"># 类似dockerfile里的expose 80</span></span><br><span class="line">    livenessProbe:</span><br><span class="line">      httpGet:                          <span class="comment"># 使用httpGet方式</span></span><br><span class="line">        port: http                      <span class="comment"># http协议,也可以直接写80端口</span></span><br><span class="line">        path: /index.html               <span class="comment"># 探测家目录下的index.html</span></span><br><span class="line">      initialDelaySeconds: <span class="number">3</span>            <span class="comment"># 延迟3秒开始探测</span></span><br><span class="line">      periodSeconds: <span class="number">5</span>                  <span class="comment"># 每隔5s钟探测一次</span></span><br></pre></td></tr></table></figure>

<p>2, 应用YAML文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl apply -f pod-liveness-httpget.yml</span></span><br></pre></td></tr></table></figure>

<p>3, 验证查看</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pods</span></span><br><span class="line">NAME               READY   STATUS             RESTARTS   AGE</span><br><span class="line">liveness<span class="literal">-httpget</span>   <span class="number">1</span>/<span class="number">1</span>     Running            <span class="number">0</span>          <span class="number">9</span>s</span><br></pre></td></tr></table></figure>

<p>4, 交互删除nginx里的主页文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl exec -it liveness-httpget -- rm -rf /usr/share/nginx/html/index.html</span></span><br></pre></td></tr></table></figure>

<p>5, 验证查看会发现</p>
<p><img src="/images/Kubernetes/kubernetes%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5Pod.assets/liveness-httpget.png" alt="1564975961146"></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pod</span></span><br><span class="line">NAME               READY   STATUS    RESTARTS   AGE</span><br><span class="line">liveness<span class="literal">-httpget</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">1</span>          <span class="number">11</span>m</span><br><span class="line"></span><br><span class="line">只restart一次</span><br></pre></td></tr></table></figure>



<h3 id="5-2-5-liveness-tcp案例"><a href="#5-2-5-liveness-tcp案例" class="headerlink" title="5.2.5  liveness-tcp案例"></a>5.2.5  liveness-tcp案例</h3><p>1, 编写YAML文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># vim pod-liveness-tcp.yml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: liveness<span class="literal">-tcp</span></span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: liveness</span><br><span class="line">    image: nginx:<span class="number">1.15</span><span class="literal">-alpine</span></span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    ports:</span><br><span class="line">    - name: http</span><br><span class="line">      containerPort: <span class="number">80</span></span><br><span class="line">    livenessProbe:</span><br><span class="line">      tcpSocket:                        <span class="comment"># 使用tcp连接方式</span></span><br><span class="line">        port: <span class="number">80</span>                        <span class="comment"># 连接80端口进行探测</span></span><br><span class="line">      initialDelaySeconds: <span class="number">3</span></span><br><span class="line">      periodSeconds: <span class="number">5</span></span><br></pre></td></tr></table></figure>

<p>2, 应用YAML文件创建pod</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl apply -f pod-liveness-tcp.yml</span></span><br><span class="line">pod/liveness<span class="literal">-tcp</span> created</span><br></pre></td></tr></table></figure>

<p>3, 查看验证</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pod</span></span><br><span class="line">NAME               READY   STATUS             RESTARTS   AGE</span><br><span class="line">liveness<span class="literal">-tcp</span>       <span class="number">1</span>/<span class="number">1</span>     Running            <span class="number">0</span>          <span class="number">14</span>s</span><br></pre></td></tr></table></figure>

<p>4, 交互关闭nginx</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl exec -it liveness-tcp -- /usr/sbin/nginx -s stop</span></span><br></pre></td></tr></table></figure>

<p>5, 再次验证查看</p>
<p><img src="/images/Kubernetes/kubernetes%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5Pod.assets/liveness-tcp.png" alt="1564976660465"></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pod</span></span><br><span class="line">NAME               READY   STATUS    RESTARTS   AGE</span><br><span class="line">liveness<span class="literal">-tcp</span>       <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">1</span>          <span class="number">5</span>m13s</span><br><span class="line"></span><br><span class="line">也只重启<span class="number">1</span>次,重启后重新初始化了</span><br></pre></td></tr></table></figure>



<h3 id="5-2-6-readiness案例"><a href="#5-2-6-readiness案例" class="headerlink" title="5.2.6 readiness案例"></a>5.2.6 readiness案例</h3><p>1, 编写YAML文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># vim pod-readiness-httpget.yml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: readiness<span class="literal">-httpget</span></span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: readiness</span><br><span class="line">    image: nginx:<span class="number">1.15</span><span class="literal">-alpine</span></span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    ports:</span><br><span class="line">    - name: http</span><br><span class="line">      containerPort: <span class="number">80</span></span><br><span class="line">    readinessProbe:                     <span class="comment"># 这里由liveness换成了readiness</span></span><br><span class="line">      httpGet:</span><br><span class="line">        port: http</span><br><span class="line">        path: /index.html</span><br><span class="line">      initialDelaySeconds: <span class="number">3</span></span><br><span class="line">      periodSeconds: <span class="number">5</span></span><br></pre></td></tr></table></figure>

<p>2, 应用YAML文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl apply -f pod-readiness-httpget.yml</span></span><br><span class="line">pod/readiness<span class="literal">-httpget</span> created</span><br></pre></td></tr></table></figure>

<p>3, 验证查看</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pod</span></span><br><span class="line">NAME                READY   STATUS             RESTARTS   AGE</span><br><span class="line">readiness<span class="literal">-httpget</span>   <span class="number">1</span>/<span class="number">1</span>     Running            <span class="number">0</span>          <span class="number">10</span>s</span><br></pre></td></tr></table></figure>

<p>4, 交互删除nginx主页</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl exec -it readiness-httpget -- rm -rf /usr/share/nginx/html/index.html</span></span><br></pre></td></tr></table></figure>

<p>5, 再次验证</p>
<p><img src="/images/Kubernetes/kubernetes%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5Pod.assets/readiness-httpget.png" alt="1564978173894"></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pod</span></span><br><span class="line">NAME                READY   STATUS    RESTARTS   AGE</span><br><span class="line">readiness<span class="literal">-httpget</span>   <span class="number">0</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">2</span>m49s</span><br><span class="line"></span><br><span class="line">READY状态为<span class="number">0</span>/<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>6, 交互创建nginx主页文件再验证</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl exec -it readiness-httpget -- touch /usr/share/nginx/html/index.html</span></span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pod</span></span><br><span class="line">NAME                READY   STATUS             RESTARTS   AGE</span><br><span class="line">readiness<span class="literal">-httpget</span>   <span class="number">1</span>/<span class="number">1</span>     Running            <span class="number">0</span>          <span class="number">3</span>m10s</span><br><span class="line"></span><br><span class="line">READY状态又为<span class="number">1</span>/<span class="number">1</span>了</span><br></pre></td></tr></table></figure>

<h3 id="5-2-7-readiness-liveness综合案例"><a href="#5-2-7-readiness-liveness综合案例" class="headerlink" title="5.2.7 readiness+liveness综合案例"></a>5.2.7 readiness+liveness综合案例</h3><p>1, 编写YAML文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># vim pod-readiness-liveiness.yml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: readiness<span class="literal">-liveness</span><span class="literal">-httpget</span></span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: readiness<span class="literal">-liveness</span></span><br><span class="line">    image: nginx:<span class="number">1.15</span><span class="literal">-alpine</span></span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    ports:</span><br><span class="line">    - name: http</span><br><span class="line">      containerPort: <span class="number">80</span></span><br><span class="line">    livenessProbe:</span><br><span class="line">      httpGet:</span><br><span class="line">        port: http</span><br><span class="line">        path: /index.html</span><br><span class="line">      initialDelaySeconds: <span class="number">1</span></span><br><span class="line">      periodSeconds: <span class="number">3</span></span><br><span class="line">    readinessProbe:</span><br><span class="line">      httpGet:</span><br><span class="line">        port: http</span><br><span class="line">        path: /index.html</span><br><span class="line">      initialDelaySeconds: <span class="number">5</span></span><br><span class="line">      periodSeconds: <span class="number">5</span></span><br></pre></td></tr></table></figure>

<p>2, 应用YAML文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl apply -f pod-readiness-liveiness.yml</span></span><br><span class="line">pod/readiness<span class="literal">-liveness</span><span class="literal">-httpget</span> created</span><br></pre></td></tr></table></figure>

<p>3, 验证</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pod |grep readiness-liveness-httpget</span></span><br><span class="line">NAME                         READY   STATUS             RESTARTS   AGE</span><br><span class="line">readiness<span class="literal">-liveness</span><span class="literal">-httpget</span>   <span class="number">0</span>/<span class="number">1</span>     Running            <span class="number">0</span>          <span class="number">6</span>s</span><br></pre></td></tr></table></figure>





<h2 id="5-3-post-start"><a href="#5-3-post-start" class="headerlink" title="5.3 post-start"></a>5.3 post-start</h2><p>1, 编写YAML文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># vim pod-poststart.yml</span></span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: poststart</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: poststart</span><br><span class="line">    image: nginx:<span class="number">1.15</span><span class="literal">-alpine</span></span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    lifecycle:                                       <span class="comment"># 生命周期事件</span></span><br><span class="line">      postStart:</span><br><span class="line">        exec:</span><br><span class="line">          command: [<span class="string">&quot;mkdir&quot;</span>,<span class="string">&quot;-p&quot;</span>,<span class="string">&quot;/usr/share/nginx/html/haha&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>2, 应用YMAL文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl apply -f pod-poststart.yml</span></span><br></pre></td></tr></table></figure>

<p>3, 验证</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pods</span></span><br><span class="line">NAME                         READY   STATUS             RESTARTS   AGE</span><br><span class="line">poststart                    <span class="number">1</span>/<span class="number">1</span>     Running            <span class="number">0</span>          <span class="number">25</span>s</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl exec -it poststart -- ls /usr/share/nginx/html -l</span></span><br><span class="line">total <span class="number">8</span></span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-<span class="literal">-r</span>-- <span class="number">1</span> root root <span class="number">494</span> Apr <span class="number">16</span> <span class="number">13</span>:<span class="number">08</span> <span class="number">50</span>x.html</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">2</span> root root   <span class="number">6</span> Aug  <span class="number">5</span> <span class="number">05</span>:<span class="number">33</span> haha			有创建此目录</span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-<span class="literal">-r</span>-- <span class="number">1</span> root root <span class="number">612</span> Apr <span class="number">16</span> <span class="number">13</span>:<span class="number">08</span> index.html</span><br></pre></td></tr></table></figure>

<h2 id="5-4-pre-stop"><a href="#5-4-pre-stop" class="headerlink" title="5.4 pre-stop"></a>5.4 pre-stop</h2><p>容器终止前执行的命令</p>
<p>1, 编写YAML文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># vim prestop.yml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: prestop</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: prestop</span><br><span class="line">    image: nginx:<span class="number">1.15</span><span class="literal">-alpine</span></span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    lifecycle:                                       <span class="comment"># 生命周期事件</span></span><br><span class="line">      preStop:                                       <span class="comment"># preStop</span></span><br><span class="line">        exec:</span><br><span class="line">          command: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;sleep 60000000&quot;</span>]     <span class="comment"># 容器终止前sleep 60000000秒</span></span><br></pre></td></tr></table></figure>

<p>2, 应用YAML文件创建pod</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl apply -f prestop.yml</span></span><br><span class="line">pod/prestop created</span><br></pre></td></tr></table></figure>

<p>3, 删除pod验证</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl delete -f prestop.yml</span></span><br><span class="line">pod <span class="string">&quot;prestop&quot;</span> deleted		会在这一步等待一定的时间(大概<span class="number">30</span>s<span class="literal">-60s</span>左右)才能删除,说明验证成功</span><br></pre></td></tr></table></figure>

<p><strong>结论:</strong> 当出现特殊情况不能正常销毁pod时,大概等待30秒会强制终止</p>
<h2 id="5-5-pod故障排除"><a href="#5-5-pod故障排除" class="headerlink" title="5.5 pod故障排除"></a>5.5 pod故障排除</h2><table>
<thead>
<tr>
<th>状态</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Pending（悬决）</td>
<td>Pod 已被 Kubernetes 系统接受，但有一个或者多个容器尚未创建亦未运行。此阶段包括等待 Pod 被调度的时间和通过网络下载镜像的时间。</td>
</tr>
<tr>
<td>Running（运行中）</td>
<td>pod已经绑定到一个节点，并且已经创建了所有容器。至少有一个容器正在运行中，或正在启动或重新启动。</td>
</tr>
<tr>
<td>completed（完成）</td>
<td>Pod中的所有容器都已成功终止，不会重新启动。</td>
</tr>
<tr>
<td>Failed（失败）</td>
<td>Pod的所有容器均已终止，且至少有一个容器已在故障中终止。也就是说，容器要么以非零状态退出，要么被系统终止。</td>
</tr>
<tr>
<td>Unknown（未知）</td>
<td>由于某种原因apiserver无法获得Pod的状态，通常是由于Master与Pod所在主机kubelet通信时出错。</td>
</tr>
<tr>
<td>CrashLoopBackOff</td>
<td>多见于CMD语句错误或者找不到container入口语句导致了快速退出,可以用kubectl logs 查看日志进行排错</td>
</tr>
</tbody></table>
<ul>
<li>kubectl describe pod  pod名</li>
<li>kubectl logs pod  [-c CONTAINER]</li>
<li>kubectl exec POD [-c CONTAINER] –COMMAND [args…]</li>
</ul>
]]></content>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes核心概念 Controller</title>
    <url>/2024/02/26/%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/kubernetes%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%20Controller/</url>
    <content><![CDATA[<h1 id="一、pod控制器controller"><a href="#一、pod控制器controller" class="headerlink" title="一、pod控制器controller"></a>一、pod控制器controller</h1><h2 id="1-1-Controller作用及分类"><a href="#1-1-Controller作用及分类" class="headerlink" title="1.1 Controller作用及分类"></a>1.1 Controller作用及分类</h2><p>controller用于控制pod<br>参考: <a href="https://kubernetes.io/zh/docs/concepts/workloads/controllers/">https://kubernetes.io/zh/docs/concepts/workloads/controllers/</a></p>
<p><img src="/images/Kubernetes/kubernetes%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5controller.assets/workload.png" alt="1564844640416"></p>
<p>控制器主要分为:</p>
<ul>
<li>Deployments   部署无状态应用，控制pod升级,回退</li>
<li>ReplicaSet       副本集,控制pod扩容,裁减</li>
<li>ReplicationController(相当于ReplicaSet的老版本,现在建议使用Deployments加ReplicaSet替代RC)</li>
<li>StatefulSets     部署有状态应用，结合Service、存储等实现对有状态应用部署</li>
<li>DaemonSet     守护进程集，运行在所有集群节点(包括master), 比如使用filebeat,node_exporter</li>
<li>Jobs                  一次性</li>
<li>Cronjob            周期性</li>
</ul>
<h2 id="1-2-Deployment"><a href="#1-2-Deployment" class="headerlink" title="1.2 Deployment"></a>1.2 Deployment</h2><h3 id="1-2-1-Replicaset控制器的功能"><a href="#1-2-1-Replicaset控制器的功能" class="headerlink" title="1.2.1 Replicaset控制器的功能"></a>1.2.1 Replicaset控制器的功能</h3><ul>
<li>支持新的基于集合的selector(以前的rc里没有这种功能)</li>
<li>通过改变Pod副本数量实现Pod的扩容和缩容</li>
</ul>
<h3 id="1-2-2-Deployment控制器的功能"><a href="#1-2-2-Deployment控制器的功能" class="headerlink" title="1.2.2 Deployment控制器的功能"></a>1.2.2 Deployment控制器的功能</h3><ul>
<li>Deployment集成了上线部署、滚动升级、创建副本、回滚等功能</li>
<li>Deployment里包含并使用了ReplicaSet</li>
</ul>
<h3 id="1-2-3-Deployment用于部署无状态应用"><a href="#1-2-3-Deployment用于部署无状态应用" class="headerlink" title="1.2.3 Deployment用于部署无状态应用"></a>1.2.3 Deployment用于部署无状态应用</h3><p>无状态应用的特点:</p>
<ul>
<li>所有pod无差别</li>
<li>所有pod中容器运行同一个image</li>
<li>所有pod可以运行在集群中任意node上</li>
<li>所有pod无启动顺序先后之分</li>
<li>随意pod数量扩容或缩容</li>
<li>例如简单运行一个静态web程序</li>
</ul>
<h3 id="1-2-4-创建deployment类型应用"><a href="#1-2-4-创建deployment类型应用" class="headerlink" title="1.2.4 创建deployment类型应用"></a>1.2.4 创建deployment类型应用</h3><p>1, 准备YAML文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># vim deployment-nginx.yml</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: <span class="built_in">deploy-nginx</span>			<span class="comment"># deployment名</span></span><br><span class="line">spec:				</span><br><span class="line">  replicas: <span class="number">1</span>					<span class="comment"># 副本集,deployment里使用了replicaset</span></span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx				<span class="comment"># 匹配的pod标签,表示deployment和rs控制器控制带有此标签的pod</span></span><br><span class="line">  template:					    <span class="comment"># 代表pod的配置模板</span></span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx				<span class="comment"># pod的标签</span></span><br><span class="line">    spec:</span><br><span class="line">      containers:				<span class="comment"># 以下为pod里的容器定义</span></span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:<span class="number">1.15</span><span class="literal">-alpine</span></span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: <span class="number">80</span></span><br></pre></td></tr></table></figure>

<p>2, 应用YAML文件创建deployment</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl apply -f deployment-nginx.yml</span></span><br><span class="line">deployment.apps/<span class="built_in">deploy-nginx</span> created</span><br></pre></td></tr></table></figure>

<p>3, 查看验证</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get deployment				# deployment可简写成depoly</span></span><br><span class="line">NAME           READY   UP<span class="literal">-TO</span><span class="literal">-DATE</span>   AVAILABLE   AGE</span><br><span class="line"><span class="built_in">deploy-nginx</span>   <span class="number">1</span>/<span class="number">1</span>     <span class="number">1</span>            <span class="number">1</span>           <span class="number">19</span>s</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pods</span></span><br><span class="line">NAME                            READY   STATUS    RESTARTS   AGE</span><br><span class="line"><span class="built_in">deploy-nginx</span><span class="literal">-6c9764bb69</span><span class="literal">-pbc2h</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">75</span>s</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get replicasets				# replicasets可简写成rs</span></span><br><span class="line">NAME                      DESIRED   CURRENT   READY   AGE</span><br><span class="line"><span class="built_in">deploy-nginx</span><span class="literal">-6c9764bb69</span>   <span class="number">1</span>         <span class="number">1</span>         <span class="number">1</span>       <span class="number">2</span>m6s</span><br></pre></td></tr></table></figure>



<h3 id="1-2-5-访问deployment"><a href="#1-2-5-访问deployment" class="headerlink" title="1.2.5 访问deployment"></a>1.2.5 访问deployment</h3><p>1,查看pod的IP地址</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pods -o wide</span></span><br><span class="line">NAME                            READY   STATUS    RESTARTS   AGE   IP               NODE          NOMINATED NODE   READINESS GATES</span><br><span class="line"><span class="built_in">deploy-nginx</span><span class="literal">-6d9d558bb6</span><span class="literal">-88nr8</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">39</span>s   <span class="number">10.244</span>.<span class="number">159.155</span>   k8s<span class="literal">-master1</span>   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line">pod在k8s<span class="literal">-master1</span>节点,pod的IP为<span class="number">10.244</span>.<span class="number">159.155</span></span><br></pre></td></tr></table></figure>

<p>2, 查看所有集群节点的网卡</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># ifconfig tunl0 |head -2</span></span><br><span class="line">tunl0: flags=<span class="number">193</span>&lt;UP,RUNNING,NOARP&gt;  mtu <span class="number">1480</span></span><br><span class="line">        inet <span class="number">10.244</span>.<span class="number">159.128</span>  netmask <span class="number">255.255</span>.<span class="number">255.255</span></span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master2</span> ~]<span class="comment"># ifconfig tunl0 |head -2</span></span><br><span class="line">tunl0: flags=<span class="number">193</span>&lt;UP,RUNNING,NOARP&gt;  mtu <span class="number">1480</span></span><br><span class="line">        inet <span class="number">10.244</span>.<span class="number">224.0</span>  netmask <span class="number">255.255</span>.<span class="number">255.255</span></span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master3</span> ~]<span class="comment"># ifconfig tunl0 |head -2</span></span><br><span class="line">tunl0: flags=<span class="number">193</span>&lt;UP,RUNNING,NOARP&gt;  mtu <span class="number">1480</span></span><br><span class="line">        inet <span class="number">10.244</span>.<span class="number">135.192</span>  netmask <span class="number">255.255</span>.<span class="number">255.255</span></span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">worker1</span> ~]<span class="comment"># ifconfig tunl0 |head -2</span></span><br><span class="line">tunl0: flags=<span class="number">193</span>&lt;UP,RUNNING,NOARP&gt;  mtu <span class="number">1480</span></span><br><span class="line">        inet <span class="number">10.244</span>.<span class="number">194.64</span>  netmask <span class="number">255.255</span>.<span class="number">255.255</span></span><br></pre></td></tr></table></figure>

<ul>
<li>可以看到所有集群节点的IP都为<code>10.244.0.0/16</code>这个大网段内的子网</li>
</ul>
<p>3, 在任意集群节点上都可以访问此deploy里pod</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl 10.244.159.155</span></span><br><span class="line"></span><br><span class="line">结果是任意集群节点都可以访问这个POD,但集群外部是不能访问的</span><br></pre></td></tr></table></figure>



<h3 id="1-2-6-删除deployment中的pod"><a href="#1-2-6-删除deployment中的pod" class="headerlink" title="1.2.6 删除deployment中的pod"></a>1.2.6 删除deployment中的pod</h3><p>1, 删除pod（<strong>注意: 是删除deployment中的pod</strong>）</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl delete pod deploy-nginx-6c9764bb69-pbc2h</span></span><br><span class="line">pod <span class="string">&quot;deploy-nginx-6c9764bb69-pbc2h&quot;</span> deleted</span><br></pre></td></tr></table></figure>

<p>2, 再次查看,发现又重新启动了一个pod(<strong>节点由k8s-master1转为k8s-worker1 了,IP地址也变化了</strong>)</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pods  -o wide</span></span><br><span class="line">NAME                            READY   STATUS    RESTARTS   AGE   IP              NODE          NOMINATED NODE   READINESS GATES</span><br><span class="line"><span class="built_in">deploy-nginx</span><span class="literal">-6d9d558bb6</span><span class="literal">-f2t6r</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">28</span>s   <span class="number">10.244</span>.<span class="number">194.94</span>   k8s<span class="literal">-worker1</span>   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>也就是说**==pod的IP不是固定的==<strong>,比如把整个集群关闭再启动,pod也会自动启动,但是</strong>IP地址也会变化**</p>
<p><strong>既然IP地址不是固定的,所以需要一个固定的访问endpoint给用户,那么这种方式就是service.</strong></p>
<h3 id="1-2-7-pod版本升级"><a href="#1-2-7-pod版本升级" class="headerlink" title="1.2.7 pod版本升级"></a>1.2.7 pod版本升级</h3><p>查看帮助</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl set image -h</span></span><br></pre></td></tr></table></figure>

<p>1, 升级前验证nginx版本</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl describe pods deploy-nginx-6d9d558bb6-f2t6r | grep Image:</span></span><br><span class="line">    Image:          nginx:<span class="number">1.15</span><span class="literal">-alpine</span></span><br><span class="line">    </span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl exec deploy-nginx-6d9d558bb6-f2t6r -- nginx -v</span></span><br><span class="line">nginx version: nginx/<span class="number">1.15</span>.<span class="number">12</span></span><br></pre></td></tr></table></figure>

<p>2, 升级为1.16版</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl set image deployment deploy-nginx nginx=nginx:1.16-alpine --record</span></span><br><span class="line">deployment.apps/<span class="built_in">deploy-nginx</span> image updated</span><br></pre></td></tr></table></figure>

<p>说明:</p>
<ul>
<li><p><code>deployment deploy-nginx</code>代表名为deploy-nginx的deployment</p>
</li>
<li><p><code>nginx=nginx:1.16-alpine</code>前面的nginx为容器名</p>
</li>
<li><p>–record  表示会记录</p>
</li>
</ul>
<p><strong>容器名怎么查看?</strong></p>
<ul>
<li><p><code>kubectl describe pod pod名</code>查看</p>
</li>
<li><p><code>kubectl edit deployment deployment名</code>来查看容器名</p>
</li>
<li><p><code>kubectl get deployment deployment名 -o yaml</code>来查看容器名</p>
</li>
</ul>
<p>3, 验证</p>
<p>如果升级的pod数量较多，则需要一定时间，可通过下面命令查看是否已经成功</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl rollout status deployment deploy-nginx	</span></span><br><span class="line">deployment <span class="string">&quot;deploy-nginx&quot;</span> successfully rolled out</span><br></pre></td></tr></table></figure>

<p>验证 pod</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pods</span></span><br><span class="line">NAME                            READY   STATUS    RESTARTS   AGE</span><br><span class="line"><span class="built_in">deploy-nginx</span><span class="literal">-5f4749c8c8</span><span class="literal">-nskp9</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">104</span>s     更新后,后面的id变了</span><br></pre></td></tr></table></figure>

<p>验证版本</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl describe pod deploy-nginx-5f4749c8c8-nskp9 |grep Image:</span></span><br><span class="line">    Image:          nginx:<span class="number">1.16</span><span class="literal">-alpine</span>							升级为<span class="number">1.16</span>了</span><br><span class="line">    </span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl exec deploy-nginx-5f4749c8c8-nskp9 -- nginx -v</span></span><br><span class="line">nginx version: nginx/<span class="number">1.16</span>.<span class="number">1</span>										升级为<span class="number">1.16</span>了</span><br></pre></td></tr></table></figure>



<p><strong>练习:</strong> 再将nginx1升级为1.17版</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl set image deployment deploy-nginx nginx=nginx:1.17-alpine --record</span></span><br><span class="line">deployment.apps/<span class="built_in">deploy-nginx</span> image updated</span><br></pre></td></tr></table></figure>



<h3 id="1-2-8-pod版本回退"><a href="#1-2-8-pod版本回退" class="headerlink" title="1.2.8 pod版本回退"></a>1.2.8 pod版本回退</h3><p>1, 查看版本历史信息</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl rollout history deployment deploy-nginx</span></span><br><span class="line">deployment.apps/<span class="built_in">deploy-nginx</span></span><br><span class="line">REVISION  CHANGE<span class="literal">-CAUSE</span></span><br><span class="line"><span class="number">1</span>         &lt;none&gt;												原<span class="number">1.15</span>版</span><br><span class="line"><span class="number">2</span>         kubectl <span class="built_in">set</span> image deployment <span class="built_in">deploy-nginx</span> nginx=nginx:<span class="number">1.16</span><span class="literal">-alpine</span> -<span class="literal">-record</span>=true</span><br><span class="line"><span class="number">3</span>         kubectl <span class="built_in">set</span> image deployment <span class="built_in">deploy-nginx</span> nginx=nginx:<span class="number">1.17</span><span class="literal">-alpine</span> -<span class="literal">-record</span>=true</span><br></pre></td></tr></table></figure>

<p>2, 定义要回退的版本（还需要执行才是真的回退版本)</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl rollout history deployment deploy-nginx --revision=1</span></span><br><span class="line">deployment.apps/<span class="built_in">deploy-nginx</span> with revision <span class="comment">#1</span></span><br><span class="line">Pod Template:</span><br><span class="line">  Labels:       app=nginx</span><br><span class="line">        pod<span class="literal">-template</span><span class="literal">-hash</span>=<span class="number">6</span>c9764bb69</span><br><span class="line">  Containers:</span><br><span class="line">   nginx:</span><br><span class="line">    Image:      nginx:<span class="number">1.15</span><span class="literal">-alpine</span>				可以看到这是要回退的<span class="number">1.15</span>版本</span><br><span class="line">    Port:       <span class="number">80</span>/TCP</span><br><span class="line">    Host Port:  <span class="number">0</span>/TCP</span><br><span class="line">    Environment:        &lt;none&gt;</span><br><span class="line">    Mounts:     &lt;none&gt;</span><br><span class="line">  Volumes:      &lt;none&gt;</span><br></pre></td></tr></table></figure>

<p>3, 执行回退</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl rollout undo deployment deploy-nginx --to-revision=1</span></span><br><span class="line">deployment.apps/<span class="built_in">deploy-nginx</span> rolled back</span><br></pre></td></tr></table></figure>

<p>4, 验证</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl rollout history deployment deploy-nginx</span></span><br><span class="line">deployment.apps/<span class="built_in">deploy-nginx</span></span><br><span class="line">REVISION  CHANGE<span class="literal">-CAUSE</span></span><br><span class="line"><span class="number">2</span>         kubectl <span class="built_in">set</span> image deployment <span class="built_in">deploy-nginx</span> nginx=nginx:<span class="number">1.16</span><span class="literal">-alpine</span> -<span class="literal">-record</span>=true</span><br><span class="line"><span class="number">3</span>         kubectl <span class="built_in">set</span> image deployment <span class="built_in">deploy-nginx</span> nginx=nginx:<span class="number">1.17</span><span class="literal">-alpine</span> -<span class="literal">-record</span>=true</span><br><span class="line"><span class="number">4</span>         &lt;none&gt;						回到了<span class="number">1.15</span>版,但revision的ID变了</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pods</span></span><br><span class="line">NAME                            READY   STATUS    RESTARTS   AGE</span><br><span class="line"><span class="built_in">deploy-nginx</span><span class="literal">-6c9764bb69</span><span class="literal">-zgwpj</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">54</span>s</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl describe pod deploy-nginx-6c9764bb69-zgwpj |grep Image:</span></span><br><span class="line">    Image:          nginx:<span class="number">1.15</span><span class="literal">-alpine</span>				回到了<span class="number">1.15</span>版</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl exec deploy-nginx-6c9764bb69-zgwpj -- nginx -v</span></span><br><span class="line">nginx version: nginx/<span class="number">1.15</span>.<span class="number">12</span>						回到了<span class="number">1.15</span>版</span><br></pre></td></tr></table></figure>



<h3 id="1-2-9-副本扩容"><a href="#1-2-9-副本扩容" class="headerlink" title="1.2.9 副本扩容"></a>1.2.9 副本扩容</h3><p>查看帮助</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl scale -h</span></span><br></pre></td></tr></table></figure>

<p>1, 扩容为2个副本</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl scale deployment deploy-nginx --replicas=2</span></span><br><span class="line">deployment.apps/<span class="built_in">deploy-nginx</span> scaled</span><br></pre></td></tr></table></figure>

<p>2, 查看</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pods -o wide</span></span><br><span class="line">NAME                            READY   STATUS    RESTARTS   AGE   IP               NODE          NOMINATED NODE   READINESS GATES</span><br><span class="line"><span class="built_in">deploy-nginx</span><span class="literal">-6d9d558bb6</span><span class="literal">-4c64l</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">27</span>s   <span class="number">10.244</span>.<span class="number">159.157</span>   k8s<span class="literal">-master1</span>   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"><span class="built_in">deploy-nginx</span><span class="literal">-6d9d558bb6</span><span class="literal">-hkq2b</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">71</span>s   <span class="number">10.244</span>.<span class="number">194.95</span>    k8s<span class="literal">-worker1</span>   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line">在两个node节点上各<span class="number">1</span>个pod</span><br></pre></td></tr></table></figure>

<p>3, 继续扩容(我们这里只有2个node,但是可以大于node节点数据)</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># kubectl scale deployment deploy-nginx --replicas=4</span></span><br><span class="line">deployment.extensions/nginx1 scaled</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pods -o wide</span></span><br><span class="line">NAME                            READY   STATUS    RESTARTS   AGE     IP               NODE          NOMINATED NODE   READINESS GATES</span><br><span class="line"><span class="built_in">deploy-nginx</span><span class="literal">-6d9d558bb6</span><span class="literal">-4c64l</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">87</span>s     <span class="number">10.244</span>.<span class="number">159.157</span>   k8s<span class="literal">-master1</span>   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"><span class="built_in">deploy-nginx</span><span class="literal">-6d9d558bb6</span><span class="literal">-586dr</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">31</span>s     <span class="number">10.244</span>.<span class="number">135.197</span>   k8s<span class="literal">-master3</span>   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"><span class="built_in">deploy-nginx</span><span class="literal">-6d9d558bb6</span><span class="literal">-hkq2b</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">2</span>m11s   <span class="number">10.244</span>.<span class="number">194.95</span>    k8s<span class="literal">-worker1</span>   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"><span class="built_in">deploy-nginx</span><span class="literal">-6d9d558bb6</span><span class="literal">-kvgsc</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">31</span>s     <span class="number">10.244</span>.<span class="number">224.13</span>    k8s<span class="literal">-master2</span>   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>



<h3 id="1-2-10-副本裁减"><a href="#1-2-10-副本裁减" class="headerlink" title="1.2.10 副本裁减"></a>1.2.10 副本裁减</h3><p>1, 指定副本数为1进行裁减</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl scale deployment deploy-nginx --replicas=1</span></span><br><span class="line">deployment.apps/<span class="built_in">deploy-nginx</span> scaled</span><br></pre></td></tr></table></figure>

<p>2, 查看验证</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pods</span></span><br><span class="line">NAME                            READY   STATUS    RESTARTS   AGE</span><br><span class="line"><span class="built_in">deploy-nginx</span><span class="literal">-6d9d558bb6</span><span class="literal">-hkq2b</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">2</span>m56s</span><br></pre></td></tr></table></figure>



<h3 id="1-2-11-多副本滚动更新"><a href="#1-2-11-多副本滚动更新" class="headerlink" title="1.2.11 多副本滚动更新"></a>1.2.11 多副本滚动更新</h3><p>1, 先扩容多点副本</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl scale deployment deploy-nginx --replicas=16</span></span><br><span class="line">deployment.apps/<span class="built_in">deploy-nginx</span> scaled</span><br></pre></td></tr></table></figure>

<p>2, 验证</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># kubectl get pods</span></span><br><span class="line">NAME                      READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx1<span class="literal">-7d9b8757cf</span><span class="literal">-2hd48</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">61</span>s</span><br><span class="line">nginx1<span class="literal">-7d9b8757cf</span><span class="literal">-5m72n</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">61</span>s</span><br><span class="line">nginx1<span class="literal">-7d9b8757cf</span><span class="literal">-5w2xr</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">61</span>s</span><br><span class="line">nginx1<span class="literal">-7d9b8757cf</span><span class="literal">-5wmdh</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">61</span>s</span><br><span class="line">nginx1<span class="literal">-7d9b8757cf</span><span class="literal">-6szjj</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">61</span>s</span><br><span class="line">nginx1<span class="literal">-7d9b8757cf</span><span class="literal">-9dgsw</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">61</span>s</span><br><span class="line">nginx1<span class="literal">-7d9b8757cf</span><span class="literal">-dc7qj</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">61</span>s</span><br><span class="line">nginx1<span class="literal">-7d9b8757cf</span><span class="literal">-l52pr</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">61</span>s</span><br><span class="line">nginx1<span class="literal">-7d9b8757cf</span><span class="literal">-m7rt4</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">26</span>m</span><br><span class="line">nginx1<span class="literal">-7d9b8757cf</span><span class="literal">-mdkj2</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">61</span>s</span><br><span class="line">nginx1<span class="literal">-7d9b8757cf</span><span class="literal">-s79kp</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">61</span>s</span><br><span class="line">nginx1<span class="literal">-7d9b8757cf</span><span class="literal">-shhvk</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">61</span>s</span><br><span class="line">nginx1<span class="literal">-7d9b8757cf</span><span class="literal">-sv8gb</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">61</span>s</span><br><span class="line">nginx1<span class="literal">-7d9b8757cf</span><span class="literal">-xbhf4</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">61</span>s</span><br><span class="line">nginx1<span class="literal">-7d9b8757cf</span><span class="literal">-zgdgd</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">61</span>s</span><br><span class="line">nginx1<span class="literal">-7d9b8757cf</span><span class="literal">-zzljl</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">61</span>s</span><br><span class="line">nginx2<span class="literal">-559567f789</span><span class="literal">-8hstz</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">1</span>          <span class="number">114</span>m</span><br></pre></td></tr></table></figure>

<p>3, 滚动更新</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl set image deployment deploy-nginx nginx=nginx:1.17-alpine --record</span></span><br><span class="line">deployment.apps/<span class="built_in">deploy-nginx</span> image updated</span><br></pre></td></tr></table></figure>

<p>4, 验证</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl rollout status deployment deploy-nginx</span></span><br><span class="line">......</span><br><span class="line">Waiting <span class="keyword">for</span> deployment <span class="string">&quot;deploy-nginx&quot;</span> rollout to finish: <span class="number">13</span> of <span class="number">16</span> updated replicas are available...</span><br><span class="line">Waiting <span class="keyword">for</span> deployment <span class="string">&quot;deploy-nginx&quot;</span> rollout to finish: <span class="number">14</span> of <span class="number">16</span> updated replicas are available...</span><br><span class="line">Waiting <span class="keyword">for</span> deployment <span class="string">&quot;deploy-nginx&quot;</span> rollout to finish: <span class="number">15</span> of <span class="number">16</span> updated replicas are available...</span><br><span class="line">deployment <span class="string">&quot;deploy-nginx&quot;</span> successfully rolled out</span><br></pre></td></tr></table></figure>



<h3 id="1-2-12-删除deployment"><a href="#1-2-12-删除deployment" class="headerlink" title="1.2.12 删除deployment"></a>1.2.12 删除deployment</h3><p>如果使用 <code>kubectl delete deployment deploy-nginx </code>命令删除deployment,那么里面的pod也会被自动删除</p>
<h2 id="1-3-Replicaset"><a href="#1-3-Replicaset" class="headerlink" title="1.3 Replicaset"></a>1.3 Replicaset</h2><p>1, 编写YAML文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># vim rs-nginx.yml</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: ReplicaSet</span><br><span class="line">metadata:</span><br><span class="line">  name: rs<span class="literal">-nginx</span></span><br><span class="line">  namespace: default</span><br><span class="line">spec:                    <span class="comment"># replicaset的spec</span></span><br><span class="line">  replicas: <span class="number">2</span>            <span class="comment"># 副本数</span></span><br><span class="line">  selector:              <span class="comment"># 标签选择器,对应pod的标签</span></span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx         <span class="comment"># 匹配的label</span></span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      name: nginx		<span class="comment"># pod名</span></span><br><span class="line">      labels:           <span class="comment"># 对应上面定义的标签选择器selector里面的内容</span></span><br><span class="line">        app: nginx</span><br><span class="line">    spec:               <span class="comment"># pod的spec</span></span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:<span class="number">1.15</span><span class="literal">-alpine</span></span><br><span class="line">        ports:</span><br><span class="line">        - name: http</span><br><span class="line">          containerPort: <span class="number">80</span></span><br></pre></td></tr></table></figure>

<p>2, 应用YAML文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl apply -f rs-nginx.yml</span></span><br><span class="line">replicaset.apps/rs<span class="literal">-nginx</span> created</span><br></pre></td></tr></table></figure>

<p>3, 验证</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get rs</span></span><br><span class="line">NAME       DESIRED   CURRENT   READY   AGE</span><br><span class="line">rs<span class="literal">-nginx</span>   <span class="number">2</span>         <span class="number">2</span>         <span class="number">2</span>       <span class="number">26</span>s</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pods</span></span><br><span class="line">NAME             READY   STATUS    RESTARTS   AGE</span><br><span class="line">rs<span class="literal">-nginx</span><span class="literal">-7j9hz</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">44</span>s</span><br><span class="line">rs<span class="literal">-nginx</span><span class="literal">-pncsk</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">43</span>s</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get deployment</span></span><br><span class="line">No resources found.</span><br><span class="line"></span><br><span class="line">找不到deployment,说明创建rs并没有创建deployment</span><br></pre></td></tr></table></figure>







<h1 id="二、pod控制器Controller进阶"><a href="#二、pod控制器Controller进阶" class="headerlink" title="二、pod控制器Controller进阶"></a>二、pod控制器Controller进阶</h1><h2 id="2-1-DaemonSet"><a href="#2-1-DaemonSet" class="headerlink" title="2.1 DaemonSet"></a>2.1 DaemonSet</h2><h3 id="2-1-1-DaemonSet介绍"><a href="#2-1-1-DaemonSet介绍" class="headerlink" title="2.1.1 DaemonSet介绍"></a>2.1.1 DaemonSet介绍</h3><ul>
<li>DaemonSet能够让所有（或者特定）的节点运行同一个pod。</li>
<li>当节点加入到K8S集群中，pod会被（DaemonSet）调度到该节点上运行，当节点从K8S集群中被移除，被DaemonSet调度的pod会被移除</li>
<li>如果删除DaemonSet，所有跟这个DaemonSet相关的pods都会被删除。</li>
<li>如果一个DaemonSet的Pod被杀死、停止、或者崩溃，那么DaemonSet将会重新创建一个新的副本在这台计算节点上。</li>
<li>DaemonSet一般应用于日志收集、监控采集、分布式存储守护进程等</li>
</ul>
<h3 id="2-1-2-DaemonSet应用案例"><a href="#2-1-2-DaemonSet应用案例" class="headerlink" title="2.1.2 DaemonSet应用案例"></a>2.1.2 DaemonSet应用案例</h3><p>1, 编写YAML文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># vim daemonset-nginx.yml</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: DaemonSet</span><br><span class="line">metadata:</span><br><span class="line">  name: daemon<span class="built_in">set-nginx</span>			</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      name: nginx<span class="literal">-ds</span></span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        name: nginx<span class="literal">-ds</span></span><br><span class="line">    spec:</span><br><span class="line">      tolerations:						<span class="comment"># tolerations代表容忍</span></span><br><span class="line">      - key: node<span class="literal">-role</span>.kubernetes.io/master  <span class="comment"># 能容忍的污点key</span></span><br><span class="line">        effect: NoSchedule   <span class="comment"># kubectl explain pod.spec.tolerations查看(能容忍的污点effect)</span></span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:<span class="number">1.15</span><span class="literal">-alpine</span></span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        resources:    <span class="comment"># resources资源限制是为了防止master节点的资源被占太多(根据实际情况配置)</span></span><br><span class="line">          limits:</span><br><span class="line">            memory: <span class="number">100</span><span class="built_in">Mi</span></span><br><span class="line">          requests:</span><br><span class="line">            memory: <span class="number">100</span><span class="built_in">Mi</span></span><br></pre></td></tr></table></figure>

<p>2, apply应用YAML文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl apply -f daemonset-nginx.yml</span></span><br><span class="line">daemonset.apps/daemon<span class="built_in">set-nginx</span> created</span><br></pre></td></tr></table></figure>

<p>3, 验证</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># kubectl get daemonset				# daemonset可简写为ds</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get ds</span></span><br><span class="line">NAME              DESIRED   CURRENT   READY   UP<span class="literal">-TO</span><span class="literal">-DATE</span>   AVAILABLE   NODE SELECTOR   AGE</span><br><span class="line">daemon<span class="built_in">set-nginx</span>   <span class="number">4</span>         <span class="number">4</span>         <span class="number">4</span>       <span class="number">4</span>            <span class="number">4</span>           &lt;none&gt;          <span class="number">114</span>s</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pods -o wide</span></span><br><span class="line">NAME                    READY   STATUS    RESTARTS   AGE   IP               NODE          NOMINATED NODE   READINESS GATES</span><br><span class="line">daemon<span class="built_in">set-nginx</span><span class="literal">-94z6d</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">6</span>s    <span class="number">10.244</span>.<span class="number">194.104</span>   k8s<span class="literal">-worker1</span>   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">daemon<span class="built_in">set-nginx</span><span class="literal">-hs9mk</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">6</span>s    <span class="number">10.244</span>.<span class="number">135.206</span>   k8s<span class="literal">-master3</span>   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">daemon<span class="built_in">set-nginx</span><span class="literal">-jrcf5</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">6</span>s    <span class="number">10.244</span>.<span class="number">159.167</span>   k8s<span class="literal">-master1</span>   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">daemon<span class="built_in">set-nginx</span><span class="literal">-sslpl</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">6</span>s    <span class="number">10.244</span>.<span class="number">224.22</span>    k8s<span class="literal">-master2</span>   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line">k8s集群中每个节点都会运行一个pod</span><br></pre></td></tr></table></figure>



<h2 id="2-2-Job"><a href="#2-2-Job" class="headerlink" title="2.2 Job"></a>2.2 Job</h2><h3 id="2-2-1-Job介绍"><a href="#2-2-1-Job介绍" class="headerlink" title="2.2.1 Job介绍"></a>2.2.1 Job介绍</h3><ul>
<li>对于ReplicaSet而言，它希望pod保持预期数目、持久运行下去，除非用户明确删除，否则这些对象一直存在，它们针对的是耐久性任务，如web服务等。</li>
<li>对于非耐久性任务，比如压缩文件，任务完成后，pod需要结束运行，不需要pod继续保持在系统中，这个时候就要用到Job。</li>
<li>Job负责批量处理短暂的一次性任务 (short lived one-off tasks)，即仅执行一次的任务，它保证批处理任务的一个或多个Pod成功结束。</li>
</ul>
<h3 id="2-2-2-Job应用案例"><a href="#2-2-2-Job应用案例" class="headerlink" title="2.2.2 Job应用案例"></a>2.2.2 Job应用案例</h3><h4 id="2-2-2-1-计算圆周率2000位"><a href="#2-2-2-1-计算圆周率2000位" class="headerlink" title="2.2.2.1 计算圆周率2000位"></a>2.2.2.1 计算圆周率2000位</h4><p>1, 编写YAML文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># vim job1.yml</span></span><br><span class="line">apiVersion: batch/v1</span><br><span class="line">kind: Job</span><br><span class="line">metadata:</span><br><span class="line">  name: pi			<span class="comment"># job名</span></span><br><span class="line">spec:</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      name: pi		<span class="comment"># pod名</span></span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: pi	   <span class="comment"># 容器名</span></span><br><span class="line">        image: perl	   <span class="comment"># 此镜像有800多M,可提前导入到所有节点,也可能指定导入到某一节点然后指定调度到此节点</span></span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        command: [<span class="string">&quot;perl&quot;</span>,  <span class="string">&quot;-Mbignum=bpi&quot;</span>, <span class="string">&quot;-wle&quot;</span>, <span class="string">&quot;print bpi(2000)&quot;</span>]</span><br><span class="line">      restartPolicy: Never   <span class="comment"># 执行完后不再重启</span></span><br></pre></td></tr></table></figure>

<p>2, 应用YAML文件创建job</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># kubectl apply -f job1.yml</span></span><br><span class="line">job.batch/pi created</span><br></pre></td></tr></table></figure>

<p>3,  验证</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get jobs</span></span><br><span class="line">NAME   COMPLETIONS   DURATION   AGE</span><br><span class="line">pi     <span class="number">1</span>/<span class="number">1</span>           <span class="number">11</span>s        <span class="number">18</span>s</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pods</span></span><br><span class="line">NAME                         READY   STATUS             RESTARTS   AGE</span><br><span class="line">pi<span class="literal">-tjq9b</span>                     <span class="number">0</span>/<span class="number">1</span>     Completed          <span class="number">0</span>         <span class="number">27</span>s</span><br><span class="line"></span><br><span class="line">Completed状态,也不再是ready状态</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl logs pi-tjq9b</span></span><br><span class="line"><span class="number">3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632788659361533818279682303019520353018529689957736225994138912497217752834791315155748572424541506959508295331168617278558890750983817546374649393192550604009277016711390098488240128583616035637076601047101819429555961989467678374494482553797747268471040475346462080466842590694912933136770289891521047521620569660240580381501935112533824300355876402474964732639141992726042699227967823547816360093417216412199245863150302861829745557067498385054945885869269956909272107975093029553211653449872027559602364806654991198818347977535663698074265425278625518184175746728909777727938000816470600161452491921732172147723501414419735685481613611573525521334757418494684385233239073941433345477624168625189835694855620992192221842725502542568876717904946016534668049886272327917860857843838279679766814541009538837863609506800642251252051173929848960841284886269456042419652850222106611863067442786220391949450471237137869609563643719172874677646575739624138908658326459958133904780275901</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2-2-2-2-创建固定次数job"><a href="#2-2-2-2-创建固定次数job" class="headerlink" title="2.2.2.2  创建固定次数job"></a>2.2.2.2  创建固定次数job</h4><p>1, 编写YAML文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># vim job2.yml</span></span><br><span class="line">apiVersion: batch/v1</span><br><span class="line">kind: Job</span><br><span class="line">metadata:</span><br><span class="line">  name: busybox<span class="literal">-job</span></span><br><span class="line">spec:</span><br><span class="line">  completions: <span class="number">10</span>                                               <span class="comment"># 执行job的次数</span></span><br><span class="line">  parallelism: <span class="number">1</span>                                                <span class="comment"># 执行job的并发数</span></span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      name: busybox<span class="literal">-job</span><span class="literal">-pod</span></span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: busybox</span><br><span class="line">        image: busybox</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        command: [<span class="string">&quot;echo&quot;</span>, <span class="string">&quot;hello&quot;</span>]</span><br><span class="line">      restartPolicy: Never</span><br></pre></td></tr></table></figure>

<p>2, 应用YAML文件创建job</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl apply -f job2.yml</span></span><br><span class="line">job.batch/busybox<span class="literal">-job</span> created</span><br></pre></td></tr></table></figure>

<p>3, 验证</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get job</span></span><br><span class="line">NAME          COMPLETIONS   DURATION   AGE</span><br><span class="line">busybox<span class="literal">-job</span>   <span class="number">2</span>/<span class="number">10</span>          <span class="number">9</span>s         <span class="number">9</span>s</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get job</span></span><br><span class="line">NAME          COMPLETIONS   DURATION   AGE</span><br><span class="line">busybox<span class="literal">-job</span>   <span class="number">3</span>/<span class="number">10</span>          <span class="number">12</span>s        <span class="number">12</span>s</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get job</span></span><br><span class="line">NAME          COMPLETIONS   DURATION   AGE</span><br><span class="line">busybox<span class="literal">-job</span>   <span class="number">4</span>/<span class="number">10</span>          <span class="number">15</span>s        <span class="number">15</span>s</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get job</span></span><br><span class="line">NAME          COMPLETIONS   DURATION   AGE</span><br><span class="line">busybox<span class="literal">-job</span>   <span class="number">10</span>/<span class="number">10</span>         <span class="number">34</span>s        <span class="number">48</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">34</span>秒左右结束</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># kubectl get pods</span></span><br><span class="line">NAME                         READY   STATUS             RESTARTS   AGE</span><br><span class="line">busybox<span class="literal">-job</span><span class="literal">-5zn6l</span>            <span class="number">0</span>/<span class="number">1</span>     Completed          <span class="number">0</span>          <span class="number">34</span>s</span><br><span class="line">busybox<span class="literal">-job</span><span class="literal">-cm9kw</span>            <span class="number">0</span>/<span class="number">1</span>     Completed          <span class="number">0</span>          <span class="number">29</span>s</span><br><span class="line">busybox<span class="literal">-job</span><span class="literal">-fmpgt</span>            <span class="number">0</span>/<span class="number">1</span>     Completed          <span class="number">0</span>          <span class="number">38</span>s</span><br><span class="line">busybox<span class="literal">-job</span><span class="literal">-gjjvh</span>            <span class="number">0</span>/<span class="number">1</span>     Completed          <span class="number">0</span>          <span class="number">45</span>s</span><br><span class="line">busybox<span class="literal">-job</span><span class="literal">-krxpd</span>            <span class="number">0</span>/<span class="number">1</span>     Completed          <span class="number">0</span>          <span class="number">25</span>s</span><br><span class="line">busybox<span class="literal">-job</span><span class="literal">-m2vcq</span>            <span class="number">0</span>/<span class="number">1</span>     Completed          <span class="number">0</span>          <span class="number">41</span>s</span><br><span class="line">busybox<span class="literal">-job</span><span class="literal">-ncg78</span>            <span class="number">0</span>/<span class="number">1</span>     Completed          <span class="number">0</span>          <span class="number">47</span>s</span><br><span class="line">busybox<span class="literal">-job</span><span class="literal">-tbzz8</span>            <span class="number">0</span>/<span class="number">1</span>     Completed          <span class="number">0</span>          <span class="number">51</span>s</span><br><span class="line">busybox<span class="literal">-job</span><span class="literal">-vb99r</span>            <span class="number">0</span>/<span class="number">1</span>     Completed          <span class="number">0</span>          <span class="number">21</span>s</span><br><span class="line">busybox<span class="literal">-job</span><span class="literal">-wnch7</span>            <span class="number">0</span>/<span class="number">1</span>     Completed          <span class="number">0</span>          <span class="number">32</span>s</span><br></pre></td></tr></table></figure>



<h4 id="2-2-2-3-一次性备份MySQL数据库"><a href="#2-2-2-3-一次性备份MySQL数据库" class="headerlink" title="2.2.2.3 一次性备份MySQL数据库"></a>2.2.2.3 一次性备份MySQL数据库</h4><blockquote>
<p>通过Job控制器创建应用备份MySQL数据库</p>
</blockquote>
<h5 id="2-2-2-3-1-MySQL数据库准备"><a href="#2-2-2-3-1-MySQL数据库准备" class="headerlink" title="2.2.2.3.1  MySQL数据库准备"></a>2.2.2.3.1  MySQL数据库准备</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">nginx</span> <span class="type">jobcontroller</span>]<span class="comment"># cat 00_mysql.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: mysql<span class="literal">-test</span></span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: <span class="number">3306</span></span><br><span class="line">    name: mysql</span><br><span class="line">  clusterIP: None</span><br><span class="line">  selector:</span><br><span class="line">    app: mysql<span class="literal">-dump</span></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: StatefulSet</span><br><span class="line">metadata:</span><br><span class="line">  name: db</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: mysql<span class="literal">-dump</span></span><br><span class="line">  serviceName: <span class="string">&quot;mysql-test&quot;</span></span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: mysql<span class="literal">-dump</span></span><br><span class="line">    spec:</span><br><span class="line">      nodeName: k8s<span class="literal">-master3</span></span><br><span class="line">      containers:</span><br><span class="line">      - name: mysql</span><br><span class="line">        image: mysql:<span class="number">5.7</span></span><br><span class="line">        env:</span><br><span class="line">        - name: MYSQL_ROOT_PASSWORD</span><br><span class="line">          value: <span class="string">&quot;abc123&quot;</span></span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: <span class="number">3306</span></span><br><span class="line">        volumeMounts:</span><br><span class="line">        - mountPath: <span class="string">&quot;/var/lib/mysql&quot;</span></span><br><span class="line">          name: mysql<span class="literal">-data</span></span><br><span class="line">      volumes:</span><br><span class="line">      - name: mysql<span class="literal">-data</span></span><br><span class="line">        hostPath:</span><br><span class="line">          path: /opt/mysqldata</span><br></pre></td></tr></table></figure>



<h5 id="2-2-2-3-2-创建用于实现任务的资源清单文件"><a href="#2-2-2-3-2-创建用于实现任务的资源清单文件" class="headerlink" title="2.2.2.3.2  创建用于实现任务的资源清单文件"></a>2.2.2.3.2  创建用于实现任务的资源清单文件</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">nginx</span> <span class="type">jobcontroller</span>]<span class="comment"># cat 03_job.yaml</span></span><br><span class="line">apiVersion: batch/v1</span><br><span class="line">kind: Job</span><br><span class="line">metadata:</span><br><span class="line">  name: mysql<span class="literal">-dump</span></span><br><span class="line">spec:</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      name: mysql<span class="literal">-dump</span></span><br><span class="line">    spec:</span><br><span class="line">      nodeName: k8s<span class="literal">-master2</span></span><br><span class="line">      containers:</span><br><span class="line">      - name: mysql<span class="literal">-dump</span></span><br><span class="line">        image: mysql:<span class="number">5.7</span></span><br><span class="line">        command: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;mysqldump --host=mysql-test -uroot -pabc123 --databases mysql &gt; /root/mysql2022.sql&quot;</span>]</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - mountPath: <span class="string">&quot;/root&quot;</span></span><br><span class="line">          name: mysql<span class="literal">-data</span></span><br><span class="line">      restartPolicy: Never</span><br><span class="line">      volumes:</span><br><span class="line">      - name: mysql<span class="literal">-data</span></span><br><span class="line">        hostPath:</span><br><span class="line">          path: /opt/mysqldump</span><br></pre></td></tr></table></figure>







<h2 id="2-3-CronJob"><a href="#2-3-CronJob" class="headerlink" title="2.3 CronJob"></a>2.3 CronJob</h2><h3 id="2-3-1-CronJob介绍"><a href="#2-3-1-CronJob介绍" class="headerlink" title="2.3.1 CronJob介绍"></a>2.3.1 CronJob介绍</h3><ul>
<li>类似于Linux系统的crontab，在指定的时间周期运行相关的任务</li>
<li>时间格式：分时日月周</li>
</ul>
<h3 id="2-3-2-CronJob应用案例"><a href="#2-3-2-CronJob应用案例" class="headerlink" title="2.3.2 CronJob应用案例"></a>2.3.2 CronJob应用案例</h3><h4 id="2-3-2-1-周期性输出字符"><a href="#2-3-2-1-周期性输出字符" class="headerlink" title="2.3.2.1 周期性输出字符"></a>2.3.2.1 周期性输出字符</h4><p>1, 编写YAML文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># vim cronjob.yml</span></span><br><span class="line">apiVersion: batch/v1beta1</span><br><span class="line">kind: CronJob</span><br><span class="line">metadata:</span><br><span class="line">  name: cronjob1</span><br><span class="line">spec:</span><br><span class="line">  schedule: <span class="string">&quot;* * * * *&quot;</span>                 <span class="comment"># 分时日月周</span></span><br><span class="line">  jobTemplate:</span><br><span class="line">    spec:</span><br><span class="line">      template:</span><br><span class="line">        spec:</span><br><span class="line">          containers:</span><br><span class="line">          - name: hello</span><br><span class="line">            image: busybox</span><br><span class="line">            args:</span><br><span class="line">            - /bin/sh</span><br><span class="line">            - <span class="literal">-c</span></span><br><span class="line">            - date; <span class="built_in">echo</span> hello kubernetes</span><br><span class="line">            imagePullPolicy: IfNotPresent</span><br><span class="line">          restartPolicy: OnFailure</span><br></pre></td></tr></table></figure>

<p>2, 应用YAML文件创建cronjob</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl apply -f cronjob.yml</span></span><br><span class="line">cronjob.batch/cronjob1 created</span><br></pre></td></tr></table></figure>

<p>3, 查看验证</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get cronjob</span></span><br><span class="line">NAME       SCHEDULE    SUSPEND   ACTIVE   LAST SCHEDULE   AGE</span><br><span class="line">cronjob1   * * * * *   False     <span class="number">0</span>        &lt;none&gt;          <span class="number">21</span>s</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pods</span></span><br><span class="line">NAME                         READY   STATUS             RESTARTS   AGE</span><br><span class="line">cronjob<span class="literal">-1564993080</span><span class="literal">-qlbgv</span>     <span class="number">0</span>/<span class="number">1</span>     Completed          <span class="number">0</span>          <span class="number">2</span>m10s</span><br><span class="line">cronjob<span class="literal">-1564993140</span><span class="literal">-zbv7f</span>     <span class="number">0</span>/<span class="number">1</span>     Completed          <span class="number">0</span>          <span class="number">70</span>s</span><br><span class="line">cronjob<span class="literal">-1564993200</span><span class="literal">-gx5xz</span>     <span class="number">0</span>/<span class="number">1</span>     Completed          <span class="number">0</span>          <span class="number">10</span>s</span><br><span class="line"></span><br><span class="line">看AGE时间,每分钟整点执行一次</span><br></pre></td></tr></table></figure>



<h4 id="2-3-2-2-周期性备份MySQL数据库"><a href="#2-3-2-2-周期性备份MySQL数据库" class="headerlink" title="2.3.2.2 周期性备份MySQL数据库"></a>2.3.2.2 周期性备份MySQL数据库</h4><h5 id="2-3-2-2-1-MySQL数据库准备"><a href="#2-3-2-2-1-MySQL数据库准备" class="headerlink" title="2.3.2.2.1 MySQL数据库准备"></a>2.3.2.2.1 MySQL数据库准备</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">nginx</span> <span class="type">jobcontroller</span>]<span class="comment"># cat 00_mysql.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: mysql<span class="literal">-test</span></span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: <span class="number">3306</span></span><br><span class="line">    name: mysql</span><br><span class="line">  clusterIP: None</span><br><span class="line">  selector:</span><br><span class="line">    app: mysql<span class="literal">-dump</span></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: StatefulSet</span><br><span class="line">metadata:</span><br><span class="line">  name: db</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: mysql<span class="literal">-dump</span></span><br><span class="line">  serviceName: <span class="string">&quot;mysql-test&quot;</span></span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: mysql<span class="literal">-dump</span></span><br><span class="line">    spec:</span><br><span class="line">      nodeName: worker03</span><br><span class="line">      containers:</span><br><span class="line">      - name: mysql</span><br><span class="line">        image: mysql:<span class="number">5.7</span></span><br><span class="line">        env:</span><br><span class="line">        - name: MYSQL_ROOT_PASSWORD</span><br><span class="line">          value: <span class="string">&quot;abc123&quot;</span></span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: <span class="number">3306</span></span><br><span class="line">        volumeMounts:</span><br><span class="line">        - mountPath: <span class="string">&quot;/var/lib/mysql&quot;</span></span><br><span class="line">          name: mysql<span class="literal">-data</span></span><br><span class="line">      volumes:</span><br><span class="line">      - name: mysql<span class="literal">-data</span></span><br><span class="line">        hostPath:</span><br><span class="line">          path: /opt/mysqldata</span><br></pre></td></tr></table></figure>



<h5 id="2-3-2-2-2-Cronjob控制器类型应用资源清单文件"><a href="#2-3-2-2-2-Cronjob控制器类型应用资源清单文件" class="headerlink" title="2.3.2.2.2 Cronjob控制器类型应用资源清单文件"></a>2.3.2.2.2 Cronjob控制器类型应用资源清单文件</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">nginx</span> <span class="type">jobcontroller</span>]<span class="comment"># cat 05_cronjob.yaml</span></span><br><span class="line">apiVersion: batch/v1beta1</span><br><span class="line">kind: CronJob</span><br><span class="line">metadata:</span><br><span class="line">  name: mysql<span class="literal">-dump</span></span><br><span class="line">spec:</span><br><span class="line">  schedule: <span class="string">&quot;*/1 * * * *&quot;</span></span><br><span class="line">  jobTemplate:</span><br><span class="line">    spec:</span><br><span class="line">      template:</span><br><span class="line">        spec:</span><br><span class="line">          nodeName: worker02</span><br><span class="line">          containers:</span><br><span class="line">          - name: c1</span><br><span class="line">            image: mysql:<span class="number">5.7</span></span><br><span class="line">            command: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;mysqldump --host=mysql-test -uroot -pabc123 --databases mysql &gt; /root/mysql`date +%Y%m%d%H%M`.sql&quot;</span>]</span><br><span class="line">            volumeMounts:</span><br><span class="line">              - name: mysql<span class="literal">-data</span></span><br><span class="line">                mountPath: <span class="string">&quot;/root&quot;</span></span><br><span class="line">          restartPolicy: Never</span><br><span class="line">          volumes:</span><br><span class="line">            - name: mysql<span class="literal">-data</span></span><br><span class="line">              hostPath:</span><br><span class="line">                path: /opt/mysqldump</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes集群服务暴露Nginx Ingress Controller</title>
    <url>/2024/05/03/%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/Kubernetes%E9%9B%86%E7%BE%A4%20%E6%9C%8D%E5%8A%A1%E6%9A%B4%E9%9C%B2Nginx%20Ingress%20Controller/</url>
    <content><![CDATA[<h1 id="一、ingress控制器"><a href="#一、ingress控制器" class="headerlink" title="一、ingress控制器"></a>一、ingress控制器</h1><h2 id="1-1-ingress控制器作用"><a href="#1-1-ingress控制器作用" class="headerlink" title="1.1 ingress控制器作用"></a>1.1 ingress控制器作用</h2><p>ingress controller可以为kubernetes 集群外用户访问Kubernetes集群内部pod提供代理服务。</p>
<ul>
<li>提供全局访问代理</li>
<li>访问流程<ul>
<li>用户–&gt;ingress controller–&gt;service–&gt;pod</li>
</ul>
</li>
</ul>
<p><img src="/images/Kubernetes/kubernetes%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E6%9A%B4%E9%9C%B2NginxIngressController.assets/image-20220412223010688.png" alt="image-20220412223010688"></p>
<p><img src="/images/Kubernetes/kubernetes%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E6%9A%B4%E9%9C%B2NginxIngressController.assets/image-20220412222951979.png" alt="image-20220412222951979"></p>
<h2 id="1-2-ingress控制器种类"><a href="#1-2-ingress控制器种类" class="headerlink" title="1.2 ingress控制器种类"></a>1.2 ingress控制器种类</h2><h3 id="1-2-1-Kubernetes-Ingress-Controller"><a href="#1-2-1-Kubernetes-Ingress-Controller" class="headerlink" title="1.2.1 Kubernetes Ingress Controller"></a>1.2.1 Kubernetes Ingress Controller</h3><ul>
<li>参考链接：<a href="http://github.com/nginxinc/kubernetes-ingress">http://github.com/nginxinc/kubernetes-ingress</a></li>
</ul>
<ul>
<li>实现：Go/Lua（nginx 是用 C 写的）</li>
</ul>
<ul>
<li>许可证：Apache 2.0</li>
</ul>
<ul>
<li>Kubernetes 的“官方”控制器（之所以称为官方，是想把它区别于 NGINX 公司的控制器）。这是社区开发的控制器，它基于 nginx Web 服务器，并补充了一组用于实现额外功能的 Lua 插件。</li>
</ul>
<ul>
<li>由于 NGINX 十分流行，再加上把它用作控制器时所需的修改较少，<strong>它对于 K8s 普通工程师来说，可能是最简单和最直接的选择</strong>。</li>
</ul>
<h3 id="1-2-2-NGINX-Ingress-Controller"><a href="#1-2-2-NGINX-Ingress-Controller" class="headerlink" title="1.2.2 NGINX Ingress Controller"></a>1.2.2 NGINX Ingress Controller</h3><ul>
<li>参考链接：<a href="http://github.com/kubernetes/ingress-nginx">http://github.com/kubernetes/ingress-nginx</a></li>
</ul>
<ul>
<li>实现：Go</li>
</ul>
<ul>
<li>许可证：Apache 2.0</li>
</ul>
<ul>
<li>这是 NGINX 公司开发的官方产品，它也有一个基于 NGINX Plus 的商业版。NGINX 的控制器具有很高的稳定性、持续的向后兼容性，且没有任何第三方模块。</li>
</ul>
<ul>
<li>由于消除了 Lua 代码，和官方控制器相比，它保证了较高的速度，但也因此受到较大限制。相较之下，它的付费版本有更广泛的附加功能，如实时指标、JWT 验证、主动健康检查等。</li>
</ul>
<ul>
<li>NGINX Ingress 重要的优势是对 TCP/UDP 流量的全面支持，最主要缺点是缺乏流量分配功能。</li>
</ul>
<h3 id="1-2-3-Kong-Ingress"><a href="#1-2-3-Kong-Ingress" class="headerlink" title="1.2.3 Kong Ingress"></a>1.2.3 Kong Ingress</h3><ul>
<li>参考链接：<a href="http://github.com/Kong/kubernetes-ingress-controller">http://github.com/Kong/kubernetes-ingress-controller</a></li>
</ul>
<ul>
<li>实现：Go</li>
</ul>
<ul>
<li>许可证：Apache 2.0</li>
</ul>
<ul>
<li>Kong Ingress 由 Kong Inc 开发，有两个版本：商业版和免费版。它基于 NGINX 构建，并增加了扩展其功能的 Lua 模块。</li>
</ul>
<ul>
<li>最初，Kong Ingress 主要用作 API 网关，用于 API 请求的处理和路由。现在，它已经成为成熟的 Ingress 控制器，<strong>主要优点是拥有大量易于安装和配置的附加模块、插件（包括第三方插件）</strong>。它开启了控制器具备大量附加功能的先河，其内置函数也提供了许多可能性。Kong Ingress 配置是用 CRD 执行的。</li>
</ul>
<ul>
<li>Kong Ingress 的一个重要特性是它只能在一个环境中运行（而不支持跨命名空间）。这是一个颇有争议的话题：有些人认为这是一个缺点，因为必须为每个环境生成实例；而另一些人认为这是一个特殊特性，因为它是更高级别的隔离，控制器故障的影响仅限于其所在的环境。</li>
</ul>
<h3 id="1-2-4-Traefik"><a href="#1-2-4-Traefik" class="headerlink" title="1.2.4 Traefik"></a>1.2.4 Traefik</h3><ul>
<li>参考链接：<a href="http://github.com/containous/traefik">http://github.com/containous/traefik</a></li>
</ul>
<ul>
<li>实现：Go</li>
</ul>
<ul>
<li>许可证：MIT</li>
</ul>
<ul>
<li>最初，这个代理是为微服务请求及其动态环境的路由而创建的，因此具有许多有用的功能：<strong>连续更新配置（不重新启动）、支持多种负载均衡算法、Web UI、指标导出、对各种服务的支持协议、REST API、Canary 版本</strong>等。</li>
</ul>
<ul>
<li>支持开箱即用的 Let’s Encrypt 是它的另一个不错的功能，但它的主要缺点也很明显，就是为了控制器的高可用性，你必须安装并连接其 Key-value store。</li>
</ul>
<ul>
<li>在 2019 年 9 月发布的 Traefik v2.0 中，虽然它增加许多不错的新功能，如带有 SNI 的 TCP/SSL、金丝雀部署、流量镜像/shadowing 和经过改进的 Web UI，但一些功能（如 WAF 支持）还在策划讨论中。</li>
</ul>
<ul>
<li>与新版本同期推出的还有一个名叫 Mesh 的服务网格，它建在 Traefik 之上，对kubernetes内部服务访问做到受控及被监控。</li>
</ul>
<h3 id="1-2-5-HAProxy-Ingress"><a href="#1-2-5-HAProxy-Ingress" class="headerlink" title="1.2.5 HAProxy Ingress"></a>1.2.5 HAProxy Ingress</h3><ul>
<li>参考链接：<a href="http://github.com/jcmoraisjr/haproxy-ingress">http://github.com/jcmoraisjr/haproxy-ingress</a></li>
</ul>
<ul>
<li>实现：Go（HAProxy 是用 C 写的）</li>
</ul>
<ul>
<li>许可证：Apache 2.0</li>
</ul>
<ul>
<li>HAProxy 是众所周知的代理服务器和负载均衡器。作为 Kubernetes 集群的一部分，它提供了“软”配置更新（无流量损失）、基于 DNS 的服务发现和通过 API 进行动态配置。 HAProxy 还支持完全自定义配置文件模板（通过替换 ConfigMap）以及在其中使用 Spring Boot 函数。</li>
</ul>
<ul>
<li>通常，工程师会把重点放在已消耗资源的高速、优化和效率上。而 HAProxy 的优点之一正是支持大量负载均衡算法。值得一提的是，在2020年 6 月发布的 v2.0 中，HAProxy 增加了许多新功能，其即将推出的 v2.1 有望带来更多新功能（包括 OpenTracing 支持）。</li>
</ul>
<h3 id="1-2-6-Voyager"><a href="#1-2-6-Voyager" class="headerlink" title="1.2.6 Voyager"></a>1.2.6 Voyager</h3><ul>
<li>参考链接：<a href="http://github.com/appscode/voyager">http://github.com/appscode/voyager</a></li>
</ul>
<ul>
<li>实现：Go</li>
</ul>
<ul>
<li>许可证：Apache 2.0</li>
</ul>
<ul>
<li>Voyager 基于 HAProxy，并作为一个通用的解决方案提供给大量供应商。它最具代表性的功能包括 L7 和 L4 上的流量负载均衡，其中，<strong>TCP L4 流量负载均衡称得上是该解决方案最关键的功能之一</strong>。</li>
</ul>
<ul>
<li>在2020年早些时候，尽管 Voyager 在 v9.0.0 中推出了对 HTTP/2 和 gRPC 协议的全面支持，但总的来看，对证书管理（Let’s Encrypt 证书）的支持仍是 Voyager 集成的最突出的新功能。</li>
</ul>
<h3 id="1-2-7-Contour"><a href="#1-2-7-Contour" class="headerlink" title="1.2.7 Contour"></a>1.2.7 Contour</h3><ul>
<li>参考链接：<a href="http://github.com/heptio/contour">http://github.com/heptio/contour</a></li>
</ul>
<ul>
<li>实现：Go</li>
</ul>
<ul>
<li>许可证：Apache 2.0</li>
</ul>
<ul>
<li>Contour 和 Envoy 由同一个作者开发，它基于 Envoy。<strong>它最特别的功能是可以通过 CRD（IngressRoute）管理 Ingress 资源</strong>，对于多团队需要同时使用一个集群的组织来说，这有助于保护相邻环境中的流量，使它们免受 Ingress 资源更改的影响。</li>
</ul>
<ul>
<li>它还提供了一组扩展的负载均衡算法（镜像、自动重复、限制请求率等），以及详细的流量和故障监控。对某些工程师而言，它不支持粘滞会话可能是一个严重缺陷。</li>
</ul>
<h3 id="1-2-8-Istio-Ingress"><a href="#1-2-8-Istio-Ingress" class="headerlink" title="1.2.8 Istio Ingress"></a>1.2.8 Istio Ingress</h3><ul>
<li>参考链接：<a href="http://istio.io/docs/tasks/traffic-management/ingress">http://istio.io/docs/tasks/traffic-management/ingress</a></li>
</ul>
<ul>
<li>实现：Go</li>
</ul>
<ul>
<li>许可证：Apache 2.0</li>
</ul>
<ul>
<li>Istio 是 IBM、Google 和 Lyft 的联合开发项目，它是一个全面的服务网格解决方案——<strong>不仅可以管理所有传入的外部流量（作为 Ingress 控制器），还可以控制集群内部的所有流量</strong>。</li>
</ul>
<ul>
<li>Istio 将 Envoy 用作每种服务的辅助代理。从本质上讲，它是一个可以执行几乎所有操作的大型处理器，其中心思想是最大程度的控制、可扩展性、安全性和透明性。</li>
</ul>
<ul>
<li>通过 Istio Ingress，你可以对流量路由、服务之间的访问授权、均衡、监控、金丝雀发布等进行优化。</li>
</ul>
<h3 id="1-2-9-Ambassador"><a href="#1-2-9-Ambassador" class="headerlink" title="1.2.9 Ambassador"></a>1.2.9 Ambassador</h3><ul>
<li>参考链接：<a href="http://github.com/datawire/ambassador">http://github.com/datawire/ambassador</a></li>
</ul>
<ul>
<li>实现：Python</li>
</ul>
<ul>
<li>许可证：Apache 2.0</li>
</ul>
<ul>
<li>Ambassador 也是一个基于 Envoy 的解决方案，它有免费版和商业版两个版本。</li>
</ul>
<ul>
<li>Ambassador 被称为“Kubernetes 原生 API 微服务网关”，它与 K8s 原语紧密集成，拥有你所期望的从 Ingress controller 获得的功能包，它还可以与各种服务网格解决方案，如 Linkerd、Istio 等一起使用。</li>
</ul>
<ul>
<li>顺便提一下，Ambassador 博客日前发布了一份基准测试结果，比较了 Envoy、HAProxy 和 NGINX 的基础性能。</li>
</ul>
<h3 id="1-2-10-Gloo"><a href="#1-2-10-Gloo" class="headerlink" title="1.2.10 Gloo"></a>1.2.10 Gloo</h3><ul>
<li>参考链接：<a href="http://github.com/solo-io/gloo">http://github.com/solo-io/gloo</a></li>
</ul>
<ul>
<li>实现：Go</li>
</ul>
<ul>
<li>许可证：Apache 2.0</li>
</ul>
<ul>
<li>Gloo 是在 Envoy 之上构建的新软件（于 2018 年 3 月发布），由于它的作者坚持认为“网关应该从功能而不是服务中构建 API”，它也被称为“功能网关”。其“功能级路由”的意思是它可以为后端实现是微服务、无服务器功能和遗留应用的混合应用路由流量。</li>
</ul>
<ul>
<li>由于拥有可插拔的体系结构，Gloo 提供了工程师期望的大部分功能，但是其中一些功能仅在其商业版本（Gloo Enterprise）中可用。</li>
</ul>
<h3 id="1-2-11-Skipper"><a href="#1-2-11-Skipper" class="headerlink" title="1.2.11 Skipper"></a>1.2.11 Skipper</h3><ul>
<li>参考链接：<a href="http://github.com/zalando/skipper">http://github.com/zalando/skipper</a></li>
</ul>
<ul>
<li>实现：Go</li>
</ul>
<ul>
<li>许可证：Apache 2.0</li>
</ul>
<ul>
<li>Skipper 是 HTTP 路由器和反向代理，因此不支持各种协议。从技术上讲，它使用 Endpoints API（而不是 Kubernetes Services）将流量路由到 Pod。它的优点在于其丰富的过滤器集所提供的高级 HTTP 路由功能，工程师可以借此创建、更新和删除所有 HTTP 数据。</li>
</ul>
<ul>
<li>Skipper 的路由规则可以在不停机的情况下更新。正如它的作者所述，Skipper 可以很好地与其他解决方案一起使用，比如 AWS ELB。</li>
</ul>
<h1 id="二、nginx-ingress-controller"><a href="#二、nginx-ingress-controller" class="headerlink" title="二、nginx ingress controller"></a>二、nginx ingress controller</h1><h2 id="2-1-nginx-ingress-controller位置"><a href="#2-1-nginx-ingress-controller位置" class="headerlink" title="2.1 nginx ingress controller位置"></a>2.1 nginx ingress controller位置</h2><p><img src="/images/Kubernetes/kubernetes%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E6%9A%B4%E9%9C%B2NginxIngressController.assets/image-20220412213345991.png" alt="image-20220412213345991"></p>
<ul>
<li>参考链接：<a href="https://www.nginx.com/products/nginx/kubernetes-ingress-controller">https://www.nginx.com/products/nginx/kubernetes-ingress-controller</a></li>
</ul>
<h2 id="2-2-nginx-ingress-controller部署"><a href="#2-2-nginx-ingress-controller部署" class="headerlink" title="2.2  nginx ingress controller部署"></a>2.2  nginx ingress controller部署</h2><ul>
<li>项目地址：<a href="https://github.com/kubernetes/ingress-nginx">https://github.com/kubernetes/ingress-nginx</a></li>
</ul>
<h3 id="2-2-1-下载并修改配置文件"><a href="#2-2-1-下载并修改配置文件" class="headerlink" title="2.2.1 下载并修改配置文件"></a>2.2.1 下载并修改配置文件</h3><p><img src="/images/Kubernetes/kubernetes%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E6%9A%B4%E9%9C%B2NginxIngressController.assets/image-20220412223933840.png" alt="image-20220412223933840"></p>
<p><img src="/images/Kubernetes/kubernetes%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E6%9A%B4%E9%9C%B2NginxIngressController.assets/image-20220412224751513.png" alt="image-20220412224751513"></p>
<p><img src="/images/Kubernetes/kubernetes%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E6%9A%B4%E9%9C%B2NginxIngressController.assets/image-20220412224823931.png" alt="image-20220412224823931"></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment">#  curl -k https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/baremetal/deploy.yaml  -o deploy.yaml</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># ls</span></span><br><span class="line">deploy.yaml</span><br></pre></td></tr></table></figure>





<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># vim deploy.yaml</span></span><br><span class="line">......</span><br><span class="line"><span class="number">323</span> spec:</span><br><span class="line"><span class="number">324</span>   ports:</span><br><span class="line"><span class="number">325</span>   - appProtocol: http</span><br><span class="line"><span class="number">326</span>     name: http</span><br><span class="line"><span class="number">327</span>     port: <span class="number">80</span></span><br><span class="line"><span class="number">328</span>     protocol: TCP</span><br><span class="line"><span class="number">329</span>     targetPort: http</span><br><span class="line"><span class="number">330</span>   - appProtocol: https</span><br><span class="line"><span class="number">331</span>     name: https</span><br><span class="line"><span class="number">332</span>     port: <span class="number">443</span></span><br><span class="line"><span class="number">333</span>     protocol: TCP</span><br><span class="line"><span class="number">334</span>     targetPort: https</span><br><span class="line"><span class="number">335</span>   selector:</span><br><span class="line"><span class="number">336</span>     app.kubernetes.io/component: controller</span><br><span class="line"><span class="number">337</span>     app.kubernetes.io/instance: ingress<span class="literal">-nginx</span></span><br><span class="line"><span class="number">338</span>     app.kubernetes.io/name: ingress<span class="literal">-nginx</span></span><br><span class="line"><span class="number">339</span>   <span class="built_in">type</span>: NodePort</span><br><span class="line"></span><br><span class="line">把<span class="number">339</span>行修改为LoadBalancer</span><br><span class="line"><span class="number">323</span> spec:</span><br><span class="line"><span class="number">324</span>   ports:</span><br><span class="line"><span class="number">325</span>   - appProtocol: http</span><br><span class="line"><span class="number">326</span>     name: http</span><br><span class="line"><span class="number">327</span>     port: <span class="number">80</span></span><br><span class="line"><span class="number">328</span>     protocol: TCP</span><br><span class="line"><span class="number">329</span>     targetPort: http</span><br><span class="line"><span class="number">330</span>   - appProtocol: https</span><br><span class="line"><span class="number">331</span>     name: https</span><br><span class="line"><span class="number">332</span>     port: <span class="number">443</span></span><br><span class="line"><span class="number">333</span>     protocol: TCP</span><br><span class="line"><span class="number">334</span>     targetPort: https</span><br><span class="line"><span class="number">335</span>   selector:</span><br><span class="line"><span class="number">336</span>     app.kubernetes.io/component: controller</span><br><span class="line"><span class="number">337</span>     app.kubernetes.io/instance: ingress<span class="literal">-nginx</span></span><br><span class="line"><span class="number">338</span>     app.kubernetes.io/name: ingress<span class="literal">-nginx</span></span><br><span class="line"><span class="number">339</span>   <span class="built_in">type</span>: LoadBalancer</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="2-2-2-应用资源清单文件"><a href="#2-2-2-应用资源清单文件" class="headerlink" title="2.2.2 应用资源清单文件"></a>2.2.2 应用资源清单文件</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl apply -f deploy.yaml</span></span><br><span class="line">namespace/ingress<span class="literal">-nginx</span> created</span><br><span class="line">serviceaccount/ingress<span class="literal">-nginx</span> created</span><br><span class="line">serviceaccount/ingress<span class="literal">-nginx</span><span class="literal">-admission</span> created</span><br><span class="line">role.rbac.authorization.k8s.io/ingress<span class="literal">-nginx</span> created</span><br><span class="line">role.rbac.authorization.k8s.io/ingress<span class="literal">-nginx</span><span class="literal">-admission</span> created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/ingress<span class="literal">-nginx</span> created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/ingress<span class="literal">-nginx</span><span class="literal">-admission</span> created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/ingress<span class="literal">-nginx</span> created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/ingress<span class="literal">-nginx</span><span class="literal">-admission</span> created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/ingress<span class="literal">-nginx</span> created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/ingress<span class="literal">-nginx</span><span class="literal">-admission</span> created</span><br><span class="line">configmap/ingress<span class="literal">-nginx</span><span class="literal">-controller</span> created</span><br><span class="line">service/ingress<span class="literal">-nginx</span><span class="literal">-controller</span> created</span><br><span class="line">service/ingress<span class="literal">-nginx</span><span class="literal">-controller</span><span class="literal">-admission</span> created</span><br><span class="line">deployment.apps/ingress<span class="literal">-nginx</span><span class="literal">-controller</span> created</span><br><span class="line">job.batch/ingress<span class="literal">-nginx</span><span class="literal">-admission</span><span class="literal">-create</span> created</span><br><span class="line">job.batch/ingress<span class="literal">-nginx</span><span class="literal">-admission</span><span class="literal">-patch</span> created</span><br><span class="line">ingressclass.networking.k8s.io/nginx created</span><br><span class="line">validatingwebhookconfiguration.admissionregistration.k8s.io/ingress<span class="literal">-nginx</span><span class="literal">-admission</span> created</span><br></pre></td></tr></table></figure>



<h3 id="2-2-3-验证部署结果"><a href="#2-2-3-验证部署结果" class="headerlink" title="2.2.3 验证部署结果"></a>2.2.3 验证部署结果</h3><blockquote>
<p>注意镜像较大，可提前下载至集群node节点</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pods -n ingress-nginx</span></span><br><span class="line">NAME                                      READY   STATUS      RESTARTS   AGE</span><br><span class="line">ingress<span class="literal">-nginx</span><span class="literal">-admission</span><span class="literal">-create</span><span class="literal">-xdpgp</span>      <span class="number">0</span>/<span class="number">1</span>     Completed   <span class="number">0</span>          <span class="number">91</span>s</span><br><span class="line">ingress<span class="literal">-nginx</span><span class="literal">-admission</span><span class="literal">-patch</span><span class="literal">-lgnxs</span>       <span class="number">0</span>/<span class="number">1</span>     Completed   <span class="number">1</span>          <span class="number">91</span>s</span><br><span class="line">ingress<span class="literal">-nginx</span><span class="literal">-controller</span><span class="literal">-9596689c</span><span class="literal">-j9p9l</span>   <span class="number">1</span>/<span class="number">1</span>     Running     <span class="number">0</span>          <span class="number">91</span>s</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> <span class="type">ng</span>]<span class="comment"># kubectl get all -n ingress-nginx</span></span><br><span class="line">NAME                                          READY   STATUS      RESTARTS   AGE</span><br><span class="line">pod/ingress<span class="literal">-nginx</span><span class="literal">-admission</span><span class="literal">-create</span><span class="literal">-xdpgp</span>      <span class="number">0</span>/<span class="number">1</span>     Completed   <span class="number">0</span>          <span class="number">3</span>m24s</span><br><span class="line">pod/ingress<span class="literal">-nginx</span><span class="literal">-admission</span><span class="literal">-patch</span><span class="literal">-lgnxs</span>       <span class="number">0</span>/<span class="number">1</span>     Completed   <span class="number">1</span>          <span class="number">3</span>m24s</span><br><span class="line">pod/ingress<span class="literal">-nginx</span><span class="literal">-controller</span><span class="literal">-9596689c</span><span class="literal">-j9p9l</span>   <span class="number">1</span>/<span class="number">1</span>     Running     <span class="number">0</span>          <span class="number">3</span>m24s</span><br><span class="line"></span><br><span class="line">NAME                                         <span class="built_in">TYPE</span>           CLUSTER<span class="literal">-IP</span>      EXTERNAL<span class="literal">-IP</span>     PORT(S)                      AGE</span><br><span class="line">service/ingress<span class="literal">-nginx</span><span class="literal">-controller</span>             LoadBalancer   <span class="number">10.96</span>.<span class="number">183.188</span>   <span class="number">192.168</span>.<span class="number">10.91</span>   <span class="number">80</span>:<span class="number">32369</span>/TCP,<span class="number">443</span>:<span class="number">31775</span>/TCP   <span class="number">3</span>m25s</span><br><span class="line">service/ingress<span class="literal">-nginx</span><span class="literal">-controller</span><span class="literal">-admission</span>   ClusterIP      <span class="number">10.96</span>.<span class="number">212.14</span>    &lt;none&gt;          <span class="number">443</span>/TCP                      <span class="number">3</span>m25s</span><br><span class="line"></span><br><span class="line">NAME                                       READY   UP<span class="literal">-TO</span><span class="literal">-DATE</span>   AVAILABLE   AGE</span><br><span class="line">deployment.apps/ingress<span class="literal">-nginx</span><span class="literal">-controller</span>   <span class="number">1</span>/<span class="number">1</span>     <span class="number">1</span>            <span class="number">1</span>           <span class="number">3</span>m24s</span><br><span class="line"></span><br><span class="line">NAME                                                DESIRED   CURRENT   READY   AGE</span><br><span class="line">replicaset.apps/ingress<span class="literal">-nginx</span><span class="literal">-controller</span><span class="literal">-9596689c</span>   <span class="number">1</span>         <span class="number">1</span>         <span class="number">1</span>       <span class="number">3</span>m24s</span><br><span class="line"></span><br><span class="line">NAME                                       COMPLETIONS   DURATION   AGE</span><br><span class="line">job.batch/ingress<span class="literal">-nginx</span><span class="literal">-admission</span><span class="literal">-create</span>   <span class="number">1</span>/<span class="number">1</span>           <span class="number">2</span>s         <span class="number">3</span>m24s</span><br><span class="line">job.batch/ingress<span class="literal">-nginx</span><span class="literal">-admission</span><span class="literal">-patch</span>    <span class="number">1</span>/<span class="number">1</span>           <span class="number">3</span>s         <span class="number">3</span>m24s</span><br></pre></td></tr></table></figure>





<h2 id="2-3-ingress对象应用案例"><a href="#2-3-ingress对象应用案例" class="headerlink" title="2.3 ingress对象应用案例"></a>2.3 ingress对象应用案例</h2><h3 id="2-3-1-ingress-http案例"><a href="#2-3-1-ingress-http案例" class="headerlink" title="2.3 1 ingress-http案例"></a>2.3 1 ingress-http案例</h3><blockquote>
<p>基于名称的负载均衡</p>
</blockquote>
<h4 id="2-3-1-1-创建deployment控制器类型应用"><a href="#2-3-1-1-创建deployment控制器类型应用" class="headerlink" title="2.3.1.1 创建deployment控制器类型应用"></a>2.3.1.1 创建deployment控制器类型应用</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># vim nginx.yml</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx</span><br><span class="line">  namespace: ingress<span class="literal">-nginx</span></span><br><span class="line">spec:</span><br><span class="line">  replicas: <span class="number">2</span></span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: c1</span><br><span class="line">        image: nginx:<span class="number">1.15</span><span class="literal">-alpine</span></span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br></pre></td></tr></table></figure>

<p>应用YAML</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl apply -f nginx.yml</span></span><br><span class="line">deployment.extensions/nginx created</span><br></pre></td></tr></table></figure>

<p>验证pod</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pods -n ingress-nginx</span></span><br><span class="line">NAME                                        READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx<span class="literal">-79654d7b8</span><span class="literal">-nhxpm</span>                       <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">12</span>s</span><br><span class="line">nginx<span class="literal">-79654d7b8</span><span class="literal">-tp8wg</span>                       <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">13</span>s</span><br><span class="line">nginx<span class="literal">-ingress</span><span class="literal">-controller</span><span class="literal">-77db54fc46</span><span class="literal">-kwwkt</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">11</span>m</span><br></pre></td></tr></table></figure>



<h4 id="2-3-1-2-创建service"><a href="#2-3-1-2-创建service" class="headerlink" title="2.3.1.2 创建service"></a>2.3.1.2 创建service</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># vim nginx-service.yml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx<span class="literal">-service</span></span><br><span class="line">  namespace: ingress<span class="literal">-nginx</span></span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: <span class="number">80</span></span><br><span class="line">    targetPort: <span class="number">80</span></span><br><span class="line">  selector:</span><br><span class="line">    app: nginx</span><br></pre></td></tr></table></figure>

<p>应用YAML</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl apply -f nginx-service.yml</span></span><br><span class="line">service/nginx<span class="literal">-service</span> created</span><br></pre></td></tr></table></figure>

<p>验证service</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get svc -n ingress-nginx</span></span><br><span class="line">NAME            <span class="built_in">TYPE</span>        CLUSTER<span class="literal">-IP</span>     EXTERNAL<span class="literal">-IP</span>   PORT(S)   AGE</span><br><span class="line">nginx<span class="literal">-service</span>   ClusterIP   <span class="number">10.2</span>.<span class="number">115.144</span>   &lt;none&gt;        <span class="number">80</span>/TCP    <span class="number">5</span>s</span><br></pre></td></tr></table></figure>



<h4 id="2-3-1-3-创建ingress对象"><a href="#2-3-1-3-创建ingress对象" class="headerlink" title="2.3.1.3 创建ingress对象"></a>2.3.1.3 创建ingress对象</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># vim ingress-nginx.yaml</span></span><br><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: ingress<span class="literal">-nginx</span>                    <span class="comment">#自定义ingress名称</span></span><br><span class="line">  namespace: ingress<span class="literal">-nginx</span></span><br><span class="line">  annotations:</span><br><span class="line">    ingressclass.kubernetes.io/is<span class="literal">-default</span><span class="literal">-class</span>: <span class="string">&quot;true&quot;</span></span><br><span class="line">    kubernetes.io/ingress.class: nginx</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: www.kubemsb.com                   <span class="comment"># 自定义域名</span></span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - pathType: Prefix</span><br><span class="line">        path: <span class="string">&quot;/&quot;</span></span><br><span class="line">        backend:</span><br><span class="line">          service:</span><br><span class="line">            name: nginx<span class="literal">-service</span>     <span class="comment"># 对应上面创建的service名称</span></span><br><span class="line">            port:</span><br><span class="line">              number: <span class="number">80</span></span><br></pre></td></tr></table></figure>

<p>应用YAML</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl apply -f ingress-nginx.yaml</span></span><br><span class="line">ingress.extensions/ingress<span class="literal">-nginx</span> created</span><br></pre></td></tr></table></figure>

<p>验证ingress</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get ingress -n ingress-nginx</span></span><br><span class="line">NAME            <span class="class"><span class="keyword">CLASS</span>    <span class="title">HOSTS</span>             <span class="title">ADDRESS</span>         <span class="title">PORTS</span>   <span class="title">AGE</span></span></span><br><span class="line"><span class="class"><span class="title">ingress</span>-<span class="title">nginx</span>   &lt;<span class="title">none</span>&gt;   <span class="title">www</span>.<span class="title">kubemsb</span>.<span class="title">com</span>   192.168.10.12   80      113<span class="title">s</span></span></span><br></pre></td></tr></table></figure>

<p>描述查看ingress信息</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl describe ingress ingress-nginx -n ingress-nginx</span></span><br><span class="line">Name:             ingress<span class="literal">-nginx</span></span><br><span class="line">Namespace:        ingress<span class="literal">-nginx</span></span><br><span class="line">Address:          <span class="number">192.168</span>.<span class="number">10.12</span></span><br><span class="line">Default backend:  default<span class="literal">-http</span><span class="literal">-backend</span>:<span class="number">80</span> (&lt;error: endpoints <span class="string">&quot;default-http-backend&quot;</span> not found&gt;)</span><br><span class="line">Rules:</span><br><span class="line">  Host             Path  Backends</span><br><span class="line">  ----             ----  --------</span><br><span class="line">  www.kubemsb.com</span><br><span class="line">                   /   nginx<span class="literal">-service</span>:<span class="number">80</span> (<span class="number">10.244</span>.<span class="number">159.160</span>:<span class="number">80</span>,<span class="number">10.244</span>.<span class="number">194.110</span>:<span class="number">80</span>)</span><br><span class="line">Annotations:       kubernetes.io/ingress.class: nginx</span><br><span class="line">Events:</span><br><span class="line">  <span class="built_in">Type</span>    Reason  Age                 From                      Message</span><br><span class="line">  ----    ------  ----                ----                      -------</span><br><span class="line">  Normal  Sync    <span class="number">2</span>m (x2 over <span class="number">2</span>m56s)  nginx<span class="literal">-ingress</span><span class="literal">-controller</span>  Scheduled <span class="keyword">for</span> sync</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pods -o wide -n ingress-nginx</span></span><br><span class="line">NAME                                      READY   STATUS      RESTARTS   AGE     IP               NODE          NOMINATED NODE   READINESS GATES</span><br><span class="line"></span><br><span class="line">nginx<span class="literal">-646d5c7b67</span><span class="literal">-mpw9r</span>                    <span class="number">1</span>/<span class="number">1</span>     Running     <span class="number">0</span>          <span class="number">4</span>m15s   <span class="number">10.244</span>.<span class="number">194.110</span>   k8s<span class="literal">-worker1</span>   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">nginx<span class="literal">-646d5c7b67</span><span class="literal">-v99gz</span>                    <span class="number">1</span>/<span class="number">1</span>     Running     <span class="number">0</span>          <span class="number">4</span>m15s   <span class="number">10.244</span>.<span class="number">159.160</span>   k8s<span class="literal">-master1</span>   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">可以看到两个pod的IP正好对应ingress域名对应的IP</span><br></pre></td></tr></table></figure>



<p>确认<code>nginx-ingress-controller</code>的podIP为<code>192.168.10.91</code></p>
<h4 id="2-3-1-4-模拟客户端访问"><a href="#2-3-1-4-模拟客户端访问" class="headerlink" title="2.3.1.4 模拟客户端访问"></a>2.3.1.4 模拟客户端访问</h4><p>1, 确认<code>nginx-ingress-controller</code>的podIP, 下面命令查询的结果为<code>192.168.10.91</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get svc -n ingress-nginx  |grep ingress</span></span><br><span class="line">ingress<span class="literal">-nginx</span><span class="literal">-controller</span>             LoadBalancer   <span class="number">10.96</span>.<span class="number">183.188</span>   <span class="number">192.168</span>.<span class="number">10.91</span>   <span class="number">80</span>:<span class="number">32369</span>/TCP,<span class="number">443</span>:<span class="number">31775</span>/TCP   <span class="number">11</span>m</span><br><span class="line">ingress<span class="literal">-nginx</span><span class="literal">-controller</span><span class="literal">-admission</span>   ClusterIP      <span class="number">10.96</span>.<span class="number">212.14</span>    &lt;none&gt;          <span class="number">443</span>/TCP                      <span class="number">11</span>m</span><br></pre></td></tr></table></figure>

<p>2, 在集群之外任一主机中添加上述域名与IP地址解析(模拟公网DNS)</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">otherhost</span> ~]<span class="comment"># vim /etc/hosts</span></span><br><span class="line"></span><br><span class="line"><span class="number">192.168</span>.<span class="number">10.91</span> www.kubemsb.com</span><br></pre></td></tr></table></figure>

<p>3, 准备pod内容器运行的web主页</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pods  -n ingress-nginx </span></span><br><span class="line">nginx<span class="literal">-646d5c7b67</span><span class="literal">-mpw9r</span>                    <span class="number">1</span>/<span class="number">1</span>     Running     <span class="number">0</span>          <span class="number">8</span>m34s</span><br><span class="line">nginx<span class="literal">-646d5c7b67</span><span class="literal">-v99gz</span>                    <span class="number">1</span>/<span class="number">1</span>     Running     <span class="number">0</span>          <span class="number">8</span>m34s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl exec -it nginx-646d5c7b67-mpw9r -n ingress-nginx  -- /bin/sh</span></span><br><span class="line">/ <span class="comment"># echo &quot;ingress web1&quot; &gt; /usr/share/nginx/html/index.html</span></span><br><span class="line">/ <span class="comment"># exit</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl exec -it nginx-646d5c7b67-v99gz -n ingress-nginx -- /bin/sh</span></span><br><span class="line">/ <span class="comment"># echo &quot;ingress web2&quot; &gt; /usr/share/nginx/html/index.html</span></span><br><span class="line">/ <span class="comment"># exit</span></span><br></pre></td></tr></table></figure>

<p>4, 访问及结果展示</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">otherhost</span> ~]<span class="comment"># curl www.kubemsb.com</span></span><br><span class="line">ingress web1</span><br><span class="line">[<span class="type">root</span>@<span class="type">otherhost</span> ~]<span class="comment"># curl www.kubemsb.com</span></span><br><span class="line">ingress web2</span><br></pre></td></tr></table></figure>



<h3 id="2-3-2-ingress-http案例扩展"><a href="#2-3-2-ingress-http案例扩展" class="headerlink" title="2.3.2 ingress-http案例扩展"></a>2.3.2 ingress-http案例扩展</h3><blockquote>
<p>基于URI的负载均衡</p>
</blockquote>
<h4 id="2-3-2-1-创建第一个应用"><a href="#2-3-2-1-创建第一个应用" class="headerlink" title="2.3.2.1 创建第一个应用"></a>2.3.2.1 创建第一个应用</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># vim nginx-uri-1.yml</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx<span class="literal">-uri</span><span class="literal">-1</span></span><br><span class="line">  namespace: ingress<span class="literal">-nginx</span></span><br><span class="line">spec:</span><br><span class="line">  replicas: <span class="number">2</span></span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx<span class="literal">-uri</span><span class="literal">-1</span></span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx<span class="literal">-uri</span><span class="literal">-1</span></span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: c1</span><br><span class="line">        image: nginx:<span class="number">1.15</span><span class="literal">-alpine</span></span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># vim nginx-service-uri-1.yml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx<span class="literal">-service</span><span class="literal">-uri</span><span class="literal">-1</span></span><br><span class="line">  namespace: ingress<span class="literal">-nginx</span></span><br><span class="line">  labels:</span><br><span class="line">    app: nginx<span class="literal">-uri</span><span class="literal">-1</span></span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: <span class="number">80</span></span><br><span class="line">    targetPort: <span class="number">80</span></span><br><span class="line">  selector:</span><br><span class="line">    app: nginx<span class="literal">-uri</span><span class="literal">-1</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl apply -f nginx-uri-1.yaml</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl apply -f nginx-service-uri-1.yaml</span></span><br></pre></td></tr></table></figure>



<h4 id="2-3-2-2-创建第二个应用"><a href="#2-3-2-2-创建第二个应用" class="headerlink" title="2.3.2.2 创建第二个应用"></a>2.3.2.2 创建第二个应用</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># vim nginx-uri-2.yml</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx<span class="literal">-uri</span><span class="literal">-2</span></span><br><span class="line">  namespace: ingress<span class="literal">-nginx</span></span><br><span class="line">spec:</span><br><span class="line">  replicas: <span class="number">2</span></span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx<span class="literal">-uri</span><span class="literal">-2</span></span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx<span class="literal">-uri</span><span class="literal">-2</span></span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: c1</span><br><span class="line">        image: nginx:<span class="number">1.15</span><span class="literal">-alpine</span></span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># vim nginx-service-uri-2.yml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx<span class="literal">-service</span><span class="literal">-uri</span><span class="literal">-2</span></span><br><span class="line">  namespace: ingress<span class="literal">-nginx</span></span><br><span class="line">  labels:</span><br><span class="line">    app: nginx<span class="literal">-uri</span><span class="literal">-2</span></span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: <span class="number">80</span></span><br><span class="line">    targetPort: <span class="number">80</span></span><br><span class="line">  selector:</span><br><span class="line">    app: nginx<span class="literal">-uri</span><span class="literal">-2</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl apply -f nginx-uri-2.yaml</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl apply -f nginx-service-uri-2.yaml</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get svc -n ingress-nginx</span></span><br><span class="line">NAME                                 <span class="built_in">TYPE</span>           CLUSTER<span class="literal">-IP</span>      EXTERNAL<span class="literal">-IP</span>     PORT(S)                      AGE</span><br><span class="line"></span><br><span class="line">nginx<span class="literal">-service</span><span class="literal">-uri</span><span class="literal">-1</span>                  ClusterIP      <span class="number">10.96</span>.<span class="number">171.135</span>   &lt;none&gt;          <span class="number">80</span>/TCP                       <span class="number">7</span>m24s</span><br><span class="line">nginx<span class="literal">-service</span><span class="literal">-uri</span><span class="literal">-2</span>                  ClusterIP      <span class="number">10.96</span>.<span class="number">234.164</span>   &lt;none&gt;          <span class="number">80</span>/TCP                       <span class="number">4</span>m11s</span><br></pre></td></tr></table></figure>





<h4 id="2-3-2-3-创建ingress对象"><a href="#2-3-2-3-创建ingress对象" class="headerlink" title="2.3.2.3 创建ingress对象"></a>2.3.2.3 创建ingress对象</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># vim ingress-nginx.yaml</span></span><br><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: ingress<span class="literal">-uri</span></span><br><span class="line">  namespace: ingress<span class="literal">-nginx</span></span><br><span class="line">  annotations:</span><br><span class="line">    ingressclass.kubernetes.io/is<span class="literal">-default</span><span class="literal">-class</span>: <span class="string">&quot;true&quot;</span></span><br><span class="line">    kubernetes.io/ingress.class: nginx</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: www.kubemsburi.com</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /svc1</span><br><span class="line">        pathType: Prefix</span><br><span class="line">        backend:</span><br><span class="line">          service:</span><br><span class="line">            name: nginx<span class="literal">-service</span><span class="literal">-uri</span><span class="literal">-1</span></span><br><span class="line">            port:</span><br><span class="line">              number: <span class="number">80</span></span><br><span class="line">      - path: /svc2</span><br><span class="line">        pathType: Prefix</span><br><span class="line">        backend:</span><br><span class="line">          service:</span><br><span class="line">            name: nginx<span class="literal">-service</span><span class="literal">-uri</span><span class="literal">-2</span></span><br><span class="line">            port:</span><br><span class="line">              number: <span class="number">80</span></span><br></pre></td></tr></table></figure>

<p>应用YAML</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master1</span> ~]<span class="comment"># kubectl apply -f ingress-nginx-uri.yaml</span></span><br><span class="line">ingress.networking.k8s.io/ingress<span class="literal">-uri</span> created</span><br></pre></td></tr></table></figure>

<p>验证ingress</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master1</span> ~]<span class="comment"># kubectl get ingress -n ingress-nginx</span></span><br><span class="line">NAME            <span class="class"><span class="keyword">CLASS</span>    <span class="title">HOSTS</span>             <span class="title">ADDRESS</span>         <span class="title">PORTS</span>   <span class="title">AGE</span></span></span><br><span class="line"><span class="class"><span class="title">ingress</span>-<span class="title">uri</span>     &lt;<span class="title">none</span>&gt;   <span class="title">www</span>.<span class="title">kubemsburi</span>.<span class="title">com</span>                   80      13<span class="title">s</span></span></span><br></pre></td></tr></table></figure>

<p>描述查看ingress信息</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master1</span> ~]<span class="comment"># kubectl describe ingress ingress-uri -n ingress-nginx</span></span><br><span class="line">Name:             ingress<span class="literal">-uri</span></span><br><span class="line">Namespace:        ingress<span class="literal">-nginx</span></span><br><span class="line">Address:          <span class="number">192.168</span>.<span class="number">10.12</span></span><br><span class="line">Default backend:  default<span class="literal">-http</span><span class="literal">-backend</span>:<span class="number">80</span> (&lt;error: endpoints <span class="string">&quot;default-http-backend&quot;</span> not found&gt;)</span><br><span class="line">Rules:</span><br><span class="line">  Host                Path  Backends</span><br><span class="line">  ----                ----  --------</span><br><span class="line">  www.kubemsburi.com</span><br><span class="line">                      /svc1   nginx<span class="literal">-service</span><span class="literal">-uri</span><span class="literal">-1</span>:<span class="number">80</span> (<span class="number">10.244</span>.<span class="number">159.158</span>:<span class="number">80</span>,<span class="number">10.244</span>.<span class="number">194.111</span>:<span class="number">80</span>)</span><br><span class="line">                      /svc2   nginx<span class="literal">-service</span><span class="literal">-uri</span><span class="literal">-2</span>:<span class="number">80</span> (<span class="number">10.244</span>.<span class="number">159.159</span>:<span class="number">80</span>,<span class="number">10.244</span>.<span class="number">194.112</span>:<span class="number">80</span>)</span><br><span class="line">Annotations:          kubernetes.io/ingress.class: nginx</span><br><span class="line">Events:</span><br><span class="line">  <span class="built_in">Type</span>    Reason  Age               From                      Message</span><br><span class="line">  ----    ------  ----              ----                      -------</span><br><span class="line">  Normal  Sync    <span class="number">4</span>s (x2 over <span class="number">32</span>s)  nginx<span class="literal">-ingress</span><span class="literal">-controller</span>  Scheduled <span class="keyword">for</span> sync</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pods -o wide -n ingress-nginx</span></span><br><span class="line">NAME                                      READY   STATUS      RESTARTS   AGE   IP               NODE          NOMINATED NODE   READINESS GATES</span><br><span class="line"></span><br><span class="line">nginx<span class="literal">-uri</span><span class="literal">-1</span><span class="literal">-7d7d75f86</span><span class="literal">-dws96</span>               <span class="number">1</span>/<span class="number">1</span>     Running     <span class="number">0</span>          <span class="number">14</span>m   <span class="number">10.244</span>.<span class="number">159.158</span>   k8s<span class="literal">-master1</span>   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">nginx<span class="literal">-uri</span><span class="literal">-1</span><span class="literal">-7d7d75f86</span><span class="literal">-s8js4</span>               <span class="number">1</span>/<span class="number">1</span>     Running     <span class="number">0</span>          <span class="number">14</span>m   <span class="number">10.244</span>.<span class="number">194.111</span>   k8s<span class="literal">-worker1</span>   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">nginx<span class="literal">-uri</span><span class="literal">-2</span><span class="literal">-7cdf7f89b7</span><span class="literal">-8s4mg</span>              <span class="number">1</span>/<span class="number">1</span>     Running     <span class="number">0</span>          <span class="number">10</span>m   <span class="number">10.244</span>.<span class="number">194.112</span>   k8s<span class="literal">-worker1</span>   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">nginx<span class="literal">-uri</span><span class="literal">-2</span><span class="literal">-7cdf7f89b7</span><span class="literal">-gj8x6</span>              <span class="number">1</span>/<span class="number">1</span>     Running     <span class="number">0</span>          <span class="number">10</span>m   <span class="number">10.244</span>.<span class="number">159.159</span>   k8s<span class="literal">-master1</span>   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>确认<code>nginx-ingress-controller</code>的podIP为<code>192.168.10.91</code></p>
<h4 id="2-3-1-4-模拟客户端访问-1"><a href="#2-3-1-4-模拟客户端访问-1" class="headerlink" title="2.3.1.4 模拟客户端访问"></a>2.3.1.4 模拟客户端访问</h4><p>1, 确认<code>nginx-ingress-controller</code>的podIP, 下面命令查询的结果为<code>192.168.10.91</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get svc -n ingress-nginx  |grep ingress</span></span><br><span class="line">ingress<span class="literal">-nginx</span><span class="literal">-controller</span>             LoadBalancer   <span class="number">10.96</span>.<span class="number">183.188</span>   <span class="number">192.168</span>.<span class="number">10.91</span>   <span class="number">80</span>:<span class="number">32369</span>/TCP,<span class="number">443</span>:<span class="number">31775</span>/TCP   <span class="number">11</span>m</span><br><span class="line">ingress<span class="literal">-nginx</span><span class="literal">-controller</span><span class="literal">-admission</span>   ClusterIP      <span class="number">10.96</span>.<span class="number">212.14</span>    &lt;none&gt;          <span class="number">443</span>/TCP                      <span class="number">11</span>m</span><br></pre></td></tr></table></figure>

<p>2, 在集群之外任一主机中添加上述域名与IP地址解析(模拟公网DNS)</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">otherhost</span> ~]<span class="comment"># vim /etc/hosts</span></span><br><span class="line"></span><br><span class="line"><span class="number">192.168</span>.<span class="number">10.91</span> www.kubemsburi.com</span><br></pre></td></tr></table></figure>

<p>3, 准备pod内容器运行的web主页</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl exec -it nginx-uri-1-7d7d75f86-dws96 -n ingress-nginx -- /bin/sh</span></span><br><span class="line">/ <span class="comment"># mkdir /usr/share/nginx/html/svc1</span></span><br><span class="line">/ <span class="comment"># echo &quot;sssvc1&quot; &gt; /usr/share/nginx/html/svc1/index.html</span></span><br><span class="line">/ <span class="comment"># exit</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl exec -it nginx-uri-1-7d7d75f86-s8js4 -n ingress-nginx -- /bin/sh</span></span><br><span class="line">/ <span class="comment"># mkdir /usr/share/nginx/html/svc1</span></span><br><span class="line">/ <span class="comment"># echo &quot;sssvc1&quot; &gt; /usr/share/nginx/html/svc1/index.html</span></span><br><span class="line">/ <span class="comment"># exit</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl exec -it nginx-uri-2-7cdf7f89b7-8s4mg -n ingress-nginx -- /bin/sh</span></span><br><span class="line">/ <span class="comment"># mkdir /usr/share/nginx/html/svc2</span></span><br><span class="line">/ <span class="comment"># echo &quot;sssvc2&quot; &gt; /usr/share/nginx/html/svc1/index.html</span></span><br><span class="line">/ <span class="comment"># exit</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl exec -it nginx-uri-2-7cdf7f89b7-gj8x6 -n ingress-nginx -- /bin/sh</span></span><br><span class="line">/ <span class="comment"># mkdir /usr/share/nginx/html/svc2</span></span><br><span class="line">/ <span class="comment"># echo &quot;sssvc2&quot; &gt; /usr/share/nginx/html/svc1/index.html</span></span><br><span class="line">/ <span class="comment"># exit</span></span><br></pre></td></tr></table></figure>

<p>4, 访问及结果展示</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">otherhost</span> ~]<span class="comment"># curl www.kubemsburi.com/svc1/index.html</span></span><br><span class="line">sssvc1</span><br><span class="line">[<span class="type">root</span>@<span class="type">otherhost</span> ~]<span class="comment"># curl www.kubemsburi.com/svc2/index.html</span></span><br><span class="line">sssvc2</span><br></pre></td></tr></table></figure>







<h3 id="2-3-3-ingress-https案例"><a href="#2-3-3-ingress-https案例" class="headerlink" title="2.3.3 ingress-https案例"></a>2.3.3 ingress-https案例</h3><h4 id="2-3-3-1-创建自签证书"><a href="#2-3-3-1-创建自签证书" class="headerlink" title="2.3.3.1 创建自签证书"></a>2.3.3.1 创建自签证书</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># mkdir ingress-https</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># cd ingress-https/</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> <span class="type">ingress</span>-<span class="type">https</span>]<span class="comment"># openssl genrsa -out nginx.key 2048</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> <span class="type">ingress</span>-<span class="type">https</span>]<span class="comment"># openssl req -new -x509 -key nginx.key -out nginx.pem -days 365</span></span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">Country Name (<span class="number">2</span> letter code) [<span class="type">XX</span>]:CN</span><br><span class="line">State or Province Name (full name) []:GD</span><br><span class="line">Locality Name (eg, city) [<span class="type">Default</span> <span class="type">City</span>]:SZ</span><br><span class="line">Organization Name (eg, company) [<span class="type">Default</span> <span class="type">Company</span> <span class="type">Ltd</span>]:IT</span><br><span class="line">Organizational Unit Name (eg, section) []:it</span><br><span class="line">Common Name (eg, your name or your server<span class="string">&#x27;s hostname) []:kubemsbhost</span></span><br><span class="line"><span class="string">Email Address []:admin@kubemsbhost.com</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@k8s-master1 ingress-https]# ls</span></span><br><span class="line"><span class="string">nginx.key  nginx.pem</span></span><br></pre></td></tr></table></figure>

<h4 id="2-3-3-2-将证书创建成secret"><a href="#2-3-3-2-将证书创建成secret" class="headerlink" title="2.3.3.2 将证书创建成secret"></a>2.3.3.2 将证书创建成secret</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> <span class="type">ingress</span>-<span class="type">https</span>]<span class="comment"># kubectl create secret tls nginx-tls-secret --cert=nginx.pem --key=nginx.key -n ingress-nginx</span></span><br><span class="line">secret/nginx<span class="literal">-tls</span><span class="literal">-secret</span> created</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> <span class="type">ingress</span>-<span class="type">https</span>]<span class="comment"># kubectl get secrets -n ingress-nginx |grep nginx-tls-secret</span></span><br><span class="line">nginx<span class="literal">-tls</span><span class="literal">-secret</span>                           kubernetes.io/tls                     <span class="number">2</span>      <span class="number">38</span>s</span><br></pre></td></tr></table></figure>

<h4 id="2-3-3-3-编排YAML并创建"><a href="#2-3-3-3-编排YAML并创建" class="headerlink" title="2.3.3.3 编排YAML并创建"></a>2.3.3.3 编排YAML并创建</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> <span class="type">ingress</span>-<span class="type">https</span>]<span class="comment"># vim ingress-https.yml</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx2</span><br><span class="line">  namespace: ingress<span class="literal">-nginx</span></span><br><span class="line">spec:</span><br><span class="line">  replicas: <span class="number">2</span></span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx2</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx2</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: c1</span><br><span class="line">        image: nginx:<span class="number">1.15</span><span class="literal">-alpine</span></span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        ports:</span><br><span class="line">        - name: http</span><br><span class="line">          containerPort: <span class="number">80</span></span><br><span class="line">        - name: https</span><br><span class="line">          containerPort: <span class="number">443</span></span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx<span class="literal">-service2</span></span><br><span class="line">  namespace: ingress<span class="literal">-nginx</span></span><br><span class="line">  labels:</span><br><span class="line">    app: nginx2</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - name: http</span><br><span class="line">    port: <span class="number">80</span></span><br><span class="line">    targetPort: <span class="number">80</span></span><br><span class="line">  - name: https</span><br><span class="line">    port: <span class="number">443</span></span><br><span class="line">    targetPort: <span class="number">443</span></span><br><span class="line">  selector:</span><br><span class="line">    app: nginx2</span><br><span class="line">---</span><br><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: ingress<span class="literal">-nginx2</span></span><br><span class="line">  namespace: ingress<span class="literal">-nginx</span></span><br><span class="line">  annotations:</span><br><span class="line">    ingressclass.kubernetes.io/is<span class="literal">-default</span><span class="literal">-class</span>: <span class="string">&quot;true&quot;</span></span><br><span class="line">    kubernetes.io/ingress.class: nginx</span><br><span class="line">spec:</span><br><span class="line">  tls:</span><br><span class="line">  - hosts:</span><br><span class="line">    - www.kubemsbhost.com                                                     <span class="comment"># 域名</span></span><br><span class="line">    secretName: nginx<span class="literal">-tls</span><span class="literal">-secret</span>                                  <span class="comment"># 调用前面创建的secret</span></span><br><span class="line">  rules:</span><br><span class="line">  - host: www.kubemsbhost.com                                                 <span class="comment"># 域名</span></span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - pathType: Prefix</span><br><span class="line">        path: <span class="string">&quot;/&quot;</span></span><br><span class="line">        backend:</span><br><span class="line">          service:</span><br><span class="line">            name: nginx<span class="literal">-service2</span>                     <span class="comment"># 对应服务名</span></span><br><span class="line">            port:</span><br><span class="line">              number: <span class="number">80</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> <span class="type">ingress</span>-<span class="type">https</span>]<span class="comment"># kubectl apply -f ingress-https.yml</span></span><br><span class="line">deployment.apps/nginx2 created</span><br><span class="line">service/nginx<span class="literal">-service2</span> created</span><br><span class="line">ingress.extensions/ingress<span class="literal">-nginx2</span> created</span><br></pre></td></tr></table></figure>

<p>验证</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get ingress -n ingress-nginx</span></span><br><span class="line">NAME             <span class="class"><span class="keyword">CLASS</span>    <span class="title">HOSTS</span>                 <span class="title">ADDRESS</span>         <span class="title">PORTS</span>     <span class="title">AGE</span></span></span><br><span class="line"><span class="class"><span class="title">ingress</span>-<span class="title">nginx2</span>   &lt;<span class="title">none</span>&gt;   <span class="title">www</span>.<span class="title">kubemsbhost</span>.<span class="title">com</span>   192.168.10.12   80, 443   2<span class="title">m14s</span></span></span><br></pre></td></tr></table></figure>



<h4 id="2-3-3-4-模拟客户端访问"><a href="#2-3-3-4-模拟客户端访问" class="headerlink" title="2.3.3.4 模拟客户端访问"></a>2.3.3.4 模拟客户端访问</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">otherhost</span> ~]<span class="comment"># vim /etc/hosts</span></span><br><span class="line"></span><br><span class="line"><span class="number">192.168</span>.<span class="number">10.91</span> www.kubemsbhost.com					添加这行模拟DNS</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">otherhost</span> ~]<span class="comment"># firefox https://www.kubemsbhost.com &amp;</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">10892</span></span><br></pre></td></tr></table></figure>



<p><img src="/images/Kubernetes/kubernetes%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E6%9A%B4%E9%9C%B2NginxIngressController.assets/image-20220413013418685.png" alt="image-20220413013418685"></p>
<p><img src="/images/Kubernetes/kubernetes%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E6%9A%B4%E9%9C%B2NginxIngressController.assets/image-20220413013457091.png" alt="image-20220413013457091"></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">关于可信任证书的说明：</span><br><span class="line">如果需要在互联网中访问kubernetes集群中的服务是可信的，建议使用互联网中申请的SSL证书。</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="2-3-4-ingress-nodeport服务"><a href="#2-3-4-ingress-nodeport服务" class="headerlink" title="2.3.4 ingress+nodeport服务"></a>2.3.4 ingress+nodeport服务</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># vim ingress-nodeport.yml</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx3</span><br><span class="line">  namespace: ingress<span class="literal">-nginx</span></span><br><span class="line">spec:</span><br><span class="line">  replicas: <span class="number">2</span></span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx3</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx3</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: c1</span><br><span class="line">        image: nginx:<span class="number">1.15</span><span class="literal">-alpine</span></span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx<span class="literal">-service3</span></span><br><span class="line">  namespace: ingress<span class="literal">-nginx</span></span><br><span class="line">  labels:</span><br><span class="line">    app: nginx3</span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: NodePort						<span class="comment"># NodePort类型服务</span></span><br><span class="line">  ports:</span><br><span class="line">  - port: <span class="number">80</span></span><br><span class="line">    targetPort: <span class="number">80</span></span><br><span class="line">  selector:</span><br><span class="line">    app: nginx3</span><br><span class="line">---</span><br><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: ingress<span class="literal">-nginx3</span></span><br><span class="line">  namespace: ingress<span class="literal">-nginx</span></span><br><span class="line">  annotations:</span><br><span class="line">    ingressclass.kubernetes.io/is<span class="literal">-default</span><span class="literal">-class</span>: <span class="string">&quot;true&quot;</span></span><br><span class="line">    kubernetes.io/ingress.class: nginx</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: www.kubemsb3.com                                                 <span class="comment"># 域名</span></span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - pathType: Prefix</span><br><span class="line">        path: <span class="string">&quot;/&quot;</span></span><br><span class="line">        backend:</span><br><span class="line">          service:</span><br><span class="line">            name: nginx<span class="literal">-service3</span>                    <span class="comment"># 对应服务名</span></span><br><span class="line">            port:</span><br><span class="line">              number: <span class="number">80</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl apply -f ingress-nodeport.yml</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@k8s<span class="literal">-master1</span> ~]<span class="comment"># kubectl get svc -n ingress-nginx</span></span><br><span class="line">NAME             <span class="built_in">TYPE</span>        CLUSTER<span class="literal">-IP</span>     EXTERNAL<span class="literal">-IP</span>   PORT(S)          AGE</span><br><span class="line">nginx<span class="literal">-service</span>    ClusterIP   <span class="number">10.2</span>.<span class="number">115.144</span>   &lt;none&gt;        <span class="number">80</span>/TCP           <span class="number">22</span><span class="built_in">h</span></span><br><span class="line">nginx<span class="literal">-service2</span>   ClusterIP   <span class="number">10.2</span>.<span class="number">237.70</span>    &lt;none&gt;        <span class="number">80</span>/TCP,<span class="number">443</span>/TCP   <span class="number">22</span><span class="built_in">h</span></span><br><span class="line">nginx<span class="literal">-service3</span>   NodePort    <span class="number">10.2</span>.<span class="number">75.250</span>    &lt;none&gt;        <span class="number">80</span>:<span class="number">26765</span>/TCP     <span class="number">3</span>m51s</span><br><span class="line">nginx<span class="literal">-service3</span>是nodeport类型</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">otherhost</span> ~]<span class="comment"># vim /etc/hosts</span></span><br><span class="line"></span><br><span class="line"><span class="number">192.168</span>.<span class="number">10.91</span> www.kubemsb3.com					添加这行模拟DNS</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">otherhost</span> ~]<span class="comment"># curl www.kubemsb3.com</span></span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes持久化存储卷</title>
    <url>/2024/04/21/%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes/kubernetes%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%98%E5%82%A8%E5%8D%B7/</url>
    <content><![CDATA[<h1 id="一、存储卷介绍"><a href="#一、存储卷介绍" class="headerlink" title="一、存储卷介绍"></a>一、存储卷介绍</h1><p>pod有生命周期，生命周期结束后pod里的数据会消失(如配置文件,业务数据等)。<br><strong>解决: 我们需要将数据与pod分离,将数据放在专门的存储卷上</strong><br>pod在k8s集群的节点中是可以调度的, 如果pod挂了被调度到另一个节点,那么数据和pod的联系会中断。<br><strong>解决: 所以我们需要与集群节点分离的存储系统才能实现数据持久化</strong><br>简单来说: <strong>volume提供了在容器上挂载外部存储的能力</strong></p>
<h1 id="二、存储卷的分类"><a href="#二、存储卷的分类" class="headerlink" title="二、存储卷的分类"></a>二、存储卷的分类</h1><p>kubernetes支持的存储卷类型非常丰富,使用下面的命令查看:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl explain pod.spec.volumes</span></span><br></pre></td></tr></table></figure>

<p>或者参考: <a href="https://kubernetes.io/docs/concepts/storage/">https://kubernetes.io/docs/concepts/storage/</a></p>
<p>kubernetes支持的存储卷列表如下:</p>
<ul>
<li><a href="https://kubernetes.io/docs/concepts/storage/#awselasticblockstore">awsElasticBlockStore</a></li>
<li><a href="https://kubernetes.io/docs/concepts/storage/#azuredisk">azureDisk</a></li>
<li><a href="https://kubernetes.io/docs/concepts/storage/#azurefile">azureFile</a></li>
<li><a href="https://kubernetes.io/docs/concepts/storage/#cephfs">cephfs</a></li>
<li><a href="https://kubernetes.io/docs/concepts/storage/#cinder">cinder</a></li>
<li><a href="https://kubernetes.io/docs/concepts/storage/#configmap">configMap</a></li>
<li><a href="https://kubernetes.io/docs/concepts/storage/#csi">csi</a></li>
<li><a href="https://kubernetes.io/docs/concepts/storage/#downwardapi">downwardAPI</a></li>
<li><a href="https://kubernetes.io/docs/concepts/storage/#emptydir">emptyDir</a></li>
<li><a href="https://kubernetes.io/docs/concepts/storage/#fc">fc (fibre channel)</a></li>
<li><a href="https://kubernetes.io/docs/concepts/storage/#flexVolume">flexVolume</a></li>
<li><a href="https://kubernetes.io/docs/concepts/storage/#flocker">flocker</a></li>
<li><a href="https://kubernetes.io/docs/concepts/storage/#gcepersistentdisk">gcePersistentDisk</a></li>
<li><a href="https://kubernetes.io/docs/concepts/storage/#gitrepo">gitRepo (deprecated)</a></li>
<li><a href="https://kubernetes.io/docs/concepts/storage/#glusterfs">glusterfs</a></li>
<li><a href="https://kubernetes.io/docs/concepts/storage/#hostpath">hostPath</a></li>
<li><a href="https://kubernetes.io/docs/concepts/storage/#iscsi">iscsi</a></li>
<li><a href="https://kubernetes.io/docs/concepts/storage/#local">local</a></li>
<li><a href="https://kubernetes.io/docs/concepts/storage/#nfs">nfs</a></li>
<li><a href="https://kubernetes.io/docs/concepts/storage/#persistentvolumeclaim">persistentVolumeClaim</a></li>
<li><a href="https://kubernetes.io/docs/concepts/storage/#projected">projected</a></li>
<li><a href="https://kubernetes.io/docs/concepts/storage/#portworxvolume">portworxVolume</a></li>
<li><a href="https://kubernetes.io/docs/concepts/storage/#quobyte">quobyte</a></li>
<li><a href="https://kubernetes.io/docs/concepts/storage/#rbd">rbd</a></li>
<li><a href="https://kubernetes.io/docs/concepts/storage/#scaleio">scaleIO</a></li>
<li><a href="https://kubernetes.io/docs/concepts/storage/#secret">secret</a></li>
<li><a href="https://kubernetes.io/docs/concepts/storage/#storageos">storageos</a></li>
<li><a href="https://kubernetes.io/docs/concepts/storage/#vspherevolume">vsphereVolume</a></li>
</ul>
<p>我们将上面的存储卷列表进行简单的分类: </p>
<ul>
<li>本地存储卷 <ul>
<li>emptyDir    pod删除,数据也会被清除, 用于数据的临时存储</li>
<li>hostPath     宿主机目录映射(本地存储卷)</li>
</ul>
</li>
<li>网络存储卷<ul>
<li>NAS类           nfs等</li>
<li>SAN类           iscsi,FC等</li>
<li>分布式存储   glusterfs,cephfs,rbd,cinder等</li>
<li>云存储           aws,azurefile等</li>
</ul>
</li>
</ul>
<h1 id="三、存储卷的选择"><a href="#三、存储卷的选择" class="headerlink" title="三、存储卷的选择"></a>三、存储卷的选择</h1><p>市面上的存储产品种类繁多, 但按应用角度主要分为三类:</p>
<ul>
<li>文件存储  如:nfs,glusterfs,cephfs等<ul>
<li>优点: 数据共享(多pod挂载可以同读同写)</li>
<li>缺点: 性能较差</li>
</ul>
</li>
<li>块存储  如: iscsi,rbd等<ul>
<li>优点: 性能相对于文件存储好</li>
<li>缺点: 不能实现数据共享（部分）</li>
</ul>
</li>
<li>对象存储 如: ceph对象存储<ul>
<li>优点: 性能好, 数据共享</li>
<li>缺点: 使用方式特殊,支持较少</li>
</ul>
</li>
</ul>
<p>面对kubernetes支持的形形色色的存储卷,如何选择成了难题。在选择存储时,我们要抓住核心需求:</p>
<ul>
<li>数据是否需要持久性   </li>
<li>数据可靠性  如存储集群节点是否有单点故障,数据是否有副本等</li>
<li>性能  </li>
<li>扩展性  如是否能方便扩容,应对数据增长的需求</li>
<li>运维难度  存储的运维难度是比较高的,尽量选择稳定的开源方案或商业产品</li>
<li>成本</li>
</ul>
<p>总之, 存储的选择是需要考虑很多因素的, 熟悉各类存储产品, 了解它们的优缺点，结合自身需求才能选择合适自己的。</p>
<h1 id="四、本地存储卷之emptyDir"><a href="#四、本地存储卷之emptyDir" class="headerlink" title="四、本地存储卷之emptyDir"></a>四、本地存储卷之emptyDir</h1><ul>
<li><p>应用场景</p>
<p>实现pod内容器之间数据共享</p>
</li>
<li><p>特点</p>
<p>随着pod被删除，该卷也会被删除</p>
</li>
</ul>
<p>1.创建yaml文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># vim volume-emptydir.yml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: volume<span class="literal">-emptydir</span></span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: <span class="built_in">write</span></span><br><span class="line">    image: centos</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    command: [<span class="string">&quot;bash&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;echo haha &gt; /data/1.txt ; sleep 6000&quot;</span>]</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: <span class="keyword">data</span></span><br><span class="line">      mountPath: /<span class="keyword">data</span></span><br><span class="line"></span><br><span class="line">  - name: read</span><br><span class="line">    image: centos</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    command: [<span class="string">&quot;bash&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;cat /data/1.txt; sleep 6000&quot;</span>]</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: <span class="keyword">data</span></span><br><span class="line">      mountPath: /<span class="keyword">data</span></span><br><span class="line">      </span><br><span class="line">  volumes:</span><br><span class="line">  - name: <span class="keyword">data</span></span><br><span class="line">    emptyDir: &#123;&#125;</span><br></pre></td></tr></table></figure>



<p>2.基于yaml文件创建pod</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl apply -f volume-emptydir.yml</span></span><br><span class="line">pod/volume<span class="literal">-emptydir</span> created</span><br></pre></td></tr></table></figure>



<p>3.查看pod启动情况</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pods |grep volume-emptydir</span></span><br><span class="line">NAME                               READY   STATUS    RESTARTS   AGE</span><br><span class="line">volume<span class="literal">-emptydir</span>                    <span class="number">2</span>/<span class="number">2</span>     Running   <span class="number">0</span>          <span class="number">15</span>s</span><br></pre></td></tr></table></figure>



<p>4.查看pod描述信息</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl describe pod volume-emptydir | tail -10</span></span><br><span class="line">Events:</span><br><span class="line">  <span class="built_in">Type</span>    Reason     Age   From               Message</span><br><span class="line">  ----    ------     ----  ----               -------</span><br><span class="line">  Normal  Scheduled  <span class="number">50</span>s   default<span class="literal">-scheduler</span>  Successfully assigned default/volume<span class="literal">-emptydir</span> to k8s<span class="literal">-worker1</span></span><br><span class="line">  Normal  Pulling    <span class="number">50</span>s   kubelet            Pulling image <span class="string">&quot;centos:centos7&quot;</span></span><br><span class="line">  Normal  Pulled     <span class="number">28</span>s   kubelet            Successfully pulled image <span class="string">&quot;centos:centos7&quot;</span> <span class="keyword">in</span> <span class="number">21.544912361</span>s</span><br><span class="line">  Normal  Created    <span class="number">28</span>s   kubelet            Created container <span class="built_in">write</span></span><br><span class="line">  Normal  Started    <span class="number">28</span>s   kubelet            Started container <span class="built_in">write</span></span><br><span class="line">  Normal  Pulled     <span class="number">28</span>s   kubelet            Container image <span class="string">&quot;centos:centos7&quot;</span> already present on machine</span><br><span class="line">  Normal  Created    <span class="number">28</span>s   kubelet            Created container read</span><br><span class="line">  Normal  Started    <span class="number">28</span>s   kubelet            Started container read</span><br></pre></td></tr></table></figure>



<p>5.验证</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl logs volume-emptydir -c write</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl logs volume-emptydir -c read</span></span><br><span class="line">haha</span><br></pre></td></tr></table></figure>



<h1 id="五、本地存储卷之hostPath"><a href="#五、本地存储卷之hostPath" class="headerlink" title="五、本地存储卷之hostPath"></a>五、本地存储卷之hostPath</h1><ul>
<li><p>应用场景</p>
<p>pod内与集群节点目录映射（pod中容器想访问节点上数据，例如监控，只有监控访问到节点主机文件才能知道集群节点主机状态）</p>
</li>
<li><p>缺点</p>
<p>如果集群节点挂掉，控制器在另一个集群节点拉起容器，数据就会变成另一台集群节点主机的了（无法实现数据共享)</p>
</li>
</ul>
<p>1.创建yaml文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># vim volume-hostpath.yml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: volume<span class="literal">-hostpath</span></span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: busybox</span><br><span class="line">    image: busybox</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    command: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;echo haha &gt; /data/1.txt ; sleep 600&quot;</span>]</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: <span class="keyword">data</span></span><br><span class="line">      mountPath: /<span class="keyword">data</span></span><br><span class="line">      </span><br><span class="line">  volumes:</span><br><span class="line">  - name: <span class="keyword">data</span></span><br><span class="line">    hostPath:</span><br><span class="line">      path: /opt</span><br><span class="line">      <span class="built_in">type</span>: Directory</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.基于yaml文件创建pod</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl apply  -f volume-hostpath.yml</span></span><br><span class="line">pod/volume<span class="literal">-hostpath</span> created</span><br></pre></td></tr></table></figure>

<p>3.查看pod状态</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pods -o wide |grep volume-hostpath</span></span><br><span class="line">volume<span class="literal">-hostpath</span>     <span class="number">1</span>/<span class="number">1</span>   Running   <span class="number">0</span>    <span class="number">29</span>s     <span class="number">10.224</span>.<span class="number">194.120</span>   k8s<span class="literal">-worker1</span>   &lt;none&gt;     &lt;none&gt;</span><br><span class="line">可以看到pod是在k8s<span class="literal">-worker1</span>节点上</span><br></pre></td></tr></table></figure>

<p>4.验证pod所在机器上的挂载文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">worker1</span> ~]<span class="comment"># cat /opt/1.txt</span></span><br><span class="line">haha</span><br></pre></td></tr></table></figure>



<h1 id="六、网络存储卷之nfs"><a href="#六、网络存储卷之nfs" class="headerlink" title="六、网络存储卷之nfs"></a>六、网络存储卷之nfs</h1><p>1.搭建nfs服务器</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">nfsserver</span> ~]<span class="comment"># mkdir -p /data/nfs</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">nfsserver</span> ~]<span class="comment"># vim /etc/exports</span></span><br><span class="line">/<span class="keyword">data</span>/nfs       *(rw,no_root_squash,sync)</span><br><span class="line">[<span class="type">root</span>@<span class="type">nfsserver</span> ~]<span class="comment"># systemctl restart nfs-server</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">nfsserver</span> ~]<span class="comment"># systemctl enable nfs-server</span></span><br></pre></td></tr></table></figure>



<p>2.所有node节点安装nfs客户端相关软件包</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">worker1</span> ~]<span class="comment"># yum install nfs-utils -y</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">worker2</span> ~]<span class="comment"># yum install nfs-utils -y</span></span><br></pre></td></tr></table></figure>



<p>3.验证nfs可用性</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">node1</span> ~]<span class="comment"># showmount -e 192.168.10.129</span></span><br><span class="line">Export list <span class="keyword">for</span> <span class="number">192.168</span>.<span class="number">10.129</span>:</span><br><span class="line">/<span class="keyword">data</span>/nfs *</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">node2</span> ~]<span class="comment"># showmount -e 192.168.10.129</span></span><br><span class="line">Export list <span class="keyword">for</span> <span class="number">192.168</span>.<span class="number">10.129</span>:</span><br><span class="line">/<span class="keyword">data</span>/nfs *</span><br></pre></td></tr></table></figure>



<p>4.master节点上创建yaml文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># vim volume-nfs.yml</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: volume<span class="literal">-nfs</span></span><br><span class="line">spec:</span><br><span class="line">  replicas: <span class="number">2</span></span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:<span class="number">1.15</span><span class="literal">-alpine</span></span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: documentroot</span><br><span class="line">          mountPath: /usr/share/nginx/html</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: <span class="number">80</span></span><br><span class="line">      volumes:</span><br><span class="line">      - name: documentroot</span><br><span class="line">        nfs:</span><br><span class="line">          server: <span class="number">192.168</span>.<span class="number">10.129</span></span><br><span class="line">          path: /<span class="keyword">data</span>/nfs</span><br></pre></td></tr></table></figure>

<p>5.应用yaml创建</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment">#  kubectl apply -f volume-nfs.yml</span></span><br><span class="line">deployment.apps/nginx<span class="literal">-deployment</span> created</span><br></pre></td></tr></table></figure>



<p>6.在nfs服务器共享目录中创建验证文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">nfsserver</span> ~]<span class="comment"># echo &quot;volume-nfs&quot; &gt; /data/nfs/index.html</span></span><br></pre></td></tr></table></figure>



<p>7.验证pod</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pod |grep volume-nfs</span></span><br><span class="line">volume<span class="literal">-nfs</span><span class="literal">-649d848b57</span><span class="literal">-qg4bz</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">10</span>s</span><br><span class="line">volume<span class="literal">-nfs</span><span class="literal">-649d848b57</span><span class="literal">-wrnpn</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">10</span>s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl exec -it volume-nfs-649d848b57-qg4bz -- /bin/sh</span></span><br><span class="line">/ <span class="comment"># ls /usr/share/nginx/html/</span></span><br><span class="line">index.html</span><br><span class="line">/ <span class="comment"># cat /usr/share/nginx/html/index.html</span></span><br><span class="line">volume<span class="literal">-nfs</span>										<span class="comment"># 文件内容与nfs服务器上创建的一致</span></span><br><span class="line">/ <span class="comment"># exit</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl exec -it volume-nfs-649d848b57-wrnpn -- /bin/sh</span></span><br><span class="line">/ <span class="comment"># ls /usr/share/nginx/html/</span></span><br><span class="line">index.html</span><br><span class="line">/ <span class="comment"># cat /usr/share/nginx/html/index.html</span></span><br><span class="line">volume<span class="literal">-nfs</span>										<span class="comment"># 文件内容与nfs服务器上创建的一致</span></span><br><span class="line">/ <span class="comment"># exit</span></span><br></pre></td></tr></table></figure>





<h1 id="七、PV-持久存储卷-与PVC-持久存储卷声明"><a href="#七、PV-持久存储卷-与PVC-持久存储卷声明" class="headerlink" title="七、PV(持久存储卷)与PVC(持久存储卷声明)"></a>七、PV(持久存储卷)与PVC(持久存储卷声明)</h1><h2 id="7-1-认识pv与pvc"><a href="#7-1-认识pv与pvc" class="headerlink" title="7.1 认识pv与pvc"></a>7.1 认识pv与pvc</h2><p>kubernetes存储卷的分类太丰富了,每种类型都要写相应的接口与参数才行，这就让维护与管理难度加大。</p>
<p>persistenvolume(<strong>PV</strong>) 是配置好的一段存储(可以是任意类型的存储卷)</p>
<ul>
<li>也就是说将网络存储共享出来,配置定义成PV。</li>
</ul>
<p>PersistentVolumeClaim(<strong>PVC</strong>)是用户pod使用PV的申请请求。</p>
<ul>
<li>用户不需要关心具体的volume实现细节,只需要关心使用需求。</li>
</ul>
<h2 id="7-2-pv与pvc之间的关系"><a href="#7-2-pv与pvc之间的关系" class="headerlink" title="7.2 pv与pvc之间的关系"></a>7.2 pv与pvc之间的关系</h2><ul>
<li><p>pv提供存储资源(生产者)</p>
</li>
<li><p>pvc使用存储资源(消费者)</p>
</li>
<li><p>使用pvc绑定pv</p>
</li>
</ul>
<p><img src="/images/Kubernetes/kubernetes%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%98%E5%82%A8%E5%8D%B7%E5%8F%8A%E5%AD%98%E5%82%A8%E5%8A%A8%E6%80%81%E4%BE%9B%E7%BB%99.assets/6"></p>
<h2 id="7-3-实现nfs类型pv与pvc"><a href="#7-3-实现nfs类型pv与pvc" class="headerlink" title="7.3 实现nfs类型pv与pvc"></a>7.3 实现nfs类型pv与pvc</h2><p>1.编写创建pv的YAML文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># vim pv-nfs.yml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolume						<span class="comment"># 类型为PersistentVolume(pv)</span></span><br><span class="line">metadata:		</span><br><span class="line">  name: pv<span class="literal">-nfs</span>								<span class="comment"># 名称</span></span><br><span class="line">spec:</span><br><span class="line">  capacity:</span><br><span class="line">    storage: <span class="number">1</span><span class="built_in">Gi</span>							<span class="comment"># 大小</span></span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteMany							<span class="comment"># 访问模式</span></span><br><span class="line">  nfs:</span><br><span class="line">    path: /<span class="keyword">data</span>/nfs							<span class="comment"># nfs共享目录</span></span><br><span class="line">    server: <span class="number">192.168</span>.<span class="number">10.129</span>					<span class="comment"># nfs服务器IP</span></span><br></pre></td></tr></table></figure>

<p>访问模式有3种       参考: <a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes">https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes</a></p>
<ul>
<li>ReadWriteOnce 单节点读写挂载</li>
<li>ReadOnlyMany  多节点只读挂载</li>
<li>ReadWriteMany  多节点读写挂载</li>
</ul>
<p>cephfs存储卷3种类型都支持, 我们要实现多个nginx跨节点之间的数据共享,所以选择ReadWriteMany模式。</p>
<p>2.创建pv并验证</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl apply -f pv-nfs.yml</span></span><br><span class="line">persistentvolume/pv<span class="literal">-nfs</span> created</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pv</span></span><br><span class="line">NAME     CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS   REASON   AGE</span><br><span class="line">pv<span class="literal">-nfs</span>   <span class="number">1</span><span class="built_in">Gi</span>        RWX            Retain           Available                                   <span class="number">81</span>s</span><br></pre></td></tr></table></figure>

<p>说明: </p>
<ul>
<li>RWX为ReadWriteMany的简写</li>
<li>Retain是回收策略  <ul>
<li>Retain表示需要不使用了需要手动回收</li>
<li>参考: <a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#reclaim-policy">https://kubernetes.io/docs/concepts/storage/persistent-volumes/#reclaim-policy</a></li>
</ul>
</li>
</ul>
<p>3.编写创建pvc的YAML文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># vim pvc-nfs.yml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolumeClaim				<span class="comment"># 类型为PersistentVolumeClaim(pvc)</span></span><br><span class="line">metadata:</span><br><span class="line">  name: pvc<span class="literal">-nfs</span>							<span class="comment"># pvc的名称</span></span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteMany						<span class="comment"># 访问模式</span></span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: <span class="number">1</span><span class="built_in">Gi</span>						<span class="comment"># 大小要与pv的大小保持一致</span></span><br></pre></td></tr></table></figure>



<p>4.创建pvc并验证</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl apply -f pvc-nfs.yml</span></span><br><span class="line">persistentvolumeclaim/pvc<span class="literal">-nfs</span> created</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pvc</span></span><br><span class="line">NAME      STATUS   VOLUME   CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class="line">pvc<span class="literal">-nfs</span>   Bound    pv<span class="literal">-nfs</span>   <span class="number">1</span><span class="built_in">Gi</span>        RWX                           <span class="number">38</span>s</span><br></pre></td></tr></table></figure>

<p><strong>注意:</strong> STATUS必须为Bound状态(Bound状态表示pvc与pv绑定OK)</p>
<p>5.编写deployment的YMAL</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># vim deploy-nginx-nfs.yml</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: <span class="built_in">deploy-nginx</span><span class="literal">-nfs</span></span><br><span class="line">spec:</span><br><span class="line">  replicas: <span class="number">2</span></span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:<span class="number">1.15</span><span class="literal">-alpine</span></span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: <span class="number">80</span></span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: www</span><br><span class="line">          mountPath: /usr/share/nginx/html</span><br><span class="line">      volumes:</span><br><span class="line">      - name: www</span><br><span class="line">        persistentVolumeClaim:</span><br><span class="line">          claimName: pvc<span class="literal">-nfs</span></span><br></pre></td></tr></table></figure>

<p>6.应用YAML创建deploment</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl apply -f deploy-nginx-nfs.yml</span></span><br><span class="line">deployment.apps/<span class="built_in">deploy-nginx</span><span class="literal">-nfs</span> created</span><br></pre></td></tr></table></figure>

<p>7.验证pod</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pod |grep deploy-nginx-nfs</span></span><br><span class="line"><span class="built_in">deploy-nginx</span><span class="literal">-nfs</span><span class="literal">-6f9bc4546c</span><span class="literal">-gbzcl</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">1</span>m46s</span><br><span class="line"><span class="built_in">deploy-nginx</span><span class="literal">-nfs</span><span class="literal">-6f9bc4546c</span><span class="literal">-hp4cv</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">1</span>m46s</span><br></pre></td></tr></table></figure>

<p>8.验证pod内卷的数据</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl exec -it deploy-nginx-nfs-6f9bc4546c-gbzcl -- /bin/sh</span></span><br><span class="line">/ <span class="comment"># ls /usr/share/nginx/html/</span></span><br><span class="line">index.html</span><br><span class="line">/ <span class="comment"># cat /usr/share/nginx/html/index.html</span></span><br><span class="line">volume<span class="literal">-nfs</span></span><br><span class="line">/ <span class="comment"># exit</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl exec -it deploy-nginx-nfs-6f9bc4546c-hp4cv -- /bin/sh</span></span><br><span class="line">/ <span class="comment"># ls /usr/share/nginx/html/</span></span><br><span class="line">index.html</span><br><span class="line">/ <span class="comment"># cat /usr/share/nginx/html/index.html</span></span><br><span class="line">volume<span class="literal">-nfs</span></span><br><span class="line">/ <span class="comment"># exit</span></span><br></pre></td></tr></table></figure>



<h2 id="7-4-subpath使用"><a href="#7-4-subpath使用" class="headerlink" title="7.4 subpath使用"></a>7.4 subpath使用</h2><p>subpath是指可以把相同目录中不同子目录挂载到容器中不同的目录中使用的方法。以下通过案例演示：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">编辑文件</span><br><span class="line"><span class="comment"># vim 01_create_pod.yaml</span></span><br><span class="line"></span><br><span class="line">编辑后查看，保持内容一致即可</span><br><span class="line"><span class="comment"># cat 01_create_pod.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: pod1</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: c1</span><br><span class="line">    image: busybox</span><br><span class="line">    command: [<span class="string">&quot;/bin/sleep&quot;</span>,<span class="string">&quot;100000&quot;</span>]</span><br><span class="line">    volumeMounts:</span><br><span class="line">      - name: <span class="keyword">data</span></span><br><span class="line">        mountPath: /opt/data1</span><br><span class="line">        subPath: data1</span><br><span class="line">      - name: <span class="keyword">data</span></span><br><span class="line">        mountPath: /opt/data2</span><br><span class="line">        subPath: data2</span><br><span class="line">  volumes:</span><br><span class="line">    - name: <span class="keyword">data</span></span><br><span class="line">      persistentVolumeClaim:</span><br><span class="line">        claimName: pvc<span class="literal">-nfs</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">执行文件，创建pod</span><br><span class="line"><span class="comment"># kubectl apply -f 01_create_pod.yaml</span></span><br><span class="line">pod/pod1 created</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">编辑文件</span><br><span class="line"><span class="comment"># vim 02_create_pvc.yaml</span></span><br><span class="line"></span><br><span class="line">查看编辑后文件，保持内容一致即可</span><br><span class="line"><span class="comment"># cat 02_create_pvc.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolumeClaim                             <span class="comment"># 类型为PersistentVolumeClaim(pvc)</span></span><br><span class="line">metadata:</span><br><span class="line">  name: pvc<span class="literal">-nfs</span>                                                 <span class="comment"># pvc的名称</span></span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteMany                                             <span class="comment"># 访问模式</span></span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: <span class="number">1</span><span class="built_in">Gi</span>                                              <span class="comment"># 大小要与pv的大小保持一致</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">执行文件，创建pvc</span><br><span class="line"><span class="comment"># kubectl apply  -f 02_create_pvc.yaml</span></span><br><span class="line">persistentvolumeclaim/pvc<span class="literal">-nfs</span> created</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">编辑文件</span><br><span class="line"><span class="comment"># vim 03_create_pv_nfs.yaml</span></span><br><span class="line"></span><br><span class="line">查看编辑后文件，保持内容一致，注意修改nfs服务器及其共享的目录</span><br><span class="line"><span class="comment"># cat 03_create_pv_nfs.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolume                                          <span class="comment"># 类型为PersistentVolume(pv)</span></span><br><span class="line">metadata:</span><br><span class="line">  name: pv<span class="literal">-nfs</span>                                                          <span class="comment"># 名称</span></span><br><span class="line">spec:</span><br><span class="line">  capacity:</span><br><span class="line">    storage: <span class="number">1</span><span class="built_in">Gi</span>                                                        <span class="comment"># 大小</span></span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteMany                                              <span class="comment"># 访问模式</span></span><br><span class="line">  nfs:</span><br><span class="line">    path: /sdb                                                     <span class="comment"># nfs共享目录</span></span><br><span class="line">    server: <span class="number">192.168</span>.<span class="number">10.214</span></span><br></pre></td></tr></table></figure>





<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">执行文件，创建pv</span><br><span class="line"><span class="comment"># kubectl apply -f 03_create_pv_nfs.yaml</span></span><br><span class="line">persistentvolume/pv<span class="literal">-nfs</span> created</span><br></pre></td></tr></table></figure>





<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">在nfs服务器查看pod中目录是否自动添加到nfs服务器/sdb目录中</span><br><span class="line">[<span class="type">root</span>@<span class="type">nfsserver</span> ~]<span class="comment"># ls /sdb</span></span><br><span class="line">data1  data2</span><br></pre></td></tr></table></figure>



<h1 id="八、存储的动态供给"><a href="#八、存储的动态供给" class="headerlink" title="八、存储的动态供给"></a>八、存储的动态供给</h1><h2 id="8-1-什么是动态供给"><a href="#8-1-什么是动态供给" class="headerlink" title="8.1 什么是动态供给"></a>8.1 什么是动态供给</h2><p>每次使用存储要先创建pv, 再创建pvc，真累!   所以我们可以实现使用存储的动态供给特性。</p>
<ul>
<li>静态存储需要用户申请PVC时保证容量和读写类型与预置PV的容量及读写类型完全匹配, 而动态存储则无需如此.</li>
<li>管理员无需预先创建大量的PV作为存储资源</li>
</ul>
<p>Kubernetes从1.4版起引入了一个新的资源对象StorageClass，可用于将存储资源定义为具有显著特性的类（Class）而不是具体</p>
<p>的PV。用户通过PVC直接向意向的类别发出申请，匹配由管理员事先创建的PV，或者由其按需为用户动态创建PV，这样就免去</p>
<p>了需要先创建PV的过程。</p>
<h2 id="8-2-使用NFS文件系统创建存储动态供给"><a href="#8-2-使用NFS文件系统创建存储动态供给" class="headerlink" title="8.2 使用NFS文件系统创建存储动态供给"></a>8.2 使用NFS文件系统创建存储动态供给</h2><p>PV对存储系统的支持可通过其插件来实现，目前，Kubernetes支持如下类型的插件。</p>
<p>官方地址：<a href="https://kubernetes.io/docs/concepts/storage/storage-classes/">https://kubernetes.io/docs/concepts/storage/storage-classes/</a></p>
<p>官方插件是不支持NFS动态供给的，但是我们可以用第三方的插件来实现</p>
<p>第三方插件地址: <a href="https://github.com/kubernetes-retired/external-storage">https://github.com/kubernetes-retired/external-storage</a></p>
<p><img src="/images/Kubernetes/kubernetes%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%98%E5%82%A8%E5%8D%B7%E5%8F%8A%E5%AD%98%E5%82%A8%E5%8A%A8%E6%80%81%E4%BE%9B%E7%BB%99.assets/1" alt="1604838285045"></p>
<p><img src="/images/Kubernetes/kubernetes%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%98%E5%82%A8%E5%8D%B7%E5%8F%8A%E5%AD%98%E5%82%A8%E5%8A%A8%E6%80%81%E4%BE%9B%E7%BB%99.assets/2" alt="1604838445318"></p>
<p><img src="/images/Kubernetes/kubernetes%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%98%E5%82%A8%E5%8D%B7%E5%8F%8A%E5%AD%98%E5%82%A8%E5%8A%A8%E6%80%81%E4%BE%9B%E7%BB%99.assets/3" alt="1604838485281"></p>
<p><img src="/images/Kubernetes/kubernetes%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%98%E5%82%A8%E5%8D%B7%E5%8F%8A%E5%AD%98%E5%82%A8%E5%8A%A8%E6%80%81%E4%BE%9B%E7%BB%99.assets/4" alt="1604838524969"></p>
<p>1.下载并创建storageclass</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># wget https://raw.githubusercontent.com/kubernetes-sigs/nfs-subdir-external-provisioner/master/deploy/class.yaml</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># mv class.yaml storageclass-nfs.yml</span></span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># cat storageclass-nfs.yml</span></span><br><span class="line">apiVersion: storage.k8s.io/v1</span><br><span class="line">kind: StorageClass				<span class="comment"># 类型</span></span><br><span class="line">metadata:</span><br><span class="line">  name: nfs<span class="literal">-client</span>		<span class="comment"># 名称,要使用就需要调用此名称</span></span><br><span class="line">provisioner: k8s<span class="literal">-sigs</span>.io/nfs<span class="literal">-subdir</span><span class="literal">-external</span><span class="literal">-provisioner</span> 	<span class="comment"># 动态供给插件</span></span><br><span class="line">parameters:</span><br><span class="line">  archiveOnDelete: <span class="string">&quot;false&quot;</span>		<span class="comment"># 删除数据时是否存档，false表示不存档，true表示存档</span></span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl apply -f storageclass-nfs.yml</span></span><br><span class="line">storageclass.storage.k8s.io/managed<span class="literal">-nfs</span><span class="literal">-storage</span> created</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get storageclass</span></span><br><span class="line">NAME         PROVISIONER                                   RECLAIMPOLICY   VOLUMEBINDINGMODE   ALLOWVOLUMEEXPANSION   AGE</span><br><span class="line">nfs<span class="literal">-client</span>   k8s<span class="literal">-sigs</span>.io/nfs<span class="literal">-subdir</span><span class="literal">-external</span><span class="literal">-provisioner</span>   Delete          Immediate           false                  <span class="number">10</span>s</span><br><span class="line"></span><br><span class="line"><span class="comment"># RECLAIMPOLICY pv回收策略，pod或pvc被删除后，pv是否删除还是保留。</span></span><br><span class="line"><span class="comment"># VOLUMEBINDINGMODE Immediate 模式下PVC与PV立即绑定，主要是不等待相关Pod调度完成，不关心其运行节点，直接完成绑定。相反的 WaitForFirstConsumer模式下需要等待Pod调度完成后进行PV绑定。</span></span><br><span class="line"><span class="comment"># ALLOWVOLUMEEXPANSION pvc扩容</span></span><br></pre></td></tr></table></figure>



<p>2.下载并创建rbac</p>
<p>因为storage自动创建pv需要经过kube-apiserver，所以需要授权。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># wget https://raw.githubusercontent.com/kubernetes-sigs/nfs-subdir-external-provisioner/master/deploy/rbac.yaml</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># mv rbac.yaml storageclass-nfs-rbac.yaml</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># cat storageclass-nfs-rbac.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: nfs<span class="literal">-client</span><span class="literal">-provisioner</span></span><br><span class="line">  <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line">  namespace: default</span><br><span class="line">---</span><br><span class="line">kind: ClusterRole</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: nfs<span class="literal">-client</span><span class="literal">-provisioner</span><span class="literal">-runner</span></span><br><span class="line">rules:</span><br><span class="line">  - apiGroups: [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    resources: [<span class="string">&quot;persistentvolumes&quot;</span>]</span><br><span class="line">    verbs: [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;create&quot;</span>, <span class="string">&quot;delete&quot;</span>]</span><br><span class="line">  - apiGroups: [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    resources: [<span class="string">&quot;persistentvolumeclaims&quot;</span>]</span><br><span class="line">    verbs: [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;update&quot;</span>]</span><br><span class="line">  - apiGroups: [<span class="string">&quot;storage.k8s.io&quot;</span>]</span><br><span class="line">    resources: [<span class="string">&quot;storageclasses&quot;</span>]</span><br><span class="line">    verbs: [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line">  - apiGroups: [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    resources: [<span class="string">&quot;events&quot;</span>]</span><br><span class="line">    verbs: [<span class="string">&quot;create&quot;</span>, <span class="string">&quot;update&quot;</span>, <span class="string">&quot;patch&quot;</span>]</span><br><span class="line">---</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: run<span class="literal">-nfs</span><span class="literal">-client</span><span class="literal">-provisioner</span></span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: nfs<span class="literal">-client</span><span class="literal">-provisioner</span></span><br><span class="line">    <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line">    namespace: default</span><br><span class="line">roleRef:</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: nfs<span class="literal">-client</span><span class="literal">-provisioner</span><span class="literal">-runner</span></span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">---</span><br><span class="line">kind: Role</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: leader<span class="literal">-locking</span><span class="literal">-nfs</span><span class="literal">-client</span><span class="literal">-provisioner</span></span><br><span class="line">  <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line">  namespace: default</span><br><span class="line">rules:</span><br><span class="line">  - apiGroups: [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    resources: [<span class="string">&quot;endpoints&quot;</span>]</span><br><span class="line">    verbs: [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;create&quot;</span>, <span class="string">&quot;update&quot;</span>, <span class="string">&quot;patch&quot;</span>]</span><br><span class="line">---</span><br><span class="line">kind: RoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: leader<span class="literal">-locking</span><span class="literal">-nfs</span><span class="literal">-client</span><span class="literal">-provisioner</span></span><br><span class="line">  <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line">  namespace: default</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: nfs<span class="literal">-client</span><span class="literal">-provisioner</span></span><br><span class="line">    <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line">    namespace: default</span><br><span class="line">roleRef:</span><br><span class="line">  kind: Role</span><br><span class="line">  name: leader<span class="literal">-locking</span><span class="literal">-nfs</span><span class="literal">-client</span><span class="literal">-provisioner</span></span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl apply -f rbac.yaml</span></span><br><span class="line">serviceaccount/nfs<span class="literal">-client</span><span class="literal">-provisioner</span> created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/nfs<span class="literal">-client</span><span class="literal">-provisioner</span><span class="literal">-runner</span> created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/run<span class="literal">-nfs</span><span class="literal">-client</span><span class="literal">-provisioner</span> created</span><br><span class="line">role.rbac.authorization.k8s.io/leader<span class="literal">-locking</span><span class="literal">-nfs</span><span class="literal">-client</span><span class="literal">-provisioner</span> created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/leader<span class="literal">-locking</span><span class="literal">-nfs</span><span class="literal">-client</span><span class="literal">-provisioner</span> created</span><br></pre></td></tr></table></figure>



<p>3.创建动态供给的deployment</p>
<p>需要一个deployment来专门实现pv与pvc的自动创建</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># vim deploy-nfs-client-provisioner.yml</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nfs<span class="literal">-client</span><span class="literal">-provisioner</span></span><br><span class="line">spec:</span><br><span class="line">  replicas: <span class="number">1</span></span><br><span class="line">  strategy:</span><br><span class="line">    <span class="built_in">type</span>: Recreate</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nfs<span class="literal">-client</span><span class="literal">-provisioner</span></span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nfs<span class="literal">-client</span><span class="literal">-provisioner</span></span><br><span class="line">    spec:</span><br><span class="line">      serviceAccount: nfs<span class="literal">-client</span><span class="literal">-provisioner</span></span><br><span class="line">      containers:</span><br><span class="line">        - name: nfs<span class="literal">-client</span><span class="literal">-provisioner</span></span><br><span class="line">          image: registry.cn<span class="literal">-beijing</span>.aliyuncs.com/pylixm/nfs<span class="literal">-subdir</span><span class="literal">-external</span><span class="literal">-provisioner</span>:v4.<span class="number">0.0</span></span><br><span class="line">          volumeMounts:</span><br><span class="line">            - name: nfs<span class="literal">-client</span><span class="literal">-root</span></span><br><span class="line">              mountPath: /persistentvolumes</span><br><span class="line">          env:</span><br><span class="line">            - name: PROVISIONER_NAME</span><br><span class="line">              value: k8s<span class="literal">-sigs</span>.io/nfs<span class="literal">-subdir</span><span class="literal">-external</span><span class="literal">-provisioner</span></span><br><span class="line">            - name: NFS_SERVER</span><br><span class="line">              value: <span class="number">192.168</span>.<span class="number">10.129</span></span><br><span class="line">            - name: NFS_PATH</span><br><span class="line">              value: /<span class="keyword">data</span>/nfs</span><br><span class="line">      volumes:</span><br><span class="line">        - name: nfs<span class="literal">-client</span><span class="literal">-root</span></span><br><span class="line">          nfs:</span><br><span class="line">            server: <span class="number">192.168</span>.<span class="number">10.129</span></span><br><span class="line">            path: /<span class="keyword">data</span>/nfs</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl apply -f deploy-nfs-client-provisioner.yml</span></span><br><span class="line">deployment.apps/nfs<span class="literal">-client</span><span class="literal">-provisioner</span> created</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> ~]<span class="comment"># kubectl get pods |grep nfs-client-provisioner</span></span><br><span class="line">nfs<span class="literal">-client</span><span class="literal">-provisioner</span><span class="literal">-5b5ddcd6c8</span><span class="literal">-b6zbq</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">34</span>s</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">测试存储动态供给是否可用</span><br><span class="line"></span><br><span class="line"><span class="comment"># vim nginx-sc.yaml</span></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: <span class="number">80</span></span><br><span class="line">    name: web</span><br><span class="line">  clusterIP: None</span><br><span class="line">  selector:</span><br><span class="line">    app: nginx</span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: StatefulSet</span><br><span class="line">metadata:</span><br><span class="line">  name: web</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  serviceName: <span class="string">&quot;nginx&quot;</span></span><br><span class="line">  replicas: <span class="number">2</span></span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      imagePullSecrets:</span><br><span class="line">      - name: huoban<span class="literal">-harbor</span></span><br><span class="line">      terminationGracePeriodSeconds: <span class="number">10</span></span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:latest</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: <span class="number">80</span></span><br><span class="line">          name: web</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: www</span><br><span class="line">          mountPath: /usr/share/nginx/html</span><br><span class="line">  volumeClaimTemplates:</span><br><span class="line">  - metadata:</span><br><span class="line">      name: www</span><br><span class="line">    spec:</span><br><span class="line">      accessModes: [ <span class="string">&quot;ReadWriteOnce&quot;</span> ]</span><br><span class="line">      storageClassName: <span class="string">&quot;nfs-client&quot;</span></span><br><span class="line">      resources:</span><br><span class="line">        requests:</span><br><span class="line">          storage: <span class="number">1</span><span class="built_in">Gi</span></span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master1</span> <span class="type">nfs</span>]<span class="comment"># kubectl get pods</span></span><br><span class="line">NAME                                     READY   STATUS    RESTARTS   AGE</span><br><span class="line">nfs<span class="literal">-client</span><span class="literal">-provisioner</span><span class="literal">-9c988bc46</span><span class="literal">-pr55n</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">95</span>s</span><br><span class="line">web<span class="literal">-0</span>                                    <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">95</span>s</span><br><span class="line">web<span class="literal">-1</span>                                    <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">61</span>s</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">nfsserver</span> ~]<span class="comment"># ls /data/nfs/</span></span><br><span class="line">default<span class="literal">-www</span><span class="literal">-web</span><span class="literal">-0</span><span class="literal">-pvc</span><span class="literal">-c4f7aeb0</span><span class="literal">-6ee9</span><span class="literal">-447f</span><span class="literal">-a893</span><span class="literal">-821774b8d11f</span>  default<span class="literal">-www</span><span class="literal">-web</span><span class="literal">-1</span><span class="literal">-pvc</span><span class="literal">-8b8a4d3d</span><span class="literal">-f75f</span><span class="literal">-43af</span><span class="literal">-8387</span><span class="literal">-b7073d07ec01</span> </span><br></pre></td></tr></table></figure>



<p><strong>扩展：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">批量下载文件：</span><br><span class="line"><span class="comment"># for file in class.yaml deployment.yaml rbac.yaml  ; do wget https://raw.githubusercontent.com/kubernetes-incubator/external-storage/master/nfs-client/deploy/$file ; done</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>中心化架构 vs 去中心化架构</title>
    <url>/2024/10/02/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E4%B8%AD%E5%BF%83%E5%8C%96%E6%9E%B6%E6%9E%84%20vs%20%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<p>中心化架构与去中心化架构是两种常见的系统架构，每种架构都有其特定的适用场景、优点和缺点。</p>
<p>一、中心化架构</p>
<p><img src="/images/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E4%B8%AD%E5%BF%83%E5%8C%96%E6%9E%B6%E6%9E%84vs%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E6%9E%B6%E6%9E%84/2024-10-02-1.png" alt="image-2024-10-02-1"></p>
<ol>
<li> 适用场景： </li>
</ol>
<ul>
<li><ul>
<li>需要高度控制和管理的环境：如金融系统、大型企业、政府机构等。</li>
<li>对数据一致性和安全性要求高的场景：如银行交易系统、医疗记录系统等。</li>
</ul>
</li>
</ul>
<ol start="2">
<li> 优点： </li>
</ol>
<ul>
<li><ul>
<li>集中控制：便于管理和监控，有利于数据的安全和一致性。</li>
<li>高效率：由于资源集中，可以实现更高效的资源利用和任务处理。</li>
<li>技术成熟：中心化架构已经有很长的发展历史，技术成熟，易于实施和维护。</li>
</ul>
</li>
</ul>
<ol start="3">
<li> 缺点： </li>
</ol>
<ul>
<li><ul>
<li>单点故障：如果中心节点出现问题，整个系统可能会瘫痪。</li>
<li>隐私风险：数据集中在中心节点，可能面临更高的隐私泄露风险。</li>
<li>可扩展性差：随着系统规模的扩大，中心节点的压力会越来越大，可能导致性能瓶颈。</li>
</ul>
</li>
</ul>
<p>二、去中心化架构</p>
<p><img src="/images/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E4%B8%AD%E5%BF%83%E5%8C%96%E6%9E%B6%E6%9E%84vs%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E6%9E%B6%E6%9E%84/2024-10-02-2.png" alt="image-2024-10-02-2"></p>
<ol>
<li> 适用场景： </li>
</ol>
<ul>
<li><ul>
<li>对抗审查和抗攻击性要求高的场景：如加密货币、区块链等。</li>
<li>需要高度自治和分布式的环境：如P2P网络、区块链应用等。</li>
</ul>
</li>
</ul>
<ol start="2">
<li> 优点： </li>
</ol>
<ul>
<li><ul>
<li>抗审查和抗攻击：由于没有中心节点，去中心化架构更能抵抗审查和攻击。</li>
<li>分布式：资源和数据分散在网络中，提高了系统的可扩展性和可靠性。</li>
<li>隐私保护：数据在网络中分布式存储，有利于保护用户隐私。</li>
</ul>
</li>
</ul>
<ol start="3">
<li>缺点： </li>
</ol>
<ul>
<li><ul>
<li>管理困难：由于没有中心节点，对网络的管理和监控更加困难。</li>
<li>技术挑战：去中心化架构需要解决数据一致性、安全性等问题，技术实现更为复杂。</li>
<li>性能问题：在某些情况下，去中心化架构可能无法达到中心化架构那样的高性能。</li>
</ul>
</li>
</ul>
<h1 id="ShardingJdbc-vs-ShardingProxy"><a href="#ShardingJdbc-vs-ShardingProxy" class="headerlink" title="ShardingJdbc vs ShardingProxy"></a>ShardingJdbc vs ShardingProxy</h1><p>ShardingJdbc与ShardingProxy的区别主要体现在以下三个方面：</p>
<p><img src="/images/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E4%B8%AD%E5%BF%83%E5%8C%96%E6%9E%B6%E6%9E%84vs%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E6%9E%B6%E6%9E%84/2024-10-02-3.png" alt="image-2024-10-02-3"></p>
<p><img src="/images/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E4%B8%AD%E5%BF%83%E5%8C%96%E6%9E%B6%E6%9E%84vs%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E6%9E%B6%E6%9E%84/2024-10-02-4.png" alt="image-2024-10-02-4"></p>
<ol>
<li> 架构：ShardingJdbc是一个轻量级的Java框架，以jar包的形式提供服务，无中心化，与应用程序集成在一起，无需额外部署和依赖。而ShardingProxy是一个独立的应用程序，支持多种数据源分片的配置和管理，相当于数据库代理，需要通过独立进程部署和启动。 </li>
<li> 配置：ShardingJdbc的配置比较灵活，支持基于Java、YAML、Spring命名空间和Spring Boot的配置方式，可以根据实际业务场景进行定制化的分片策略配置。而ShardingProxy则采用YAML文件进行分片配置，配置相对固定，可以便捷地进行数据源的增加、删除和修改。 </li>
<li> 兼容性：ShardingJdbc由于与应用程序集成在一起，可以更好地兼容各种Java框架和ORM（对象关系映射）框架，如Spring、MyBatis等。而ShardingProxy则可以兼容各种数据库协议和客户端，如MySQL、PostgreSQL等。 </li>
<li> 扩展性：ShardingJdbc的扩展性相对较弱，由于其与应用程序紧密集成，如果需要添加新的分片策略或功能，需要修改和重新编译应用程序。而ShardingProxy的扩展性较强，可以通过插件机制进行功能扩展和定制。 </li>
<li> 性能：由于ShardingJdbc与应用程序集成在一起，减少了网络通信的开销，因此在某些场景下性能可能略优于ShardingProxy。而ShardingProxy作为一个独立的应用程序，需要处理更多的网络请求和数据传输，性能可能稍逊于ShardingJdbc。</li>
</ol>
]]></content>
      <tags>
        <tag>架构设计</tag>
      </tags>
  </entry>
  <entry>
    <title>海量数据迁移解决方案</title>
    <url>/2025/01/10/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/BitMap%E7%99%BE%E4%BA%BF%E7%BA%A7%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB%E6%9C%80%E7%BB%88%E4%B8%80%E8%87%B4%E6%80%A7/</url>
    <content><![CDATA[<h1 id="一、海量数据离线迁移会遇到哪些问题"><a href="#一、海量数据离线迁移会遇到哪些问题" class="headerlink" title="一、海量数据离线迁移会遇到哪些问题"></a>一、海量数据离线迁移会遇到哪些问题</h1><p>海量数据迁移是一项复杂且具有挑战性的任务，它在企业信息化建设、云服务迁移、数据中心整合等场景中极为常见。这一过程中，组织和技术团队会面临多种挑战，以及需要采取相应的策略来确保数据的完整、安全和高效迁移。以下是一些主要挑战及解决方案：</p>
<ol>
<li>数据量巨大与迁移速度</li>
<li>数据一致性与完整性</li>
<li>业务中断风险，要支持回滚</li>
<li>系统兼容性与格式转换</li>
</ol>
<p><img src="/images/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/2025-01-10-3.png" alt="image-2025-01-10-3"></p>
<p><img src="/images/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/2025-01-10-4.png" alt="image-2025-01-10-4"></p>
<p><img src="/images/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/2025-01-10-5.png" alt="image-2025-01-10-5"></p>
<p><img src="/images/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/2025-01-10-6.png" alt="image-2025-01-10-6"></p>
<h1 id="二、BitMap亿级数据迁移最终一致性"><a href="#二、BitMap亿级数据迁移最终一致性" class="headerlink" title="二、BitMap亿级数据迁移最终一致性"></a>二、BitMap亿级数据迁移最终一致性</h1><p><img src="/images/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/2025-01-10-1.png" alt="image-2025-01-10-1"></p>
<h3 id="1-生成执行计划"><a href="#1-生成执行计划" class="headerlink" title="1.生成执行计划"></a>1.生成执行计划</h3><p>50亿数据,上下游在Redis按执行计划创建多个Redis Key</p>
<table>
<thead>
<tr>
<th>id区间</th>
<th>source-key <bitmap></bitmap></th>
<th>target-key<bitmap></bitmap></th>
</tr>
</thead>
<tbody><tr>
<td>0-1亿(不含）</td>
<td>source-表名-s0e1</td>
<td>target-表名-s0e1</td>
</tr>
<tr>
<td>1亿-2亿（不含）</td>
<td>source-表名-s1e2</td>
<td>target-表名-s1e2</td>
</tr>
<tr>
<td>…</td>
<td></td>
<td></td>
</tr>
<tr>
<td>49亿-50亿（不含）</td>
<td>source-表名-s49e50</td>
<td>target-表名-s49e50</td>
</tr>
</tbody></table>
<p>任务可串行执行，也可并行执行，具体看内存和处理速度</p>
<h3 id="2-开始执行"><a href="#2-开始执行" class="headerlink" title="2.开始执行"></a>2.开始执行</h3><p>key：source-表名-s0e1-state: pending|executing|finished<br>key：source-表名-s0e1-starttime：时间戳<br>key：source-表名-s0e1<br>0    1    2    3    4    5    6    7    8    9    10    11    …<br>0    1    1    0    0    1    0    0    0    1    0    0<br>target-表名-s0e1<br>0    1    2    3    4    5    6    7    8    9    10    11    …<br>0    1    1    0    0    1    0    0    0    0    0    0<br>10亿个数据，每条数据占用1位，需要大约119.21MB * 2。</p>
<h3 id="3-任务调度扫描"><a href="#3-任务调度扫描" class="headerlink" title="3.任务调度扫描"></a>3.任务调度扫描</h3><p>任务调度每n分钟扫描一次Redis所有finished标记状态：执行异或操作</p>
<p><img src="/images/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/2025-01-10-2.png" alt="image-2025-01-10-2"></p>
<p>“source-表名-s0e1”  XOR “target-表名-s0e1”<br>0    1    2    3    4    5    6    7    8    9    10    11    …<br>0    0    0    0    0    0    0    0    0    1    0    0<br>生成结果<br>0+9号id未同步完成<br>产生警报<br>“当前时间” - “source-表名-s0e1-starttime” &gt; 1小时  后仍然异或存在差异，将结果发送到管理员邮箱，人工补录</p>
]]></content>
      <tags>
        <tag>架构设计</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库与缓存保障一致性的五种做法</title>
    <url>/2024/07/08/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E7%BC%93%E5%AD%98%E4%BF%9D%E9%9A%9C%E4%B8%80%E8%87%B4%E6%80%A7%E7%9A%84%E4%BA%94%E7%A7%8D%E5%81%9A%E6%B3%95/</url>
    <content><![CDATA[<p>在分布式系统中，确保数据的一致性是一项关键任务。特别是当你使用像Redis这样的缓存系统和MySQL这样的关系型数据库时，如何在这两者之间保持数据一致性是一个复杂的问题。以下是五种常见的实现方法：同步双写、基于MQ异步多写、定时任务、闪电缓存、Binlog监听。本文将详细介绍每种方案的原理、优缺点以及适用场景。</p>
<h3 id="一、同步双写"><a href="#一、同步双写" class="headerlink" title="一、同步双写"></a>一、同步双写</h3><p><img src="/images/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E7%BC%93%E5%AD%98%E4%BF%9D%E9%9A%9C%E4%B8%80%E8%87%B4%E6%80%A7%E7%9A%84%E4%BA%94%E7%A7%8D%E5%81%9A%E6%B3%95/2024-07-08-1.png" alt="image-2024-07-08-1"></p>
<p>1.1 原理<br>同步双写是指在进行数据更新时，同时更新MySQL和Redis。即，在操作MySQL的同时，立刻进行Redis的更新。这种方式可以确保两者之间的数据始终保持一致。<br>1.2 实现方式<br>假设我们有一个更新用户信息的操作，在同步双写中，流程如下：</p>
<ol>
<li>更新MySQL数据库中的用户信息。</li>
<li>若MySQL更新成功，则更新Redis中的用户缓存。</li>
</ol>
<p>1.3 优点<br>● 数据一致性高：由于是在同一个事务中完成对MySQL和Redis的更新，因此可以确保数据的一致性。<br>● 简单易实现：同步双写的逻辑相对简单，容易实现。</p>
<p>1.4 缺点<br>● 性能影响大：同步双写要求在每次写操作中都要进行两次写操作（一次是MySQL，一次是Redis），这会导致写操作的延迟增加，影响系统性能。<br>● 故障处理复杂：在更新过程中，如果Redis更新失败，需要进行回滚操作，否则会导致数据不一致。<br>● 扩展性较差：随着系统规模的扩大，同步双写的性能瓶颈会愈加明显。</p>
<p>1.5 适用场景<br>同步双写适用于对数据一致性要求极高且写操作频率不高的系统。对于读操作频繁但写操作较少的场景，同步双写能够确保较高的一致性。</p>
<h3 id="二、基于MQ异步多写"><a href="#二、基于MQ异步多写" class="headerlink" title="二、基于MQ异步多写"></a>二、基于MQ异步多写</h3><p><img src="/images/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E7%BC%93%E5%AD%98%E4%BF%9D%E9%9A%9C%E4%B8%80%E8%87%B4%E6%80%A7%E7%9A%84%E4%BA%94%E7%A7%8D%E5%81%9A%E6%B3%95/2024-07-08-2.png" alt="image-2024-07-08-2"></p>
<p>2.1 原理<br>基于消息队列（MQ）的异步多写是指在更新MySQL后，通过消息队列将更新信息传递给处理Redis更新的异步任务。这样，MySQL和Redis的更新在时间上不再同步，但通过消息队列的保证，最终会达到一致性。<br>2.2 实现方式<br>假设我们有一个更新用户信息的操作，在基于MQ异步多写中，流程如下：</p>
<ol>
<li>更新MySQL数据库中的用户信息。</li>
<li>若MySQL更新成功，将更新信息发送到消息队列。</li>
<li>消费者从消息队列中读取消息，并更新Redis中的用户缓存。</li>
</ol>
<p>2.3 优点<br>● 性能影响小：因为Redis的更新是异步进行的，不会阻塞主流程，降低了写操作的延迟。<br>● 故障处理相对简单：如果Redis更新失败，可以通过重试机制从消息队列重新获取消息并重试更新。<br>● 扩展性好：消息队列天然具有高并发和高扩展性的特点，可以有效应对大规模的更新请求。</p>
<p>2.4 缺点<br>● 最终一致性：由于Redis的更新是异步的，因此在某个时间点上，Redis中的数据可能与MySQL不一致。<br>● 复杂性增加：需要引入消息队列系统，并处理消息的生产、消费、重试等逻辑，系统复杂性增加。</p>
<p>2.5 适用场景<br>基于MQ异步多写适用于对最终一致性要求较高的系统，尤其是在高并发场景下。对于读操作频繁且写操作频繁的系统，这种方式可以有效提高性能和扩展性。</p>
<h3 id="三、定时任务"><a href="#三、定时任务" class="headerlink" title="三、定时任务"></a>三、定时任务</h3><p><img src="/images/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E7%BC%93%E5%AD%98%E4%BF%9D%E9%9A%9C%E4%B8%80%E8%87%B4%E6%80%A7%E7%9A%84%E4%BA%94%E7%A7%8D%E5%81%9A%E6%B3%95/2024-07-08-3.png" alt="image-2024-07-08-3"></p>
<p>3.1 原理<br>定时任务方案是指定期从MySQL中读取数据，并更新Redis缓存。这种方式通常用于那些数据变化频率不高且对实时性要求不高的场景。<br>3.2 实现方式<br>假设我们有一个用户数据的定期同步操作，在定时任务方案中，流程如下：</p>
<ol>
<li>设定一个定时任务，定期从MySQL中读取用户数据。</li>
<li>将读取的数据更新到Redis缓存中。</li>
</ol>
<p>3.3 优点<br>● 实现简单：定时任务的实现逻辑简单，只需定期执行相应的同步操作。<br>● 性能影响小：由于更新是定期批量进行的，不会对系统性能产生显著影响。</p>
<p>3.4 缺点<br>● 实时性差：由于是定时更新，Redis中的数据可能存在滞后，无法保证数据的实时一致性。<br>● 数据一致性差：在定时任务执行的间隔期间，MySQL和Redis的数据可能会不一致。</p>
<p>3.5 适用场景<br>定时任务适用于对数据实时性要求不高的场景，特别是那些数据更新频率较低的系统。例如一些统计数据、日志数据的同步。</p>
<h3 id="四、闪电缓存"><a href="#四、闪电缓存" class="headerlink" title="四、闪电缓存"></a>四、闪电缓存</h3><p><img src="/images/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E7%BC%93%E5%AD%98%E4%BF%9D%E9%9A%9C%E4%B8%80%E8%87%B4%E6%80%A7%E7%9A%84%E4%BA%94%E7%A7%8D%E5%81%9A%E6%B3%95/2024-07-08-4.png" alt="image-2024-07-08-4"></p>
<p>4.1 原理<br>闪电缓存是一种较为激进的缓存策略，通常用于在高并发读写场景下确保缓存的一致性。其基本思路是在写操作发生时，立即删除对应的缓存，然后在下一次读取时，重新加载缓存。<br>4.2 实现方式<br>假设我们有一个更新用户信息的操作，在闪电缓存中，流程如下：</p>
<ol>
<li>更新MySQL数据库中的用户信息。</li>
<li>若MySQL更新成功，则立即删除Redis中的对应缓存。</li>
<li>当下次读取时，若缓存不存在，则从MySQL中读取数据并更新缓存。</li>
</ol>
<p>4.3 优点<br>● 实现简单：删除缓存的操作简单直接，容易实现。<br>● 一致性高：由于每次写操作都会删除缓存，确保了读取操作总是能够获取最新的数据。</p>
<p>4.4 缺点<br>● 缓存穿透问题：每次写操作都会导致缓存失效，可能引发缓存穿透，增加数据库的负担。<br>● 读操作延迟增加：每次缓存失效后，第一次读操作会因为重新加载数据而增加延迟。</p>
<p>4.5 适用场景<br>闪电缓存适用于高并发写场景，特别是那些读操作频繁且对数据一致性要求高的系统。对于一些需要实时更新且读操作可以容忍一定延迟的系统，这种方案非常适用。</p>
<h3 id="五、Binlog监听"><a href="#五、Binlog监听" class="headerlink" title="五、Binlog监听"></a>五、Binlog监听</h3><p><img src="/images/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E7%BC%93%E5%AD%98%E4%BF%9D%E9%9A%9C%E4%B8%80%E8%87%B4%E6%80%A7%E7%9A%84%E4%BA%94%E7%A7%8D%E5%81%9A%E6%B3%95/2024-07-08-5.png" alt="image-2024-07-08-5"></p>
<p>5.1 原理<br>Binlog监听是通过监听MySQL的二进制日志（Binlog）来实现对Redis的同步更新。MySQL的Binlog记录了所有对数据库的写操作，通过解析Binlog，可以实时获取更新信息并同步到Redis。<br>5.2 实现方式<br>假设我们有一个更新用户信息的操作，在Binlog监听方案中，流程如下：</p>
<ol>
<li>MySQL记录更新操作到Binlog。</li>
<li>Binlog监听器解析Binlog，获取更新信息。</li>
<li>将更新信息同步到Redis。</li>
</ol>
<p>5.3 优点<br>● 实时性高：由于Binlog记录了所有写操作，并且监听器可以实时解析，确保了数据的实时一致性。<br>● 性能影响小：Binlog监听对MySQL的性能影响较小，不会显著增加写操作的延迟。</p>
<p>5.4 缺点<br>● 实现复杂：需要实现对Binlog的解析和同步逻辑，系统复杂性较高。<br>● 故障处理复杂：在监听过程中，如果出现故障，需要处理数据同步的恢复和一致性检查。</p>
<p>5.5 适用场景<br>Binlog监听适用于对数据实时一致性要求高的系统，尤其是那些写操作频繁且需要及时同步到缓存的场景。例如金融交易系统、订单系统等对数据实时性要求高的业务系统。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这五种方法各有优缺点和适用场景，具体选择哪种方案需要根据系统的实际需求和特点进行权衡：</p>
<ol>
<li>同步双写：适用于数据一致性要求高、写操作频率不高的系统。</li>
<li>基于MQ异步多写：适用于高并发场景，能够有效提高性能和扩展性。</li>
<li>定时任务：适用于数据变化频率不高且对实时性要求不高的系统。</li>
<li>闪电缓存：适用于高并发写场景，能够确保数据一致性。</li>
<li>Binlog监听：适用于数据实时一致性要求高的系统。</li>
</ol>
]]></content>
      <tags>
        <tag>架构设计</tag>
      </tags>
  </entry>
  <entry>
    <title>高可用架构设计要点</title>
    <url>/2024/09/10/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E8%A6%81%E7%82%B9/</url>
    <content><![CDATA[<p><img src="/images/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E8%A6%81%E7%82%B9/2024-09-10-1.png" alt="image-2024-09-10-1"></p>
<h3 id="充分解耦"><a href="#充分解耦" class="headerlink" title="充分解耦"></a>充分解耦</h3><p><img src="/images/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E8%A6%81%E7%82%B9/2024-09-10-2.png" alt="image-2024-09-10-2"></p>
<p><img src="/images/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E8%A6%81%E7%82%B9/2024-09-10-3.png" alt="image-2024-09-10-3"></p>
<h3 id="“物理”隔离"><a href="#“物理”隔离" class="headerlink" title="“物理”隔离"></a>“物理”隔离</h3><p>单一职责很重要</p>
<p><img src="/images/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E8%A6%81%E7%82%B9/2024-09-10-4.png" alt="image-2024-09-10-4"></p>
<h3 id="异步化"><a href="#异步化" class="headerlink" title="异步化"></a>异步化</h3><p>不是所有场景都需要同步阻塞</p>
<p><img src="/images/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E8%A6%81%E7%82%B9/2024-09-10-5.png" alt="image-2024-09-10-5"></p>
<h3 id="副本冗余与故障转移"><a href="#副本冗余与故障转移" class="headerlink" title="副本冗余与故障转移"></a>副本冗余与故障转移</h3><p>构建冗余</p>
<p><img src="/images/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E8%A6%81%E7%82%B9/2024-09-10-6.png" alt="image-2024-09-10-6"></p>
<p>故障转移</p>
<p><img src="/images/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E8%A6%81%E7%82%B9/2024-09-10-7.png" alt="image-2024-09-10-7"></p>
<h3 id="限流熔断与服务降级"><a href="#限流熔断与服务降级" class="headerlink" title="限流熔断与服务降级"></a>限流熔断与服务降级</h3><p>● 限流是一种控制系统流量的机制，目的是限制请求或事件的速率，防止系统过载。通过设置一定的阈值，超过这个阈值的请求将被拒绝或者延迟处理。<br>  ○ 作用： 防止系统被过多请求压垮，保护核心资源免受过载的影响。<br>  ○  在API网关中，可以设置每秒最大请求数，超过这个数量的请求将被拒绝，以保护后端服务不受过多请求的冲击。</p>
<p><img src="/images/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E8%A6%81%E7%82%B9/2024-09-10-8.png" alt="image-2024-09-10-8"></p>
<p>● 熔断是一种防止故障扩散的机制。当系统的某个组件或服务发生故障时，熔断器迅速中断对该组件的请求，阻止故障进一步传播。<br>  ○ 作用： 防止故障在系统中蔓延，保护系统免受连锁反应的影响，同时允许系统进行自我修复。<br>  ○ 当某个微服务出现错误率过高时，熔断器打开，暂时停止对该服务的请求，防止错误的传播，保护系统的其他部分不受影响。</p>
<p><img src="/images/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E8%A6%81%E7%82%B9/2024-09-10-9.png" alt="image-2024-09-10-9"></p>
<p><img src="/images/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E8%A6%81%E7%82%B9/2024-09-10-10.png" alt="image-2024-09-10-10"></p>
<h3 id="多活容灾"><a href="#多活容灾" class="headerlink" title="多活容灾"></a>多活容灾</h3><p>多活容灾是一种高可用性和灾难恢复策略，旨在确保系统在多个地理位置（活动活跃区域）上均能提供服务，以增强系统的稳定性和可用性。这种策略使得系统在面对地方性灾难、硬件故障或其他中断时能够继续提供服务，避免单一点故障导致整个系统不可用。<br>关键特点和实施要素包括：<br>● 多活架构： 系统部署在多个活跃区域或数据中心，这些活跃区域可以位于不同的地理位置，通常分布在全球范围内。<br>● 负载均衡： 使用负载均衡技术，将用户请求分发到不同的活跃区域，确保各个区域均衡地处理流量。<br>● 数据复制： 数据在不同活跃区域之间进行复制，以确保数据在各地点之间的同步和一致性。这可能包括数据库复制、文件同步等。<br>● 全球负载均衡器： 在多活系统中使用全球负载均衡器，根据用户的地理位置或请求条件，将流量导向最近或最合适的活跃区域。<br>● 容错设计： 考虑容错设计，确保即使一个活跃区域发生故障，其他活跃区域仍能提供服务。<br>● 异地备份： 在不同地理位置设置备份系统，以备份关键服务和数据。这可以是一个完全独立的系统，也可以是一个热备份系统。<br>● 监控和自动化： 实施监控系统，实时监测各个活跃区域的状态，并使用自动化工具对故障进行快速响应和修复。</p>
<p><img src="/images/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E8%A6%81%E7%82%B9/2024-09-10-11.png" alt="image-2024-09-10-11"></p>
<h3 id="完善的可观测性"><a href="#完善的可观测性" class="headerlink" title="完善的可观测性"></a>完善的可观测性</h3><p><img src="/images/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E8%A6%81%E7%82%B9/2024-09-10-12.png" alt="image-2024-09-10-12"></p>
<p>指标</p>
<p><img src="/images/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E8%A6%81%E7%82%B9/2024-09-10-13.png" alt="image-2024-09-10-13"></p>
<p>日志收集</p>
<p><img src="/images/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E8%A6%81%E7%82%B9/2024-09-10-14.png" alt="image-2024-09-10-14"></p>
<p>跟踪</p>
<p><img src="/images/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E8%A6%81%E7%82%B9/2024-09-10-15.png" alt="image-2024-09-10-15"></p>
<h3 id="Kubernetes可靠的应用基座"><a href="#Kubernetes可靠的应用基座" class="headerlink" title="Kubernetes可靠的应用基座"></a>Kubernetes可靠的应用基座</h3><p>Kubernetes（K8s）被称为可靠的应用基座，这是因为它提供了一套强大的工具和机制，使得应用程序在分布式环境中更容易部署、扩展、管理和维护。以下是一些支持这种说法的关键因素：<br>● 自动化容器编排： Kubernetes提供了强大的容器编排功能，可以自动管理和调度应用程序容器。这包括自动部署、伸缩和重新配置，使得应用程序的运行状态能够更加灵活和动态。<br>● 高可用性： Kubernetes设计以提供高可用性。它支持将应用程序部署到多个节点上，并在节点故障时自动重新调度，确保应用程序的稳定性和可用性。<br>● 自愈能力： Kubernetes拥有自我修复的机制，可以自动检测和修复节点故障、容器故障或其他问题。这使得应用程序能够在不人工干预的情况下持续运行。<br>● 服务发现和负载均衡： Kubernetes提供服务发现和负载均衡功能，使得应用程序的不同组件可以相互发现并进行通信，同时可以自动实现负载均衡，确保流量分发均匀。<br>● 可扩展性： Kubernetes是高度可扩展的，支持自定义资源定义（CRD）和插件机制。这使得可以轻松地扩展和定制Kubernetes，以适应不同的应用和业务场景。<br>● 多云和混合云支持： Kubernetes提供了跨多个云服务提供商和本地数据中心的统一管理层。这意味着应用程序可以在不同的云和本地环境中迁移和运行，提供更大的灵活性和弹性。</p>
<p><img src="/images/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E8%A6%81%E7%82%B9/2024-09-10-16.png" alt="image-2024-09-10-16"></p>
]]></content>
      <tags>
        <tag>架构设计</tag>
      </tags>
  </entry>
  <entry>
    <title>数据分库分表-2N法分表</title>
    <url>/2024/11/21/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8-2N%E6%B3%95%E5%88%86%E8%A1%A8/</url>
    <content><![CDATA[<p><img src="/images/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8-2N%E6%B3%95%E5%88%86%E8%A1%A8/2024-11-21-1.png" alt="image-2024-11-21-1"></p>
<p><img src="/images/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8-2N%E6%B3%95%E5%88%86%E8%A1%A8/2024-11-21-2.png" alt="image-2024-11-21-2"></p>
<p><img src="/images/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8-2N%E6%B3%95%E5%88%86%E8%A1%A8/2024-11-21-3.png" alt="image-2024-11-21-3"></p>
]]></content>
      <tags>
        <tag>架构设计</tag>
      </tags>
  </entry>
</search>
